!% -s
!% $ALLOC_CHUNK_SIZE=32000
!% $MAX_ARRAYS=10000
!% $MAX_CLASSES=200
!% $MAX_VERBS=255
!% $MAX_LABELS=200000
!% $MAX_ZCODE_SIZE=500000
!% $MAX_STATIC_DATA=180000
!% $MAX_PROP_TABLE_SIZE=200000
!% $MAX_INDIV_PROP_TABLE_SIZE=20000
!% $MAX_STACK_SIZE=65536
!% $MAX_SYMBOLS=20000
!% $MAX_EXPRESSION_NODES=256
!% $MAX_LOCAL_VARIABLES=256



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Other Configuration
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant Grammar__Version 2;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Identification
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! This file was compiled by Inform 7: the build number and version of the
! I6 template layer used are as follows.
Constant NI_BUILD_COUNT "6M62";

Constant LibSerial = "080126";
Constant LibRelease = "6/12N";
Constant LIBRARY_VERSION = 612;

Constant PLUGIN_FILES;


Array UUID_ARRAY string "UUID://BFBF9732-181B-426C-8011-33C7FB10DFCA//";

Global Story = BC_0;
Constant Headline BC_1;
Constant Story_Author BC_2;
Release 8;
Serial "190324";

Default Story 0;
Default Headline 0;

[ ShowExtensionVersions ;
    print "Standard Rules version 3/120430 by Graham Nelson^";
    print "Basic IF Help version 1 by Andrew Plotkin^";
];
[ ShowFullExtensionVersions ;
    print "Standard Rules version 3/120430 by Graham Nelson^";
    print "English Language version 1 by Graham Nelson^";
    print "Glulx Text Effects version 5/140516 by Emily Short^";
    print "Basic IF Help version 1 by Andrew Plotkin^";
];
[ ShowOneExtension 
    id ! Implied call parameter
    ;
    if (id == 1) print "Standard Rules version 3/120430 by Graham Nelson";
    if (id == 2) print "English Language version 1 by Graham Nelson";
    if (id == 3) print "Glulx Text Effects version 5/140516 by Emily Short";
    if (id == 4) print "Basic IF Help version 1 by Andrew Plotkin";
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Use options
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! Use option:
 Constant DynamicMemoryAllocation = 8192; 
! Use option:
 Constant TEXT_TY_BufferSize = 1024+3; 
! Use option:
 Constant MAX_FIGURE_THUMBNAILS_IN_INDEX = 50; 
! Use option:
 Constant MATCH_LIST_WORDS = 100; 


#Ifndef USE_SCORING;
Constant USE_SCORING = 0;
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Constants
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: VM Target Constants
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifndef WORDSIZE; ! compiling with Z-code only compiler
Constant TARGET_ZCODE;
Constant WORDSIZE 2;
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Wordsize-Dependent Definitions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Iftrue (WORDSIZE == 2);
Constant NULL = $ffff;
Constant WORD_HIGHBIT = $8000;
Constant WORD_NEXTTOHIGHBIT = $4000;
Constant IMPROBABLE_VALUE = $7fe3;
Constant MAX_POSITIVE_NUMBER 32767;
Constant MIN_NEGATIVE_NUMBER -32768;
Constant REPARSE_CODE = 10000;
#Endif;

#Iftrue (WORDSIZE == 4);
Constant NULL = $ffffffff;
Constant WORD_HIGHBIT = $80000000;
Constant WORD_NEXTTOHIGHBIT = $40000000;
Constant IMPROBABLE_VALUE = $deadce11;
Constant MAX_POSITIVE_NUMBER 2147483647;
Constant MIN_NEGATIVE_NUMBER -2147483648;
Constant REPARSE_CODE = $40000000;
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Z-Machine Definitions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef TARGET_ZCODE;

Global max_z_object;

Constant INDIV_PROP_START 64;

! Offsets into Z-machine header:

Constant HDR_ZCODEVERSION     = $00;     ! byte
Constant HDR_TERPFLAGS        = $01;     ! byte
Constant HDR_GAMERELEASE      = $02;     ! word
Constant HDR_HIGHMEMORY       = $04;     ! word
Constant HDR_INITIALPC        = $06;     ! word
Constant HDR_DICTIONARY       = $08;     ! word
Constant HDR_OBJECTS          = $0A;     ! word
Constant HDR_GLOBALS          = $0C;     ! word
Constant HDR_STATICMEMORY     = $0E;     ! word
Constant HDR_GAMEFLAGS        = $10;     ! word
Constant HDR_GAMESERIAL       = $12;     ! six ASCII characters
Constant HDR_ABBREVIATIONS    = $18;     ! word
Constant HDR_FILELENGTH       = $1A;     ! word
Constant HDR_CHECKSUM         = $1C;     ! word
Constant HDR_TERPNUMBER       = $1E;     ! byte
Constant HDR_TERPVERSION      = $1F;     ! byte
Constant HDR_SCREENHLINES     = $20;     ! byte
Constant HDR_SCREENWCHARS     = $21;     ! byte
Constant HDR_SCREENWUNITS     = $22;     ! word
Constant HDR_SCREENHUNITS     = $24;     ! word
Constant HDR_FONTWUNITS       = $26;     ! byte
Constant HDR_FONTHUNITS       = $27;     ! byte
Constant HDR_ROUTINEOFFSET    = $28;     ! word
Constant HDR_STRINGOFFSET     = $2A;     ! word
Constant HDR_BGCOLOUR         = $2C;     ! byte
Constant HDR_FGCOLOUR         = $2D;     ! byte
Constant HDR_TERMCHARS        = $2E;     ! word
Constant HDR_PIXELSTO3        = $30;     ! word
Constant HDR_TERPSTANDARD     = $32;     ! two bytes
Constant HDR_ALPHABET         = $34;     ! word
Constant HDR_EXTENSION        = $36;     ! word
Constant HDR_UNUSED           = $38;     ! two words
Constant HDR_INFORMVERSION    = $3C;     ! four ASCII characters

#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Glulx Definitions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF TARGET_GLULX;

Global unicode_gestalt_ok; ! Set if interpreter supports Unicode

! Offsets into Glulx header and start of ROM:

Constant HDR_MAGICNUMBER      = $00;     ! long word
Constant HDR_GLULXVERSION     = $04;     ! long word
Constant HDR_RAMSTART         = $08;     ! long word
Constant HDR_EXTSTART         = $0C;     ! long word
Constant HDR_ENDMEM           = $10;     ! long word
Constant HDR_STACKSIZE        = $14;     ! long word
Constant HDR_STARTFUNC        = $18;     ! long word
Constant HDR_DECODINGTBL      = $1C;     ! long word
Constant HDR_CHECKSUM         = $20;     ! long word
Constant ROM_INFO             = $24;     ! four ASCII characters
Constant ROM_MEMORYLAYOUT     = $28;     ! long word
Constant ROM_INFORMVERSION    = $2C;     ! four ASCII characters
Constant ROM_COMPVERSION      = $30;     ! four ASCII characters
Constant ROM_GAMERELEASE      = $34;     ! short word
Constant ROM_GAMESERIAL       = $36;     ! six ASCII characters

#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Powers of Two
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array PowersOfTwo_TB
  --> $$100000000000
      $$010000000000
      $$001000000000
      $$000100000000
      $$000010000000
      $$000001000000
      $$000000100000
      $$000000010000
      $$000000001000
      $$000000000100
      $$000000000010
      $$000000000001;

Array IncreasingPowersOfTwo_TB
  --> $$0000000000000001
      $$0000000000000010
      $$0000000000000100
      $$0000000000001000
      $$0000000000010000
      $$0000000000100000
      $$0000000001000000
      $$0000000010000000
      $$0000000100000000
      $$0000001000000000
      $$0000010000000000
	  $$0000100000000000
	  $$0001000000000000
	  $$0010000000000000
	  $$0100000000000000
	  $$1000000000000000;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Text Styles
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant NORMAL_VMSTY     = 0;
Constant HEADER_VMSTY     = 3;
Constant SUBHEADER_VMSTY  = 4;
Constant ALERT_VMSTY      = 5;
Constant NOTE_VMSTY       = 6;
Constant BLOCKQUOTE_VMSTY = 7;
Constant INPUT_VMSTY      = 8;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Colour Numbers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant CLR_DEFAULT = 1;
Constant CLR_BLACK   = 2;
Constant CLR_RED     = 3;
Constant CLR_GREEN   = 4;
Constant CLR_YELLOW  = 5;
Constant CLR_BLUE    = 6;
Constant CLR_MAGENTA = 7; Constant CLR_PURPLE  = 7;
Constant CLR_CYAN    = 8; Constant CLR_AZURE   = 8;
Constant CLR_WHITE   = 9;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Window Numbers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant WIN_ALL     = 0; ! Both windows at once
Constant WIN_STATUS  = 1;
Constant WIN_MAIN    = 2;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Paragraphing Flags
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant PARA_COMPLETED          = 1;
Constant PARA_PROMPTSKIP         = 2;
Constant PARA_SUPPRESSPROMPTSKIP = 4;
Constant PARA_NORULEBOOKBREAKS   = 8;
Constant PARA_CONTENTEXPECTED    = 16;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Descriptors in the Language of Play
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant POSSESS_PK  = $100;
Constant DEFART_PK   = $101;
Constant INDEFART_PK = $102;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Run-Time Problem Numbers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RTP_BACKDROP                = 1;
Constant RTP_EXITDOOR                = 2;
Constant RTP_NOEXIT                  = 3;
Constant RTP_CANTCHANGE              = 4;
Constant RTP_IMPREL                  = 5;
Constant RTP_RULESTACK               = 6; ! Now out of use
Constant RTP_TOOMANYRULEBOOKS        = 7;
Constant RTP_TOOMANYEVENTS           = 8;
Constant RTP_BADPROPERTY             = 9;
Constant RTP_UNPROVIDED              = 10;
Constant RTP_UNSET                   = 11;
Constant RTP_TOOMANYACTS             = 12;
Constant RTP_CANTABANDON             = 13;
Constant RTP_CANTEND                 = 14;
Constant RTP_CANTMOVENOTHING         = 15;
Constant RTP_CANTREMOVENOTHING       = 16;
Constant RTP_DIVZERO                 = 17;
Constant RTP_BADVALUEPROPERTY        = 18;
Constant RTP_NOTBACKDROP             = 19;
Constant RTP_TABLE_NOCOL             = 20;
Constant RTP_TABLE_NOCORR            = 21;
Constant RTP_TABLE_NOROW             = 22;
Constant RTP_TABLE_NOENTRY           = 23;
Constant RTP_TABLE_NOTABLE           = 24;
Constant RTP_TABLE_NOMOREBLANKS      = 25;
Constant RTP_TABLE_NOROWS            = 26;
Constant RTP_TABLE_CANTSORT          = 27;
Constant RTP_NOTINAROOM              = 28;
Constant RTP_BADTOPIC                = 29;
Constant RTP_ROUTELESS               = 30;
Constant RTP_PROPOFNOTHING           = 31;
Constant RTP_DECIDEONWRONGKIND       = 32;
Constant RTP_DECIDEONNOTHING         = 33;
Constant RTP_TABLE_CANTSAVE          = 34;
Constant RTP_TABLE_WONTFIT           = 35;
Constant RTP_TABLE_BADFILE           = 36;
Constant RTP_LOWLEVELERROR           = 37;
Constant RTP_DONTIGNORETURNSEQUENCE  = 38;
Constant RTP_SAYINVALIDSNIPPET       = 39;
Constant RTP_SPLICEINVALIDSNIPPET    = 40;
Constant RTP_INCLUDEINVALIDSNIPPET   = 41;
Constant RTP_LISTWRITERMEMORY        = 42;
Constant RTP_CANTREMOVEPLAYER        = 43;
Constant RTP_CANTREMOVEDOORS         = 44;
Constant RTP_CANTCHANGEOFFSTAGE      = 45;
Constant RTP_MSTACKMEMORY            = 46;
Constant RTP_TYPECHECK               = 47;
Constant RTP_FILEIOERROR             = 48;
Constant RTP_HEAPERROR               = 49;
Constant RTP_LISTRANGEERROR          = 50;
Constant RTP_REGEXPSYNTAXERROR       = 51;
Constant RTP_NOGLULXUNICODE          = 52;
Constant RTP_BACKDROPONLY            = 53;
Constant RTP_NOTTHING                = 54;
Constant RTP_SCENEHASNTSTARTED       = 55;
Constant RTP_SCENEHASNTENDED         = 56;
Constant RTP_NEGATIVEROOT            = 57;
Constant RTP_TABLE_CANTRUNTHROUGH    = 58;
Constant RTP_CANTITERATE             = 59;
Constant RTP_WRONGASSIGNEDKIND       = 60;
Constant RTP_CANTBEOFFSTAGE          = 61;
Constant RTP_RELKINDVIOLATION        = 62;
Constant RTP_CANTMAKEPART       	 = 63;
Constant RTP_TEXTTOKENTOOHARD        = 64;
Constant RTP_TABLE_NOTABLE2          = 65;
Constant RTP_RELATIONCHANGEIMPOSSIBLE = 66;
Constant RTP_RELMINIMAL              = 67;
Constant RTP_LISTSIZENEGATIVE        = 68;
Constant RTP_REGIONSNOTADJACENT      = 69;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Template Activities
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant PRINTING_THE_NAME_ACT           = 0;
Constant PRINTING_THE_PLURAL_NAME_ACT    = 1;
Constant PRINTING_A_NUMBER_OF_ACT        = 2;
Constant PRINTING_ROOM_DESC_DETAILS_ACT  = 3;
Constant PRINTING_INVENTORY_DETAILS_ACT  = 4;
Constant LISTING_CONTENTS_ACT            = 5;
Constant GROUPING_TOGETHER_ACT           = 6;
Constant WRITING_A_PARAGRAPH_ABOUT_ACT   = 7;
Constant LISTING_NONDESCRIPT_ITEMS_ACT   = 8;

Constant PRINTING_NAME_OF_DARK_ROOM_ACT  = 9;
Constant PRINTING_DESC_OF_DARK_ROOM_ACT  = 10;
Constant PRINTING_NEWS_OF_DARKNESS_ACT   = 11;
Constant PRINTING_NEWS_OF_LIGHT_ACT      = 12;
Constant REFUSAL_TO_ACT_IN_DARK_ACT      = 13;

Constant CONSTRUCTING_STATUS_LINE_ACT    = 14;
Constant PRINTING_BANNER_TEXT_ACT        = 15;

Constant READING_A_COMMAND_ACT           = 16;
Constant DECIDING_SCOPE_ACT              = 17;
Constant DECIDING_CONCEALED_POSSESS_ACT  = 18;
Constant DECIDING_WHETHER_ALL_INC_ACT    = 19;
Constant CLARIFYING_PARSERS_CHOICE_ACT   = 20;
Constant ASKING_WHICH_DO_YOU_MEAN_ACT    = 21;
Constant PRINTING_A_PARSER_ERROR_ACT     = 22;
Constant SUPPLYING_A_MISSING_NOUN_ACT    = 23;
Constant SUPPLYING_A_MISSING_SECOND_ACT  = 24;
Constant IMPLICITLY_TAKING_ACT           = 25;
Constant STARTING_VIRTUAL_MACHINE_ACT    = 26;

Constant AMUSING_A_VICTORIOUS_PLAYER_ACT = 27;
Constant PRINTING_PLAYERS_OBITUARY_ACT   = 28;
Constant DEALING_WITH_FINAL_QUESTION_ACT = 29;

Constant PRINTING_LOCALE_DESCRIPTION_ACT = 30;
Constant CHOOSING_NOTABLE_LOCALE_OBJ_ACT = 31;
Constant PRINTING_LOCALE_PARAGRAPH_ACT   = 32;

Constant PRINTING_RESPONSE_ACT           = 33;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Template Rulebooks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant STARTUP_RB                      = 0;
Constant TURN_SEQUENCE_RB                = 1;
Constant SHUTDOWN_RB                     = 2;

Constant WHEN_PLAY_BEGINS_RB             = 4;
Constant WHEN_PLAY_ENDS_RB               = 5;
Constant WHEN_SCENE_BEGINS_RB            = 6;
Constant WHEN_SCENE_ENDS_RB              = 7;

Constant ACTION_PROCESSING_RB            = 9;
Constant SETTING_ACTION_VARIABLES_RB     = 10;
Constant SPECIFIC_ACTION_PROCESSING_RB   = 11;

Constant ACCESSIBILITY_RB                = 13;
Constant REACHING_INSIDE_RB              = 14;
Constant REACHING_OUTSIDE_RB             = 15;
Constant VISIBLE_RB                      = 16;

Constant PERSUADE_RB                     = 17;
Constant UNSUCCESSFUL_ATTEMPT_RB         = 18;

Constant AFTER_RB                        = 23;
Constant REPORT_RB                       = 24;

Constant MULTIPLE_ACTION_PROCESSING_RB   = 26;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Kind IDs
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant UNKNOWN_TY = -2147483602;
Constant VALUE_TY = 2;
Constant POINTER_VALUE_TY = 3;
Constant WORD_VALUE_TY = 4;
Constant ARITHMETIC_VALUE_TY = 5;
Constant REAL_ARITHMETIC_VALUE_TY = 6;
Constant ENUMERATED_VALUE_TY = 7;
Constant SAYABLE_VALUE_TY = 8;
Constant COMBINED_VALUE_TY = 9;
Constant OBJECT_TY = 10;
Constant NUMBER_TY = 11;
Constant REAL_NUMBER_TY = 12;
Constant TRUTH_STATE_TY = 13;
Constant TEXT_TY = 14;
Constant UNICODE_CHARACTER_TY = 15;
Constant USE_OPTION_TY = 16;
Constant RESPONSE_TY = 17;
Constant VERB_TY = 18;
Constant SNIPPET_TY = 19;
Constant TABLE_TY = 20;
Constant EQUATION_TY = 21;
Constant RULEBOOK_OUTCOME_TY = 22;
Constant UNDERSTANDING_TY = 23;
Constant INTERMEDIATE_TY = 24;
Constant NIL_TY = 25;
Constant KIND_VARIABLE_TY = 26;
Constant PHRASE_TY = 27;
Constant TUPLE_ENTRY_TY = 28;
Constant VARIABLE_TY = 29;
Constant RELATION_TY = 30;
Constant RULE_TY = 31;
Constant RULEBOOK_TY = 32;
Constant ACTIVITY_TY = 33;
Constant LIST_OF_TY = 34;
Constant DESCRIPTION_OF_TY = 35;
Constant PROPERTY_TY = 36;
Constant TABLE_COLUMN_TY = 37;
Constant COMBINATION_TY = 38;
Constant DESCRIPTION_OF_ACTION_TY = 39;
Constant STORED_ACTION_TY = 40;
Constant ACTION_NAME_TY = 41;
Constant TIME_TY = 42;
Constant SCENE_TY = 43;
Constant FIGURE_NAME_TY = 44;
Constant SOUND_NAME_TY = 45;
Constant EXTERNAL_FILE_TY = 46;
Constant BASE_KIND_HWM = 56; ! Base kind high-water-mark



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Parser Error Numbers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant STUCK_PE         = 1;
Constant UPTO_PE          = 2;
Constant NUMBER_PE        = 3;
Constant ANIMA_PE         = 4;
Constant CANTSEE_PE       = 5;
Constant TOOLIT_PE        = 6;
Constant NOTHELD_PE       = 7;
Constant MULTI_PE         = 8;
Constant MMULTI_PE        = 9;
Constant VAGUE_PE         = 10;
Constant EXCEPT_PE        = 11;
Constant VERB_PE          = 12;
Constant SCENERY_PE       = 13;
Constant ITGONE_PE        = 14;
Constant JUNKAFTER_PE     = 15;
Constant TOOFEW_PE        = 16;
Constant NOTHING_PE       = 17;
Constant ASKSCOPE_PE      = 18;
Constant NOTINCONTEXT_PE  = 19;
Constant BLANKLINE_PE     = 20; ! Not formally a parser error, but used by I7 as if
Constant ANIMAAGAIN_PE    = 21;
Constant COMMABEGIN_PE    = 22;
Constant MISSINGPERSON_PE = 23;
Constant ANIMALISTEN_PE   = 24;
Constant TOTALK_PE        = 25;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Scope Searching Reasons
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant PARSING_REASON       = 0;
Constant TALKING_REASON       = 1;
Constant EACH_TURN_REASON     = 2;
Constant LOOPOVERSCOPE_REASON = 5;
Constant TESTSCOPE_REASON     = 6;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Token Types
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant ILLEGAL_TT         = 0;    ! Types of grammar token: illegal
Constant ELEMENTARY_TT      = 1;    !     (one of those below)
Constant PREPOSITION_TT     = 2;    !     e.g. 'into'
Constant ROUTINE_FILTER_TT  = 3;    !     e.g. noun=CagedCreature
Constant ATTR_FILTER_TT     = 4;    !     e.g. edible
Constant SCOPE_TT           = 5;    !     e.g. scope=Spells
Constant GPR_TT             = 6;    !     a general parsing routine

Constant NOUN_TOKEN         = 0;    ! The elementary grammar tokens, and
Constant HELD_TOKEN         = 1;    ! the numbers compiled by I6 to
Constant MULTI_TOKEN        = 2;    ! encode them
Constant MULTIHELD_TOKEN    = 3;
Constant MULTIEXCEPT_TOKEN  = 4;
Constant MULTIINSIDE_TOKEN  = 5;
Constant CREATURE_TOKEN     = 6;
Constant SPECIAL_TOKEN      = 7;
Constant NUMBER_TOKEN       = 8;
Constant TOPIC_TOKEN        = 9;
Constant ENDIT_TOKEN        = 15;   ! Value used to mean "end of grammar line"


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: GPR Return Values
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant GPR_FAIL           = -1;   ! Return values from General Parsing
Constant GPR_PREPOSITION    = 0;    ! Routines
Constant GPR_NUMBER         = 1;
Constant GPR_MULTIPLE       = 2;
Constant GPR_REPARSE        = REPARSE_CODE;
Constant GPR_NOUN           = -256; ! Reparse, but as |NOUN_TOKEN| this time
Constant GPR_HELD           = GPR_NOUN + 1; ! And so on
Constant GPR_MULTI          = GPR_NOUN + 2;
Constant GPR_MULTIHELD      = GPR_NOUN + 3;
Constant GPR_MULTIEXCEPT    = GPR_NOUN + 4;
Constant GPR_MULTIINSIDE    = GPR_NOUN + 5;
Constant GPR_CREATURE       = GPR_NOUN + 6;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: List Styles
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant NEWLINE_BIT        = $$0000000000000001; ! New-line after each entry
Constant INDENT_BIT         = $$0000000000000010; ! Indent each entry by depth
Constant FULLINV_BIT        = $$0000000000000100; ! Full inventory information after entry
Constant ENGLISH_BIT        = $$0000000000001000; ! English sentence style, with commas and and
Constant RECURSE_BIT        = $$0000000000010000; ! Recurse downwards with usual rules
Constant ALWAYS_BIT         = $$0000000000100000; ! Always recurse downwards
Constant TERSE_BIT          = $$0000000001000000; ! More terse English style
Constant PARTINV_BIT        = $$0000000010000000; ! Only brief inventory information after entry
Constant DEFART_BIT         = $$0000000100000000; ! Use the definite article in list
Constant WORKFLAG_BIT       = $$0000001000000000; ! At top level (only), only list objects
                                                  ! which have the "workflag" attribute
Constant ISARE_BIT          = $$0000010000000000; ! Print " is" or " are" before list
Constant CONCEAL_BIT        = $$0000100000000000; ! Omit objects with "concealed" or "scenery":
                                                  ! if WORKFLAG_BIT also set, then does not
                                                  ! apply at top level, but does lower down
Constant NOARTICLE_BIT      = $$0001000000000000; ! Print no articles, definite or not
Constant EXTRAINDENT_BIT    = $$0010000000000000; ! New in I7: extra indentation of 1 level
Constant CFIRSTART_BIT      = $$0100000000000000; ! Capitalise first article in list


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Lengths Of Time
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant QUARTER_HOUR = 15;
Constant HALF_HOUR = 30;
Constant ONE_HOUR = 60;
Constant TWELVE_HOURS = 720;
Constant TWENTY_FOUR_HOURS = 1440;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Empty Text
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant EMPTY_TEXT_PACKED "";
Array EMPTY_TEXT_VALUE --> CONSTANT_PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Empty Table
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array TheEmptyTable --> 0 0;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Empty Set
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Prop_Falsity reason obj; return 0; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Score and Rankings Table
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


#Ifndef MAX_SCORE;
Global MAX_SCORE = 0;
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Template Attributes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Attribute absent; ! Used to mark objects removed from play
Attribute animate; ! I6-level marker for I7 kind "person"
Attribute clothing; ! = I7 "wearable"
Attribute concealed; ! = I7 "undescribed"
Attribute container; ! I6-level marker for I7 kind "container"
Attribute door; ! I6-level marker for I7 kind "door"
Attribute edible; ! = I7 "edible" vs "inedible"
Attribute enterable; ! = I7 "enterable"
Attribute light; ! = I7 "lighted" vs "dark"
Attribute lockable; ! = I7 "lockable"
Attribute locked; ! = I7 "locked"
Attribute moved; ! = I7 "handled"
Attribute on; ! = I7 "switched on" vs "switched off"
Attribute open; ! = I7 "open" vs "closed"
Attribute openable; ! = I7 "openable"
Attribute scenery; ! = I7 "scenery"
Attribute static; ! = I7 "fixed in place" vs "portable"
Attribute supporter; ! I6-level marker for I7 kind "supporter"
Attribute switchable; ! I6-level marker for I7 kind "device"
Attribute talkable; ! Not currently used by I7, but retained for possible future use
Attribute transparent; ! = I7 "transparent" vs "opaque"
Attribute visited; ! = I7 "visited"
Attribute worn; ! marks that an object tree edge represents wearing

Attribute male; ! not directly used by I7, but available for languages with genders
Attribute female; ! = I7 "female" vs "male"
Attribute neuter; ! = I7 "neuter"
Attribute pluralname; ! = I7 "plural-named"
Attribute ambigpluralname; ! = I7 "ambiguously plural"
Attribute proper; ! = I7 "proper-named"
Attribute remove_proper; ! remember to remove proper again when using ChangePlayer next

Attribute privately_named; ! New in I7
Attribute mentioned; ! New in I7
Attribute pushable; ! New in I7

Attribute mark_as_room; ! Used in I7 to speed up testing "ofclass K1_room"
Attribute mark_as_thing; ! Used in I7 to speed up testing "ofclass K2_thing"

Attribute workflag; ! = I7 "marked for listing", but basically temporary workspace 
Attribute workflag2; ! new in I7 and also temporary workspace
Constant list_filter_permits = privately_named; ! another I7 listwriter convenience


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Template Properties
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Property add_to_scope; ! used as in I6 to place component parts in scope
Property article "a"; ! used as in I6 to implement articles
Property capacity 100; ! = I7 "carrying capacity"
Property component_child; ! new in I7: forest structure holding "part of" relation
Property component_parent; ! new in I7
Property component_sibling; ! new in I7
Property description; ! = I7 "description"
Property door_dir; ! used to implement two-sided doors, but holds direction object, not a property
Property door_to; ! used as in I6 to implement two-sided doors
Property found_in; ! used as in I6 to implement two-sided doors and backdrops
Property initial; ! = I7 "initial description"
Property list_together; ! used as in I6 to implement "grouping together" activity
Property map_region; ! new in I7
Property parse_name 0; ! used as in I6 to implement "Understand... as..." grammars
Property plural; ! used as in I6 to implement plural names for duplicate objects
Property regional_found_in; ! new in I7
Property room_index; ! new in I7: storage for route-finding
Property short_name 0; ! = I7 "printed name"
Property vector; ! new in I7: storage for route-finding
Property with_key; ! = I7 "matching key"

Property KD_Count; ! Instance count of the kind of the current object
Property IK1_Count; ! These are instance counts within kinds K1, K2, ...
Property IK2_Count; ! and it is efficient to declare the common ones with Property
Property IK4_Count; ! since this results in a slightly smaller story file
Property IK5_Count;
Property IK6_Count;
Property IK8_Count;

Property IK1_link; ! These are for linked lists used to make searches faster
Property IK2_link; ! and again it's memory-efficient to declare the common ones
Property IK5_link; ! 
Property IK6_link; ! 
Property IK8_link; ! 

Property articles; ! not used by I7, but an interesting hook in the parser
Property grammar; ! not used by I7, but an interesting hook in the parser
Property inside_description; ! not used by I7, but an interesting hook in the locale code
Property short_name_indef 0; ! not used by I7, but an interesting hook in the listmaker


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Loss of Life
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant life = NULL;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Action Count
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant ActionCount = 98;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Fake Actions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Fake_Action ListMiscellany;
Fake_Action Miscellany;
Fake_Action PluralFound;
Fake_Action TheSame;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Formal Parameters
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global formal_rv;
Global formal_par0;
Global formal_par1;
Global formal_par2;
Global formal_par3;
Global formal_par4;
Global formal_par5;
Global formal_par6;
Global formal_par7;
Global unicode_temp;

	Constant RUCKSACK_CLASS = K15_player_s_holdall;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Global Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! [1]
Global location = InformLibrary; ! does not = I7 "location": see below
Global sline1; Global sline2;

! [2]
Global say__p = 1; Global say__pc = 0; Global say__pc_save = 0;
Global say__n; Global say__comp;
Global los_rv = false;
Global parameter_object; ! = I7 "parameter-object" = I7 "container in question"
Global parameter_value; ! not typesafe in I7
Array deferred_calling_list --> 27;
Global property_to_be_totalled; ! used to implement "total P of..."
Global property_loop_sign; ! $+1$ for increasing order, $-1$ for decreasing
Global suppress_scope_loops;
Global temporary_value; ! can be used anywhere side-effects can't occur

#ifdef TARGET_ZCODE;
Constant BLOCKV_STACK_SIZE = 224;
#ifnot;
Constant BLOCKV_STACK_SIZE = DynamicMemoryAllocation/4;
#endif;

Array blockv_stack --> BLOCKV_STACK_SIZE;
Global I7SFRAME;

Global TEXT_TY_RE_Err = 0;

Array LocalParking --> 64;

! [3]
Global standard_interpreter = 0;
Global undo_flag;

! [4]
Global deadflag = 0;
Global story_complete = 0;
Global resurrect_please = false;

! [5]
Global not_yet_in_play = true; ! set false when first command received
Global turns = 1; ! = I7 "turn count"
Global the_time = NULL; ! = I7 "time of day"
Global time_rate = 1;

Constant NUMBER_SCENES_CREATED = 1;
Constant SCENE_ARRAY_SIZE = (NUMBER_SCENES_CREATED+2);
Array scene_started --> SCENE_ARRAY_SIZE;
Array scene_ended --> SCENE_ARRAY_SIZE;
Array scene_status --> SCENE_ARRAY_SIZE;
Array scene_endings --> SCENE_ARRAY_SIZE;
Array scene_latest_ending --> SCENE_ARRAY_SIZE;

! [6]
Global score; ! = I7 "score"
Global last_score; ! = I7 "last notified score"
Global notify_mode = 1; ! score notification on or off
Global left_hand_status_line = T_SL_Location; ! = I7 "left hand status line"
Global right_hand_status_line = T_SL_Score_Moves; ! = I7 "right hand status line"

! [7]
Global player; ! = I7 "player"
Global real_location; ! = I7 "location"
Global visibility_ceiling; ! highest object in tree visible to player
Global visibility_levels; ! distance in tree to that

Global SACK_OBJECT; ! current player's holdall item in use

! [8]
Global act_requester;
Global actor; ! = I7 "person asked" = I7 "person reaching"
Global actors_location; ! like real_location, but for the actor
Global actor_location; ! = I7 "actor-location"
Global action;
Global meta; ! action is out of world
Global inp1;
Global inp2;
Array  multiple_object --> MATCH_LIST_WORDS; ! multiple-object list (I6 table array)
Global toomany_flag; ! multiple-object list overflowed
Global multiflag; ! multiple-object being processed
Global multiple_object_item; ! item currently being processed in multiple-object list
Global noun; ! = I7 "noun"
Global second; ! = I7 "second noun"
Global keep_silent; ! true if current action is being tried silently
Global etype; ! parser error number if command not recognised
Global trace_actions = 0;

Global untouchable_object;
Global untouchable_silence;
Global touch_persona;

Global special_word; ! dictionary address of first word in "[text]" token
Global consult_from; ! word number of start of "[text]" token
Global consult_words; ! number of words in "[text]" token
Global parsed_number; ! value from any token not an object
Global special_number1; ! first value, if token not an object
Global special_number2; ! second value, if token not an object

Array  parser_results --> 16; ! for parser to write its results in
Global parser_trace = 0; ! normally 0, but 1 to 5 traces parser workings
Global pronoun_word; ! records which pronoun ("it", "them", ...) caused an error
Global pronoun_obj; ! and what object it was thought to refer to

Global players_command = 100; ! = I7 "player's command"
Global matched_text; ! = I7 "matched text"
Global reason_the_action_failed; ! = I7 "reason the action failed"
Global understand_as_mistake_number; ! which form of "Understand... as a mistake"
Global particular_possession; ! = I7 "particular possession"

! [9]
Global parser_action; ! written by the parser for the benefit of GPRs
Global parser_one;
Global parser_two;
Global parameters; ! number of I7 tokens parsed on the current line
Global action_to_be; ! (if the current line were accepted)
Global action_reversed; ! (parameters would be reversed in order)
Global wn; ! word number within "parse" buffer (from 1)
Global num_words; ! number of words in buffer
Global verb_word; ! dictionary address of command verb
Global verb_wordnum; ! word number of command verb

! [10]
Global scope_reason = PARSING_REASON; ! current reason for searching scope
Global scope_token; ! for "scope=Routine" grammar tokens
Global scope_error;
Global scope_stage; ! 1, 2 then 3
Global advance_warning; ! what a later-named thing will be
Global reason_code = NULL; ! for the I6 veneer

Global ats_flag = 0; ! for AddToScope routines
Global ats_hls;

! [11]
Global move_pushing;
Global move_from;
Global move_to;
Global move_by;
Global move_through;

! [12]
#Ifdef DEFAULT_BRIEF_DESCRIPTIONS;
Global lookmode = 1; ! 1 = BRIEF, 2 = VERBOSE, 3 = SUPERBRIEF
#Endif;
#Ifdef DEFAULT_VERBOSE_DESCRIPTIONS; 
Global lookmode = 2; ! 1 = BRIEF, 2 = VERBOSE, 3 = SUPERBRIEF
#Endif;
#Ifdef DEFAULT_SUPERBRIEF_DESCRIPTIONS; 
Global lookmode = 3; ! 1 = BRIEF, 2 = VERBOSE, 3 = SUPERBRIEF
#Endif;
#Ifndef lookmode;
Global lookmode = 2; ! 1 = BRIEF, 2 = VERBOSE, 3 = SUPERBRIEF
#Endif;
Global c_style; ! current list-writer style
Global c_depth; ! current recursion depth
Global c_iterator; ! current iteration function
Global lt_value = EMPTY_TEXT_VALUE; ! common value of list_together
Global listing_together; ! object number of one member of a group being listed together
Global listing_size; ! size of such a group
Global c_margin; ! current level of indentation printed by WriteListFrom()
Global inventory_stage = 1; ! 1 or 2 according to the context in which list_together uses
Global prior_named_noun; ! for adaptive text generation
Global prior_named_list; ! ditto: length of list of items
Global prior_named_list_gender; ! ditto: common gender of list of items, or -1
Global story_tense = 1; ! ditto: present tense
Global story_viewpoint = 2; ! ditto: second person singular

! [13]
Global clr_fg = 1; ! foreground colour
Global clr_bg = 1; ! background colour
Global clr_fgstatus = 1; ! foreground colour of statusline
Global clr_bgstatus = 1; ! background colour of statusline
Global clr_on; ! has colour been enabled by the player?
Global statuswin_current; ! if writing to top window

! [14]
Global statuswin_cursize = 0;
Global statuswin_size = 1;

! [16]
Global debug_flag = 0;
Global debug_rules = 0;
Global debug_scenes = 0;
Global debug_rule_nesting;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: VM-Specific Code
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef TARGET_GLULX;

! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Summary
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Variables and Arrays
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array gg_event --> 4;
Array gg_arguments buffer 28;
Global gg_mainwin = 0;
Global gg_statuswin = 0;
Global gg_quotewin = 0;
Global gg_scriptfref = 0;
Global gg_scriptstr = 0;
Global gg_savestr = 0;
Global gg_commandstr = 0;
Global gg_command_reading = 0;      ! true if gg_commandstr is being replayed
Global gg_foregroundchan = 0;
Global gg_backgroundchan = 0;

Constant GLK_NULL 0;

Constant INPUT_BUFFER_LEN = 260;    ! No extra byte necessary
Constant MAX_BUFFER_WORDS = 20;
Constant PARSE_BUFFER_LEN = 61;

Array  buffer    buffer INPUT_BUFFER_LEN;
Array  buffer2   buffer INPUT_BUFFER_LEN;
Array  buffer3   buffer INPUT_BUFFER_LEN;
Array  parse     --> PARSE_BUFFER_LEN;
Array  parse2    --> PARSE_BUFFER_LEN;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Infglk
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! infglk.h -- auto-generated by parse_dispatch.py.
! Generated for Glk API version 0.7.4

Constant evtype_Arrange = 5;
Constant evtype_CharInput = 2;
Constant evtype_Hyperlink = 8;
Constant evtype_LineInput = 3;
Constant evtype_MouseInput = 4;
Constant evtype_None = 0;
Constant evtype_Redraw = 6;
Constant evtype_SoundNotify = 7;
Constant evtype_Timer = 1;
Constant evtype_VolumeNotify = 9;
Constant filemode_Read = 2;
Constant filemode_ReadWrite = 3;
Constant filemode_Write = 1;
Constant filemode_WriteAppend = 5;
Constant fileusage_BinaryMode = 0;
Constant fileusage_Data = 0;
Constant fileusage_InputRecord = 3;
Constant fileusage_SavedGame = 1;
Constant fileusage_TextMode = 256;
Constant fileusage_Transcript = 2;
Constant fileusage_TypeMask = 15;
Constant gestalt_CharInput = 1;
Constant gestalt_CharOutput = 3;
Constant gestalt_CharOutput_ApproxPrint = 1;
Constant gestalt_CharOutput_CannotPrint = 0;
Constant gestalt_CharOutput_ExactPrint = 2;
Constant gestalt_DateTime = 20;
Constant gestalt_DrawImage = 7;
Constant gestalt_Graphics = 6;
Constant gestalt_GraphicsCharInput = 23;
Constant gestalt_GraphicsTransparency = 14;
Constant gestalt_HyperlinkInput = 12;
Constant gestalt_Hyperlinks = 11;
Constant gestalt_LineInput = 2;
Constant gestalt_LineInputEcho = 17;
Constant gestalt_LineTerminatorKey = 19;
Constant gestalt_LineTerminators = 18;
Constant gestalt_MouseInput = 4;
Constant gestalt_ResourceStream = 22;
Constant gestalt_Sound = 8;
Constant gestalt_Sound2 = 21;
Constant gestalt_SoundMusic = 13;
Constant gestalt_SoundNotify = 10;
Constant gestalt_SoundVolume = 9;
Constant gestalt_Timer = 5;
Constant gestalt_Unicode = 15;
Constant gestalt_UnicodeNorm = 16;
Constant gestalt_Version = 0;
Constant imagealign_InlineCenter = 3;
Constant imagealign_InlineDown = 2;
Constant imagealign_MarginLeft = 4;
Constant imagealign_MarginRight = 5;
Constant imagealign_InlineUp = 1;
Constant keycode_Delete = 4294967289;
Constant keycode_Down = 4294967291;
Constant keycode_End = 4294967283;
Constant keycode_Escape = 4294967288;
Constant keycode_Func1 = 4294967279;
Constant keycode_Func10 = 4294967270;
Constant keycode_Func11 = 4294967269;
Constant keycode_Func12 = 4294967268;
Constant keycode_Func2 = 4294967278;
Constant keycode_Func3 = 4294967277;
Constant keycode_Func4 = 4294967276;
Constant keycode_Func5 = 4294967275;
Constant keycode_Func6 = 4294967274;
Constant keycode_Func7 = 4294967273;
Constant keycode_Func8 = 4294967272;
Constant keycode_Func9 = 4294967271;
Constant keycode_Home = 4294967284;
Constant keycode_Left = 4294967294;
Constant keycode_MAXVAL = 28;
Constant keycode_PageDown = 4294967285;
Constant keycode_PageUp = 4294967286;
Constant keycode_Return = 4294967290;
Constant keycode_Right = 4294967293;
Constant keycode_Tab = 4294967287;
Constant keycode_Unknown = 4294967295;
Constant keycode_Up = 4294967292;
Constant seekmode_Current = 1;
Constant seekmode_End = 2;
Constant seekmode_Start = 0;
Constant style_Alert = 5;
Constant style_BlockQuote = 7;
Constant style_Emphasized = 1;
Constant style_Header = 3;
Constant style_Input = 8;
Constant style_NUMSTYLES = 11;
Constant style_Normal = 0;
Constant style_Note = 6;
Constant style_Preformatted = 2;
Constant style_Subheader = 4;
Constant style_User1 = 9;
Constant style_User2 = 10;
Constant stylehint_BackColor = 8;
Constant stylehint_Indentation = 0;
Constant stylehint_Justification = 2;
Constant stylehint_NUMHINTS = 10;
Constant stylehint_Oblique = 5;
Constant stylehint_ParaIndentation = 1;
Constant stylehint_Proportional = 6;
Constant stylehint_ReverseColor = 9;
Constant stylehint_Size = 3;
Constant stylehint_TextColor = 7;
Constant stylehint_Weight = 4;
Constant stylehint_just_Centered = 2;
Constant stylehint_just_LeftFlush = 0;
Constant stylehint_just_LeftRight = 1;
Constant stylehint_just_RightFlush = 3;
Constant winmethod_Above = 2;
Constant winmethod_Below = 3;
Constant winmethod_Border = 0;
Constant winmethod_BorderMask = 256;
Constant winmethod_DirMask = 15;
Constant winmethod_DivisionMask = 240;
Constant winmethod_Fixed = 16;
Constant winmethod_Left = 0;
Constant winmethod_NoBorder = 256;
Constant winmethod_Proportional = 32;
Constant winmethod_Right = 1;
Constant wintype_AllTypes = 0;
Constant wintype_Blank = 2;
Constant wintype_Graphics = 5;
Constant wintype_Pair = 1;
Constant wintype_TextBuffer = 3;
Constant wintype_TextGrid = 4;

[ glk_exit _vararg_count;
  ! glk_exit()
  @glk 1 _vararg_count 0;
  return 0;
];

[ glk_tick _vararg_count;
  ! glk_tick()
  @glk 3 _vararg_count 0;
  return 0;
];

[ glk_gestalt _vararg_count ret;
  ! glk_gestalt(uint, uint) => uint
  @glk 4 _vararg_count ret;
  return ret;
];

[ glk_gestalt_ext _vararg_count ret;
  ! glk_gestalt_ext(uint, uint, uintarray, arraylen) => uint
  @glk 5 _vararg_count ret;
  return ret;
];

[ glk_window_iterate _vararg_count ret;
  ! glk_window_iterate(window, &uint) => window
  @glk 32 _vararg_count ret;
  return ret;
];

[ glk_window_get_rock _vararg_count ret;
  ! glk_window_get_rock(window) => uint
  @glk 33 _vararg_count ret;
  return ret;
];

[ glk_window_get_root _vararg_count ret;
  ! glk_window_get_root() => window
  @glk 34 _vararg_count ret;
  return ret;
];

[ glk_window_open _vararg_count ret;
  ! glk_window_open(window, uint, uint, uint, uint) => window
  @glk 35 _vararg_count ret;
  return ret;
];

[ glk_window_close _vararg_count;
  ! glk_window_close(window, &{uint, uint})
  @glk 36 _vararg_count 0;
  return 0;
];

[ glk_window_get_size _vararg_count;
  ! glk_window_get_size(window, &uint, &uint)
  @glk 37 _vararg_count 0;
  return 0;
];

[ glk_window_set_arrangement _vararg_count;
  ! glk_window_set_arrangement(window, uint, uint, window)
  @glk 38 _vararg_count 0;
  return 0;
];

[ glk_window_get_arrangement _vararg_count;
  ! glk_window_get_arrangement(window, &uint, &uint, &window)
  @glk 39 _vararg_count 0;
  return 0;
];

[ glk_window_get_type _vararg_count ret;
  ! glk_window_get_type(window) => uint
  @glk 40 _vararg_count ret;
  return ret;
];

[ glk_window_get_parent _vararg_count ret;
  ! glk_window_get_parent(window) => window
  @glk 41 _vararg_count ret;
  return ret;
];

[ glk_window_clear _vararg_count;
  ! glk_window_clear(window)
  @glk 42 _vararg_count 0;
  return 0;
];

[ glk_window_move_cursor _vararg_count;
  ! glk_window_move_cursor(window, uint, uint)
  @glk 43 _vararg_count 0;
  return 0;
];

[ glk_window_get_stream _vararg_count ret;
  ! glk_window_get_stream(window) => stream
  @glk 44 _vararg_count ret;
  return ret;
];

[ glk_window_set_echo_stream _vararg_count;
  ! glk_window_set_echo_stream(window, stream)
  @glk 45 _vararg_count 0;
  return 0;
];

[ glk_window_get_echo_stream _vararg_count ret;
  ! glk_window_get_echo_stream(window) => stream
  @glk 46 _vararg_count ret;
  return ret;
];

[ glk_set_window _vararg_count;
  ! glk_set_window(window)
  @glk 47 _vararg_count 0;
  return 0;
];

[ glk_window_get_sibling _vararg_count ret;
  ! glk_window_get_sibling(window) => window
  @glk 48 _vararg_count ret;
  return ret;
];

[ glk_stream_iterate _vararg_count ret;
  ! glk_stream_iterate(stream, &uint) => stream
  @glk 64 _vararg_count ret;
  return ret;
];

[ glk_stream_get_rock _vararg_count ret;
  ! glk_stream_get_rock(stream) => uint
  @glk 65 _vararg_count ret;
  return ret;
];

[ glk_stream_open_file _vararg_count ret;
  ! glk_stream_open_file(fileref, uint, uint) => stream
  @glk 66 _vararg_count ret;
  return ret;
];

[ glk_stream_open_memory _vararg_count ret;
  ! glk_stream_open_memory(nativechararray, arraylen, uint, uint) => stream
  @glk 67 _vararg_count ret;
  return ret;
];

[ glk_stream_close _vararg_count;
  ! glk_stream_close(stream, &{uint, uint})
  @glk 68 _vararg_count 0;
  return 0;
];

[ glk_stream_set_position _vararg_count;
  ! glk_stream_set_position(stream, int, uint)
  @glk 69 _vararg_count 0;
  return 0;
];

[ glk_stream_get_position _vararg_count ret;
  ! glk_stream_get_position(stream) => uint
  @glk 70 _vararg_count ret;
  return ret;
];

[ glk_stream_set_current _vararg_count;
  ! glk_stream_set_current(stream)
  @glk 71 _vararg_count 0;
  return 0;
];

[ glk_stream_get_current _vararg_count ret;
  ! glk_stream_get_current() => stream
  @glk 72 _vararg_count ret;
  return ret;
];

[ glk_stream_open_resource _vararg_count ret;
  ! glk_stream_open_resource(uint, uint) => stream
  @glk 73 _vararg_count ret;
  return ret;
];

[ glk_fileref_create_temp _vararg_count ret;
  ! glk_fileref_create_temp(uint, uint) => fileref
  @glk 96 _vararg_count ret;
  return ret;
];

[ glk_fileref_create_by_name _vararg_count ret;
  ! glk_fileref_create_by_name(uint, string, uint) => fileref
  @glk 97 _vararg_count ret;
  return ret;
];

[ glk_fileref_create_by_prompt _vararg_count ret;
  ! glk_fileref_create_by_prompt(uint, uint, uint) => fileref
  @glk 98 _vararg_count ret;
  return ret;
];

[ glk_fileref_destroy _vararg_count;
  ! glk_fileref_destroy(fileref)
  @glk 99 _vararg_count 0;
  return 0;
];

[ glk_fileref_iterate _vararg_count ret;
  ! glk_fileref_iterate(fileref, &uint) => fileref
  @glk 100 _vararg_count ret;
  return ret;
];

[ glk_fileref_get_rock _vararg_count ret;
  ! glk_fileref_get_rock(fileref) => uint
  @glk 101 _vararg_count ret;
  return ret;
];

[ glk_fileref_delete_file _vararg_count;
  ! glk_fileref_delete_file(fileref)
  @glk 102 _vararg_count 0;
  return 0;
];

[ glk_fileref_does_file_exist _vararg_count ret;
  ! glk_fileref_does_file_exist(fileref) => uint
  @glk 103 _vararg_count ret;
  return ret;
];

[ glk_fileref_create_from_fileref _vararg_count ret;
  ! glk_fileref_create_from_fileref(uint, fileref, uint) => fileref
  @glk 104 _vararg_count ret;
  return ret;
];

[ glk_put_char _vararg_count;
  ! glk_put_char(uchar)
  @glk 128 _vararg_count 0;
  return 0;
];

[ glk_put_char_stream _vararg_count;
  ! glk_put_char_stream(stream, uchar)
  @glk 129 _vararg_count 0;
  return 0;
];

[ glk_put_string _vararg_count;
  ! glk_put_string(string)
  @glk 130 _vararg_count 0;
  return 0;
];

[ glk_put_string_stream _vararg_count;
  ! glk_put_string_stream(stream, string)
  @glk 131 _vararg_count 0;
  return 0;
];

[ glk_put_buffer _vararg_count;
  ! glk_put_buffer(nativechararray, arraylen)
  @glk 132 _vararg_count 0;
  return 0;
];

[ glk_put_buffer_stream _vararg_count;
  ! glk_put_buffer_stream(stream, nativechararray, arraylen)
  @glk 133 _vararg_count 0;
  return 0;
];

[ glk_set_style _vararg_count;
  ! glk_set_style(uint)
  @glk 134 _vararg_count 0;
  return 0;
];

[ glk_set_style_stream _vararg_count;
  ! glk_set_style_stream(stream, uint)
  @glk 135 _vararg_count 0;
  return 0;
];

[ glk_get_char_stream _vararg_count ret;
  ! glk_get_char_stream(stream) => int
  @glk 144 _vararg_count ret;
  return ret;
];

[ glk_get_line_stream _vararg_count ret;
  ! glk_get_line_stream(stream, nativechararray, arraylen) => uint
  @glk 145 _vararg_count ret;
  return ret;
];

[ glk_get_buffer_stream _vararg_count ret;
  ! glk_get_buffer_stream(stream, nativechararray, arraylen) => uint
  @glk 146 _vararg_count ret;
  return ret;
];

[ glk_char_to_lower _vararg_count ret;
  ! glk_char_to_lower(uchar) => uchar
  @glk 160 _vararg_count ret;
  return ret;
];

[ glk_char_to_upper _vararg_count ret;
  ! glk_char_to_upper(uchar) => uchar
  @glk 161 _vararg_count ret;
  return ret;
];

[ glk_stylehint_set _vararg_count;
  ! glk_stylehint_set(uint, uint, uint, int)
  @glk 176 _vararg_count 0;
  return 0;
];

[ glk_stylehint_clear _vararg_count;
  ! glk_stylehint_clear(uint, uint, uint)
  @glk 177 _vararg_count 0;
  return 0;
];

[ glk_style_distinguish _vararg_count ret;
  ! glk_style_distinguish(window, uint, uint) => uint
  @glk 178 _vararg_count ret;
  return ret;
];

[ glk_style_measure _vararg_count ret;
  ! glk_style_measure(window, uint, uint, &uint) => uint
  @glk 179 _vararg_count ret;
  return ret;
];

[ glk_select _vararg_count;
  ! glk_select(&{uint, window, uint, uint})
  @glk 192 _vararg_count 0;
  return 0;
];

[ glk_select_poll _vararg_count;
  ! glk_select_poll(&{uint, window, uint, uint})
  @glk 193 _vararg_count 0;
  return 0;
];

[ glk_request_line_event _vararg_count;
  ! glk_request_line_event(window, nativechararray, arraylen, uint)
  @glk 208 _vararg_count 0;
  return 0;
];

[ glk_cancel_line_event _vararg_count;
  ! glk_cancel_line_event(window, &{uint, window, uint, uint})
  @glk 209 _vararg_count 0;
  return 0;
];

[ glk_request_char_event _vararg_count;
  ! glk_request_char_event(window)
  @glk 210 _vararg_count 0;
  return 0;
];

[ glk_cancel_char_event _vararg_count;
  ! glk_cancel_char_event(window)
  @glk 211 _vararg_count 0;
  return 0;
];

[ glk_request_mouse_event _vararg_count;
  ! glk_request_mouse_event(window)
  @glk 212 _vararg_count 0;
  return 0;
];

[ glk_cancel_mouse_event _vararg_count;
  ! glk_cancel_mouse_event(window)
  @glk 213 _vararg_count 0;
  return 0;
];

[ glk_request_timer_events _vararg_count;
  ! glk_request_timer_events(uint)
  @glk 214 _vararg_count 0;
  return 0;
];

[ glk_image_get_info _vararg_count ret;
  ! glk_image_get_info(uint, &uint, &uint) => uint
  @glk 224 _vararg_count ret;
  return ret;
];

[ glk_image_draw _vararg_count ret;
  ! glk_image_draw(window, uint, int, int) => uint
  @glk 225 _vararg_count ret;
  return ret;
];

[ glk_image_draw_scaled _vararg_count ret;
  ! glk_image_draw_scaled(window, uint, int, int, uint, uint) => uint
  @glk 226 _vararg_count ret;
  return ret;
];

[ glk_window_flow_break _vararg_count;
  ! glk_window_flow_break(window)
  @glk 232 _vararg_count 0;
  return 0;
];

[ glk_window_erase_rect _vararg_count;
  ! glk_window_erase_rect(window, int, int, uint, uint)
  @glk 233 _vararg_count 0;
  return 0;
];

[ glk_window_fill_rect _vararg_count;
  ! glk_window_fill_rect(window, uint, int, int, uint, uint)
  @glk 234 _vararg_count 0;
  return 0;
];

[ glk_window_set_background_color _vararg_count;
  ! glk_window_set_background_color(window, uint)
  @glk 235 _vararg_count 0;
  return 0;
];

[ glk_schannel_iterate _vararg_count ret;
  ! glk_schannel_iterate(schannel, &uint) => schannel
  @glk 240 _vararg_count ret;
  return ret;
];

[ glk_schannel_get_rock _vararg_count ret;
  ! glk_schannel_get_rock(schannel) => uint
  @glk 241 _vararg_count ret;
  return ret;
];

[ glk_schannel_create _vararg_count ret;
  ! glk_schannel_create(uint) => schannel
  @glk 242 _vararg_count ret;
  return ret;
];

[ glk_schannel_destroy _vararg_count;
  ! glk_schannel_destroy(schannel)
  @glk 243 _vararg_count 0;
  return 0;
];

[ glk_schannel_create_ext _vararg_count ret;
  ! glk_schannel_create_ext(uint, uint) => schannel
  @glk 244 _vararg_count ret;
  return ret;
];

[ glk_schannel_play_multi _vararg_count ret;
  ! glk_schannel_play_multi(schannelarray, arraylen, uintarray, arraylen, uint) => uint
  @glk 247 _vararg_count ret;
  return ret;
];

[ glk_schannel_play _vararg_count ret;
  ! glk_schannel_play(schannel, uint) => uint
  @glk 248 _vararg_count ret;
  return ret;
];

[ glk_schannel_play_ext _vararg_count ret;
  ! glk_schannel_play_ext(schannel, uint, uint, uint) => uint
  @glk 249 _vararg_count ret;
  return ret;
];

[ glk_schannel_stop _vararg_count;
  ! glk_schannel_stop(schannel)
  @glk 250 _vararg_count 0;
  return 0;
];

[ glk_schannel_set_volume _vararg_count;
  ! glk_schannel_set_volume(schannel, uint)
  @glk 251 _vararg_count 0;
  return 0;
];

[ glk_sound_load_hint _vararg_count;
  ! glk_sound_load_hint(uint, uint)
  @glk 252 _vararg_count 0;
  return 0;
];

[ glk_schannel_set_volume_ext _vararg_count;
  ! glk_schannel_set_volume_ext(schannel, uint, uint, uint)
  @glk 253 _vararg_count 0;
  return 0;
];

[ glk_schannel_pause _vararg_count;
  ! glk_schannel_pause(schannel)
  @glk 254 _vararg_count 0;
  return 0;
];

[ glk_schannel_unpause _vararg_count;
  ! glk_schannel_unpause(schannel)
  @glk 255 _vararg_count 0;
  return 0;
];

[ glk_set_hyperlink _vararg_count;
  ! glk_set_hyperlink(uint)
  @glk 256 _vararg_count 0;
  return 0;
];

[ glk_set_hyperlink_stream _vararg_count;
  ! glk_set_hyperlink_stream(stream, uint)
  @glk 257 _vararg_count 0;
  return 0;
];

[ glk_request_hyperlink_event _vararg_count;
  ! glk_request_hyperlink_event(window)
  @glk 258 _vararg_count 0;
  return 0;
];

[ glk_cancel_hyperlink_event _vararg_count;
  ! glk_cancel_hyperlink_event(window)
  @glk 259 _vararg_count 0;
  return 0;
];

[ glk_buffer_to_lower_case_uni _vararg_count ret;
  ! glk_buffer_to_lower_case_uni(uintarray, arraylen, uint) => uint
  @glk 288 _vararg_count ret;
  return ret;
];

[ glk_buffer_to_upper_case_uni _vararg_count ret;
  ! glk_buffer_to_upper_case_uni(uintarray, arraylen, uint) => uint
  @glk 289 _vararg_count ret;
  return ret;
];

[ glk_buffer_to_title_case_uni _vararg_count ret;
  ! glk_buffer_to_title_case_uni(uintarray, arraylen, uint, uint) => uint
  @glk 290 _vararg_count ret;
  return ret;
];

[ glk_buffer_canon_decompose_uni _vararg_count ret;
  ! glk_buffer_canon_decompose_uni(uintarray, arraylen, uint) => uint
  @glk 291 _vararg_count ret;
  return ret;
];

[ glk_buffer_canon_normalize_uni _vararg_count ret;
  ! glk_buffer_canon_normalize_uni(uintarray, arraylen, uint) => uint
  @glk 292 _vararg_count ret;
  return ret;
];

[ glk_put_char_uni _vararg_count;
  ! glk_put_char_uni(uint)
  @glk 296 _vararg_count 0;
  return 0;
];

[ glk_put_string_uni _vararg_count;
  ! glk_put_string_uni(unicode)
  @glk 297 _vararg_count 0;
  return 0;
];

[ glk_put_buffer_uni _vararg_count;
  ! glk_put_buffer_uni(uintarray, arraylen)
  @glk 298 _vararg_count 0;
  return 0;
];

[ glk_put_char_stream_uni _vararg_count;
  ! glk_put_char_stream_uni(stream, uint)
  @glk 299 _vararg_count 0;
  return 0;
];

[ glk_put_string_stream_uni _vararg_count;
  ! glk_put_string_stream_uni(stream, unicode)
  @glk 300 _vararg_count 0;
  return 0;
];

[ glk_put_buffer_stream_uni _vararg_count;
  ! glk_put_buffer_stream_uni(stream, uintarray, arraylen)
  @glk 301 _vararg_count 0;
  return 0;
];

[ glk_get_char_stream_uni _vararg_count ret;
  ! glk_get_char_stream_uni(stream) => int
  @glk 304 _vararg_count ret;
  return ret;
];

[ glk_get_buffer_stream_uni _vararg_count ret;
  ! glk_get_buffer_stream_uni(stream, uintarray, arraylen) => uint
  @glk 305 _vararg_count ret;
  return ret;
];

[ glk_get_line_stream_uni _vararg_count ret;
  ! glk_get_line_stream_uni(stream, uintarray, arraylen) => uint
  @glk 306 _vararg_count ret;
  return ret;
];

[ glk_stream_open_file_uni _vararg_count ret;
  ! glk_stream_open_file_uni(fileref, uint, uint) => stream
  @glk 312 _vararg_count ret;
  return ret;
];

[ glk_stream_open_memory_uni _vararg_count ret;
  ! glk_stream_open_memory_uni(uintarray, arraylen, uint, uint) => stream
  @glk 313 _vararg_count ret;
  return ret;
];

[ glk_stream_open_resource_uni _vararg_count ret;
  ! glk_stream_open_resource_uni(uint, uint) => stream
  @glk 314 _vararg_count ret;
  return ret;
];

[ glk_request_char_event_uni _vararg_count;
  ! glk_request_char_event_uni(window)
  @glk 320 _vararg_count 0;
  return 0;
];

[ glk_request_line_event_uni _vararg_count;
  ! glk_request_line_event_uni(window, uintarray, arraylen, uint)
  @glk 321 _vararg_count 0;
  return 0;
];

[ glk_set_echo_line_event _vararg_count;
  ! glk_set_echo_line_event(window, uint)
  @glk 336 _vararg_count 0;
  return 0;
];

[ glk_set_terminators_line_event _vararg_count;
  ! glk_set_terminators_line_event(window, uintarray, arraylen)
  @glk 337 _vararg_count 0;
  return 0;
];

[ glk_current_time _vararg_count;
  ! glk_current_time(&{int, uint, int})
  @glk 352 _vararg_count 0;
  return 0;
];

[ glk_current_simple_time _vararg_count ret;
  ! glk_current_simple_time(uint) => int
  @glk 353 _vararg_count ret;
  return ret;
];

[ glk_time_to_date_utc _vararg_count;
  ! glk_time_to_date_utc(&{int, uint, int}, &{int, int, int, int, int, int, int, int})
  @glk 360 _vararg_count 0;
  return 0;
];

[ glk_time_to_date_local _vararg_count;
  ! glk_time_to_date_local(&{int, uint, int}, &{int, int, int, int, int, int, int, int})
  @glk 361 _vararg_count 0;
  return 0;
];

[ glk_simple_time_to_date_utc _vararg_count;
  ! glk_simple_time_to_date_utc(int, uint, &{int, int, int, int, int, int, int, int})
  @glk 362 _vararg_count 0;
  return 0;
];

[ glk_simple_time_to_date_local _vararg_count;
  ! glk_simple_time_to_date_local(int, uint, &{int, int, int, int, int, int, int, int})
  @glk 363 _vararg_count 0;
  return 0;
];

[ glk_date_to_time_utc _vararg_count;
  ! glk_date_to_time_utc(&{int, int, int, int, int, int, int, int}, &{int, uint, int})
  @glk 364 _vararg_count 0;
  return 0;
];

[ glk_date_to_time_local _vararg_count;
  ! glk_date_to_time_local(&{int, int, int, int, int, int, int, int}, &{int, uint, int})
  @glk 365 _vararg_count 0;
  return 0;
];

[ glk_date_to_simple_time_utc _vararg_count ret;
  ! glk_date_to_simple_time_utc(&{int, int, int, int, int, int, int, int}, uint) => int
  @glk 366 _vararg_count ret;
  return ret;
];

[ glk_date_to_simple_time_local _vararg_count ret;
  ! glk_date_to_simple_time_local(&{int, int, int, int, int, int, int, int}, uint) => int
  @glk 367 _vararg_count ret;
  return ret;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Rocks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant GG_MAINWIN_ROCK        201;
Constant GG_STATUSWIN_ROCK      202;
Constant GG_QUOTEWIN_ROCK       203;
Constant GG_SAVESTR_ROCK        301;
Constant GG_SCRIPTSTR_ROCK      302;
Constant GG_COMMANDWSTR_ROCK    303;
Constant GG_COMMANDRSTR_ROCK    304;
Constant GG_SCRIPTFREF_ROCK     401;
Constant GG_FOREGROUNDCHAN_ROCK 410;
Constant GG_BACKGROUNDCHAN_ROCK 411;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Stubs
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Stub HandleGlkEvent    2;
#Stub IdentifyGlkObject 4;
#Stub InitGlkWindow     1;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Starting Up
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_PreInitialise res;
    @gestalt 4 2 res; ! Test if this interpreter has Glk...
    if (res == 0) quit; ! ...without which there would be nothing we could do

	unicode_gestalt_ok = false;
	if (glk_gestalt(gestalt_Unicode, 0))
		unicode_gestalt_ok = true;

    ! Set the VM's I/O system to be Glk.
    @setiosys 2 0;
];

[ VM_Initialise res sty i;
    @gestalt 4 2 res; ! Test if this interpreter has Glk...
    if (res == 0) quit; ! ...without which there would be nothing we could do

    ! First, we must go through all the Glk objects that exist, and see
    ! if we created any of them. One might think this strange, since the
    ! program has just started running, but remember that the player might
    ! have just typed "restart".

    GGRecoverObjects();

	! Sound channel initialisation, and RNG fixing, must be done now rather
	! than later in case InitGlkWindow() returns a non-zero value.

	if (glk_gestalt(gestalt_Sound, 0)) {
		if (gg_foregroundchan == 0)
			gg_foregroundchan = glk_schannel_create(GG_FOREGROUNDCHAN_ROCK);
		if (gg_backgroundchan == 0)
			gg_backgroundchan = glk_schannel_create(GG_BACKGROUNDCHAN_ROCK);
	}

	#ifdef FIX_RNG;
	@random 10000 i;
	i = -i-2000;
	print "[Random number generator seed is ", i, "]^";
	@setrandom i;
	#endif; ! FIX_RNG

    res = InitGlkWindow(0);
    if (res ~= 0) return;

    ! Now, gg_mainwin and gg_storywin might already be set. If not, set them.

    if (gg_mainwin == 0) {
        ! Open the story window.
        res = InitGlkWindow(GG_MAINWIN_ROCK);
        if (res == 0) {
        	! Left-justify the header style
			glk_stylehint_set(wintype_TextBuffer, style_Header, stylehint_Justification, 0);
			! Try to make emphasized type in italics and not boldface
			glk_stylehint_set(wintype_TextBuffer, style_Emphasized, stylehint_Weight, 0);
			glk_stylehint_set(wintype_TextBuffer, style_Emphasized, stylehint_Oblique, 1);
            gg_mainwin = glk_window_open(0, 0, 0, wintype_TextBuffer, GG_MAINWIN_ROCK);
		}
        if (gg_mainwin == 0) quit; ! If we can't even open one window, give in
    } else {
        ! There was already a story window. We should erase it.
        glk_window_clear(gg_mainwin);
    }

    if (gg_statuswin == 0) {
        res = InitGlkWindow(GG_STATUSWIN_ROCK);
        if (res == 0) {
            statuswin_cursize = statuswin_size;
			for (sty=0: sty<style_NUMSTYLES: sty++)
				glk_stylehint_set(wintype_TextGrid, sty, stylehint_ReverseColor, 1);
            gg_statuswin =
            	glk_window_open(gg_mainwin, winmethod_Fixed + winmethod_Above,
            		statuswin_cursize, wintype_TextGrid, GG_STATUSWIN_ROCK);
        }
    }
    ! It's possible that the status window couldn't be opened, in which case
    ! gg_statuswin is now zero. We must allow for that later on.

    glk_set_window(gg_mainwin);

    InitGlkWindow(1);
    
    ! Empty the parse buffer (see bug 0001451)
    buffer3-->0 = 0;
];

[ GGRecoverObjects id;
    ! If GGRecoverObjects() has been called, all these stored IDs are
    ! invalid, so we start by clearing them all out.
    ! (In fact, after a restoreundo, some of them may still be good.
    ! For simplicity, though, we assume the general case.)
    gg_mainwin = 0;
    gg_statuswin = 0;
    gg_quotewin = 0;
    gg_scriptfref = 0;
    gg_scriptstr = 0;
    gg_savestr = 0;
    statuswin_cursize = 0;
    gg_foregroundchan = 0;
    gg_backgroundchan = 0;
    #Ifdef DEBUG;
    gg_commandstr = 0;
    gg_command_reading = false;
    #Endif; ! DEBUG
    ! Also tell the game to clear its object references.
    IdentifyGlkObject(0);

    id = glk_stream_iterate(0, gg_arguments);
    while (id) {
        switch (gg_arguments-->0) {
            GG_SAVESTR_ROCK: gg_savestr = id;
            GG_SCRIPTSTR_ROCK: gg_scriptstr = id;
            #Ifdef DEBUG;
            GG_COMMANDWSTR_ROCK: gg_commandstr = id;
                                 gg_command_reading = false;
            GG_COMMANDRSTR_ROCK: gg_commandstr = id;
                                 gg_command_reading = true;
            #Endif; ! DEBUG
            default: IdentifyGlkObject(1, 1, id, gg_arguments-->0);
        }
        id = glk_stream_iterate(id, gg_arguments);
    }

    id = glk_window_iterate(0, gg_arguments);
    while (id) {
        switch (gg_arguments-->0) {
            GG_MAINWIN_ROCK: gg_mainwin = id;
            GG_STATUSWIN_ROCK: gg_statuswin = id;
            GG_QUOTEWIN_ROCK: gg_quotewin = id;
            default: IdentifyGlkObject(1, 0, id, gg_arguments-->0);
        }
        id = glk_window_iterate(id, gg_arguments);
    }

    id = glk_fileref_iterate(0, gg_arguments);
    while (id) {
        switch (gg_arguments-->0) {
            GG_SCRIPTFREF_ROCK: gg_scriptfref = id;
            default: IdentifyGlkObject(1, 2, id, gg_arguments-->0);
        }
        id = glk_fileref_iterate(id, gg_arguments);
    }

	if (glk_gestalt(gestalt_Sound, 0)) {
		id = glk_schannel_iterate(0, gg_arguments);
		while (id) {
			switch (gg_arguments-->0) {
				GG_FOREGROUNDCHAN_ROCK: gg_foregroundchan = id;
				GG_BACKGROUNDCHAN_ROCK: gg_backgroundchan = id;
				default: IdentifyGlkObject(1, 3, id, gg_arguments-->0);
			}
			id = glk_schannel_iterate(id, gg_arguments);
		}
		if (gg_foregroundchan ~= 0) { glk_schannel_stop(gg_foregroundchan); }
		if (gg_backgroundchan ~= 0) { glk_schannel_stop(gg_backgroundchan); }
	}

    ! Tell the game to tie up any loose ends.
    IdentifyGlkObject(2);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Enable Acceleration
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ENABLE_GLULX_ACCEL_R addr res;
	@gestalt 9 0 res;
	if (res == 0) return;
	addr = #classes_table;
	@accelparam 0 addr;
	@accelparam 1 INDIV_PROP_START;
	@accelparam 2 Class;
	@accelparam 3 Object;
	@accelparam 4 Routine;
	@accelparam 5 String;
	addr = #globals_array + WORDSIZE * #g$self;
	@accelparam 6 addr;
	@accelparam 7 NUM_ATTR_BYTES;
	addr = #cpv__start;
	@accelparam 8 addr;
	@accelfunc 1 Z__Region;
	@accelfunc 2 CP__Tab;
	@accelfunc 3 RA__Pr;
	@accelfunc 4 RL__Pr;
	@accelfunc 5 OC__Cl;
	@accelfunc 6 RV__Pr;
	@accelfunc 7 OP__Pr;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Release Number
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Describe_Release i;
	print "Release ";
	@aloads ROM_GAMERELEASE 0 i;
	print i;
	print " / Serial number ";
	for (i=0 : i<6 : i++) print (char) ROM_GAMESERIAL->i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Keyboard Input
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_KeyChar win nostat done res ix jx ch;
    jx = ch; ! squash compiler warnings
    if (win == 0) win = gg_mainwin;
    if (gg_commandstr ~= 0 && gg_command_reading ~= false) {
        done = glk_get_line_stream(gg_commandstr, gg_arguments, 31);
        if (done == 0) {
            glk_stream_close(gg_commandstr, 0);
            gg_commandstr = 0;
            gg_command_reading = false;
            ! fall through to normal user input.
        } else {
            ! Trim the trailing newline
            if (gg_arguments->(done-1) == 10) done = done-1;
            res = gg_arguments->0;
            if (res == '\') {
                res = 0;
                for (ix=1 : ix<done : ix++) {
                    ch = gg_arguments->ix;
                    if (ch >= '0' && ch <= '9') {
                        @shiftl res 4 res;
                        res = res + (ch-'0');
                    } else if (ch >= 'a' && ch <= 'f') {
                        @shiftl res 4 res;
                        res = res + (ch+10-'a');
                    } else if (ch >= 'A' && ch <= 'F') {
                        @shiftl res 4 res;
                        res = res + (ch+10-'A');
                    }
                }
            }
       		jump KCPContinue;
        }
    }
    done = false;
    glk_request_char_event(win);
    while (~~done) {
        glk_select(gg_event);
        switch (gg_event-->0) {
          5: ! evtype_Arrange
            if (nostat) {
                glk_cancel_char_event(win);
                res = $80000000;
                done = true;
                break;
            }
            DrawStatusLine();
          2: ! evtype_CharInput
            if (gg_event-->1 == win) {
                res = gg_event-->2;
                done = true;
                }
        }
        ix = HandleGlkEvent(gg_event, 1, gg_arguments);
        if (ix == 2) {
            res = gg_arguments-->0;
            done = true;
        } else if (ix == -1)  done = false;
    }
    if (gg_commandstr ~= 0 && gg_command_reading == false) {
        if (res < 32 || res >= 256 || (res == '\' or ' ')) {
            glk_put_char_stream(gg_commandstr, '\');
            done = 0;
            jx = res;
            for (ix=0 : ix<8 : ix++) {
                @ushiftr jx 28 ch;
                @shiftl jx 4 jx;
                ch = ch & $0F;
                if (ch ~= 0 || ix == 7) done = 1;
                if (done) {
                    if (ch >= 0 && ch <= 9) ch = ch + '0';
                    else                    ch = (ch - 10) + 'A';
                    glk_put_char_stream(gg_commandstr, ch);
                }
            }
        } else {
            glk_put_char_stream(gg_commandstr, res);
        }
        glk_put_char_stream(gg_commandstr, 10); ! newline
    }
  .KCPContinue;
    return res;
];

[ VM_KeyDelay tenths  key done ix;
    glk_request_char_event(gg_mainwin);
    glk_request_timer_events(tenths*100);
    while (~~done) {
        glk_select(gg_event);
        ix = HandleGlkEvent(gg_event, 1, gg_arguments);
        if (ix == 2) {
            key = gg_arguments-->0;
            done = true;
        }
        else if (ix >= 0 && gg_event-->0 == 1 or 2) {
            key = gg_event-->2;
            done = true;
        }
    }
    glk_cancel_char_event(gg_mainwin);
    glk_request_timer_events(0);
    return key;
];

[ VM_ReadKeyboard  a_buffer a_table done ix;
    if (gg_commandstr ~= 0 && gg_command_reading ~= false) {
        done = glk_get_line_stream(gg_commandstr, a_buffer+WORDSIZE,
        	(INPUT_BUFFER_LEN-WORDSIZE)-1);
        if (done == 0) {
            glk_stream_close(gg_commandstr, 0);
            gg_commandstr = 0;
            gg_command_reading = false;
        }
        else {
            ! Trim the trailing newline
            if ((a_buffer+WORDSIZE)->(done-1) == 10) done = done-1;
            a_buffer-->0 = done;
            VM_Style(INPUT_VMSTY);
            glk_put_buffer(a_buffer+WORDSIZE, done);
            VM_Style(NORMAL_VMSTY);
            print "^";
            jump KPContinue;
        }
    }
    done = false;
    glk_request_line_event(gg_mainwin, a_buffer+WORDSIZE, INPUT_BUFFER_LEN-WORDSIZE, 0);
    while (~~done) {
        glk_select(gg_event);
        switch (gg_event-->0) {
          5: ! evtype_Arrange
            DrawStatusLine();
          3: ! evtype_LineInput
            if (gg_event-->1 == gg_mainwin) {
                a_buffer-->0 = gg_event-->2;
                done = true;
            }
        }
        ix = HandleGlkEvent(gg_event, 0, a_buffer);
        if (ix == 2) done = true;
        else if (ix == -1) done = false;
    }
    if (gg_commandstr ~= 0 && gg_command_reading == false) {
        glk_put_buffer_stream(gg_commandstr, a_buffer+WORDSIZE, a_buffer-->0);
        glk_put_char_stream(gg_commandstr, 10); ! newline
    }
  .KPContinue;
    VM_Tokenise(a_buffer,a_table);
    ! It's time to close any quote window we've got going.
    if (gg_quotewin) {
        glk_window_close(gg_quotewin, 0);
        gg_quotewin = 0;
    }
    #ifdef ECHO_COMMANDS;
    print "** ";
    for (ix=WORDSIZE: ix<(a_buffer-->0)+WORDSIZE: ix++) print (char) a_buffer->ix;
    print "^";
    #endif; ! ECHO_COMMANDS
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Buffer Functions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_CopyBuffer bto bfrom i;
    for (i=0: i<INPUT_BUFFER_LEN: i++) bto->i = bfrom->i;
];

[ VM_PrintToBuffer buf len a b c;
    if (b) {
        if (metaclass(a) == Object && a.#b == WORDSIZE
            && metaclass(a.b) == String)
            buf-->0 = Glulx_PrintAnyToArray(buf+WORDSIZE, len, a.b);
		else if (metaclass(a) == Routine)
			buf-->0 = Glulx_PrintAnyToArray(buf+WORDSIZE, len, a, b, c);
        else
            buf-->0 = Glulx_PrintAnyToArray(buf+WORDSIZE, len, a, b);
    }
    else if (metaclass(a) == Routine)
        buf-->0 = Glulx_PrintAnyToArray(buf+WORDSIZE, len, a, b, c);
    else
		buf-->0 = Glulx_PrintAnyToArray(buf+WORDSIZE, len, a);
    if (buf-->0 > len) buf-->0 = len;
    return buf-->0;
];

[ VM_Tokenise buf tab
    cx numwords len bx ix wx wpos wlen val res dictlen entrylen;
    len = buf-->0;
    buf = buf+WORDSIZE;

    ! First, split the buffer up into words. We use the standard Infocom
    ! list of word separators (comma, period, double-quote).

    cx = 0;
    numwords = 0;
    while (cx < len) {
        while (cx < len && buf->cx == ' ') cx++;
        if (cx >= len) break;
        bx = cx;
        if (buf->cx == '.' or ',' or '"') cx++;
        else {
            while (cx < len && buf->cx ~= ' ' or '.' or ',' or '"') cx++;
        }
        tab-->(numwords*3+2) = (cx-bx);
        tab-->(numwords*3+3) = WORDSIZE+bx;
        numwords++;
        if (numwords >= MAX_BUFFER_WORDS) break;
    }
    tab-->0 = numwords;

    ! Now we look each word up in the dictionary.

    dictlen = #dictionary_table-->0;
    entrylen = DICT_WORD_SIZE + 7;

    for (wx=0 : wx<numwords : wx++) {
        wlen = tab-->(wx*3+2);
        wpos = tab-->(wx*3+3);

        ! Copy the word into the gg_tokenbuf array, clipping to DICT_WORD_SIZE
        ! characters and lower case.
        if (wlen > DICT_WORD_SIZE) wlen = DICT_WORD_SIZE;
        cx = wpos - WORDSIZE;
        for (ix=0 : ix<wlen : ix++) gg_tokenbuf->ix = VM_UpperToLowerCase(buf->(cx+ix));
        for (: ix<DICT_WORD_SIZE : ix++) gg_tokenbuf->ix = 0;

        val = #dictionary_table + WORDSIZE;
        @binarysearch gg_tokenbuf DICT_WORD_SIZE val entrylen dictlen 1 1 res;
        tab-->(wx*3+1) = res;
    }
];

[ LTI_Insert i ch  b y;

    ! Protect us from strict mode, as this isn't an array in quite the
    ! sense it expects
    b = buffer;

    ! Insert character ch into buffer at point i.
    ! Being careful not to let the buffer possibly overflow:
    y = b-->0;
    if (y > INPUT_BUFFER_LEN) y = INPUT_BUFFER_LEN;

    ! Move the subsequent text along one character:
    for (y=y+WORDSIZE : y>i : y--) b->y = b->(y-1);
    b->i = ch;

    ! And the text is now one character longer:
    if (b-->0 < INPUT_BUFFER_LEN) (b-->0)++;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Dictionary Functions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_InvalidDictionaryAddress addr;
	if (addr < 0) rtrue;
	rfalse;
];

[ VM_DictionaryAddressToNumber w; return w; ];
[ VM_NumberToDictionaryAddress n; return n; ];

Array gg_tokenbuf -> DICT_WORD_SIZE;

[ GGWordCompare str1 str2 ix jx;
    for (ix=0 : ix<DICT_WORD_SIZE : ix++) {
        jx = (str1->ix) - (str2->ix);
        if (jx ~= 0) return jx;
    }
    return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: SHOWVERB support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef DEBUG;
[ DebugAction a str;
    if (a >= 4096) { print "<fake action ", a-4096, ">"; return; }
    if (a < 0 || a >= #identifiers_table-->7) print "<invalid action ", a, ">";
    else {
        str = #identifiers_table-->6;
        str = str-->a;
        if (str) print (string) str; else print "<unnamed action ", a, ">";
    }
];

[ DebugAttribute a str;
    if (a < 0 || a >= NUM_ATTR_BYTES*8) print "<invalid attribute ", a, ">";
    else {
        str = #identifiers_table-->4;
        str = str-->a;
        if (str) print (string) str; else print "<unnamed attribute ", a, ">";
    }
];
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Command Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_CommandTableAddress i;
	return (#grammar_table)-->(i+1);
];

[ VM_PrintCommandWords i wd j dictlen entrylen;
    dictlen = #dictionary_table-->0;
    entrylen = DICT_WORD_SIZE + 7;
    for (j=0 : j<dictlen : j++) {
        wd = #dictionary_table + WORDSIZE + entrylen*j;
        if (DictionaryWordToVerbNum(wd) == i)
            print "'", (address) wd, "' ";
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Random Number Generator
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Seed_RNG n;
	@setrandom n;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Memory Allocation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_AllocateMemory amount i;
	@gestalt 7 0 i;
	if (i == 0) return i;
	@malloc amount i;
	return i;
];

[ VM_FreeMemory address i;
	@gestalt 7 0 i;
	if (i == 0) return;
	@mfree address;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Audiovisual Resources
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Picture resource_ID;
	if (glk_gestalt(gestalt_Graphics, 0)) {
		glk_image_draw(gg_mainwin, resource_ID, imagealign_InlineCenter, 0);
	} else {
		print "[Picture number ", resource_ID, " here.]^";
	}
];

[ VM_SoundEffect resource_ID;
	if (glk_gestalt(gestalt_Sound, 0)) {
		glk_schannel_play(gg_foregroundchan, resource_ID);
	} else {
		print "[Sound effect number ", resource_ID, " here.]^";
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Typography
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Style sty;
	switch (sty) {
		NORMAL_VMSTY:     glk_set_style(style_Normal);
		HEADER_VMSTY:     glk_set_style(style_Header);
		SUBHEADER_VMSTY:  glk_set_style(style_Subheader);
		NOTE_VMSTY:       glk_set_style(style_Note);
		ALERT_VMSTY:      glk_set_style(style_Alert);
		BLOCKQUOTE_VMSTY: glk_set_style(style_BlockQuote);
		INPUT_VMSTY:      glk_set_style(style_Input);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Character Casing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_UpperToLowerCase c; return glk_char_to_lower(c); ];
[ VM_LowerToUpperCase c; return glk_char_to_upper(c); ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Glulx-Only Printing Routines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! Glulx_PrintAnything()                    <nothing printed>
! Glulx_PrintAnything(0)                   <nothing printed>
! Glulx_PrintAnything("string");           print (string) "string";
! Glulx_PrintAnything('word')              print (address) 'word';
! Glulx_PrintAnything(obj)                 print (name) obj;
! Glulx_PrintAnything(obj, prop)           obj.prop();
! Glulx_PrintAnything(obj, prop, args...)  obj.prop(args...);
! Glulx_PrintAnything(func)                func();
! Glulx_PrintAnything(func, args...)       func(args...);

[ Glulx_PrintAnything _vararg_count obj mclass;
    if (_vararg_count == 0) return;
    @copy sp obj;
    _vararg_count--;
    if (obj == 0) return;

    if (obj->0 == $60) {
        ! Dictionary word. Metaclass() can't catch this case, so we do it manually
        print (address) obj;
        return;
    }

    mclass = metaclass(obj);
    switch (mclass) {
      nothing:
        return;
      String:
        print (string) obj;
        return;
      Routine:
        ! Call the function with all the arguments which are already
        ! on the stack.
        @call obj _vararg_count 0;
        return;
      Object:
        if (_vararg_count == 0) {
            print (name) obj;
        }
        else {
            ! Push the object back onto the stack, and call the
            ! veneer routine that handles obj.prop() calls.
            @copy obj sp;
            _vararg_count++;
            @call CA__Pr _vararg_count 0;
        }
        return;
    }
];

[ Glulx_PrintAnyToArray _vararg_count arr arrlen str oldstr len;
    @copy sp arr;
    @copy sp arrlen;
    _vararg_count = _vararg_count - 2;

    oldstr = glk_stream_get_current();
    str = glk_stream_open_memory(arr, arrlen, 1, 0);
    if (str == 0) return 0;

    glk_stream_set_current(str);

    @call Glulx_PrintAnything _vararg_count 0;

    glk_stream_set_current(oldstr);
    @copy $ffffffff sp;
    @copy str sp;
    @glk $0044 2 0; ! stream_close
    @copy sp len;
    @copy sp 0;
    return len;
];

Constant GG_ANYTOSTRING_LEN 66;
Array AnyToStrArr -> GG_ANYTOSTRING_LEN+1;

[ Glulx_ChangeAnyToCString _vararg_count ix len;
    ix = GG_ANYTOSTRING_LEN-2;
    @copy ix sp;
    ix = AnyToStrArr+1;
    @copy ix sp;
    ix = _vararg_count+2;
    @call Glulx_PrintAnyToArray ix len;
    AnyToStrArr->0 = $E0;
    if (len >= GG_ANYTOSTRING_LEN)
        len = GG_ANYTOSTRING_LEN-1;
    AnyToStrArr->(len+1) = 0;
    return AnyToStrArr;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: The Screen
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_ClearScreen window;
    if (window == WIN_ALL or WIN_MAIN) {
        glk_window_clear(gg_mainwin);
        if (gg_quotewin) {
            glk_window_close(gg_quotewin, 0);
            gg_quotewin = 0;
        }
    }
    if (gg_statuswin && window == WIN_ALL or WIN_STATUS) glk_window_clear(gg_statuswin);
];

[ VM_ScreenWidth  id;
    id=gg_mainwin;
    if (gg_statuswin && statuswin_current) id = gg_statuswin;
    glk_window_get_size(id, gg_arguments, 0);
    return gg_arguments-->0;
];

[ VM_ScreenHeight;
    glk_window_get_size(gg_mainwin, 0, gg_arguments);
    return gg_arguments-->0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Window Colours
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_SetWindowColours f b window doclear  i fwd bwd swin;
    if (clr_on && f && b) {
        if (window) swin = 5-window; ! 4 for TextGrid, 3 for TextBuffer

        fwd = MakeColourWord(f);
        bwd = MakeColourWord(b);
        for (i=0 : i<style_NUMSTYLES: i++) {
            if (f == CLR_DEFAULT || b == CLR_DEFAULT) {  ! remove style hints
                glk_stylehint_clear(swin, i, stylehint_TextColor);
                glk_stylehint_clear(swin, i, stylehint_BackColor);
            } else {
                glk_stylehint_set(swin, i, stylehint_TextColor, fwd);
                glk_stylehint_set(swin, i, stylehint_BackColor, bwd);
            }
        }

        ! Now re-open the windows to apply the hints
        if (gg_statuswin) glk_window_close(gg_statuswin, 0);
        gg_statuswin = 0;

        if (doclear || ( window ~= 1 && (clr_fg ~= f || clr_bg ~= b) ) ) {
            glk_window_close(gg_mainwin, 0);
            gg_mainwin = glk_window_open(0, 0, 0, wintype_TextBuffer, GG_MAINWIN_ROCK);
            if (gg_scriptstr ~= 0)
                glk_window_set_echo_stream(gg_mainwin, gg_scriptstr);
        }

        gg_statuswin =
        	glk_window_open(gg_mainwin, winmethod_Fixed + winmethod_Above,
        		statuswin_cursize, wintype_TextGrid, GG_STATUSWIN_ROCK);
        if (statuswin_current && gg_statuswin) VM_MoveCursorInStatusLine(); else VM_MainWindow();

        if (window ~= 2) {
            clr_fgstatus = f;
            clr_bgstatus = b;
        }
        if (window ~= 1) {
            clr_fg = f;
            clr_bg = b;
        }
    }
];

[ VM_RestoreWindowColours; ! used after UNDO: compare I6 patch L61007
    if (clr_on) { ! check colour has been used
        VM_SetWindowColours(clr_fg, clr_bg, 2); ! make sure both sets of variables are restored
        VM_SetWindowColours(clr_fgstatus, clr_bgstatus, 1, true);
        VM_ClearScreen();
    }
];

[ MakeColourWord c;
    if (c > 9) return c;
    c = c-2;
    return $ff0000*(c&1) + $ff00*(c&2 ~= 0) + $ff*(c&4 ~= 0);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Main Window
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_MainWindow;
    glk_set_window(gg_mainwin); ! set_window
    statuswin_current=0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Status Line
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_StatusLineHeight hgt;
    if (gg_statuswin == 0) return;
    if (hgt == statuswin_cursize) return;
    glk_window_set_arrangement(glk_window_get_parent(gg_statuswin), $12, hgt, 0);
    statuswin_cursize = hgt;
];

[ VM_MoveCursorInStatusLine line column;
    if (gg_statuswin == 0) return;
    glk_set_window(gg_statuswin);
    if (line == 0) { line = 1; column = 1; }
    glk_window_move_cursor(gg_statuswin, column-1, line-1);
    statuswin_current=1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Quotation Boxes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Box__Routine maxwid arr ix lines lastnl parwin;
    maxwid = 0; ! squash compiler warning
    lines = arr-->0;

    if (gg_quotewin == 0) {
        gg_arguments-->0 = lines;
        ix = InitGlkWindow(GG_QUOTEWIN_ROCK);
        if (ix == 0)
            gg_quotewin =
            	glk_window_open(gg_mainwin, winmethod_Fixed + winmethod_Above,
            		lines, wintype_TextBuffer, GG_QUOTEWIN_ROCK);
    } else {
        parwin = glk_window_get_parent(gg_quotewin);
        glk_window_set_arrangement(parwin, $12, lines, 0);
    }

    lastnl = true;
    if (gg_quotewin) {
        glk_window_clear(gg_quotewin);
        glk_set_window(gg_quotewin);
        lastnl = false;
    }

	VM_Style(BLOCKQUOTE_VMSTY);
    for (ix=0 : ix<lines : ix++) {
        print (string) arr-->(ix+1);
        if (ix < lines-1 || lastnl) new_line;
    }
	VM_Style(NORMAL_VMSTY);

    if (gg_quotewin) glk_set_window(gg_mainwin);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: GlkList Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef DEBUG;
[ GlkListSub id val;
    id = glk_window_iterate(0, gg_arguments);
    while (id) {
        print "Window ", id, " (", gg_arguments-->0, "): ";
        val = glk_window_get_type(id);
        switch (val) {
          1: print "pair";
          2: print "blank";
          3: print "textbuffer";
          4: print "textgrid";
          5: print "graphics";
          default: print "unknown";
        }
        val = glk_window_get_parent(id);
        if (val) print ", parent is window ", val;
        else     print ", no parent (root)";
        val = glk_window_get_stream(id);
        print ", stream ", val;
        val = glk_window_get_echo_stream(id);
        if (val) print ", echo stream ", val;
        print "^";
        id = glk_window_iterate(id, gg_arguments);
    }
    id = glk_stream_iterate(0, gg_arguments);
    while (id) {
        print "Stream ", id, " (", gg_arguments-->0, ")^";
        id = glk_stream_iterate(id, gg_arguments);
    }
    id = glk_fileref_iterate(0, gg_arguments);
    while (id) {
        print "Fileref ", id, " (", gg_arguments-->0, ")^";
        id = glk_fileref_iterate(id, gg_arguments);
    }
    if (glk_gestalt(gestalt_Sound, 0)) {
        id = glk_schannel_iterate(0, gg_arguments);
        while (id) {
            print "Soundchannel ", id, " (", gg_arguments-->0, ")^";
            id = glk_schannel_iterate(id, gg_arguments);
        }
    }
];

Verb meta 'glklist'

    *                                           -> Glklist;
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Undo
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Undo result_code;
	@restoreundo result_code;
	return (~~result_code);
];

[ VM_Save_Undo result_code;
    @saveundo result_code;
    if (result_code == -1) { GGRecoverObjects(); return 2; }
    return (~~result_code);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Quit The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ QUIT_THE_GAME_R;
	if (actor ~= player) rfalse;
	if ((actor == player) && (untouchable_silence == false))
		QUIT_THE_GAME_RM('A');
	if (YesOrNo()~=0) quit;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Restart The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RESTART_THE_GAME_R;
	if (actor ~= player) rfalse;
	RESTART_THE_GAME_RM('A');
	if (YesOrNo()~=0) {
		@restart;
		RESTART_THE_GAME_RM('B'); new_line;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Restore The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RESTORE_THE_GAME_R res fref;
	if (actor ~= player) rfalse;
	fref = glk_fileref_create_by_prompt($01, $02, 0);
	if (fref == 0) jump RFailed;
	gg_savestr = glk_stream_open_file(fref, $02, GG_SAVESTR_ROCK);
	glk_fileref_destroy(fref);
	if (gg_savestr == 0) jump RFailed;
	@restore gg_savestr res;
	glk_stream_close(gg_savestr, 0);
	gg_savestr = 0;
	.RFailed;
	RESTORE_THE_GAME_RM('A'); new_line;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Save The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SAVE_THE_GAME_R res fref;
	if (actor ~= player) rfalse;
	fref = glk_fileref_create_by_prompt($01, $01, 0);
	if (fref == 0) jump SFailed;
	gg_savestr = glk_stream_open_file(fref, $01, GG_SAVESTR_ROCK);
	glk_fileref_destroy(fref);
	if (gg_savestr == 0) jump SFailed;
	@save gg_savestr res;
	if (res == -1) {
		! The player actually just typed "restore". We first have to recover
		! all the Glk objects; the values in our global variables are all wrong.
		GGRecoverObjects();
		glk_stream_close(gg_savestr, 0); ! stream_close
		gg_savestr = 0;
		RESTORE_THE_GAME_RM('B'); new_line;
		rtrue;
	}
	glk_stream_close(gg_savestr, 0); ! stream_close
	gg_savestr = 0;
	if (res == 0) { SAVE_THE_GAME_RM('B'); new_line; rtrue; }
	.SFailed;
	SAVE_THE_GAME_RM('A'); new_line;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Verify The Story File Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VERIFY_THE_STORY_FILE_R res;
	if (actor ~= player) rfalse;
	@verify res;
	if (res == 0) { VERIFY_THE_STORY_FILE_RM('A'); new_line; rtrue; }
	VERIFY_THE_STORY_FILE_RM('B'); new_line;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Switch Transcript On Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SWITCH_TRANSCRIPT_ON_R;
	if (actor ~= player) rfalse;
	if (gg_scriptstr ~= 0) { SWITCH_TRANSCRIPT_ON_RM('A'); new_line; rtrue; }
	if (gg_scriptfref == 0) {
		gg_scriptfref = glk_fileref_create_by_prompt($102, $05, GG_SCRIPTFREF_ROCK);
		if (gg_scriptfref == 0) jump S1Failed;
	}
	! stream_open_file
	gg_scriptstr = glk_stream_open_file(gg_scriptfref, $05, GG_SCRIPTSTR_ROCK);
	if (gg_scriptstr == 0) jump S1Failed;
	glk_window_set_echo_stream(gg_mainwin, gg_scriptstr);
	SWITCH_TRANSCRIPT_ON_RM('B'); new_line;
	VersionSub();
	return;
	.S1Failed;
	SWITCH_TRANSCRIPT_ON_RM('C'); new_line;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Switch Transcript Off Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SWITCH_TRANSCRIPT_OFF_R;
	if (actor ~= player) rfalse;
	if (gg_scriptstr == 0) { SWITCH_TRANSCRIPT_OFF_RM('A'); new_line; rtrue; }
	SWITCH_TRANSCRIPT_OFF_RM('B'); new_line;
	glk_stream_close(gg_scriptstr, 0); ! stream_close
	gg_scriptstr = 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Announce Story File Version Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ANNOUNCE_STORY_FILE_VERSION_R ix;
	if (actor ~= player) rfalse;
	Banner();
	print "Identification number: ";
	for (ix=6: ix <= UUID_ARRAY->0: ix++) print (char) UUID_ARRAY->ix;
	print "^";
	@gestalt 1 0 ix;
	print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
	".", ix & $FF, " / ";
	@gestalt 0 0 ix;
	print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
	print "Library serial number ", (string) LibSerial, "^";
	#Ifdef LanguageVersion;
	print (string) LanguageVersion, "^";
	#Endif; ! LanguageVersion
	ShowExtensionVersions();
	say__p = 1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Descend To Specific Action Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DESCEND_TO_SPECIFIC_ACTION_R;
	indirect(#actions_table-->(action+1));
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Veneer
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Unsigned__Compare x y;
	@jleu x y ?lesseq;
	return 1;
	.lesseq;
	@jeq x y ?equal;
	return -1;
	.equal;
	return 0;
];

[ RT__ChLDW x y;
	@aload x y sp;
	@return sp;
];

[ RT__ChLDB x y;
	@aloadb x y sp;
	@return sp;
];

#Endif;

#Ifdef TARGET_ZCODE;

! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Summary
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Variables and Arrays
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global top_object; ! largest valid number of any tree object
Global xcommsdir; ! true if command recording is on
Global transcript_mode; ! true if game scripting is on

Constant INPUT_BUFFER_LEN = 120; ! Length of buffer array

Array  buffer    -> 123;            ! Buffer for parsing main line of input
Array  buffer2   -> 123;            ! Buffers for supplementary questions
Array  buffer3   -> 123;            ! Buffer retaining input for "again"
Array  parse     buffer 63;         ! Parse table mirroring it
Array  parse2    buffer 63;         !

Global dict_start;
Global dict_entry_size;
Global dict_end;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Starting Up
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Initialise i;
	standard_interpreter = HDR_TERPSTANDARD-->0;
	transcript_mode = ((HDR_GAMEFLAGS-->0) & 1);

	dict_start = HDR_DICTIONARY-->0;
	dict_entry_size = dict_start->(dict_start->0 + 1);
	dict_start = dict_start + dict_start->0 + 4;
	dict_end = dict_start + ((dict_start - 2)-->0) * dict_entry_size;

	buffer->0  = INPUT_BUFFER_LEN;
	buffer2->0 = INPUT_BUFFER_LEN;
	buffer3->0 = INPUT_BUFFER_LEN;
	parse->0   = 15;
	parse2->0  = 15;

	top_object = #largest_object-255;

	#ifdef FIX_RNG;
	@random 10000 -> i;
	i = -i-2000;
	print "[Random number generator seed is ", i, "]^";
	@random i -> i;
	#endif; ! FIX_RNG	
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Enable Acceleration
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ENABLE_GLULX_ACCEL_R;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Release Number
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Describe_Release i;
	print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
	for (i=0 : i<6 : i++) print (char) HDR_GAMESERIAL->i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Keyboard Input
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_KeyChar win  key;
    if (win) @set_window win;
    @read_char 1 -> key;
    return key;
];

[ VM_KeyDelay tenths  key;
    @read_char 1 tenths VM_KeyDelay_Interrupt -> key;
    return key;
];
[ VM_KeyDelay_Interrupt; rtrue; ];

[ VM_ReadKeyboard  a_buffer a_table i;
    read a_buffer a_table;
    #ifdef ECHO_COMMANDS;
    print "** ";
    for (i=2: i<=(a_buffer->1)+1: i++) print (char) a_buffer->i;
    print "^";
    #ifnot;
    i=0;  ! suppress compiler warning
    #endif;

    #Iftrue (#version_number == 6);
    @output_stream -1;
    @loadb a_buffer 1 -> sp;
    @add a_buffer 2 -> sp;
    @print_table sp sp;
    new_line;
    @output_stream 1;
    #Endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Buffer Functions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_CopyBuffer bto bfrom i;
    for (i=0: i<INPUT_BUFFER_LEN: i++) bto->i = bfrom->i;
];

[ VM_PrintToBuffer buf len a b c;
    @output_stream 3 buf;
    switch (metaclass(a)) {
		String: print (string) a;
		Routine: a(b, c);
		Object, Class: if (b) PrintOrRun(a, b, true); else print (name) a;
    }
    @output_stream -3;
    if (buf-->0 > len) print "Error: Overflow in VM_PrintToBuffer.^";
    return buf-->0;
];

[ VM_Tokenise b p; b->(2 + b->1) = 0; @tokenise b p; ];

[ LTI_Insert i ch  b y;
    ! Protect us from strict mode, as this isn't an array in quite the
    ! sense it expects
    b = buffer;

    ! Insert character ch into buffer at point i.
    ! Being careful not to let the buffer possibly overflow:
    y = b->1;
    if (y > b->0) y = b->0;

    ! Move the subsequent text along one character:
    for (y=y+2 : y>i : y--) b->y = b->(y-1);
    b->i = ch;

    ! And the text is now one character longer:
    if (b->1 < b->0) (b->1)++;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Dictionary Functions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_InvalidDictionaryAddress addr;
    if ((UnsignedCompare(addr, dict_start) < 0) ||
		(UnsignedCompare(addr, dict_end) >= 0) ||
		((addr - dict_start) % dict_entry_size ~= 0)) rtrue;
	rfalse;
];

[ VM_DictionaryAddressToNumber w; return (w-(HDR_DICTIONARY-->0 + 7))/9; ];
[ VM_NumberToDictionaryAddress n; return HDR_DICTIONARY-->0 + 7 + 9*n; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Command Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_CommandTableAddress i;
	return (HDR_STATICMEMORY-->0)-->i;
];

[ VM_PrintCommandWords i da j;
    da = HDR_DICTIONARY-->0;
    for (j=0 : j<(da+5)-->0 : j++)
        if (da->(j*9 + 14) == $ff-i)
        	print "'", (address) VM_NumberToDictionaryAddress(j), "' ";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: SHOWVERB support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef DEBUG;
[ DebugAction a anames;
    if (a >= 4096) { print "<fake action ", a-4096, ">"; return; }
    anames = #identifiers_table;
    anames = anames + 2*(anames-->0) + 2*48;
    print (string) anames-->a;
];

[ DebugAttribute a anames;
    if (a < 0 || a >= 48) print "<invalid attribute ", a, ">";
    else {
        anames = #identifiers_table; anames = anames + 2*(anames-->0);
        print (string) anames-->a;
    }
];
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: RNG
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Seed_RNG n;
	if (n > 0) n = -n;
	@random n -> n;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Memory Allocation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_AllocateMemory amount;
	return 0;
];

[ VM_FreeMemory address;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Audiovisual Resources
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Picture resource_ID;
	#IFTRUE #version_number == 6; ! Z-machine version 6
	@draw_picture resource_ID;
	#ENDIF;
];

[ VM_SoundEffect resource_ID;
	#IFTRUE #version_number == 6; ! Z-machine version 6
	@sound_effect resource_ID;
	#ENDIF;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Typography
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Style sty;
	switch (sty) {
		NORMAL_VMSTY, NOTE_VMSTY: style roman;
		HEADER_VMSTY, SUBHEADER_VMSTY, ALERT_VMSTY: style bold;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Character Casing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_UpperToLowerCase c;
   switch (c) {
		'A' to 'Z': c = c + 32;
		202, 204, 212, 214, 221: c--;
		217, 218: c = c - 2;
		158 to 160, 167 to 168, 208 to 210: c = c - 3;
		186 to 190, 196 to 200: c = c - 5 ;
		175 to 180: c = c - 6;
   }
   return c;
];

[ VM_LowerToUpperCase c;
   switch (c) {
		'a' to 'z': c = c - 32;
		201, 203, 211, 213, 220: c++;
		215, 216: c = c + 2;
		155 to 157, 164 to 165, 205 to 207: c = c + 3;
		181 to 185, 191 to 195: c = c + 5 ;
		169 to 174: c = c + 6;
   }
   return c;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: The Screen
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_ClearScreen window;
    switch (window) {
		WIN_ALL:    @erase_window -1; statuswin_cursize = 0;
		WIN_STATUS: @erase_window 1;
		WIN_MAIN:   @erase_window 0;
    }
];

#Iftrue (#version_number == 6);
[ VM_ScreenWidth  width charw;
    @get_wind_prop 1 3 -> width;
    @get_wind_prop 1 13 -> charw;
    charw = charw & $FF;
    return (width+charw-1) / charw;
];
#Ifnot;
[ VM_ScreenWidth; return (HDR_SCREENWCHARS->0); ];
#Endif;

[ VM_ScreenHeight; return (HDR_SCREENHLINES->0); ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Window Colours
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_SetWindowColours f b window;
    if (clr_on && f && b) {
        if (window == 0) {  ! if setting both together, set reverse
            clr_fgstatus = b;
            clr_bgstatus = f;
            }
        if (window == 1) {
            clr_fgstatus = f;
            clr_bgstatus = b;
        }
        if (window == 0 or 2) {
            clr_fg = f;
            clr_bg = b;
        }
        if (statuswin_current)
            @set_colour clr_fgstatus clr_bgstatus;
        else
            @set_colour clr_fg clr_bg;
    }
];

[ VM_RestoreWindowColours; ! compare I6 library patch L61007
    if (clr_on) { ! check colour has been used
        VM_SetWindowColours(clr_fg, clr_bg, 2); ! make sure both sets of variables are restored
        VM_SetWindowColours(clr_fgstatus, clr_bgstatus, 1, true);
        VM_ClearScreen();
    }
    #Iftrue (#version_number == 6); ! request screen update
    (0-->8) = (0-->8) | $$00000100;
    #Endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Main Window
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_MainWindow;
    if (statuswin_current) {
        if (clr_on && clr_bgstatus > 1) @set_colour clr_fg clr_bg;
        else style roman;
        @set_window 0;
    }
    statuswin_current = false;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Status Line
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_MoveCursorInStatusLine line column; ! 1-based position on text grid
    if (~~statuswin_current) {
         @set_window 1;
         if (clr_on && clr_bgstatus > 1) @set_colour clr_fgstatus clr_bgstatus;
         else                            style reverse;
    }
    if (line == 0) {
        line = 1;
        column = 1;
    }
    #Iftrue (#version_number == 6);
    Z6_MoveCursor(line, column);
    #Ifnot;
    @set_cursor line column;
    #Endif;
	statuswin_current = true;
];

#Iftrue (#version_number == 6);
[ Z6_MoveCursor line column  charw charh; ! 1-based position on text grid
	@get_wind_prop 1 13 -> charw; ! font size
	@log_shift charw $FFF8 -> charh;
	charw = charw / $100;
	line = 1 + charh*(line-1);
	column = 1 + charw*(column-1);
	@set_cursor line column;
];
#Endif;

#Iftrue (#version_number == 6);
[ VM_StatusLineHeight height  wx wy x y charh;
    ! Split the window. Standard 1.0 interpreters should keep the window 0
    ! cursor in the same absolute position, but older interpreters,
    ! including Infocom's don't - they keep the window 0 cursor in the
    ! same position relative to its origin. We therefore compensate
    ! manually.
    @get_wind_prop 0 0 -> wy; @get_wind_prop 0 1 -> wx;
    @get_wind_prop 0 13 -> charh; @log_shift charh $FFF8 -> charh;
    @get_wind_prop 0 4 -> y; @get_wind_prop 0 5 -> x;
    height = height * charh;
    @split_window height;
    y = y - height + wy - 1;
    if (y < 1) y = 1;
    x = x + wx - 1;
    @set_cursor y x 0;
    statuswin_cursize = height;
];
#Ifnot;
[ VM_StatusLineHeight height;
    if (statuswin_cursize ~= height)
        @split_window height;
    statuswin_cursize = height;
];
#Endif;

#Iftrue (#version_number == 6);
[ Z6_DrawStatusLine width x charw scw;
	(0-->8) = (0-->8) &~ $$00000100;
	@push say__p; @push say__pc;
	BeginActivity(CONSTRUCTING_STATUS_LINE_ACT);
	VM_StatusLineHeight(statuswin_size);
	! Now clear the window. This isn't totally trivial. Our approach is to select the
	! fixed space font, measure its width, and print an appropriate
	! number of spaces. We round up if the screen isn't a whole number
	! of characters wide, and rely on window 1 being set to clip by default.
	VM_MoveCursorInStatusLine(1, 1);
	@set_font 4 -> x;
	width = VM_ScreenWidth();
	spaces width;
	ClearParagraphing(8);
	if (ForActivity(CONSTRUCTING_STATUS_LINE_ACT) == false) {
		! Back to standard font for the display. We use output_stream 3 to
		! measure the space required, the aim being to get 50 characters
		! worth of space for the location name.
		VM_MoveCursorInStatusLine(1, 2);
		@set_font 1 -> x;
		TEXT_TY_Say(left_hand_status_line);
		@get_wind_prop 1 3 -> width;
		@get_wind_prop 1 13 -> charw;
		charw = charw & $FF;
		@output_stream 3 StorageForShortName;
		TEXT_TY_Say(right_hand_status_line);
		@output_stream -3; scw = HDR_PIXELSTO3-->0 + charw;
		x = 1+width-scw;
		@set_cursor 1 x; TEXT_TY_Say(right_hand_status_line);
	}
	! Reselect roman, as Infocom's interpreters go funny if reverse is selected twice.
	VM_MainWindow();
	ClearParagraphing(8);
	EndActivity(CONSTRUCTING_STATUS_LINE_ACT);
	@pull say__pc; @pull say__p;
];
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Quotation Boxes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Undo
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Undo result_code;
	@restore_undo result_code;
	return result_code;
];

[ VM_Save_Undo result_code;
    @save_undo result_code;
	return result_code;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Quit The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ QUIT_THE_GAME_R;
	if (actor ~= player) rfalse;
	QUIT_THE_GAME_RM('A');
	if (YesOrNo()~=0) quit;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Restart The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RESTART_THE_GAME_R;
	if (actor ~= player) rfalse;
	RESTART_THE_GAME_RM('A');
	if (YesOrNo()~=0) {
		@restart;
		RESTART_THE_GAME_RM('B'); new_line;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Restore The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RESTORE_THE_GAME_R;
	if (actor ~= player) rfalse;
	restore Rmaybe;
	RESTORE_THE_GAME_RM('A'); new_line;
	rtrue;
	.RMaybe; RESTORE_THE_GAME_RM('B'); new_line;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Save The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SAVE_THE_GAME_R flag;
	if (actor ~= player) rfalse;
	#IFV5;
	@save -> flag;
	switch (flag) {
		0: SAVE_THE_GAME_RM('A'); new_line;
		1: SAVE_THE_GAME_RM('B'); new_line;
		2: RESTORE_THE_GAME_RM('B'); new_line;
	}
	#IFNOT;
	save Smaybe;
	SAVE_THE_GAME_RM('A'); new_line; rtrue;
	.SMaybe; SAVE_THE_GAME_RM('B'); new_line;
	#ENDIF;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Verify The Story File Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VERIFY_THE_STORY_FILE_R;
	if (actor ~= player) rfalse;
	@verify ?Vmaybe;
	jump Vwrong;
	.Vmaybe; VERIFY_THE_STORY_FILE_RM('A'); new_line; rtrue;
	.Vwrong;
	VERIFY_THE_STORY_FILE_RM('B'); new_line;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Switch Transcript On Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SWITCH_TRANSCRIPT_ON_R;
	if (actor ~= player) rfalse;
	transcript_mode = ((0-->8) & 1);
	if (transcript_mode) { SWITCH_TRANSCRIPT_ON_RM('A'); new_line; rtrue; }
	@output_stream 2;
	if (((0-->8) & 1) == 0) { SWITCH_TRANSCRIPT_ON_RM('C'); new_line; rtrue; }
	SWITCH_TRANSCRIPT_ON_RM('B'); new_line; VersionSub();
	transcript_mode = true;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Switch Transcript Off Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SWITCH_TRANSCRIPT_OFF_R;
	if (actor ~= player) rfalse;
	transcript_mode = ((0-->8) & 1);
	if (transcript_mode == false) { SWITCH_TRANSCRIPT_OFF_RM('A'); new_line; rtrue; }
	SWITCH_TRANSCRIPT_OFF_RM('B'); new_line;
	@output_stream -2;
	if ((0-->8) & 1) { SWITCH_TRANSCRIPT_ON_RM('C'); new_line; rtrue; }
	transcript_mode = false;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Announce Story File Version Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ANNOUNCE_STORY_FILE_VERSION_R ix;
	if (actor ~= player) rfalse;
	Banner();
	print "Identification number: ";
	for (ix=6: ix <= UUID_ARRAY->0: ix++) print (char) UUID_ARRAY->ix;
	print "^";
	ix = 0; ! shut up compiler warning
	if (standard_interpreter > 0) {
		print "Standard interpreter ",
			standard_interpreter/256, ".", standard_interpreter%256,
			" (", HDR_TERPNUMBER->0;
		#Iftrue (#version_number == 6);
		print (char) '.', HDR_TERPVERSION->0;
		#Ifnot;
		print (char) HDR_TERPVERSION->0;
		#Endif;
		print ") / ";
	} else {
		print "Interpreter ", HDR_TERPNUMBER->0, " Version ";
		#Iftrue (#version_number == 6);
		print HDR_TERPVERSION->0;
		#Ifnot;
		print (char) HDR_TERPVERSION->0;
		#Endif;
		print " / ";
	}
	print "Library serial number ", (string) LibSerial, "^";
	#Ifdef LanguageVersion;
	print (string) LanguageVersion, "^";
	#Endif; ! LanguageVersion
	#ifdef ShowExtensionVersions;
	ShowExtensionVersions();
	#endif;
	say__p = 1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Descend To Specific Action Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DESCEND_TO_SPECIFIC_ACTION_R;
	indirect(#actions_table-->action);
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Veneer
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ OC__Cl obj cla j a n objflag;

	@jl obj 1 ?NotObj;
	@jg obj max_z_object ?NotObj;
	@inc objflag;
	@je cla K1_room ?~NotRoom;
	@test_attr obj mark_as_room ?rtrue;
	@rfalse;
	.NotRoom;
	@je cla K2_thing ?~NotObj;
	@test_attr obj mark_as_thing ?rtrue;
	@rfalse;
	.NotObj;

	@je cla Object Class ?ObjOrClass;
	@je cla Routine String ?RoutOrStr;

	@jin cla 1 ?~Mistake;

	@jz objflag ?rfalse;
	@get_prop_addr obj 2 -> a;
	@jz a ?rfalse;
	@get_prop_len a -> n;

	@div n 2 -> n;
	.Loop;
	@loadw a j -> sp;
	@je sp cla ?rtrue;
	@inc j;
	@jl j n ?Loop;
	@rfalse;

	.ObjOrClass;
	@jz objflag ?rfalse;
	@je cla Object ?JustObj;

	! So now cla is Class
	@jg obj String ?~rtrue;
	@jin obj Class ?rtrue;
	@rfalse;

	.JustObj;
	! So now cla is Object
	@jg obj String ?~rfalse;
	@jin obj Class ?rfalse;
	@rtrue;

	.RoutOrStr;
	@jz objflag ?~rfalse;
	@call_2s Z__Region obj -> sp;
	@inc sp;
	@je sp cla ?rtrue;
	@rfalse;

	.Mistake;
	RT__Err("apply 'ofclass' for", cla, -1);
	rfalse;
];

[ Unsigned__Compare x y u v;
	@je x y ?rfalse; ! i.e., return 0
	@jl x 0 ?XNegative;
	! So here x >= 0 and x ~= y
	@jl y 0 ?XPosYNeg;

	! Here x >=0, y >= 0, x ~= y

	@jg x y ?rtrue; ! i.e., return 1
	@ret -1;

	.XPosYNeg;
	! Here x >= 0, y < 0, x ~= y
	@ret -1;

	.XNegative;
	@jl y 0 ?~rtrue; ! if x < 0, y >= 0, return 1
	
	! Here x < 0, y < 0, x ~= y
	@jg x y ?rtrue;
	@ret -1;
];

[ RT__ChLDW base offset;
    @loadw base offset -> sp;
    @ret sp;
];

#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Compass
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Object Compass "compass" has concealed;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Language of Play
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Vocabulary
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant AGAIN1__WD     = 'again';
Constant AGAIN2__WD     = 'g//';
Constant AGAIN3__WD     = 'again';
Constant OOPS1__WD      = 'oops';
Constant OOPS2__WD      = 'o//';
Constant OOPS3__WD      = 'oops';
Constant UNDO1__WD      = 'undo';
Constant UNDO2__WD      = 'undo';
Constant UNDO3__WD      = 'undo';

Constant ALL1__WD       = 'all';
Constant ALL2__WD       = 'each';
Constant ALL3__WD       = 'every';
Constant ALL4__WD       = 'everything';
Constant ALL5__WD       = 'both';
Constant AND1__WD       = 'and';
Constant AND2__WD       = 'and';
Constant AND3__WD       = 'and';
Constant BUT1__WD       = 'but';
Constant BUT2__WD       = 'except';
Constant BUT3__WD       = 'but';
Constant ME1__WD        = 'me';
Constant ME2__WD        = 'myself';
Constant ME3__WD        = 'self';
Constant OF1__WD        = 'of';
Constant OF2__WD        = 'of';
Constant OF3__WD        = 'of';
Constant OF4__WD        = 'of';
Constant OTHER1__WD     = 'another';
Constant OTHER2__WD     = 'other';
Constant OTHER3__WD     = 'other';
Constant THEN1__WD      = 'then';
Constant THEN2__WD      = 'then';
Constant THEN3__WD      = 'then';

Constant NO1__WD        = 'n//';
Constant NO2__WD        = 'no';
Constant NO3__WD        = 'no';
Constant YES1__WD       = 'y//';
Constant YES2__WD       = 'yes';
Constant YES3__WD       = 'yes';

Constant AMUSING__WD    = 'amusing';
Constant FULLSCORE1__WD = 'fullscore';
Constant FULLSCORE2__WD = 'full';
Constant QUIT1__WD      = 'q//';
Constant QUIT2__WD      = 'quit';
Constant RESTART__WD    = 'restart';
Constant RESTORE__WD    = 'restore';


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Pronouns
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array LanguagePronouns table

  ! word        possible GNAs                   connected
  !             to follow:                      to:
  !             a     i
  !             s  p  s  p
  !             mfnmfnmfnmfn

    'it'      $$001000111000                    NULL
    'him'     $$100000000000                    NULL
    'her'     $$010000000000                    NULL
    'them'    $$000111000111                    NULL;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Descriptors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array LanguageDescriptors table

  ! word        possible GNAs   descriptor      connected
  !             to follow:      type:           to:
  !             a     i
  !             s  p  s  p
  !             mfnmfnmfnmfn

    'my'      $$111111111111    POSSESS_PK      0
    'this'    $$111111111111    POSSESS_PK      0
    'these'   $$000111000111    POSSESS_PK      0
    'that'    $$111111111111    POSSESS_PK      1
    'those'   $$000111000111    POSSESS_PK      1
    'his'     $$111111111111    POSSESS_PK      'him'
    'her'     $$111111111111    POSSESS_PK      'her'
    'their'   $$111111111111    POSSESS_PK      'them'
    'its'     $$111111111111    POSSESS_PK      'it'
    'the'     $$111111111111    DEFART_PK       NULL
    'a//'     $$111000111000    INDEFART_PK     NULL
    'an'      $$111000111000    INDEFART_PK     NULL
    'some'    $$000111000111    INDEFART_PK     NULL
    'lit'     $$111111111111    light           NULL
    'lighted' $$111111111111    light           NULL
    'unlit'   $$111111111111    (-light)        NULL;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Numbers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array LanguageNumbers table
    'one' 1 'two' 2 'three' 3 'four' 4 'five' 5
    'six' 6 'seven' 7 'eight' 8 'nine' 9 'ten' 10
    'eleven' 11 'twelve' 12 'thirteen' 13 'fourteen' 14 'fifteen' 15
    'sixteen' 16 'seventeen' 17 'eighteen' 18 'nineteen' 19 'twenty' 20
    'twenty-one' 21 'twenty-two' 22 'twenty-three' 23 'twenty-four' 24
	'twenty-five' 25 'twenty-six' 26 'twenty-seven' 27 'twenty-eight' 28
	'twenty-nine' 29 'thirty' 30
;

[ LanguageNumber n f;
    if (n == 0)    { print "zero"; rfalse; }
    if (n < 0)     { print "minus "; n = -n; }
#Iftrue (WORDSIZE == 4);
    if (n >= 1000000000) {
        if (f == 1) print ", ";
    	print (LanguageNumber) n/1000000000, " billion"; n = n%1000000000; f = 1;
    }
    if (n >= 1000000) {
        if (f == 1) print ", ";
    	print (LanguageNumber) n/1000000, " million"; n = n%1000000; f = 1;
    }
#Endif;
    if (n >= 1000) {
        if (f == 1) print ", ";
    	print (LanguageNumber) n/1000, " thousand"; n = n%1000; f = 1;
    }
    if (n >= 100)  {
        if (f == 1) print ", ";
        print (LanguageNumber) n/100, " hundred"; n = n%100; f = 1;
    }
    if (n == 0) rfalse;
    #Ifdef DIALECT_US;
    if (f == 1) print " ";
    #Ifnot;
    if (f == 1) print " and ";
    #Endif;
    switch (n) {
      1:    print "one";
      2:    print "two";
      3:    print "three";
      4:    print "four";
      5:    print "five";
      6:    print "six";
      7:    print "seven";
      8:    print "eight";
      9:    print "nine";
      10:   print "ten";
      11:   print "eleven";
      12:   print "twelve";
      13:   print "thirteen";
      14:   print "fourteen";
      15:   print "fifteen";
      16:   print "sixteen";
      17:   print "seventeen";
      18:   print "eighteen";
      19:   print "nineteen";
      20 to 99: switch (n/10) {
        2:  print "twenty";
        3:  print "thirty";
        4:  print "forty";
        5:  print "fifty";
        6:  print "sixty";
        7:  print "seventy";
        8:  print "eighty";
        9:  print "ninety";
        }
        if (n%10 ~= 0) print "-", (LanguageNumber) n%10;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Time
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LanguageTimeOfDay hours mins i;
    i = hours%12;
    if (i == 0) i = 12;
    if (i < 10) print " ";
    print i, ":", mins/10, mins%10;
    if ((hours/12) > 0) print " pm"; else print " am";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Directions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LanguageDirection d;
	print (name) d;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Translation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LanguageToInformese; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Articles
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant LanguageAnimateGender   = male;
Constant LanguageInanimateGender = neuter;

Constant LanguageContractionForms = 2;     ! English has two:
                                           ! 0 = starting with a consonant
                                           ! 1 = starting with a vowel

[ LanguageContraction text;
    if (text->0 == 'a' or 'e' or 'i' or 'o' or 'u'
                or 'A' or 'E' or 'I' or 'O' or 'U') return 1;
    return 0;
];

Array LanguageArticles -->

 !   Contraction form 0:     Contraction form 1:
 !   Cdef   Def    Indef     Cdef   Def    Indef

     "The " "the " "a "      "The " "the " "an "          ! Articles 0
     "The " "the " "some "   "The " "the " "some ";       ! Articles 1

                   !             a           i
                   !             s     p     s     p
                   !             m f n m f n m f n m f n

Array LanguageGNAsToArticles --> 0 0 0 1 1 1 0 0 0 1 1 1;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Commands
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LanguageVerb i;
    switch (i) {
      'i//','inv','inventory':
               print "take inventory";
      'l//':   print "look";
      'x//':   print "examine";
      'z//':   print "wait";
      default: rfalse;
    }
    rtrue;
];

[ LanguageVerbLikesAdverb w;
    if (w == 'look' or 'go' or 'push' or 'walk')
        rtrue;
    rfalse;
];

[ LanguageVerbMayBeName w;
    if (w == 'long' or 'short' or 'normal' or 'brief' or 'full' or 'verbose')
        rtrue;
    rfalse;
];


Default LanguageCases 1;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: The Old Library
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Darkness
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Object thedark "(darkness object)";


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Light Measurement
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ OffersLight obj j;
    while (obj) {
		if (obj has light) rtrue;
		objectloop (j in obj) if (HasLightSource(j)) rtrue;
		if ((obj has container) && (obj hasnt open) && (obj hasnt transparent)) rfalse;
		if ((obj provides component_parent) && (obj.component_parent))
			obj = obj.component_parent;
		else
			obj = parent(obj);
	}
    rfalse;
];

[ HasLightSource i j ad sr po;
	if (i == 0) rfalse;
    if (i has light) rtrue;
    if ((IsSeeThrough(i)) && (~~(HidesLightSource(i))))
        objectloop (j in i)
            if (HasLightSource(j)) rtrue;
    ad = i.&add_to_scope;
    if (parent(i) ~= 0 && ad ~= 0) {
        if (metaclass(ad-->0) == Routine) {
            ats_hls = 0; ats_flag = 1;
            sr = scope_reason; po = parser_one;
            scope_reason = LOOPOVERSCOPE_REASON; parser_one = 0;
            RunRoutines(i, add_to_scope);
            scope_reason = sr; parser_one = po;
            ats_flag = 0; if (ats_hls == 1) rtrue;
        }
        else {
            for (j=0 : (WORDSIZE*j)<i.#add_to_scope : j++)
                if ((ad-->j) && (HasLightSource(ad-->j) == 1)) rtrue;
        }
    }
    if (ComponentHasLight(i)) rtrue;
    rfalse;
];

[ ComponentHasLight o obj next_obj;
	if (o provides component_child) {
		obj = o.component_child;
		while (obj) {
			next_obj = obj.component_sibling;
			if (obj has light) rtrue;
			if (HasLightSource(obj)) rtrue;
			if ((obj provides component_child) && (ComponentHasLight(obj))) rtrue;
			obj = next_obj;
		}
	}
	rfalse;
];

[ HidesLightSource obj;
    if (obj == player) rfalse;
    if (obj has transparent or supporter) rfalse;
    if (obj has animate) rfalse;
    if (obj has container) return (obj hasnt open);
    return (obj hasnt enterable);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Invariant
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global lightflag = false;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Adjust Light Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ADJUST_LIGHT_R previous_light_condition;
    previous_light_condition = lightflag;
    lightflag = OffersLight(parent(player));

    if ((previous_light_condition == false) && (lightflag == false)) {
    	location = thedark;
    	rfalse;
    }

    if ((previous_light_condition == false) && (lightflag == true)) {
        location = real_location;
        CarryOutActivity(PRINTING_NEWS_OF_LIGHT_ACT);
        rfalse;
    }

    if ((previous_light_condition == true) && (lightflag == false)) {
        location = thedark;
		DivideParagraphPoint();
		BeginActivity(PRINTING_NEWS_OF_DARKNESS_ACT);
		if (ForActivity(PRINTING_NEWS_OF_DARKNESS_ACT) == false) {
			ADJUST_LIGHT_RM('A'); new_line;
		}
		EndActivity(PRINTING_NEWS_OF_DARKNESS_ACT);
		rfalse;
    }

    if ((previous_light_condition == true) && (lightflag == true)) {
    	location = real_location;
    	rfalse;
    }

    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Silent Light Consideration
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SilentlyConsiderLight;
    lightflag = OffersLight(parent(player));
	if (lightflag) location = real_location; else location = thedark;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Translucency
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IsSeeThrough obj;
    if ((obj has supporter)
    	|| (obj has transparent)
    	|| (obj has animate)
    	|| ((obj has container) && (obj has open)))
        rtrue;
   rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Visibility Parent
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VisibilityParent o;
    if (o && (o has container) && (o hasnt open) && (o hasnt transparent)) return nothing;
	if (o) o = CoreOfParentOfCoreOf(o);
    return o;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Find Visibility Levels
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FindVisibilityLevels lc up;
	if (location == thedark) {
		visibility_ceiling = thedark;
		visibility_levels = 0;	
	} else {
		visibility_ceiling = player;
		while (true) {
			up = VisibilityParent(visibility_ceiling);
			if (up == 0) break;
			visibility_ceiling = up;
			lc++;
		}
		visibility_levels = lc;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Touchability Ceiling
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TouchabilityCeiling original o p;
	o = original;
	while (o) {
	    p = CoreOfParentOfCoreOf(o);
	    if (p ofclass K1_room) return p;
	    if (p == nothing) return o;
	    if ((FollowRulebook(REACHING_OUTSIDE_RB, p)) && (RulebookFailed()))
	    	return p;
	    o = p;
	}
	return o;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Scope Ceiling
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ScopeCeiling pos c;
	if (pos == player && location == thedark) return thedark;
	c = parent(pos);
	if (c == 0) return pos;
	while (VisibilityParent(c)) c = VisibilityParent(c);
	return c;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Object Is Untouchable
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ObjectIsUntouchable item silent_flag p save_sp decision moving x;
	if (LocationOf(p) ~= real_location) {
		for (x = CoreOf(item): x: x = CoreOfParentOfCoreOf(x)) {
			if (x ofclass K4_door or K7_backdrop) {
				moving = true;
				MoveFloatingObjects(LocationOf(p));
				break;
			}
		}
	}
	untouchable_object = item; untouchable_silence = silent_flag;
	touch_persona = p; if (p == actor) touch_persona = 0;
	save_sp = say__p; say__p = 0;
	@push actor; actor = p;
	if (FollowRulebook(ACCESSIBILITY_RB, 0, true)) {
		if (RulebookSucceeded()) decision = false;
		else decision = true;
	} else decision = false;
	@pull actor;
	if (say__p == false) say__p = save_sp;
	if (moving) MoveFloatingObjects();
	untouchable_silence = 0;
	return decision;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Access Through Barriers Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ACCESS_THROUGH_BARRIERS_R ancestor i j external p;
	p = touch_persona; if (p == 0) p = actor;

	ancestor = CommonAncestor(p, untouchable_object);
	if ((ancestor == 0) && (LocationOf(untouchable_object) == nothing)
		&& ((untouchable_object ofclass K4_door or K7_backdrop) == false)) {
		if (touch_persona == 0) {
			if ((actor == player) && (untouchable_silence == false)) {
				ACCESS_THROUGH_BARRIERS_RM('A', untouchable_object);
				new_line;
			}
		}
		RulebookFails();
		rtrue;
	}

	! First, a barrier between the player and the ancestor.

	if (CoreOf(p) ~= ancestor) {
		i = parent(CoreOf(p)); j = CoreOf(i); external = false;
		if (j ~= i) { i = j; external = true; }
		while (i~=ancestor && i) {
			if ((external == false)
				&& (FollowRulebook(REACHING_OUTSIDE_RB, i))
				&& (RulebookFailed())) rtrue; ! Barrier
			i = parent(CoreOf(i)); external = false;
			if (~~(i ofclass K5_container)) {
				j = CoreOf(i);
				if (j ~= i) { i = j; external = true; }
			}
		}
	}

	! Second, a barrier between the item and the ancestor.

	if (CoreOf(untouchable_object) ~= ancestor) {
		! We can always get to the core of the item.
		i = CoreOf(untouchable_object);
		! This will be on the inside of its parent, if its parent is a
		! container, so there should be no exemption.
		i = parent(i); external = false;
		while (i~=ancestor && i) {
			if ((external == false) &&
				(FollowRulebook(REACHING_INSIDE_RB, i)) &&
				(RulebookFailed())) rtrue; ! Barrier
			i = CoreOf(i);
			if (i == ancestor) break;
			i = parent(i); external = false;
			if (~~(i ofclass K5_container)) {
				j = CoreOf(i);
				if (j ~= i) { i = j; external = true; }
			}
		}
	}

	RulebookSucceeds(); ! No barrier
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Can't Reach Inside Closed Containers Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CANT_REACH_INSIDE_CLOSED_R;
	if (parameter_value has container && parameter_value hasnt open) {
		if (touch_persona == 0) {
			if ((actor == player) && (untouchable_silence == false)) {
				CANT_REACH_INSIDE_CLOSED_RM('A', parameter_value);
				new_line;
			}
		}
		RulebookFails(); rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Can't Reach Outside Closed Containers Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CANT_REACH_OUTSIDE_CLOSED_R;
	if (parameter_value has container && parameter_value hasnt open) {
		if (touch_persona == 0) {
			if ((actor == player) && (untouchable_silence == false)) {
				CANT_REACH_OUTSIDE_CLOSED_RM('A', parameter_value);
				new_line;
			}
		}
		RulebookFails(); rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Can't Reach Inside Rooms Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CANT_REACH_INSIDE_ROOMS_R;
	if (parameter_value && parameter_value ofclass K1_room) {
		if (touch_persona == 0) {
			if ((actor == player) && (untouchable_silence == false)) {
				CANT_REACH_INSIDE_ROOMS_RM('A', parameter_value);
				new_line;
			}
		}
		RulebookFails(); rtrue;
	}
	rfalse;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Specification
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Memory
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant REQUISITION_STACK_SIZE = 3*237;
Array requisition_stack --> REQUISITION_STACK_SIZE;
Global requisition_stack_pointer = 0;

[ RequisitionStack len top addr;
	top = requisition_stack_pointer + len;
	if (top > REQUISITION_STACK_SIZE) return false;
	addr = requisition_stack + requisition_stack_pointer*WORDSIZE;
	! print "Allocating ", addr, " at pointer ", requisition_stack_pointer, "^";
	requisition_stack_pointer = top;
	return addr;
];

[ FreeStack addr;
	if (addr == 0) return;
	requisition_stack_pointer = (addr - requisition_stack)/WORDSIZE;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: WriteListOfMarkedObjects
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global MarkedObjectArray = 0;
Global MarkedObjectLength = 0;

[ WriteListOfMarkedObjects style
	obj common_parent first mixed_parentage length g gc;

	gc = -2;
	objectloop (obj ofclass Object && obj has workflag2) {
		length++;
		if (first == nothing) { first = obj; common_parent = parent(obj); }
		else { if (parent(obj) ~= common_parent) mixed_parentage = true; }
		g = GetGNAOfObject(obj); g = g%3;
		if (gc == -2) gc = g;
		else if (gc ~= g) gc = -1;
	}
	if (mixed_parentage) common_parent = nothing;

	if (length == 0) {
    	if (style & ISARE_BIT ~= 0) LIST_WRITER_INTERNAL_RM('W');
    	else if (style & CFIRSTART_BIT ~= 0) LIST_WRITER_INTERNAL_RM('X');
		else LIST_WRITER_INTERNAL_RM('Y');
	} else {
		@push MarkedObjectArray; @push MarkedObjectLength;
		MarkedObjectArray = RequisitionStack(length);
		MarkedObjectLength = length;
		if (MarkedObjectArray == 0) return RunTimeProblem(RTP_LISTWRITERMEMORY); 

		if (common_parent) {
			ObjectTreeCoalesce(child(common_parent));
			length = 0;
			objectloop (obj in common_parent) ! object tree order
				if (obj has workflag2) MarkedObjectArray-->length++ = obj;
		} else {
			length = 0;
			objectloop (obj ofclass Object) ! object number order
				if (obj has workflag2) MarkedObjectArray-->length++ = obj;
		}

		WriteListFrom(first, style, 0, false, MarkedListIterator);

		FreeStack(MarkedObjectArray);
		@pull MarkedObjectLength; @pull MarkedObjectArray;
	}
	prior_named_list = length;
	prior_named_list_gender = gc;
	return;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: List Number and Gender
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RegardingMarkedObjects
	obj length g gc;
	gc = -2;
	objectloop (obj ofclass Object && obj has workflag2) {
		length++;
		g = GetGNAOfObject(obj); g = g%3;
		if (gc == -2) {
			gc = g;
			prior_named_noun = obj;
		} else if (gc ~= g) gc = -1;
	}
	prior_named_list = length;
	prior_named_list_gender = gc;
	if (length == 0) { prior_named_noun = nothing; prior_named_list_gender = -1; }
	return;	
];

[ RegardingSingleObject obj;
	prior_named_list = 1;
	prior_named_list_gender = -1;
	prior_named_noun = obj;
];

[ RegardingNumber n;
	prior_named_list = n;
	prior_named_list_gender = -1;
	prior_named_noun = nothing;
];

[ PNToVP gna;
	if (prior_named_noun == player) return story_viewpoint;
	if (prior_named_noun) gna = GetGNAOfObject(prior_named_noun);
	if (((gna%6)/3 == 1) || (prior_named_list >= 2)) return 6;
	return 3;
];

[ PrintVerbAsValue vb;
	if (vb == 0) print "(no verb)";
	else { print "verb "; vb(1); }
];

[ VerbIsMeaningful vb;
	if ((vb) && (BlkValueCompare(vb(CV_MEANING), Rel_Record_0) ~= 0)) rtrue;
	rfalse;
];

[ VerbIsModal vb;
	if ((vb) && (vb(CV_MODAL))) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: List Writer Regard Storage
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array LWI_Storage --> 1 (-1) nothing;
[ SetLWI a b c;
	LWI_Storage-->0 = a;
	LWI_Storage-->1 = b;
	LWI_Storage-->2 = c;
];
[ RegardingLWI;
	prior_named_list = LWI_Storage-->0;
	prior_named_list_gender = LWI_Storage-->1;
	prior_named_noun = LWI_Storage-->2;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Response Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ResponseViaActivity R;
	@push prior_named_noun; @push prior_named_list; @push prior_named_list_gender;
	RegardingSingleObject(nothing);
	CarryOutActivity(PRINTING_RESPONSE_ACT, R);
	@pull prior_named_list_gender; @pull prior_named_list; @pull prior_named_noun;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: About Iterator Functions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant SEEK_ITF = 0;
Constant ADVANCE_ITF = 1;
Constant COALESCE_ITF = 2;
Constant START_ITF = 3;

! Constant DBLW; ! Uncomment this to provide debugging information at run-time


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Marked List Iterator
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MarkedListIterator obj depth required_lt function i;
    if (obj == nothing) return nothing;
    if (required_lt == 0) required_lt = EMPTY_TEXT_VALUE;
	switch(function) {
    	START_ITF: return MarkedObjectArray-->0;
    	COALESCE_ITF: return MarkedListCoalesce();
    	SEEK_ITF, ADVANCE_ITF:
			for (i=0: i<MarkedObjectLength: i++)
				if (MarkedObjectArray-->i == obj) {
					if (function == ADVANCE_ITF) i++;
					for (:i<MarkedObjectLength: i++) {
						obj = MarkedObjectArray-->i;
						if ((LT_Compare(required_lt, EMPTY_TEXT_VALUE) ~= 0) &&
							(LT_Compare(obj.list_together, required_lt) ~= 0)) continue;
						if ((c_style & WORKFLAG_BIT) && (depth==0) && (obj hasnt workflag))
							continue;
						if ((c_style & CONCEAL_BIT) && (ConcealedFromLists(obj))) continue;
						return obj;
					}
					return nothing;
				}
	}
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Concealment
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ConcealedFromLists obj c;
	if ((obj has concealed) || (obj has scenery)) rtrue;
	c = parent(obj);
	if ((c) && (c ofclass K5_container or K6_supporter) && (TestConcealment(c, obj))) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Coalesce Marked List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MarkedListCoalesce o i lt l swap m;
	for (i=0: i<MarkedObjectLength: i++) {
		lt = (MarkedObjectArray-->i).list_together;
		if (LT_Compare(lt, EMPTY_TEXT_VALUE) ~= 0) {
			! Find first object in list after contiguous run with this list_together value:
			for (i++: (i<MarkedObjectLength) &&
				(LT_Compare((MarkedObjectArray-->i).list_together, lt) == 0): i++) ;
			! If the contiguous run extends to end of list, the list is now perfect:
			if (i == MarkedObjectLength) return MarkedObjectArray-->0;
			! And otherwise we look to see if any future entries belong in the earlier run:
			for (l=i+1: l<MarkedObjectLength: l++)
				if (LT_Compare((MarkedObjectArray-->l).list_together, lt) == 0) {
					! Yes, they do: so we perform a rotation to insert it before element i:
					swap = MarkedObjectArray-->l;
					for (m=l: m>i: m--) MarkedObjectArray-->m = MarkedObjectArray-->(m-1);
					MarkedObjectArray-->i = swap;
					! And now the run is longer:
					i++;
					if (i == MarkedObjectLength) return MarkedObjectArray-->0;
				}
			i--;
		}
	}
	return MarkedObjectArray-->0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Object Tree Iterator
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global list_filter_routine;

[ ObjectTreeIterator obj depth required_lt function;
    if ((obj == nothing) || (parent(obj) == nothing)) return nothing;
	if (function == START_ITF) obj = child(parent(obj));
	if (function == COALESCE_ITF) return ObjectTreeCoalesce(obj);
    if (function == ADVANCE_ITF) obj = sibling(obj);
    if (required_lt == 0) required_lt = EMPTY_TEXT_VALUE;
    for (:: obj = sibling(obj)) {
        if (obj == nothing) return nothing;
!if (function == ADVANCE_ITF) print "Considering ", (the) obj, ": ", (TEXT_TY_Say) obj.list_together, ": ", (TEXT_TY_Say) required_lt, ": ", ": ", (TEXT_TY_Say) lt_value, ": ", LT_Compare(obj.list_together, required_lt), "^";
		if ((LT_Compare(required_lt, EMPTY_TEXT_VALUE) ~= 0) &&
			(LT_Compare(obj.list_together, required_lt) ~= 0)) continue;
		if ((c_style & WORKFLAG_BIT) && (depth==0) && (obj hasnt workflag)) continue;
		if (obj hasnt list_filter_permits) continue;
		if ((c_style & CONCEAL_BIT) && (ConcealedFromLists(obj))) continue;
		return obj;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Coalesce Object Tree
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ObjectTreeCoalesce obj memb lt later;
	#Ifdef DBLW; print "^^Sorting out: "; DiagnoseSortList(obj); #Endif;
	.StartAgain;
	for (memb=obj: memb~=nothing: memb=sibling(memb)) {
		lt = memb.list_together;
		if (LT_Compare(lt, EMPTY_TEXT_VALUE) ~= 0) {
			! Find first object in list after contiguous run with this list_together value:
			for (memb=sibling(memb):
				(memb) && (LT_Compare(memb.list_together, lt) == 0): memb = sibling(memb)) ;
			! If the contiguous run extends to end of list, the list is now perfect:
			if (memb == 0) return obj;
			! And otherwise we look to see if any future entries belong in the earlier run:
			for (later=sibling(memb): later: later=sibling(later))
				if (LT_Compare(later.list_together, lt) == 0) {
					! Yes, they do: so we perform a regrouping of the list and start again:
					obj = GroupChildren(parent(obj), lt);
					#Ifdef DBLW; print "^^Sorted to: "; DiagnoseSortList(obj); #Endif;
					jump StartAgain;
				}
		}
	}
	return obj;
];
#Ifdef DBLW;
[ DiagnoseSortList obj memb;
    for (memb=child(obj): memb~=nothing: memb=sibling(memb)) print memb, " --> "; new_line;
];
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: WriteListFrom
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteListFrom first style depth noactivity iter a ol;
	@push c_iterator; @push c_style; @push c_depth; @push c_margin;
    if (iter) c_iterator = iter; else c_iterator = ObjectTreeIterator;
    c_style = style; c_depth = depth;
	c_margin = 0; if (style & EXTRAINDENT_BIT) c_margin = 1;

	objectloop (a ofclass Object) {
		give a list_filter_permits;
		if ((list_filter_routine) && (list_filter_routine(a) == false))
			give a ~list_filter_permits;
	}

    first = c_iterator(first, depth, 0, START_ITF);
	if (first == nothing) {
		if (style & ISARE_BIT ~= 0) LIST_WRITER_INTERNAL_RM('W');
        else LIST_WRITER_INTERNAL_RM('Y');
        if (style & NEWLINE_BIT ~= 0) new_line;
    } else {
		if ((noactivity) || (iter)) {
			WriteListR(first, c_depth, true);
			say__p = 1;
		} else {
			objectloop (ol provides list_together)
				BlkValueCopy(ol.list_together, EMPTY_TEXT_VALUE);
			CarryOutActivity(LISTING_CONTENTS_ACT, parent(first));
		}
	}

    @pull c_margin; @pull c_depth; @pull c_style; @pull c_iterator;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Standard Contents Listing Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STANDARD_CONTENTS_LISTING_R;
	WriteListFrom(child(parameter_value), c_style, c_depth, true);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Partitioning
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef DBLW;
Global DBLW_no_classes; Global DBLW_no_objs;
[ DebugPartition partition_class_sizes partition_classes first depth i k o;
	print "[Length of list is ", DBLW_no_objs, " with ", k, " plural.]^";
	print "[Partitioned into ", DBLW_no_classes, " equivalence classes.]^";
    for (i=1: i<=DBLW_no_classes : i++) {
    	print "Class ", i, " has size ", partition_class_sizes->i, "^";
	}
	for (k=0, o=first: k<DBLW_no_objs : k++, o = c_iterator(o, depth, lt_value, ADVANCE_ITF)) {
    	print "Entry ", k, " has class ", partition_classes->k,
    		" represented by ", o, " with L=", o.list_together, "^";
	}
];
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Partition List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PartitionList first no_objs depth partition_classes partition_class_sizes
	i k l n m;
    for (i=0: i<no_objs: i++) partition_classes->i = 0;
    n = 1;
    for (i=first, k=0: k<no_objs: i=c_iterator(i, depth, lt_value, ADVANCE_ITF), k++)
        if (partition_classes->k == 0) {
            partition_classes->k = n; partition_class_sizes->n = 1;
            for (l=c_iterator(i, depth, lt_value, ADVANCE_ITF), m=k+1:
            	(l~=0) && (m<no_objs):
            	l=c_iterator(l, depth, lt_value, ADVANCE_ITF), m++) {
                if ((partition_classes->m == 0) && (ListEqual(i, l))) {
                    if (partition_class_sizes->n < 255) (partition_class_sizes->n)++;
                    partition_classes->m = n;
                }
            }
            if (n < 255) n++;
        }
    n--;
	#Ifdef DBLW;
	DBLW_no_classes = n; DBLW_no_objs = no_objs;
	DebugPartition(partition_class_sizes, partition_classes, first, depth);
	#Endif;
    return n;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Equivalence Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ListEqual o1 o2;
	if ((o1.plural == 0) || (o2.plural == 0)) rfalse;
 	if (child(o1) ~= 0 && WillRecurs(o1) ~= 0) rfalse;
    if (child(o2) ~= 0 && WillRecurs(o2) ~= 0) rfalse;
    if (c_style & (FULLINV_BIT + PARTINV_BIT) ~= 0) {
        if ((o1 hasnt worn && o2 has worn) || (o2 hasnt worn && o1 has worn)) rfalse;
        if ((o1 hasnt light && o2 has light) || (o2 hasnt light && o1 has light)) rfalse;
        if (o1 has container) {
            if (o2 hasnt container) rfalse;
            if ((o1 has open && o2 hasnt open) || (o2 has open && o1 hasnt open))
                rfalse;
        }
        else if (o2 has container)
            rfalse;
    }
    return Identical(o1, o2);
];

[ WillRecurs o;
    if (c_style & ALWAYS_BIT ~= 0) rtrue;
    if (c_style & RECURSE_BIT == 0) rfalse;
    if ((o has supporter) || ((o has container) && (o has open or transparent))) rtrue;
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Grouping
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NumberOfGroupsInList o no_classes depth partition_classes partition_class_sizes
	no_groups cl memb k current_lt lt;
	current_lt = EMPTY_TEXT_VALUE;
	lt = EMPTY_TEXT_VALUE;
	no_groups = no_classes;
    for (cl=1, memb=o, k=0: cl<=no_classes: cl++) {
    	! Advance to first member of class number cl
        while (partition_classes->k ~= cl) {
            k++; memb = c_iterator(memb, depth, lt_value, ADVANCE_ITF);
        }
        if (memb) { ! In case of accidents, but should always happen
        	lt = memb.list_together;
        	if ((LT_Compare(lt, lt_value) ~= 0) &&
            	(LT_Compare(lt, EMPTY_TEXT_VALUE) ~= 0) &&
            	(LT_Compare(lt, current_lt) == 0)) {
            	no_groups--;
            }
            current_lt = lt;
        }
    }
 	#Ifdef DBLW; print "[There are ", no_groups, " groups.]^"; #Endif;
	return no_groups;
];

[ LT_Compare lt1 lt2;
	if (lt1 == lt2) return 0;
	if (lt1 == 0) lt1 = EMPTY_TEXT_VALUE;
	if (lt2 == 0) lt2 = EMPTY_TEXT_VALUE;
	if (TEXT_TY_IsSubstituted(lt1) == false) {
		if (TEXT_TY_IsSubstituted(lt2) == false) return (lt1-->1)-(lt2-->1);
		return -1;
	}
	if (TEXT_TY_IsSubstituted(lt2) == false) {
		return -1;
	}
	return BlkValueCompare(lt1, lt2);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Write List Recursively
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteListR o depth from_start
	partition_classes partition_class_sizes
	cl memb index k2 l m no_classes q groups_to_do current_lt;
    if (o == nothing) return; ! An empty list: no output

    if (from_start) {
    	o = c_iterator(o, depth, 0, COALESCE_ITF); ! Coalesce list and choose new start
	}
    o = c_iterator(o, depth, 0, SEEK_ITF); ! Find first entry in list from o
    if (o == nothing) return;

	! Count index = length of list
    for (memb=o, index=0: memb: memb=c_iterator(memb, depth, lt_value, ADVANCE_ITF)) index++;

    if (c_style & ISARE_BIT ~= 0) {
    	SetLWI(index, -1, o);
    	LIST_WRITER_INTERNAL_RM('V', o);
    	if (c_style & NEWLINE_BIT ~= 0)   print ":^";
        else                              print (char) ' ';
        c_style = c_style - ISARE_BIT;
    }

    partition_classes = RequisitionStack(index/WORDSIZE + 2);
    partition_class_sizes = RequisitionStack(index/WORDSIZE + 2);
    if ((partition_classes == 0) || (partition_class_sizes == 0))
    	return RunTimeProblem(RTP_LISTWRITERMEMORY);

	no_classes =
		PartitionList(o, index, depth, partition_classes, partition_class_sizes);

	groups_to_do =
		NumberOfGroupsInList(o, no_classes, depth, partition_classes, partition_class_sizes);

    for (cl=1, memb=o, index=0, current_lt=EMPTY_TEXT_VALUE: groups_to_do>0: cl++) {
		! Set memb to first object of partition class cl
        while (partition_classes->index ~= cl) {
        	index++; memb=c_iterator(memb, depth, lt_value, ADVANCE_ITF);
            if (memb==0) { print "*** Error in list-writer ***^"; return; }
        }

    	#Ifdef DBLW;
		! DebugPartition(partition_class_sizes, partition_classes, o, depth);
		print "^[Class ", cl, " of ", no_classes, ": first object ", memb,
			" (", memb.list_together, "); groups_to_do ", groups_to_do, ",
			current_lt=", current_lt, " listing_size=", listing_size,
			" lt_value=", lt_value, " memb.list_together=", memb.list_together, "]^";
    	#Endif;

		if ((LT_Compare(memb.list_together, lt_value) == 0) ||
        	(LT_Compare(memb.list_together, EMPTY_TEXT_VALUE) == 0)) current_lt = EMPTY_TEXT_VALUE;
		else {
            if (LT_Compare(memb.list_together, current_lt) == 0) continue;
            
            ! Otherwise this class begins a new group
            @push listing_size;
            q = memb; listing_size = 1; l = index; m = cl;
			while (m < no_classes &&
				(LT_Compare(q.list_together, memb.list_together) == 0)) {
				m++;
				while (partition_classes->l ~= m) {
					l++; q = c_iterator(q, depth, lt_value, ADVANCE_ITF);
				}
				if (LT_Compare(q.list_together, memb.list_together) == 0)
					listing_size++;
			}

			if (listing_size > 1) {
				! The new group contains more than one partition class
				WriteMultiClassGroup(cl, memb, depth, partition_class_sizes);
				current_lt = memb.list_together;
				jump GroupComplete;
			}
			current_lt = EMPTY_TEXT_VALUE;
			@pull listing_size;
		}

		WriteSingleClassGroup(cl, memb, depth, partition_class_sizes->cl);

		.GroupComplete;
		groups_to_do--;
        if (c_style & ENGLISH_BIT ~= 0) {
            if (groups_to_do == 1) {
            	#ifdef SERIAL_COMMA; if (cl > 1) print ","; #endif;
               LIST_WRITER_INTERNAL_RM('C');
            }
            if (groups_to_do > 1) print ", ";
        }
    }

    FreeStack(partition_class_sizes);
    FreeStack(partition_classes);
]; ! end of WriteListR


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Write Multiple Class Group
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteMultiClassGroup cl memb depth partition_class_sizes pv q k2 l;
	! Save the style, because the activity below is allowed to change it
	q = c_style;
	if (c_style & INDENT_BIT ~= 0) PrintSpaces(2*(depth+c_margin));

	BeginActivity(GROUPING_TOGETHER_ACT, memb);

	if (ForActivity(GROUPING_TOGETHER_ACT, memb)) {
		c_style = c_style &~ NEWLINE_BIT;
	} else {
		pv = memb.list_together;
		if (TEXT_TY_IsSubstituted(pv) == false) {
			inventory_stage = 1;
			parser_one = memb; parser_two = depth + c_margin;
			if ((pv-->1)() == 1) jump Omit__Sublist2;
		} else if (pv) {
			! Set k2 to the number of objects covered by the group
			k2 = 0;
			for (l=0 : l<listing_size : l++) k2 = k2 + partition_class_sizes->(l+cl);
			EnglishNumber(k2); print " ";
			print (TEXT_TY_Say) pv;
			if (c_style & ENGLISH_BIT ~= 0) print " (";
			if (c_style & INDENT_BIT ~= 0)  print ":^";
		}

		c_margin++;
		@push lt_value; @push listing_together; @push listing_size;
		
		lt_value = memb.list_together; listing_together = memb;
		#Ifdef DBLW; print "^^DOWN lt_value = ", lt_value, " listing_together = ", memb, "^^";
		@push DBLW_no_classes; @push DBLW_no_objs; #Endif;
		WriteListR(memb, depth, false); 
		#Ifdef DBLW; print "^^UP^^"; @pull DBLW_no_objs; @pull DBLW_no_classes; #Endif;

		@pull listing_size; @pull listing_together; @pull lt_value;
		c_margin--;
		
		pv = memb.list_together;
		if (TEXT_TY_IsSubstituted(pv) == false) {
			inventory_stage = 2;
			parser_one = memb; parser_two = depth+c_margin;
			(pv-->1)();
		} else if (LT_Compare(pv, EMPTY_TEXT_VALUE) ~= 0) {
			if (q & ENGLISH_BIT ~= 0) print ")";
		}
		.Omit__Sublist2;
	}
  
	EndActivity(GROUPING_TOGETHER_ACT, memb);

	! If the NEWLINE_BIT has been forced by the activity, act now
	! before it vanishes...
	if (q & NEWLINE_BIT ~= 0 && c_style & NEWLINE_BIT == 0) new_line;

	! ...when the original style is restored again:
	c_style = q;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Write Single Class Group
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteSingleClassGroup cl memb depth size q;
	q = c_style;
    if (c_style & INDENT_BIT) PrintSpaces(2*(depth+c_margin));
	if (size == 1) {
		if (c_style & NOARTICLE_BIT ~= 0) print (name) memb;
		else {
			if (c_style & DEFART_BIT) {
				if ((cl == 1) && (c_style & CFIRSTART_BIT)) print (The) memb;
				else print (the) memb;
			} else {
				if ((cl == 1) && (c_style & CFIRSTART_BIT)) print (CIndefArt) memb;
				else print (a) memb;
			}
		}
	} else {
		if (c_style & DEFART_BIT) {
			if ((cl == 1) && (c_style & CFIRSTART_BIT)) PrefaceByArticle(memb, 0, size);
			else PrefaceByArticle(memb, 1, size);
		}
		@push listing_size; listing_size = size;
		CarryOutActivity(PRINTING_A_NUMBER_OF_ACT, memb);
		@pull listing_size;
	}
	if ((size > 1) && (memb hasnt pluralname)) {
		give memb pluralname;
		WriteAfterEntry(memb, depth);
		give memb ~pluralname;
	} else WriteAfterEntry(memb, depth);
	c_style = q;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Write After Entry
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteAfterEntry o depth
    p recurse_flag parenth_flag eldest_child child_count combo;

    inventory_stage = 2;
    if (c_style & PARTINV_BIT) {
        BeginActivity(PRINTING_ROOM_DESC_DETAILS_ACT, o);
        if (ForActivity(PRINTING_ROOM_DESC_DETAILS_ACT, o) == false) {
			combo = 0;
			if (o has light && location hasnt light) combo=combo+1;
			if (o has container && o hasnt open)     combo=combo+2;
			if ((o has container && (o has open || o has transparent))
				&& (child(o)==0))                    combo=combo+4;
			if (combo) LIST_WRITER_INTERNAL_RM('A'); ! space and open bracket
			switch (combo) {
				1: LIST_WRITER_INTERNAL_RM('D', o);
				2: LIST_WRITER_INTERNAL_RM('E', o);
				3: LIST_WRITER_INTERNAL_RM('H', o);
				4: LIST_WRITER_INTERNAL_RM('F', o);
				5: LIST_WRITER_INTERNAL_RM('I', o);
				6: LIST_WRITER_INTERNAL_RM('G', o);
				7: LIST_WRITER_INTERNAL_RM('J', o);
			}
			if (combo) LIST_WRITER_INTERNAL_RM('B'); ! close bracket
		}
        EndActivity(PRINTING_ROOM_DESC_DETAILS_ACT, o);
    }   ! end of PARTINV_BIT processing

    if (c_style & FULLINV_BIT) {
        BeginActivity(PRINTING_INVENTORY_DETAILS_ACT, o);
        if (ForActivity(PRINTING_INVENTORY_DETAILS_ACT, o) == false) {
			if (o has light && o has worn) { LIST_WRITER_INTERNAL_RM('A'); LIST_WRITER_INTERNAL_RM('K', o);  parenth_flag = true; }
			else {
				if (o has light)           { LIST_WRITER_INTERNAL_RM('A'); LIST_WRITER_INTERNAL_RM('D', o);  parenth_flag = true; }
				if (o has worn)            { LIST_WRITER_INTERNAL_RM('A'); LIST_WRITER_INTERNAL_RM('L', o); parenth_flag = true; }
			}
	
			if (o has container)
				if (o has openable) {
					if (parenth_flag) {
						#Ifdef SERIAL_COMMA; print ","; #Endif;
						LIST_WRITER_INTERNAL_RM('C');
					} else            LIST_WRITER_INTERNAL_RM('A', o);
					if (o has open)
						if (child(o)) LIST_WRITER_INTERNAL_RM('M', o);
						else          LIST_WRITER_INTERNAL_RM('N', o);
					else
						if (o has lockable && o has locked) LIST_WRITER_INTERNAL_RM('P', o);
						else                                LIST_WRITER_INTERNAL_RM('O', o);
					parenth_flag = true;
				}
				else
					if (child(o)==0 && o has transparent)
						if (parenth_flag) { LIST_WRITER_INTERNAL_RM('C'); LIST_WRITER_INTERNAL_RM('F'); }
						else              { LIST_WRITER_INTERNAL_RM('A'); LIST_WRITER_INTERNAL_RM('F'); LIST_WRITER_INTERNAL_RM('B'); }
	
			if (parenth_flag) LIST_WRITER_INTERNAL_RM('B');
		}
        EndActivity(PRINTING_INVENTORY_DETAILS_ACT, o);
    }   ! end of FULLINV_BIT processing

	child_count = 0;
	eldest_child = nothing;
	objectloop (p in o)
		if ((c_style & CONCEAL_BIT == 0) || (ConcealedFromLists(p) == false))
			if (p has list_filter_permits) {
				child_count++;
				if (eldest_child == nothing) eldest_child = p;
			}

    if (child_count && (c_style & ALWAYS_BIT)) {
        if (c_style & ENGLISH_BIT) { print " "; LIST_WRITER_INTERNAL_RM('Q', o); print " "; }
        recurse_flag = true;
    }
    
    if (child_count && (c_style & RECURSE_BIT)) {
        if (o has supporter) {
            if (c_style & ENGLISH_BIT) {
                if (c_style & TERSE_BIT) {
                	LIST_WRITER_INTERNAL_RM('A', o);
                	LIST_WRITER_INTERNAL_RM('R', o);
                } else LIST_WRITER_INTERNAL_RM('S', o);
            }
            recurse_flag = true;
        }
        if (o has container && (o has open || o has transparent)) {
            if (c_style & ENGLISH_BIT) {
                if (c_style & TERSE_BIT) {
                	LIST_WRITER_INTERNAL_RM('A', o);
                	LIST_WRITER_INTERNAL_RM('T', o);
                } else LIST_WRITER_INTERNAL_RM('U', o);
            }
            recurse_flag = true;
        }
    }

    if (recurse_flag && (c_style & ENGLISH_BIT)) {
    	SetLWI(child_count, -1, eldest_child);
    	LIST_WRITER_INTERNAL_RM('V', o); print " ";
	}

    if (c_style & NEWLINE_BIT) new_line;

    if (recurse_flag) {
        o = child(o);
        @push lt_value; @push listing_together; @push listing_size;
        @push c_iterator;
        c_iterator = ObjectTreeIterator;
        lt_value = EMPTY_TEXT_VALUE; listing_together = 0; listing_size = 0;
        WriteListR(o, depth+1, true);
        @pull c_iterator;
        @pull listing_size; @pull listing_together; @pull lt_value;
        if (c_style & TERSE_BIT) LIST_WRITER_INTERNAL_RM('B');
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Internal Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_WRITER_INTERNAL_R;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: Saying Phrases
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SayPhraseName closure;
	if (closure == 0) print "nothing";
	else print (string) closure-->2;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: Kinds
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ KindAtomic kind;
	if ((kind >= 0) && (kind < BASE_KIND_HWM)) return kind;
	return kind-->0;
];

[ KindBaseArity kind;
	if ((kind >= 0) && (kind < BASE_KIND_HWM)) return 0;
	return kind-->1;
];

[ KindBaseTerm kind n;
	if ((kind >= 0) && (kind < BASE_KIND_HWM)) return UNKNOWN_TY;
	return kind-->(2+n);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: DigitToValue
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DigitToValue c n;
	n = c-'0';
	if ((n<0) || (n>9)) return -1;
	return n;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: GenerateRandomNumber
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GenerateRandomNumber n m s;
	if (n==m) return n;
	if (n>m) { s = n; n = m; m = s; }
	n--;
	return random(m-n) + n;
];
Constant R_DecimalNumber = GenerateRandomNumber;
Constant R_PrintTimeOfDay = GenerateRandomNumber;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: GroupChildren
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GroupChildren par value;
    while (child(par) ~= 0) {
        if (LT_Compare(child(par).list_together, value) ~= 0)
        	move child(par) to out_obj;
        else
        	move child(par) to in_obj;
    }
    while (child(in_obj) ~= 0)  move child(in_obj) to par;
    while (child(out_obj) ~= 0) move child(out_obj) to par;
    return child(par);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: PrintSpaces
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintSpaces n;
    while (n > 0) {
        print " ";
        n = n - 1;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: RunRoutines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RunRoutines obj prop;
    if (obj == thedark) obj = real_location;
    if ((obj.&prop == 0) && (prop >= INDIV_PROP_START)) rfalse;
    return obj.prop();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: SwapWorkflags
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SwapWorkflags obj lst;
	objectloop (obj ofclass Object) {
		lst = false;
		if (obj has workflag2) lst = true;
		give obj ~workflag2;
		if (obj has workflag) give obj workflag2;
		give obj ~workflag;
		if (lst) give obj workflag;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: TestUseOption
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant NO_USE_OPTIONS = 28;
[ TestUseOption 
    UO ! Implied call parameter
    ;
    if (UO == 1) rtrue;
    if (UO == 2) rtrue;
    if (UO == 3) rtrue;
    if (UO == 4) rtrue;
    rfalse;
];
[ PrintUseOption 
    UO ! Implied call parameter
    ;
    switch(UO) {
        0: print "ineffectual option";
        1: print "dynamic memory allocation option [8192]";
        2: print "maximum text length option [1024]";
        3: print "index figure thumbnails option [50]";
        4: print "maximum things understood at once option [100]";
        5: print "American dialect option";
        6: print "serial comma option";
        7: print "full-length room descriptions option";
        8: print "abbreviated room descriptions option";
        9: print "memory economy option";
        10: print "authorial modesty option";
        11: print "scoring option";
        12: print "no scoring option";
        13: print "engineering notation option";
        14: print "unabbreviated object names option";
        15: print "command line echoing option";
        16: print "manual pronouns option";
        17: print "undo prevention option";
        18: print "predictable randomisation option";
        19: print "fast route-finding option";
        20: print "slow route-finding option";
        21: print "numbered rules option";
        22: print "telemetry recordings option";
        23: print "no deprecated features option";
        24: print "gn testing version option";
        25: print "VERBOSE room descriptions option";
        26: print "BRIEF room descriptions option";
        27: print "SUPERBRIEF room descriptions option";
    }
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: IntegerDivide
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IntegerDivide A B;
	if (B == 0) { RunTimeProblem(RTP_DIVZERO); rfalse; }
	return A/B;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: IntegerRemainder
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IntegerRemainder A B;
	if (B == 0) { RunTimeProblem(RTP_DIVZERO); rfalse; }
	return A%B;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: UnsignedCompare
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ UnsignedCompare x y u v;
	#Ifdef TARGET_GLULX;
	@jleu x y ?lesseq;
	return 1;
	.lesseq;
	@jeq x y ?equal;
	return -1;
	.equal;
	return 0;
	#Ifnot;
    if (x == y) return 0;
    if (x < 0 && y >= 0) return 1;
    if (x >= 0 && y < 0) return -1;
    u = x&~WORD_HIGHBIT; v= y&~WORD_HIGHBIT;
    if (u > v) return 1;
    return -1;
    #Endif;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: SignedCompare
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SignedCompare x y;
	if (x > y) return 1;
	if (x == y) return 0;
	return -1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: ZRegion
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ZRegion addr;
    switch (metaclass(addr)) {
		nothing: return 0;
		Object, Class: return 1;
		Routine: return 2;
		String: return 3;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: Memcpy
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Memcpy to_addr from_addr size  n;
#Ifdef TARGET_ZCODE;
	for (n = size/WORDSIZE: (n--) > 0: ) to_addr-->n = from_addr-->n;
	for (n = size: ((n--) % WORDSIZE ~= 0): ) to_addr->n = from_addr->n;
#Ifnot; ! TARGET_GLULX
    @mcopy size from_addr to_addr;
#Endif; ! TARGET_
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: Arrcpy
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Arrcpy to_array to_entry_size from_array from_entry_size no_entries  n val;
	if (to_entry_size == from_entry_size)
		Memcpy(to_array, from_array, to_entry_size*no_entries);
	else if ((to_entry_size == 2) && (from_entry_size == 4)) {
		for (n = 0: n<no_entries: n++) {
			val = from_array-->n;
			to_array->0 = (val/256)%256; to_array->1 = val%256;
			to_array = to_array + 2;
		}
	} else "*** Arrcpy doesn't support this ***";
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Parser
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Object InformParser "(Inform Parser)" has proper;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Grammar Line Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global best_etype;                  ! Preferred error number so far
Global nextbest_etype;              ! Preferred one, if ASKSCOPE_PE disallowed

Global parser_inflection;           ! A property (usually "name") to find object names in

Array pattern --> 32;               ! For the current pattern match
Global pcount;                      ! and a marker within it
Array pattern2 --> 32;              ! And another, which stores the best match
Global pcount2;                     ! so far

Array  line_ttype-->32;             ! For storing an analysed grammar line
Array  line_tdata-->32;
Array  line_token-->32;

Global nsns;                        ! Number of special_numbers entered so far

Global params_wanted;               ! Number of parameters needed (which may change in parsing)

Global inferfrom;                   ! The point from which the rest of the command must be inferred
Global inferword;                   ! And the preposition inferred
Global dont_infer;                  ! Another dull flag

Global cobj_flag = 0;

Global oops_from;                   ! The "first mistake" word number
Global saved_oops;                  ! Used in working this out
Array  oops_workspace -> 64;        ! Used temporarily by "oops" routine

Global held_back_mode;              ! Flag: is there some input from last time
Global hb_wn;                       ! left over?  (And a save value for wn.)
                                    ! (Used for full stops and "then".)

Global usual_grammar_after;         ! Point from which usual grammar is parsed (it may vary from
                                    ! the above if user's routines match multi-word verbs)


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Grammar Token Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant PATTERN_NULL = $ffff;      ! Entry for a token producing no text

Global found_ttype;                 ! Used to break up tokens into type
Global found_tdata;                 ! and data (by AnalyseToken)
Global token_filter;                ! For noun filtering by user routines

Global length_of_noun;              ! Set by NounDomain to no of words in noun

Global lookahead;                   ! The token after the one now being matched

Global multi_mode;                  ! Multiple mode
Global multi_wanted;                ! Number of things needed in multitude
Global multi_had;                   ! Number of things actually found
Global multi_context;               ! What token the multi-obj was accepted for

Global indef_mode;                  ! "Indefinite" mode - ie, "take a brick"
                                    ! is in this mode
Global indef_type;                  ! Bit-map holding types of specification
Global indef_wanted;                ! Number of items wanted (INDEF_ALL_WANTED for all)
Constant INDEF_ALL_WANTED = 32767;
Global indef_guess_p;               ! Plural-guessing flag
Global indef_owner;                 ! Object which must hold these items
Global indef_cases;                 ! Possible gender and numbers of them
Global indef_possambig;             ! Has a possibly dangerous assumption
                                    ! been made about meaning of a descriptor?
Global indef_nspec_at;              ! Word at which a number like "two" was parsed
                                    ! (for backtracking)
Global allow_plurals;               ! Whether plurals presently allowed or not

Global take_all_rule;               ! Slightly different rules apply to "take all" than other uses
                                    ! of multiple objects, to make adjudication produce more
                                    ! pragmatically useful results
                                    ! (Not a flag: possible values 0, 1, 2)

Global dict_flags_of_noun;          ! Of the noun currently being parsed
                                    ! (a bitmap in #dict_par1 format)
Global pronoun__word;               ! Saved value
Global pronoun__obj;                ! Saved value

Constant comma_word = 'comma,';     ! An "untypeable word" used to substitute
                                    ! for commas in parse buffers


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Match List Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array  match_list --> MATCH_LIST_WORDS;    ! An array of matched objects so far
Array  match_classes --> MATCH_LIST_WORDS; ! An array of equivalence classes for them
Array  match_scores --> MATCH_LIST_WORDS;  ! An array of match scores for them
Global number_matched;              ! How many items in it?  (0 means none)
Global number_of_classes;           ! How many equivalence classes?
Global match_length;                ! How many words long are these matches?
Global match_from;                  ! At what word of the input do they begin?


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Words
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef TARGET_ZCODE;
[ WordCount; return parse->1; ];
[ WordAddress wordnum; return buffer + parse->(wordnum*4+1); ];
[ WordLength wordnum; return parse->(wordnum*4); ];
#Ifnot;
[ WordCount; return parse-->0; ];
[ WordAddress wordnum; return buffer + parse-->(wordnum*3); ];
[ WordLength wordnum; return parse-->(wordnum*3-1); ];
#Endif;

[ WordFrom w p i j wc;
	#Ifdef TARGET_ZCODE; wc = p->1; i = w*2-1;
	#Ifnot; wc = p-->0; i = w*3-2; #Endif;
    if ((w < 1) || (w > wc)) return 0;
    j = p-->i;
    if (j == ',//') j = comma_word;
    if (j == './/') j = THEN1__WD;
    return j;
];

[ NextWord i j wc;
	#Ifdef TARGET_ZCODE; wc = parse->1; i = wn*2-1;
	#Ifnot; wc = parse-->0; i = wn*3-2; #Endif;
    wn++;
    if ((wn < 2) || (wn > wc+1)) return 0;
    j = parse-->i;
    if (j == ',//') j = comma_word;
    if (j == './/') j = THEN1__WD;
    return j;
];

[ NextWordStopped wc;
	#Ifdef TARGET_ZCODE; wc = parse->1; #Ifnot; wc = parse-->0; #Endif;
	if ((wn < 1) || (wn > wc)) { wn++; return -1; }
    return NextWord();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Snippets
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintSnippet snip from to i w1 w2;
	w1 = snip/100; w2 = w1 + (snip%100) - 1;
	if ((w2<w1) || (w1<1) || (w2>WordCount())) {
		if ((w1 == 1) && (w2 == 0)) rfalse;
		return RunTimeProblem(RTP_SAYINVALIDSNIPPET, w1, w2);
	}
	from = WordAddress(w1); to = WordAddress(w2) + WordLength(w2) - 1;
	for (i=from: i<=to: i++) print (char) i->0;
];

[ SpliceSnippet snip t i w1 w2 nextw at endsnippet newlen;
	w1 = snip/100; w2 = w1 + (snip%100) - 1;
	if ((w2<w1) || (w1<1)) {
		if ((w1 == 1) && (w2 == 0)) return;
		return RunTimeProblem(RTP_SPLICEINVALIDSNIPPET, w1, w2);
	}
	@push say__p; @push say__pc;
	nextw = w2 + 1;
	at = WordAddress(w1) - buffer;
	if (nextw <= WordCount()) endsnippet = 100*nextw + (WordCount() - nextw + 1);
	buffer2-->0 = 120;
	newlen = VM_PrintToBuffer(buffer2, 120, SpliceSnippet__TextPrinter, t, endsnippet);
	for (i=0: (i<newlen) && (at+i<120): i++) buffer->(at+i) = buffer2->(WORDSIZE+i);
	#Ifdef TARGET_ZCODE; buffer->1 = at+i; #ifnot; buffer-->0 = at+i; #endif;
	for (:at+i<120:i++) buffer->(at+i) = ' ';
	VM_Tokenise(buffer, parse);
	players_command = 100 + WordCount();
	@pull say__pc; @pull say__p;
];

[ SpliceSnippet__TextPrinter t endsnippet;
	TEXT_TY_Say(t);
	if (endsnippet) { print " "; PrintSnippet(endsnippet); }
];

[ SnippetIncludes test snippet w1 w2 wlen i j;
	w1 = snippet/100; w2 = w1 + (snippet%100) - 1;
	if ((w2<w1) || (w1<1)) {
		if ((w1 == 1) && (w2 == 0)) rfalse;
		return RunTimeProblem(RTP_INCLUDEINVALIDSNIPPET, w1, w2);
	}
	if (metaclass(test) == Routine) {
		wlen = snippet%100;
		for (i=w1, j=wlen: j>0: i++, j--) {
			if (((test)(i, 0)) ~= GPR_FAIL) return i*100+wn-i;
		}
	}
	rfalse;
];

[ SnippetMatches snippet topic_gpr rv;
	wn=1;
	if (topic_gpr == 0) rfalse;
	if (metaclass(topic_gpr) == Routine) {
		rv = (topic_gpr)(snippet/100, snippet%100);
		if (rv ~= GPR_FAIL) rtrue;
		rfalse;
	}
	RunTimeProblem(RTP_BADTOPIC);
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Unpacking Grammar Lines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ UnpackGrammarLine line_address i size;
    for (i=0 : i<32 : i++) {
        line_token-->i = ENDIT_TOKEN;
        line_ttype-->i = ELEMENTARY_TT;
        line_tdata-->i = ENDIT_TOKEN;
    }
#Ifdef TARGET_ZCODE;
    action_to_be = 256*(line_address->0) + line_address->1;
    action_reversed = ((action_to_be & $400) ~= 0);
    action_to_be = action_to_be & $3ff;
    line_address--;
    size = 3;
#Ifnot; ! GLULX
    @aloads line_address 0 action_to_be;
    action_reversed = (((line_address->2) & 1) ~= 0);
    line_address = line_address - 2;
    size = 5;
#Endif;
    params_wanted = 0;
    for (i=0 : : i++) {
        line_address = line_address + size;
        if (line_address->0 == ENDIT_TOKEN) break;
        line_token-->i = line_address;
        AnalyseToken(line_address);
        if (found_ttype ~= PREPOSITION_TT) params_wanted++;
        line_ttype-->i = found_ttype;
        line_tdata-->i = found_tdata;
    }
    return line_address + 1;
];

[ AnalyseToken token;
    if (token == ENDIT_TOKEN) {
        found_ttype = ELEMENTARY_TT;
        found_tdata = ENDIT_TOKEN;
        return;
    }
    found_ttype = (token->0) & $$1111;
    found_tdata = (token+1)-->0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Extracting Verb Numbers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DictionaryWordToVerbNum dword verbnum;
#Ifdef TARGET_ZCODE;
	verbnum = $ff-(dword->#dict_par2);
#Ifnot; ! GLULX
	dword = dword + #dict_par2 - 1;
    @aloads dword 0 verbnum;
    verbnum = $ffff-verbnum;
#Endif;
	return verbnum;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Keyboard Primitive
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ KeyboardPrimitive a_buffer a_table;
#Ifdef DEBUG; #Iftrue (18 > 0);
	return TestKeyboardPrimitive(a_buffer, a_table);
#Endif; #Endif;
	return VM_ReadKeyboard(a_buffer, a_table);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Reading the Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Keyboard  a_buffer a_table  nw i w w2 x1 x2;
	sline1 = score; sline2 = turns;

	while (true) {
		! Save the start of the buffer, in case "oops" needs to restore it
		for (i=0 : i<64 : i++) oops_workspace->i = a_buffer->i;
	
		! In case of an array entry corruption that shouldn't happen, but would be
		! disastrous if it did:
		#Ifdef TARGET_ZCODE;
		a_buffer->0 = INPUT_BUFFER_LEN;
		a_table->0 = 15;  ! Allow to split input into this many words
		#Endif; ! TARGET_
	
		! Print the prompt, and read in the words and dictionary addresses
		PrintPrompt();
		DrawStatusLine();
		KeyboardPrimitive(a_buffer, a_table);
	
		! Set nw to the number of words
		#Ifdef TARGET_ZCODE; nw = a_table->1; #Ifnot; nw = a_table-->0; #Endif;
	
		! If the line was blank, get a fresh line
		if (nw == 0) {
			@push etype; etype = BLANKLINE_PE;
			players_command = 100;
			BeginActivity(PRINTING_A_PARSER_ERROR_ACT);
			if (ForActivity(PRINTING_A_PARSER_ERROR_ACT) == false) {
				PARSER_ERROR_INTERNAL_RM('X', noun); new_line;
			}
			EndActivity(PRINTING_A_PARSER_ERROR_ACT);
			@pull etype;
			continue;
		}
	
		! Unless the opening word was OOPS, return
		! Conveniently, a_table-->1 is the first word on both the Z-machine and Glulx
	
		w = a_table-->1;
		if (w == OOPS1__WD or OOPS2__WD or OOPS3__WD) {
			if (oops_from == 0) { PARSER_COMMAND_INTERNAL_RM('A'); new_line; continue; }
			if (nw == 1) { PARSER_COMMAND_INTERNAL_RM('B'); new_line; continue; }
			if (nw > 2) { PARSER_COMMAND_INTERNAL_RM('C'); new_line; continue; }
		
			! So now we know: there was a previous mistake, and the player has
			! attempted to correct a single word of it.
		
			for (i=0 : i<INPUT_BUFFER_LEN : i++) buffer2->i = a_buffer->i;
			#Ifdef TARGET_ZCODE;
			x1 = a_table->9;  ! Start of word following "oops"
			x2 = a_table->8;  ! Length of word following "oops"
			#Ifnot; ! TARGET_GLULX
			x1 = a_table-->6; ! Start of word following "oops"
			x2 = a_table-->5; ! Length of word following "oops"
			#Endif; ! TARGET_
		
			! Repair the buffer to the text that was in it before the "oops"
			! was typed:
			for (i=0 : i<64 : i++) a_buffer->i = oops_workspace->i;
			VM_Tokenise(a_buffer,a_table);
		
			! Work out the position in the buffer of the word to be corrected:
			#Ifdef TARGET_ZCODE;
			w = a_table->(4*oops_from + 1); ! Start of word to go
			w2 = a_table->(4*oops_from);    ! Length of word to go
			#Ifnot; ! TARGET_GLULX
			w = a_table-->(3*oops_from);      ! Start of word to go
			w2 = a_table-->(3*oops_from - 1); ! Length of word to go
			#Endif; ! TARGET_
		
			! Write spaces over the word to be corrected:
			for (i=0 : i<w2 : i++) a_buffer->(i+w) = ' ';
		
			if (w2 < x2) {
				! If the replacement is longer than the original, move up...
				for (i=INPUT_BUFFER_LEN-1 : i>=w+x2 : i--)
					a_buffer->i = a_buffer->(i-x2+w2);
		
				! ...increasing buffer size accordingly.
				#Ifdef TARGET_ZCODE;
				a_buffer->1 = (a_buffer->1) + (x2-w2);
				#Ifnot; ! TARGET_GLULX
				a_buffer-->0 = (a_buffer-->0) + (x2-w2);
				#Endif; ! TARGET_
			}
		
			! Write the correction in:
			for (i=0 : i<x2 : i++) a_buffer->(i+w) = buffer2->(i+x1);
		
			VM_Tokenise(a_buffer, a_table);
			#Ifdef TARGET_ZCODE; nw = a_table->1; #Ifnot; nw = a_table-->0; #Endif;
		
			return nw;
		}

		! Undo handling
	
		if ((w == UNDO1__WD or UNDO2__WD or UNDO3__WD) && (nw==1)) {
			Perform_Undo();
			continue;
		}
		i = VM_Save_Undo();
		#ifdef PREVENT_UNDO; undo_flag = 0; #endif;
		#ifndef PREVENT_UNDO; undo_flag = 2; #endif;
		if (i == -1) undo_flag = 0;
		if (i == 0) undo_flag = 1;
		if (i == 2) {
			VM_RestoreWindowColours();
			VM_Style(SUBHEADER_VMSTY);
			SL_Location(); print "^";
			! print (name) location, "^";
			VM_Style(NORMAL_VMSTY);
			IMMEDIATELY_UNDO_RM('E'); new_line;
			continue;
		}
		return nw;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Proper
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Parser__parse
	syntax line num_lines line_address i j k token l m inferred_go;
	cobj_flag = 0;
	parser_results-->ACTION_PRES = 0;
	parser_results-->NO_INPS_PRES = 0;
	parser_results-->INP1_PRES = 0;
	parser_results-->INP2_PRES = 0;
	meta = false;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter A
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    if (held_back_mode) {
        held_back_mode = false; wn = hb_wn;
        if (verb_wordnum > 0) i = WordAddress(verb_wordnum); else i = WordAddress(1);
        j = WordAddress(wn);
        if (i<=j) for (: i<j : i++) i->0 = ' ';
        i = NextWord();
        if (i == AGAIN1__WD or AGAIN2__WD or AGAIN3__WD) {
            ! Delete the words "then again" from the again buffer,
            ! in which we have just realised that it must occur:
            ! prevents an infinite loop on "i. again"

            i = WordAddress(wn-2)-buffer;
            if (wn > num_words) j = INPUT_BUFFER_LEN-1;
            else j = WordAddress(wn)-buffer;
            for (: i<j : i++) buffer3->i = ' ';
        }

        VM_Tokenise(buffer, parse);
        jump ReParse;
    }

  .ReType;

	cobj_flag = 0;
	actors_location = ScopeCeiling(player);
    BeginActivity(READING_A_COMMAND_ACT); if (ForActivity(READING_A_COMMAND_ACT)==false) {
		Keyboard(buffer,parse);
		num_words = WordCount(); players_command = 100 + num_words;
    } if (EndActivity(READING_A_COMMAND_ACT)) jump ReType;

  .ReParse;

    parser_inflection = name;

    ! Initially assume the command is aimed at the player, and the verb
    ! is the first word

    num_words = WordCount(); players_command = 100 + num_words;
    wn = 1; inferred_go = false;

    #Ifdef LanguageToInformese;
    LanguageToInformese();
    ! Re-tokenise:
    VM_Tokenise(buffer,parse);
    #Endif; ! LanguageToInformese

    num_words = WordCount(); players_command = 100 + num_words;

    k=0;
    #Ifdef DEBUG;
    if (parser_trace >= 2) {
        print "[ ";
        for (i=0 : i<num_words : i++) {

            #Ifdef TARGET_ZCODE;
            j = parse-->(i*2 + 1);
            #Ifnot; ! TARGET_GLULX
            j = parse-->(i*3 + 1);
            #Endif; ! TARGET_
            k = WordAddress(i+1);
            l = WordLength(i+1);
            print "~"; for (m=0 : m<l : m++) print (char) k->m; print "~ ";

            if (j == 0) print "?";
            else {
                #Ifdef TARGET_ZCODE;
                if (UnsignedCompare(j, HDR_DICTIONARY-->0) >= 0 &&
                    UnsignedCompare(j, HDR_HIGHMEMORY-->0) < 0)
                     print (address) j;
                else print j;
                #Ifnot; ! TARGET_GLULX
                if (j->0 == $60) print (address) j;
                else print j;
                #Endif; ! TARGET_
            }
            if (i ~= num_words-1) print " / ";
        }
        print " ]^";
    }
    #Endif; ! DEBUG
    verb_wordnum = 1;
    actor = player;
    actors_location = ScopeCeiling(player);
    usual_grammar_after = 0;

  .AlmostReParse;

    scope_token = 0;
    action_to_be = NULL;

    ! Begin from what we currently think is the verb word

  .BeginCommand;

    wn = verb_wordnum;
    verb_word = NextWordStopped();

    ! If there's no input here, we must have something like "person,".

    if (verb_word == -1) {
        best_etype = STUCK_PE; jump GiveError;
    }
	if (verb_word == comma_word) {
		best_etype = COMMABEGIN_PE; jump GiveError;
	}

    ! Now try for "again" or "g", which are special cases: don't allow "again" if nothing
    ! has previously been typed; simply copy the previous text across

    if (verb_word == AGAIN2__WD or AGAIN3__WD) verb_word = AGAIN1__WD;
    if (verb_word == AGAIN1__WD) {
        if (actor ~= player) {
            best_etype = ANIMAAGAIN_PE;
			jump GiveError;
        }
        #Ifdef TARGET_ZCODE;
        if (buffer3->1 == 0) {
            PARSER_COMMAND_INTERNAL_RM('D'); new_line;
            jump ReType;
        }
        #Ifnot; ! TARGET_GLULX
        if (buffer3-->0 == 0) {
            PARSER_COMMAND_INTERNAL_RM('D'); new_line;
            jump ReType;
        }
        #Endif; ! TARGET_
        for (i=0 : i<INPUT_BUFFER_LEN : i++) buffer->i = buffer3->i;
        VM_Tokenise(buffer,parse);
		num_words = WordCount(); players_command = 100 + num_words;
    	jump ReParse;
    }

    ! Save the present input in case of an "again" next time

    if (verb_word ~= AGAIN1__WD)
        for (i=0 : i<INPUT_BUFFER_LEN : i++) buffer3->i = buffer->i;

    if (usual_grammar_after == 0) {
        j = verb_wordnum;
        i = RunRoutines(actor, grammar); 
        #Ifdef DEBUG;
        if (parser_trace >= 2 && actor.grammar ~= 0 or NULL)
            print " [Grammar property returned ", i, "]^";
        #Endif; ! DEBUG

        if ((i ~= 0 or 1) && (VM_InvalidDictionaryAddress(i))) {
            usual_grammar_after = verb_wordnum; i=-i;
        }

        if (i == 1) {
            parser_results-->ACTION_PRES = action;
            parser_results-->NO_INPS_PRES = 0;
            parser_results-->INP1_PRES = noun;
            parser_results-->INP2_PRES = second;
            if (noun) parser_results-->NO_INPS_PRES = 1;
            if (second) parser_results-->NO_INPS_PRES = 2;
            rtrue;
        }
        if (i ~= 0) { verb_word = i; wn--; verb_wordnum--; }
        else { wn = verb_wordnum; verb_word = NextWord(); }
    }
    else usual_grammar_after = 0;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter B
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    #Ifdef LanguageIsVerb;
    if (verb_word == 0) {
        i = wn; verb_word = LanguageIsVerb(buffer, parse, verb_wordnum);
        wn = i;
    }
    #Endif; ! LanguageIsVerb

    ! If the first word is not listed as a verb, it must be a direction
    ! or the name of someone to talk to

    if (verb_word == 0 || ((verb_word->#dict_par1) & 1) == 0) {

        ! So is the first word an object contained in the special object "compass"
        ! (i.e., a direction)?  This needs use of NounDomain, a routine which
        ! does the object matching, returning the object number, or 0 if none found,
        ! or REPARSE_CODE if it has restructured the parse table so the whole parse
        ! must be begun again...

        wn = verb_wordnum; indef_mode = false; token_filter = 0; parameters = 0;
        @push actor; @push action; @push action_to_be;
        actor = player; meta = false; action = ##Go; action_to_be = ##Go;
        l = NounDomain(compass, 0, 0);
        @pull action_to_be; @pull action; @pull actor;
        if (l == REPARSE_CODE) jump ReParse;

        ! If it is a direction, send back the results:
        ! action=GoSub, no of arguments=1, argument 1=the direction.

        if ((l~=0) && (l ofclass K3_direction)) {
            parser_results-->ACTION_PRES = ##Go;
            parser_results-->NO_INPS_PRES = 1;
            parser_results-->INP1_PRES = l;
            inferred_go = true;
            jump LookForMore;
        }

    } ! end of first-word-not-a-verb


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter C
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

	! Only check for a comma (a "someone, do something" command) if we are
	! not already in the middle of one.  (This simplification stops us from
	! worrying about "robot, wizard, you are an idiot", telling the robot to
	! tell the wizard that she is an idiot.)
	
	if (actor == player) {
		for (j=2 : j<=num_words : j++) {
			i=NextWord();
			if (i == comma_word) jump Conversation;
		}
	}
	jump NotConversation;
	
	! NextWord nudges the word number wn on by one each time, so we've now
	! advanced past a comma.  (A comma is a word all on its own in the table.)
	
	.Conversation;
	
	j = wn - 1;
	
	! Use NounDomain (in the context of "animate creature") to see if the
	! words make sense as the name of someone held or nearby
	
	wn = 1; lookahead = HELD_TOKEN;
	scope_reason = TALKING_REASON;
	l = NounDomain(player,actors_location,6);
	scope_reason = PARSING_REASON;
	if (l == REPARSE_CODE) jump ReParse;
	if (l == 0) {
		if (verb_word && ((verb_word->#dict_par1) & 1)) jump NotConversation;
		best_etype = MISSINGPERSON_PE; jump GiveError;
	}
	
	.Conversation2;
	
	! The object addressed must at least be "talkable" if not actually "animate"
	! (the distinction allows, for instance, a microphone to be spoken to,
	! without the parser thinking that the microphone is human).
	
	if (l hasnt animate && l hasnt talkable) {
 		best_etype = ANIMALISTEN_PE; noun = l; jump GiveError;
	}
	
	! Check that there aren't any mystery words between the end of the person's
	! name and the comma (eg, throw out "dwarf sdfgsdgs, go north").
	
	if (wn ~= j) {
		if (verb_word && ((verb_word->#dict_par1) & 1)) jump NotConversation;
		best_etype = TOTALK_PE; jump GiveError;
	}
	
	! The player has now successfully named someone.  Adjust "him", "her", "it":
	
	PronounNotice(l);
	
	! Set the global variable "actor", adjust the number of the first word,
	! and begin parsing again from there.
	
	verb_wordnum = j + 1;
	
	! Stop things like "me, again":
	
	if (l == player) {
		wn = verb_wordnum;
		if (NextWordStopped() == AGAIN1__WD or AGAIN2__WD or AGAIN3__WD) {
			best_etype = ANIMAAGAIN_PE;
			jump GiveError;
		}
	}
	
	actor = l;
	actors_location = ScopeCeiling(l);
	#Ifdef DEBUG;
	if (parser_trace >= 1)
		print "[Actor is ", (the) actor, " in ", (name) actors_location, "]^";
	#Endif; ! DEBUG
	jump BeginCommand;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter D
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

	.NotConversation;
	if (verb_word == 0 || ((verb_word->#dict_par1) & 1) == 0) {
		verb_word = UnknownVerb(verb_word);
		if (verb_word ~= 0) jump VerbAccepted;
		best_etype = VERB_PE;
		jump GiveError;
	}
	.VerbAccepted;

    ! We now definitely have a verb, not a direction, whether we got here by the
    ! "take ..." or "person, take ..." method.  Get the meta flag for this verb:

    meta = ((verb_word->#dict_par1) & 2)/2;

    ! You can't order other people to "full score" for you, and so on...

    if (meta == 1 && actor ~= player) {
        best_etype = VERB_PE;
        meta = 0;
        jump GiveError;
    }

    ! Now let i be the corresponding verb number...

    i = DictionaryWordToVerbNum(verb_word);

    ! ...then look up the i-th entry in the verb table, whose address is at word
    ! 7 in the Z-machine (in the header), so as to get the address of the syntax
    ! table for the given verb...

    #Ifdef TARGET_ZCODE;
    syntax = (HDR_STATICMEMORY-->0)-->i;
    #Ifnot; ! TARGET_GLULX
    syntax = (#grammar_table)-->(i+1);
    #Endif; ! TARGET_

    ! ...and then see how many lines (ie, different patterns corresponding to the
    ! same verb) are stored in the parse table...

    num_lines = (syntax->0) - 1;

    ! ...and now go through them all, one by one.
    ! To prevent pronoun_word 0 being misunderstood,

    pronoun_word = NULL; pronoun_obj = NULL;

    #Ifdef DEBUG;
    if (parser_trace >= 1)
    	print "[Parsing for the verb '", (address) verb_word, "' (", num_lines+1, " lines)]^";
    #Endif; ! DEBUG

    best_etype = STUCK_PE; nextbest_etype = STUCK_PE;
    multiflag = false;

    ! "best_etype" is the current failure-to-match error - it is by default
    ! the least informative one, "don't understand that sentence".
    ! "nextbest_etype" remembers the best alternative to having to ask a
    ! scope token for an error message (i.e., the best not counting ASKSCOPE_PE).
    ! multiflag is used here to prevent inappropriate MULTI_PE errors
    ! in addition to its unrelated duties passing information to action routines


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter E
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    line_address = syntax + 1;

    for (line=0 : line<=num_lines : line++) {

        ! Unpack the syntax line from Inform format into three arrays; ensure that
        ! the sequence of tokens ends in an ENDIT_TOKEN.

        line_address = UnpackGrammarLine(line_address);

        #Ifdef DEBUG;
        if (parser_trace >= 1) {
            if (parser_trace >= 2) new_line;
            print "[line ", line; DebugGrammarLine();
            print "]^";
        }
        #Endif; ! DEBUG

        ! We aren't in "not holding" or inferring modes, and haven't entered
        ! any parameters on the line yet, or any special numbers; the multiple
        ! object is still empty.

        inferfrom = 0;
        parameters = 0;
        nsns = 0; special_word = 0;
        multiple_object-->0 = 0;
        multi_context = 0;
        etype = STUCK_PE;

        ! Put the word marker back to just after the verb

        wn = verb_wordnum+1;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter F
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

        advance_warning = -1; indef_mode = false;
        for (i=0,m=false,pcount=0 : line_token-->pcount ~= ENDIT_TOKEN : pcount++) {
            scope_token = 0;

            if (line_ttype-->pcount ~= PREPOSITION_TT) i++;

            if (line_ttype-->pcount == ELEMENTARY_TT) {
                if (line_tdata-->pcount == MULTI_TOKEN) m = true;
                if (line_tdata-->pcount == MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN  && i == 1) {
                    ! First non-preposition is "multiexcept" or
                    ! "multiinside", so look ahead.

                    #Ifdef DEBUG;
                    if (parser_trace >= 2) print " [Trying look-ahead]^";
                    #Endif; ! DEBUG

                    ! We need this to be followed by 1 or more prepositions.

                    pcount++;
                    if (line_ttype-->pcount == PREPOSITION_TT) {
                        ! skip ahead to a preposition word in the input
                        do {
                            l = NextWord();
                        } until ((wn > num_words) ||
                                 (l && (l->#dict_par1) & 8 ~= 0));
                        
                        if (wn > num_words) {
                            #Ifdef DEBUG;
                            if (parser_trace >= 2)
                                print " [Look-ahead aborted: prepositions missing]^";
                            #Endif;
                            jump EmptyLine;
                        }
                        
                        do {
                            if (PrepositionChain(l, pcount) ~= -1) {
                                ! advance past the chain
                                if ((line_token-->pcount)->0 & $20 ~= 0) {
                                    pcount++;
                                    while ((line_token-->pcount ~= ENDIT_TOKEN) &&
                                           ((line_token-->pcount)->0 & $10 ~= 0))
                                        pcount++;
                                } else {
                                    pcount++;
                                }
                            } else {
                                ! try to find another preposition word
                                do {
                                    l = NextWord();
                                } until ((wn >= num_words) ||
                                         (l && (l->#dict_par1) & 8 ~= 0));
                                
                                if (l && (l->#dict_par1) & 8) continue;
                                
                                ! lookahead failed
                                #Ifdef DEBUG;
                                if (parser_trace >= 2)
                                    print " [Look-ahead aborted: prepositions don't match]^";
                                #endif;
                                jump LineFailed;
                            }
                            if (wn <= num_words) l = NextWord();
                        } until (line_ttype-->pcount ~= PREPOSITION_TT);
                        
                        .EmptyLine;
                        ! put back the non-preposition we just read
                        wn--;

                        if ((line_ttype-->pcount == ELEMENTARY_TT) &&
                        	(line_tdata-->pcount == NOUN_TOKEN)) {
                            l = Descriptors();  ! skip past THE etc
                            if (l~=0) etype=l;  ! don't allow multiple objects
                        	k = parser_results-->INP1_PRES; @push k; @push parameters;
                        	parameters = 1; parser_results-->INP1_PRES = 0;
                            l = NounDomain(actors_location, actor, NOUN_TOKEN, true);
                            @pull parameters; @pull k; parser_results-->INP1_PRES = k;
                            #Ifdef DEBUG;
                            if (parser_trace >= 2) {
                                print " [Advanced to ~noun~ token: ";
                                if (l == REPARSE_CODE) print "re-parse request]^";
                                else {
                                	if (l == 1) print "but multiple found]^";
                                	if (l == 0) print "error ", etype, "]^";
                                	if (l >= 2) print (the) l, "]^";
                                }
                            }
                            #Endif; ! DEBUG
                            if (l == REPARSE_CODE) jump ReParse;
                            if (l >= 2) advance_warning = l;
                        }
                    }
                    break;
                }
            }
        }

        ! Slightly different line-parsing rules will apply to "take multi", to
        ! prevent "take all" behaving correctly but misleadingly when there's
        ! nothing to take.

        take_all_rule = 0;
        if (m && params_wanted == 1 && action_to_be == ##Take)
            take_all_rule = 1;

        ! And now start again, properly, forearmed or not as the case may be.
        ! As a precaution, we clear all the variables again (they may have been
        ! disturbed by the call to NounDomain, which may have called outside
        ! code, which may have done anything!).

        inferfrom = 0;
        parameters = 0;
        nsns = 0; special_word = 0;
        multiple_object-->0 = 0;
        etype = STUCK_PE;
        wn = verb_wordnum+1;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter G
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

		m = true;
        for (pcount=1 : : pcount++)
            if (line_token-->(pcount-1) == ENDIT_TOKEN) {
            	if (pcount >= 2) {
            		while ((((line_token-->(pcount-2))->0) & $10) ~= 0) pcount--;
            		AnalyseToken(line_token-->(pcount-2));
            		if (found_ttype == PREPOSITION_TT) {
            			l = -1;
            			while (true) {
            				m = NextWordStopped();
            				if (m == -1) break;
            				l = m;
            			}
            			if (PrepositionChain(l, pcount-2) == -1) {
            				m = false;
							#Ifdef DEBUG;
							if (parser_trace >= 2)
								print "[line rejected for not ending with correct preposition]^";
							#Endif; ! DEBUG
						} else m = true;
	           		}
            	}
            	break;
            }
		wn = verb_wordnum+1;

		if (m) for (pcount=1 : : pcount++) {
            pattern-->pcount = PATTERN_NULL; scope_token = 0;

            token = line_token-->(pcount-1);
            lookahead = line_token-->pcount;

            #Ifdef DEBUG;
            if (parser_trace >= 2)
                print " [line ", line, " token ", pcount, " word ", wn, " : ", (DebugToken) token,
                  "]^";
            #Endif; ! DEBUG

            if (token ~= ENDIT_TOKEN) {
                scope_reason = PARSING_REASON;
                AnalyseToken(token);

                l = ParseToken(found_ttype, found_tdata, pcount-1, token);
                while ((l >= GPR_NOUN) && (l < -1)) l = ParseToken(ELEMENTARY_TT, l + 256);
                scope_reason = PARSING_REASON;

                if (l == GPR_PREPOSITION) {
                    if (found_ttype~=PREPOSITION_TT && (found_ttype~=ELEMENTARY_TT ||
                        found_tdata~=TOPIC_TOKEN)) params_wanted--;
                    l = true;
                }
                else
                    if (l < 0) l = false;
                    else
                        if (l ~= GPR_REPARSE) {
                            if (l == GPR_NUMBER) {
                                if (nsns == 0) special_number1 = parsed_number;
                                else special_number2 = parsed_number;
                                nsns++; l = 1;
                            }
                            if (l == GPR_MULTIPLE) l = 0;
                            parser_results-->(parameters+INP1_PRES) = l;
                            parameters++;
                            pattern-->pcount = l;
                            l = true;
                        }

                #Ifdef DEBUG;
                if (parser_trace >= 3) {
                    print "  [token resulted in ";
                    if (l == REPARSE_CODE) print "re-parse request]^";
                    if (l == 0) print "failure with error type ", etype, "]^";
                    if (l == 1) print "success]^";
                }
                #Endif; ! DEBUG

                if (l == REPARSE_CODE) jump ReParse;
                if (l == false) break;
            }
            else {

                ! If the player has entered enough already but there's still
                ! text to wade through: store the pattern away so as to be able to produce
                ! a decent error message if this turns out to be the best we ever manage,
                ! and in the mean time give up on this line

                ! However, if the superfluous text begins with a comma or "then" then
                ! take that to be the start of another instruction

                if (wn <= num_words) {
                    l = NextWord();
                    if (l == THEN1__WD or THEN2__WD or THEN3__WD or comma_word) {
                        held_back_mode = true; hb_wn = wn-1;
                    } else {
                        for (m=0 : m<32 : m++) pattern2-->m = pattern-->m;
                        pcount2 = pcount;
                        etype = UPTO_PE;
                        break;
                    }
                }

                ! Now, we may need to revise the multiple object because of the single one
                ! we now know (but didn't when the list was drawn up).

                if (parameters >= 1) {
                	if (parser_results-->INP1_PRES == 0) {
                	    l = ReviseMulti(parser_results-->INP2_PRES);
                	    if (l ~= 0) { etype = l; parser_results-->ACTION_PRES = action_to_be; break; }
                	}
                }
                if (parameters >= 2) {
                	if (parser_results-->INP2_PRES == 0) {
            	        l = ReviseMulti(parser_results-->INP1_PRES);
                	    if (l ~= 0) { etype = l; break; }
                	} else {
                		k = parser_results-->INP1_PRES; l = parser_results-->INP2_PRES;
                		if (k && l) {
	                 		if ((multi_context==MULTIEXCEPT_TOKEN && k == l) ||
	                			((multi_context==MULTIINSIDE_TOKEN && k notin l && l notin k))) {
                				best_etype = NOTHING_PE;
                				parser_results-->ACTION_PRES = action_to_be; jump GiveError;
                			}
                		}
                	}
                }

                ! To trap the case of "take all" inferring only "yourself" when absolutely
                ! nothing else is in the vicinity...

                if (take_all_rule == 2 && parser_results-->INP1_PRES == actor) {
                    best_etype = NOTHING_PE;
                    jump GiveError;
                }

                #Ifdef DEBUG;
                if (parser_trace >= 1) print "[Line successfully parsed]^";
                #Endif; ! DEBUG

                ! The line has successfully matched the text.  Declare the input error-free...

                oops_from = 0;

                ! ...explain any inferences made (using the pattern)...

                if (inferfrom ~= 0) {
                	PrintInferredCommand(inferfrom);
                    ClearParagraphing(20);
                }

                ! ...copy the action number, and the number of parameters...

                parser_results-->ACTION_PRES = action_to_be;
                parser_results-->NO_INPS_PRES = parameters;

                ! ...reverse first and second parameters if need be...

                if (action_reversed && parameters == 2) {
                    i = parser_results-->INP1_PRES;
                    parser_results-->INP1_PRES = parser_results-->INP2_PRES;
                    parser_results-->INP2_PRES = i;
                    if (nsns == 2) {
                        i = special_number1; special_number1 = special_number2;
                        special_number2 = i;
                    }
                }

                ! ...and to reset "it"-style objects to the first of these parameters, if
                ! there is one (and it really is an object)...

                if (parameters > 0 && parser_results-->INP1_PRES >= 2)
                    PronounNotice(parser_results-->INP1_PRES);

                ! ...and return from the parser altogether, having successfully matched
                ! a line.

                if (held_back_mode) {
                    wn=hb_wn;
                    jump LookForMore;
                }
                rtrue;

            } ! end of if(token ~= ENDIT_TOKEN) else
        } ! end of for(pcount++)

        .LineFailed;
        ! The line has failed to match.
        ! We continue the outer "for" loop, trying the next line in the grammar.

        if (etype > best_etype) best_etype = etype;
        if (etype ~= ASKSCOPE_PE && etype > nextbest_etype) nextbest_etype = etype;

        ! ...unless the line was something like "take all" which failed because
        ! nothing matched the "all", in which case we stop and give an error now.

        if (take_all_rule == 2 && etype==NOTHING_PE) break;

    } ! end of for(line++)

    ! The grammar is exhausted: every line has failed to match.


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter H
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

  .GiveError;

    etype = best_etype;
    if (actor ~= player) {
        if (usual_grammar_after ~= 0) {
            verb_wordnum = usual_grammar_after;
            jump AlmostReParse;
        }
        wn = verb_wordnum;
        special_word = NextWord();
        if (special_word == comma_word) {
            special_word = NextWord();
            verb_wordnum++;
        }
        parser_results-->ACTION_PRES = ##Answer;
        parser_results-->NO_INPS_PRES = 2;
        parser_results-->INP1_PRES = actor;
        parser_results-->INP2_PRES = 1; special_number1 = special_word;
        actor = player;
        consult_from = verb_wordnum; consult_words = num_words-consult_from+1;
        rtrue;
    }


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter I
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! If the player was the actor (eg, in "take dfghh") the error must be printed,
    ! and fresh input called for.  In three cases the oops word must be jiggled.

    if ((etype ofclass Routine) || (etype ofclass String)) {
        if (ParserError(etype) ~= 0) jump ReType;
    } else {
		if (verb_wordnum == 0 && etype == CANTSEE_PE) etype = VERB_PE;
		players_command = 100 + WordCount(); ! The snippet variable "player's command"
        BeginActivity(PRINTING_A_PARSER_ERROR_ACT);
        if (ForActivity(PRINTING_A_PARSER_ERROR_ACT)) jump SkipParserError;
    }
    pronoun_word = pronoun__word; pronoun_obj = pronoun__obj;

    if (etype == STUCK_PE) {    PARSER_ERROR_INTERNAL_RM('A'); new_line; oops_from = 1; }
    if (etype == UPTO_PE) {
    	if (inferred_go) PARSER_ERROR_INTERNAL_RM('C');
    	else PARSER_ERROR_INTERNAL_RM('B');
        for (m=0 : m<32 : m++) pattern-->m = pattern2-->m;
        pcount = pcount2; PrintCommand(0);
        print ".^";
    }
    if (etype == NUMBER_PE) {   PARSER_ERROR_INTERNAL_RM('D'); new_line; }
    if (etype == CANTSEE_PE) {  PARSER_ERROR_INTERNAL_RM('E'); new_line; oops_from=saved_oops; }
    if (etype == TOOLIT_PE) {   PARSER_ERROR_INTERNAL_RM('F'); new_line; }
    if (etype == NOTHELD_PE) {  PARSER_ERROR_INTERNAL_RM('G'); new_line; oops_from=saved_oops; }
    if (etype == MULTI_PE) {    PARSER_ERROR_INTERNAL_RM('H'); new_line; }
    if (etype == MMULTI_PE) {   PARSER_ERROR_INTERNAL_RM('I'); new_line; }
    if (etype == VAGUE_PE) {    PARSER_ERROR_INTERNAL_RM('J'); new_line; }
    if (etype == ITGONE_PE) {
        if (pronoun_obj == NULL) { PARSER_ERROR_INTERNAL_RM('J'); new_line; }
        else { PARSER_ERROR_INTERNAL_RM('K', noun); new_line; }
    }
    if (etype == EXCEPT_PE) {   PARSER_ERROR_INTERNAL_RM('L'); new_line; }
    if (etype == ANIMA_PE) {    PARSER_ERROR_INTERNAL_RM('M'); new_line; }
    if (etype == VERB_PE) {     PARSER_ERROR_INTERNAL_RM('N'); new_line; }
    if (etype == SCENERY_PE) {  PARSER_ERROR_INTERNAL_RM('O'); new_line; }
    if (etype == JUNKAFTER_PE) {  PARSER_ERROR_INTERNAL_RM('P'); new_line; }
    if (etype == TOOFEW_PE) {  PARSER_ERROR_INTERNAL_RM('Q', multi_had); new_line; }
    if (etype == NOTHING_PE) {
    	if (parser_results-->ACTION_PRES == ##Remove &&
        	parser_results-->INP2_PRES ofclass Object) {
        	noun = parser_results-->INP2_PRES; ! ensure valid for messages
            if (noun has animate) { PARSER_N_ERROR_INTERNAL_RM('C', noun); new_line; }
            else if (noun hasnt container or supporter) { PARSER_N_ERROR_INTERNAL_RM('D', noun); new_line; }
            else if (noun has container && noun hasnt open)  { PARSER_N_ERROR_INTERNAL_RM('E', noun); new_line; }
            else if (children(noun)==0) { PARSER_N_ERROR_INTERNAL_RM('F', noun); new_line; }
            else parser_results-->ACTION_PRES = 0;
        }
        if (parser_results-->ACTION_PRES ~= ##Remove) {
            if (multi_wanted==100) { PARSER_N_ERROR_INTERNAL_RM('A'); new_line; }
            else                  {  PARSER_N_ERROR_INTERNAL_RM('B'); new_line; }
        }
    }
    if (etype == NOTINCONTEXT_PE) { PARSER_ERROR_INTERNAL_RM('R'); new_line; }
    if (etype == ANIMAAGAIN_PE) { PARSER_ERROR_INTERNAL_RM('S'); new_line; }
    if (etype == COMMABEGIN_PE) { PARSER_ERROR_INTERNAL_RM('T'); new_line; }
    if (etype == MISSINGPERSON_PE) { PARSER_ERROR_INTERNAL_RM('U'); new_line; }
    if (etype == ANIMALISTEN_PE) { PARSER_ERROR_INTERNAL_RM('V', noun); new_line; }
    if (etype == TOTALK_PE) { PARSER_ERROR_INTERNAL_RM('W'); new_line; }
    if (etype == ASKSCOPE_PE) {
        scope_stage = 3;
        if (indirect(scope_error) == -1) {
            best_etype = nextbest_etype;
            if (~~((etype ofclass Routine) || (etype ofclass String)))
            	EndActivity(PRINTING_A_PARSER_ERROR_ACT);
            jump GiveError;
        }
    }

    .SkipParserError;
    if ((etype ofclass Routine) || (etype ofclass String)) jump ReType;
    say__p = 1;
    EndActivity(PRINTING_A_PARSER_ERROR_ACT);


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter J
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! And go (almost) right back to square one...

    jump ReType;

    ! ...being careful not to go all the way back, to avoid infinite repetition
    ! of a deferred command causing an error.


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter K
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! At this point, the return value is all prepared, and we are only looking
    ! to see if there is a "then" followed by subsequent instruction(s).

  .LookForMore;

    if (wn > num_words) rtrue;

    i = NextWord();
    if (i == THEN1__WD or THEN2__WD or THEN3__WD or comma_word) {
        if (wn > num_words) {
           held_back_mode = false;
           return;
        }
        hb_wn = wn;
        held_back_mode = true;
       return;
    }
    best_etype = UPTO_PE;
    jump GiveError;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: End of Parser Proper
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

]; ! end of Parser__parse


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Internal Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PARSER_ERROR_INTERNAL_R; ];
[ PARSER_N_ERROR_INTERNAL_R; ];
[ PARSER_COMMAND_INTERNAL_R; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ParseTokenStopped x y;
	if (wn>WordCount()) return GPR_FAIL;
	return ParseToken(x,y);
];

Global parsetoken_nesting = 0;
[ ParseToken given_ttype given_tdata token_n token  i t rv;
	if (parsetoken_nesting > 0) {
		! save match globals
		@push match_from; @push token_filter; @push match_length;
		@push number_of_classes; @push oops_from;
		for (i=0: i<number_matched: i++) {
			t = match_list-->i; @push t;
			t = match_classes-->i; @push t;
			t = match_scores-->i; @push t;
		}
		@push number_matched;
	 }

	parsetoken_nesting++;
	rv = ParseToken__(given_ttype, given_tdata, token_n, token);
	parsetoken_nesting--;

	if (parsetoken_nesting > 0) {
		! restore match globals
		@pull number_matched;
		for (i=number_matched-1: i>=0: i--) {
 			@pull t; match_scores-->i = t;
			@pull t; match_classes-->i = t;
			@pull t; match_list-->i = t;
   		}
		@pull oops_from; @pull number_of_classes;
		@pull match_length; @pull token_filter; @pull match_from;
	}
	return rv;
];

[ ParseToken__ given_ttype given_tdata token_n token
	l o i j k and_parity single_object desc_wn many_flag
	token_allows_multiple prev_indef_wanted;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token Letter A
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    token_filter = 0;
    parser_inflection = name;

    switch (given_ttype) {
      ELEMENTARY_TT:
        switch (given_tdata) {
          SPECIAL_TOKEN:
            l = TryNumber(wn);
            special_word = NextWord();
            #Ifdef DEBUG;
            if (l ~= -1000)
                if (parser_trace >= 3) print "  [Read special as the number ", l, "]^";
            #Endif; ! DEBUG
            if (l == -1000) {
                #Ifdef DEBUG;
                if (parser_trace >= 3) print "  [Read special word at word number ", wn, "]^";
                #Endif; ! DEBUG
                l = special_word;
            }
            parsed_number = l;
            return GPR_NUMBER;

          NUMBER_TOKEN:
            l=TryNumber(wn++);
            if (l == -1000) {
                etype = NUMBER_PE;
                return GPR_FAIL;
            }
            #Ifdef DEBUG;
            if (parser_trace>=3) print "  [Read number as ", l, "]^";
            #Endif; ! DEBUG
            parsed_number = l;
            return GPR_NUMBER;

          CREATURE_TOKEN:
            if (action_to_be == ##Answer or ##Ask or ##AskFor or ##Tell)
                scope_reason = TALKING_REASON;

          TOPIC_TOKEN:
            consult_from = wn;
            if ((line_ttype-->(token_n+1) ~= PREPOSITION_TT) &&
               (line_token-->(token_n+1) ~= ENDIT_TOKEN)) {
               	RunTimeProblem(RTP_TEXTTOKENTOOHARD);
               	return GPR_PREPOSITION;
        	}
            do o = NextWordStopped();
            until (o == -1 || PrepositionChain(o, token_n+1) ~= -1);
            wn--;
            consult_words = wn-consult_from;
            if (consult_words == 0) return GPR_FAIL;
            if (action_to_be == ##Ask or ##Answer or ##Tell) {
                o = wn; wn = consult_from; parsed_number = NextWord();
                wn = o; return 1;
            }
            if (o==-1 && (line_ttype-->(token_n+1) == PREPOSITION_TT))
                return GPR_FAIL;    ! don't infer if required preposition is absent
            return GPR_PREPOSITION;
        }

      PREPOSITION_TT:
        ! Is it an unnecessary alternative preposition, when a previous choice
        ! has already been matched?
        if ((token->0) & $10) return GPR_PREPOSITION;

        ! If we've run out of the player's input, but still have parameters to
        ! specify, we go into "infer" mode, remembering where we are and the
        ! preposition we are inferring...

        if (wn > num_words) {
            if (inferfrom==0 && parameters<params_wanted) {
                inferfrom = pcount; inferword = token;
                pattern-->pcount = REPARSE_CODE + VM_DictionaryAddressToNumber(given_tdata);
            }

            ! If we are not inferring, then the line is wrong...

            if (inferfrom == 0) return -1;

            ! If not, then the line is right but we mark in the preposition...

            pattern-->pcount = REPARSE_CODE + VM_DictionaryAddressToNumber(given_tdata);
            return GPR_PREPOSITION;
        }

        o = NextWord();

        pattern-->pcount = REPARSE_CODE + VM_DictionaryAddressToNumber(o);

        ! Whereas, if the player has typed something here, see if it is the
        ! required preposition... if it's wrong, the line must be wrong,
        ! but if it's right, the token is passed (jump to finish this token).

        if (o == given_tdata) return GPR_PREPOSITION;
        if (PrepositionChain(o, token_n) ~= -1) return GPR_PREPOSITION;
        return -1;

      GPR_TT:
        l = indirect(given_tdata);
        #Ifdef DEBUG;
        if (parser_trace >= 3) print "  [Outside parsing routine returned ", l, "]^";
        #Endif; ! DEBUG
        return l;

      SCOPE_TT:
        scope_token = given_tdata;
        scope_stage = 1;
        #Ifdef DEBUG;
        if (parser_trace >= 3) print "  [Scope routine called at stage 1]^";
        #Endif; ! DEBUG
        l = indirect(scope_token);
        #Ifdef DEBUG;
        if (parser_trace >= 3) print "  [Scope routine returned multiple-flag of ", l, "]^";
        #Endif; ! DEBUG
        if (l == 1) given_tdata = MULTI_TOKEN; else given_tdata = NOUN_TOKEN;

      ATTR_FILTER_TT:
        token_filter = 1 + given_tdata;
        given_tdata = NOUN_TOKEN;

      ROUTINE_FILTER_TT:
        token_filter = given_tdata;
        given_tdata = NOUN_TOKEN;

    } ! end of switch(given_ttype)

    token = given_tdata;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token Letter B
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! There are now three possible ways we can be here:
    !     parsing an elementary token other than "special" or "number";
    !     parsing a scope token;
    !     parsing a noun-filter token (either by routine or attribute).
    !
    ! In each case, token holds the type of elementary parse to
    ! perform in matching one or more objects, and
    ! token_filter is 0 (default), an attribute + 1 for an attribute filter
    ! or a routine address for a routine filter.

    token_allows_multiple = false;
    if (token == MULTI_TOKEN or MULTIHELD_TOKEN or MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN)
        token_allows_multiple = true;

    many_flag = false; and_parity = true; dont_infer = false;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token Letter C
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! We expect to find a list of objects next in what the player's typed.

  .ObjectList;

    #Ifdef DEBUG;
    if (parser_trace >= 3) print "  [Object list from word ", wn, "]^";
    #Endif; ! DEBUG

    ! Take an advance look at the next word: if it's "it" or "them", and these
    ! are unset, set the appropriate error number and give up on the line
    ! (if not, these are still parsed in the usual way - it is not assumed
    ! that they still refer to something in scope)

    o = NextWord(); wn--;

    pronoun_word = NULL; pronoun_obj = NULL;
    l = PronounValue(o);
    if (l ~= 0) {
        pronoun_word = o; pronoun_obj = l;
        if (l == NULL) {
            ! Don't assume this is a use of an unset pronoun until the
            ! descriptors have been checked, because it might be an
            ! article (or some such) instead

            for (l=1 : l<=LanguageDescriptors-->0 : l=l+4)
                if (o == LanguageDescriptors-->l) jump AssumeDescriptor;
            pronoun__word = pronoun_word; pronoun__obj = pronoun_obj;
            etype = VAGUE_PE;
            if (parser_trace >= 3) print "  [Stop: unset pronoun]^";
            return GPR_FAIL;
        }
    }

  .AssumeDescriptor;

    if (o == ME1__WD or ME2__WD or ME3__WD) { pronoun_word = o; pronoun_obj = player; }

    allow_plurals = true; desc_wn = wn;

  .TryAgain;

    ! First, we parse any descriptive words (like "the", "five" or "every"):
    l = Descriptors(token_allows_multiple);
    if (l ~= 0) { etype = l; return 0; }

  .TryAgain2;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token Letter D
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! This is an actual specified object, and is therefore where a typing error
    ! is most likely to occur, so we set:

    oops_from = wn;

    ! So, two cases.  Case 1: token not equal to "held" (so, no implicit takes)
    ! but we may well be dealing with multiple objects

    ! In either case below we use NounDomain, giving it the token number as
    ! context, and two places to look: among the actor's possessions, and in the
    ! present location.  (Note that the order depends on which is likeliest.)

    if (token ~= HELD_TOKEN) {
        i = multiple_object-->0;
        #Ifdef DEBUG;
        if (parser_trace >= 3) print "  [Calling NounDomain on location and actor]^";
        #Endif; ! DEBUG
        l = NounDomain(actors_location, actor, token);
        if (l == REPARSE_CODE) return l;                  ! Reparse after Q&A
        if (indef_wanted == INDEF_ALL_WANTED && l == 0 && number_matched == 0)
            l = 1;  ! ReviseMulti if TAKE ALL FROM empty container

        if (token_allows_multiple && ~~multiflag) {
            if (best_etype==MULTI_PE) best_etype=STUCK_PE;
            multiflag = true;
        }
        if (l == 0) {
            if (indef_possambig) {
                ResetDescriptors();
                wn = desc_wn;
                jump TryAgain2;
            }
            if (etype == MULTI_PE && multiflag) etype = STUCK_PE;
            etype=CantSee();
            jump FailToken;
        } ! Choose best error

        #Ifdef DEBUG;
        if (parser_trace >= 3) {
            if (l > 1) print "  [ND returned ", (the) l, "]^";
            else {
                print "  [ND appended to the multiple object list:^";
                k = multiple_object-->0;
                for (j=i+1 : j<=k : j++)
                    print "  Entry ", j, ": ", (The) multiple_object-->j,
                          " (", multiple_object-->j, ")^";
                print "  List now has size ", k, "]^";
            }
        }
        #Endif; ! DEBUG

        if (l == 1) {
            if (~~many_flag) many_flag = true;
            else {                                ! Merge with earlier ones
                k = multiple_object-->0;            ! (with either parity)
                multiple_object-->0 = i;
                for (j=i+1 : j<=k : j++) {
                    if (and_parity) MultiAdd(multiple_object-->j);
                    else            MultiSub(multiple_object-->j);
                }
                #Ifdef DEBUG;
                if (parser_trace >= 3)
                	print "  [Merging ", k-i, " new objects to the ", i, " old ones]^";
                #Endif; ! DEBUG
            }
        }
        else {
            ! A single object was indeed found

            if (match_length == 0 && indef_possambig) {
                ! So the answer had to be inferred from no textual data,
                ! and we know that there was an ambiguity in the descriptor
                ! stage (such as a word which could be a pronoun being
                ! parsed as an article or possessive).  It's worth having
                ! another go.

                ResetDescriptors();
                wn = desc_wn;
                jump TryAgain2;
            }

            if ((token == CREATURE_TOKEN) && (CreatureTest(l) == 0)) {
                etype = ANIMA_PE;
                jump FailToken;
            } !  Animation is required

            if (~~many_flag) single_object = l;
            else {
                if (and_parity) MultiAdd(l); else MultiSub(l);
                #Ifdef DEBUG;
                if (parser_trace >= 3) print "  [Combining ", (the) l, " with list]^";
                #Endif; ! DEBUG
            }
        }
    }

    else {

    ! Case 2: token is "held" (which fortunately can't take multiple objects)
    ! and may generate an implicit take

        l = NounDomain(actor,actors_location,token);       ! Same as above...
        if (l == REPARSE_CODE) return l;
        if (l == 0) {
            if (indef_possambig) {
                ResetDescriptors();
                wn = desc_wn;
                jump TryAgain2;
            }
            etype = CantSee(); jump FailToken;            ! Choose best error
        }

        ! ...until it produces something not held by the actor.  Then an implicit
        ! take must be tried.  If this is already happening anyway, things are too
        ! confused and we have to give up (but saving the oops marker so as to get
        ! it on the right word afterwards).
        ! The point of this last rule is that a sequence like
        !
        !     > read newspaper
        !     (taking the newspaper first)
        !     The dwarf unexpectedly prevents you from taking the newspaper!
        !
        ! should not be allowed to go into an infinite repeat - read becomes
        ! take then read, but take has no effect, so read becomes take then read...
        ! Anyway for now all we do is record the number of the object to take.

        o = parent(l);
        if (o ~= actor) {
            #Ifdef DEBUG;
            if (parser_trace >= 3) print "  [Allowing object ", (the) l, " for now]^";
            #Endif; ! DEBUG
        }
        single_object = l;
    } ! end of if (token ~= HELD_TOKEN) else

    ! The following moves the word marker to just past the named object...
	
!	if (match_from ~= oops_from) print match_from, " vs ", oops_from, "^";

!    wn = oops_from + match_length;
    wn = match_from + match_length;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token Letter E
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! Object(s) specified now: is that the end of the list, or have we reached
    ! "and", "but" and so on?  If so, create a multiple-object list if we
    ! haven't already (and are allowed to).

  .NextInList;

    o = NextWord();

    if (o == AND1__WD or AND2__WD or AND3__WD or BUT1__WD or BUT2__WD or BUT3__WD or comma_word) {

        #Ifdef DEBUG;
        if (parser_trace >= 3) print "  [Read connective '", (address) o, "']^";
        #Endif; ! DEBUG

        if (~~token_allows_multiple) {
            if (multiflag) jump PassToken; ! give UPTO_PE error
            etype=MULTI_PE;
            jump FailToken;
        }

        if (o == BUT1__WD or BUT2__WD or BUT3__WD) and_parity = 1-and_parity;

        if (~~many_flag) {
            multiple_object-->0 = 1;
            multiple_object-->1 = single_object;
            many_flag = true;
            #Ifdef DEBUG;
            if (parser_trace >= 3) print "  [Making new list from ", (the) single_object, "]^";
            #Endif; ! DEBUG
        }
        dont_infer = true; inferfrom=0;           ! Don't print (inferences)
        jump ObjectList;                          ! And back around
    }

    wn--;   ! Word marker back to first not-understood word


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token Letter F
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! Happy or unhappy endings:

  .PassToken;
    if (many_flag) {
        single_object = GPR_MULTIPLE;
        multi_context = token;
    }
    else {
        if (indef_mode == 1 && indef_type & PLURAL_BIT ~= 0) {
		  	if (token == MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN) multi_context = token;
            if (indef_wanted < INDEF_ALL_WANTED && indef_wanted > 1) {
                multi_had = 1; multi_wanted = indef_wanted;
                etype = TOOFEW_PE;
                jump FailToken;
            }
        }
    }
    return single_object;

  .FailToken;

    ! If we were only guessing about it being a plural, try again but only
    ! allowing singulars (so that words like "six" are not swallowed up as
    ! Descriptors)

    if (allow_plurals && indef_guess_p == 1) {
        #Ifdef DEBUG;
        if (parser_trace >= 4) print "   [Retrying singulars after failure ", etype, "]^";
        #Endif;
        prev_indef_wanted = indef_wanted;
        allow_plurals = false;
        wn = desc_wn;
        jump TryAgain;
    }

    if ((indef_wanted > 0 || prev_indef_wanted > 0) && (~~multiflag)) etype = MULTI_PE;

    return GPR_FAIL;

]; ! end of ParseToken__


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Descriptors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant OTHER_BIT  =   1;     !  These will be used in Adjudicate()
Constant MY_BIT     =   2;     !  to disambiguate choices
Constant THAT_BIT   =   4;
Constant PLURAL_BIT =   8;
Constant LIT_BIT    =  16;
Constant UNLIT_BIT  =  32;

[ ResetDescriptors;
    indef_mode = 0; indef_type = 0; indef_wanted = 0; indef_guess_p = 0;
    indef_possambig = false;
    indef_owner = nothing;
    indef_cases = $$111111111111;
    indef_nspec_at = 0;
];

[ ArticleDescriptors  o x flag cto type n;
    if (wn > num_words) return 0;

    for (flag=true : flag :) {
        o = NextWordStopped(); flag = false;

       for (x=1 : x<=LanguageDescriptors-->0 : x=x+4)
            if (o == LanguageDescriptors-->x) {
                type = LanguageDescriptors-->(x+2);
                if (type == DEFART_PK or INDEFART_PK) flag = true;
            }
    }
    wn--;
    return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parsing Descriptors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Descriptors  o x flag cto type n;
    ResetDescriptors();
    if (wn > num_words) return 0;

    for (flag=true : flag :) {
        o = NextWordStopped(); flag = false;

       for (x=1 : x<=LanguageDescriptors-->0 : x=x+4)
            if (o == LanguageDescriptors-->x) {
                flag = true;
                type = LanguageDescriptors-->(x+2);
                if (type ~= DEFART_PK) indef_mode = true;
                indef_possambig = true;
                indef_cases = indef_cases & (LanguageDescriptors-->(x+1));

                if (type == POSSESS_PK) {
                    cto = LanguageDescriptors-->(x+3);
                    switch (cto) {
                      0: indef_type = indef_type | MY_BIT;
                      1: indef_type = indef_type | THAT_BIT;
                      default:
                        indef_owner = PronounValue(cto);
                        if (indef_owner == NULL) indef_owner = InformParser;
                    }
                }

                if (type == light)  indef_type = indef_type | LIT_BIT;
                if (type == -light) indef_type = indef_type | UNLIT_BIT;
            }

        if (o == OTHER1__WD or OTHER2__WD or OTHER3__WD) {
            indef_mode = 1; flag = 1;
            indef_type = indef_type | OTHER_BIT;
        }
        if (o == ALL1__WD or ALL2__WD or ALL3__WD or ALL4__WD or ALL5__WD) {
            indef_mode = 1; flag = 1; indef_wanted = INDEF_ALL_WANTED;
            if (take_all_rule == 1) take_all_rule = 2;
            indef_type = indef_type | PLURAL_BIT;
        }
        if (allow_plurals) {
        	if (NextWordStopped() ~= -1 or THEN1__WD) { wn--; n = TryNumber(wn-1); } else { n=0; wn--; }
            if (n == 1) { indef_mode = 1; flag = 1; }
            if (n > 1) {
                indef_guess_p = 1;
                indef_mode = 1; flag = 1; indef_wanted = n;
                indef_nspec_at = wn-1;
                indef_type = indef_type | PLURAL_BIT;
            }
        }
        if (flag == 1 && NextWordStopped() ~= OF1__WD or OF2__WD or OF3__WD or OF4__WD)
            wn--;  ! Skip 'of' after these
    }
    wn--;
    return 0;
];

[ SafeSkipDescriptors;
	@push indef_mode; @push indef_type; @push indef_wanted;
	@push indef_guess_p; @push indef_possambig; @push indef_owner;
	@push indef_cases; @push indef_nspec_at;
	
	Descriptors();
	
	@pull indef_nspec_at; @pull indef_cases;
	@pull indef_owner; @pull indef_possambig; @pull indef_guess_p;
	@pull indef_wanted; @pull indef_type; @pull indef_mode;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Preposition Chain
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrepositionChain wd index;
    if (line_tdata-->index == wd) return wd;
    if ((line_token-->index)->0 & $20 == 0) return -1;
    do {
        if (line_tdata-->index == wd) return wd;
        index++;
    } until ((line_token-->index == ENDIT_TOKEN) || (((line_token-->index)->0 & $10) == 0));
    return -1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Creature
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CreatureTest obj;
    if (obj has animate) rtrue;
    if (obj hasnt talkable) rfalse;
    if (action_to_be == ##Ask or ##Answer or ##Tell or ##AskFor) rtrue;
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Noun Domain
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NounDomain domain1 domain2 context dont_ask
	first_word i j k l answer_words marker;
    #Ifdef DEBUG;
    if (parser_trace >= 4) {
        print "   [NounDomain called at word ", wn, "^";
        print "   ";
        if (indef_mode) {
            print "seeking indefinite object: ";
            if (indef_type & OTHER_BIT)  print "other ";
            if (indef_type & MY_BIT)     print "my ";
            if (indef_type & THAT_BIT)   print "that ";
            if (indef_type & PLURAL_BIT) print "plural ";
            if (indef_type & LIT_BIT)    print "lit ";
            if (indef_type & UNLIT_BIT)  print "unlit ";
            if (indef_owner ~= 0) print "owner:", (name) indef_owner;
            new_line;
            print "   number wanted: ";
            if (indef_wanted == INDEF_ALL_WANTED) print "all"; else print indef_wanted;
            new_line;
            print "   most likely GNAs of names: ", indef_cases, "^";
        }
        else print "seeking definite object^";
    }
    #Endif; ! DEBUG

    match_length = 0; number_matched = 0; match_from = wn;

    SearchScope(domain1, domain2, context);

    #Ifdef DEBUG;
    if (parser_trace >= 4) print "   [ND made ", number_matched, " matches]^";
    #Endif; ! DEBUG

    wn = match_from+match_length;

    ! If nothing worked at all, leave with the word marker skipped past the
    ! first unmatched word...

    if (number_matched == 0) { wn++; rfalse; }

    ! Suppose that there really were some words being parsed (i.e., we did
    ! not just infer).  If so, and if there was only one match, it must be
    ! right and we return it...

    if (match_from <= num_words) {
        if (number_matched == 1) {
            i=match_list-->0;
            return i;
        }

        ! ...now suppose that there was more typing to come, i.e. suppose that
        ! the user entered something beyond this noun.  If nothing ought to follow,
        ! then there must be a mistake, (unless what does follow is just a full
        ! stop, and or comma)

        if (wn <= num_words) {
            i = NextWord(); wn--;
            if (i ~=  AND1__WD or AND2__WD or AND3__WD or comma_word
                   or THEN1__WD or THEN2__WD or THEN3__WD
                   or BUT1__WD or BUT2__WD or BUT3__WD) {
                if (lookahead == ENDIT_TOKEN) rfalse;
            }
        }
    }

    ! Now look for a good choice, if there's more than one choice...

    number_of_classes = 0;

    if (number_matched == 1) {
    	i = match_list-->0;
		if (indef_mode == 1 && indef_type & PLURAL_BIT ~= 0) {
			if (context == MULTI_TOKEN or MULTIHELD_TOKEN or
				MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN or
				NOUN_TOKEN or HELD_TOKEN or CREATURE_TOKEN) {
				BeginActivity(DECIDING_WHETHER_ALL_INC_ACT, i);
				if ((ForActivity(DECIDING_WHETHER_ALL_INC_ACT, i)) &&
					(RulebookFailed())) rfalse;
				EndActivity(DECIDING_WHETHER_ALL_INC_ACT, i);
			}
		}
    }
    if (number_matched > 1) {
		i = true;
	    if (number_matched > 1)
	    	for (j=0 : j<number_matched-1 : j++)
				if (Identical(match_list-->j, match_list-->(j+1)) == false)
					i = false;
		if (i) dont_infer = true;
        i = Adjudicate(context);
        if (i == -1) rfalse;
        if (i == 1) rtrue;       !  Adjudicate has made a multiple
                             !  object, and we pass it on
    }

    ! If i is non-zero here, one of two things is happening: either
    ! (a) an inference has been successfully made that object i is
    !     the intended one from the user's specification, or
    ! (b) the user finished typing some time ago, but we've decided
    !     on i because it's the only possible choice.
    ! In either case we have to keep the pattern up to date,
    ! note that an inference has been made and return.
    ! (Except, we don't note which of a pile of identical objects.)

    if (i ~= 0) {
    	if (dont_infer) return i;
        if (inferfrom == 0) inferfrom=pcount;
        pattern-->pcount = i;
        return i;
    }

	if (dont_ask) return match_list-->0;

    ! If we get here, there was no obvious choice of object to make.  If in
    ! fact we've already gone past the end of the player's typing (which
    ! means the match list must contain every object in scope, regardless
    ! of its name), then it's foolish to give an enormous list to choose
    ! from - instead we go and ask a more suitable question...

    if (match_from > num_words) jump Incomplete;

    ! Now we print up the question, using the equivalence classes as worked
    ! out by Adjudicate() so as not to repeat ourselves on plural objects...

	BeginActivity(ASKING_WHICH_DO_YOU_MEAN_ACT);
	if (ForActivity(ASKING_WHICH_DO_YOU_MEAN_ACT)) jump SkipWhichQuestion;
	j = 1; marker = 0;
	for (i=1 : i<=number_of_classes : i++) {
		while (((match_classes-->marker) ~= i) && ((match_classes-->marker) ~= -i))
			marker++;
		if (match_list-->marker hasnt animate) j = 0;
	}
	if (j) PARSER_CLARIF_INTERNAL_RM('A');
	else PARSER_CLARIF_INTERNAL_RM('B');

    j = number_of_classes; marker = 0;
    for (i=1 : i<=number_of_classes : i++) {
        while (((match_classes-->marker) ~= i) && ((match_classes-->marker) ~= -i)) marker++;
        k = match_list-->marker;

        if (match_classes-->marker > 0) print (the) k; else print (a) k;

        if (i < j-1)  print ", ";
        if (i == j-1) {
			#Ifdef SERIAL_COMMA;
			if (j ~= 2) print ",";
        	#Endif; ! SERIAL_COMMA
        	PARSER_CLARIF_INTERNAL_RM('H');
        }
    }
    print "?^";

	.SkipWhichQuestion; EndActivity(ASKING_WHICH_DO_YOU_MEAN_ACT);

    ! ...and get an answer:

  .WhichOne;
    #Ifdef TARGET_ZCODE;
    for (i=2 : i<INPUT_BUFFER_LEN : i++) buffer2->i = ' ';
    #Endif; ! TARGET_ZCODE
    answer_words=Keyboard(buffer2, parse2);

    ! Conveniently, parse2-->1 is the first word in both ZCODE and GLULX.
    first_word = (parse2-->1);

    ! Take care of "all", because that does something too clever here to do
    ! later on:

    if (first_word == ALL1__WD or ALL2__WD or ALL3__WD or ALL4__WD or ALL5__WD) {
        if (context == MULTI_TOKEN or MULTIHELD_TOKEN or MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN) {
            l = multiple_object-->0;
            for (i=0 : i<number_matched && l+i<MATCH_LIST_WORDS : i++) {
                k = match_list-->i;
                multiple_object-->(i+1+l) = k;
            }
            multiple_object-->0 = i+l;
            rtrue;
        }
        PARSER_CLARIF_INTERNAL_RM('C');
        jump WhichOne;
    }

	! Look for a comma, and interpret this as a fresh conversation command
	! if so:

	for (i=1 : i<=answer_words : i++)
		if (WordFrom(i, parse2) == comma_word) {
            VM_CopyBuffer(buffer, buffer2);
            jump RECONSTRUCT_INPUT;		
		}

    ! If the first word of the reply can be interpreted as a verb, then
    ! assume that the player has ignored the question and given a new
    ! command altogether.
    ! (This is one time when it's convenient that the directions are
    ! not themselves verbs - thus, "north" as a reply to "Which, the north
    ! or south door" is not treated as a fresh command but as an answer.)

    #Ifdef LanguageIsVerb;
    if (first_word == 0) {
        j = wn; first_word = LanguageIsVerb(buffer2, parse2, 1); wn = j;
    }
    #Endif; ! LanguageIsVerb
    if (first_word ~= 0) {
        j = first_word->#dict_par1;
        if ((0 ~= j&1) && ~~LanguageVerbMayBeName(first_word)) {
            VM_CopyBuffer(buffer, buffer2);
            jump RECONSTRUCT_INPUT;
        }
    }

    ! Now we insert the answer into the original typed command, as
    ! words additionally describing the same object
    ! (eg, > take red button
    !      Which one, ...
    !      > music
    ! becomes "take music red button".  The parser will thus have three
    ! words to work from next time, not two.)

    #Ifdef TARGET_ZCODE;
    k = WordAddress(match_from) - buffer; l=buffer2->1+1;
    for (j=buffer + buffer->0 - 1 : j>=buffer+k+l : j--) j->0 = 0->(j-l);
    for (i=0 : i<l : i++) buffer->(k+i) = buffer2->(2+i);
    buffer->(k+l-1) = ' ';
    buffer->1 = buffer->1 + l;
    if (buffer->1 >= (buffer->0 - 1)) buffer->1 = buffer->0;
    #Ifnot; ! TARGET_GLULX
    k = WordAddress(match_from) - buffer;
    l = (buffer2-->0) + 1;
    for (j=buffer+INPUT_BUFFER_LEN-1 : j>=buffer+k+l : j--) j->0 = j->(-l);
    for (i=0 : i<l : i++) buffer->(k+i) = buffer2->(WORDSIZE+i);
    buffer->(k+l-1) = ' ';
    buffer-->0 = buffer-->0 + l;
    if (buffer-->0 > (INPUT_BUFFER_LEN-WORDSIZE)) buffer-->0 = (INPUT_BUFFER_LEN-WORDSIZE);
    #Endif; ! TARGET_

    ! Having reconstructed the input, we warn the parser accordingly
    ! and get out.

	.RECONSTRUCT_INPUT;

	num_words = WordCount(); players_command = 100 + num_words;
    wn = 1;
    #Ifdef LanguageToInformese;
    LanguageToInformese();
    ! Re-tokenise:
    VM_Tokenise(buffer,parse);
    #Endif; ! LanguageToInformese
	num_words = WordCount(); players_command = 100 + num_words;
    actors_location = ScopeCeiling(player);
	FollowRulebook(Activity_after_rulebooks-->READING_A_COMMAND_ACT);

    return REPARSE_CODE;

    ! Now we come to the question asked when the input has run out
    ! and can't easily be guessed (eg, the player typed "take" and there
    ! were plenty of things which might have been meant).

  .Incomplete;

    if (context == CREATURE_TOKEN) PARSER_CLARIF_INTERNAL_RM('D', actor);
    else                           PARSER_CLARIF_INTERNAL_RM('E', actor);
    new_line;

    #Ifdef TARGET_ZCODE;
    for (i=2 : i<INPUT_BUFFER_LEN : i++) buffer2->i=' ';
    #Endif; ! TARGET_ZCODE
    answer_words = Keyboard(buffer2, parse2);

	! Look for a comma, and interpret this as a fresh conversation command
	! if so:

	for (i=1 : i<=answer_words : i++)
		if (WordFrom(i, parse2) == comma_word) {
			VM_CopyBuffer(buffer, buffer2);
			jump RECONSTRUCT_INPUT;
		}

    first_word=(parse2-->1);
    #Ifdef LanguageIsVerb;
    if (first_word==0) {
        j = wn; first_word=LanguageIsVerb(buffer2, parse2, 1); wn = j;
    }
    #Endif; ! LanguageIsVerb

    ! Once again, if the reply looks like a command, give it to the
    ! parser to get on with and forget about the question...

    if (first_word ~= 0) {
        j = first_word->#dict_par1;
        if ((0 ~= j&1) && ~~LanguageVerbMayBeName(first_word)) {
            VM_CopyBuffer(buffer, buffer2);
            jump RECONSTRUCT_INPUT;
        }
    }

    ! ...but if we have a genuine answer, then:
    !
    ! (1) we must glue in text suitable for anything that's been inferred.

    if (inferfrom ~= 0) {
        for (j=inferfrom : j<pcount : j++) {
            if (pattern-->j == PATTERN_NULL) continue;
            #Ifdef TARGET_ZCODE;
            i = 2+buffer->1; (buffer->1)++; buffer->(i++) = ' ';
            #Ifnot; ! TARGET_GLULX
            i = WORDSIZE + buffer-->0;
            (buffer-->0)++; buffer->(i++) = ' ';
            #Endif; ! TARGET_

            #Ifdef DEBUG;
            if (parser_trace >= 5)
            	print "[Gluing in inference with pattern code ", pattern-->j, "]^";
            #Endif; ! DEBUG

            ! Conveniently, parse2-->1 is the first word in both ZCODE and GLULX.

            parse2-->1 = 0;

            ! An inferred object.  Best we can do is glue in a pronoun.
            ! (This is imperfect, but it's very seldom needed anyway.)

            if (pattern-->j >= 2 && pattern-->j < REPARSE_CODE) {
                PronounNotice(pattern-->j);
                for (k=1 : k<=LanguagePronouns-->0 : k=k+3)
                    if (pattern-->j == LanguagePronouns-->(k+2)) {
                        parse2-->1 = LanguagePronouns-->k;
                        #Ifdef DEBUG;
                        if (parser_trace >= 5)
                        	print "[Using pronoun '", (address) parse2-->1, "']^";
                        #Endif; ! DEBUG
                        break;
                    }
            }
            else {
                ! An inferred preposition.
                parse2-->1 = VM_NumberToDictionaryAddress(pattern-->j - REPARSE_CODE);
                #Ifdef DEBUG;
                if (parser_trace >= 5)
                	print "[Using preposition '", (address) parse2-->1, "']^";
                #Endif; ! DEBUG
            }

            ! parse2-->1 now holds the dictionary address of the word to glue in.

            if (parse2-->1 ~= 0) {
                k = buffer + i;
                #Ifdef TARGET_ZCODE;
                @output_stream 3 k;
                 print (address) parse2-->1;
                @output_stream -3;
                k = k-->0;
                for (l=i : l<i+k : l++) buffer->l = buffer->(l+2);
                i = i + k; buffer->1 = i-2;
                #Ifnot; ! TARGET_GLULX
                k = Glulx_PrintAnyToArray(buffer+i, INPUT_BUFFER_LEN-i, parse2-->1);
                i = i + k; buffer-->0 = i - WORDSIZE;
                #Endif; ! TARGET_
            }
        }
    }

    ! (2) we must glue the newly-typed text onto the end.

    #Ifdef TARGET_ZCODE;
    i = 2+buffer->1; (buffer->1)++; buffer->(i++) = ' ';
    for (j=0 : j<buffer2->1 : i++,j++) {
        buffer->i = buffer2->(j+2);
        (buffer->1)++;
        if (buffer->1 == INPUT_BUFFER_LEN) break;
    }
    #Ifnot; ! TARGET_GLULX
    i = WORDSIZE + buffer-->0;
    (buffer-->0)++; buffer->(i++) = ' ';
    for (j=0 : j<buffer2-->0 : i++,j++) {
        buffer->i = buffer2->(j+WORDSIZE);
        (buffer-->0)++;
        if (buffer-->0 == INPUT_BUFFER_LEN) break;
    }
    #Endif; ! TARGET_

    ! (3) we fill up the buffer with spaces, which is unnecessary, but may
    !     help incorrectly-written interpreters to cope.

    #Ifdef TARGET_ZCODE;
    for (: i<INPUT_BUFFER_LEN : i++) buffer->i = ' ';
    #Endif; ! TARGET_ZCODE

    jump RECONSTRUCT_INPUT;

]; ! end of NounDomain

[ PARSER_CLARIF_INTERNAL_R; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Adjudicate
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Adjudicate context i j k good_ones last n ultimate flag offset;
    #Ifdef DEBUG;
    if (parser_trace >= 4) {
        print "   [Adjudicating match list of size ", number_matched,
        	" in context ", context, "^";
        print "   ";
        if (indef_mode) {
            print "indefinite type: ";
            if (indef_type & OTHER_BIT)  print "other ";
            if (indef_type & MY_BIT)     print "my ";
            if (indef_type & THAT_BIT)   print "that ";
            if (indef_type & PLURAL_BIT) print "plural ";
            if (indef_type & LIT_BIT)    print "lit ";
            if (indef_type & UNLIT_BIT)  print "unlit ";
            if (indef_owner ~= 0) print "owner:", (name) indef_owner;
            new_line;
            print "   number wanted: ";
            if (indef_wanted == INDEF_ALL_WANTED) print "all"; else print indef_wanted;
            new_line;
            print "   most likely GNAs of names: ", indef_cases, "^";
        }
        else print "definite object^";
    }
    #Endif; ! DEBUG

    j = number_matched-1; good_ones = 0; last = match_list-->0;
    for (i=0 : i<=j : i++) {
        n = match_list-->i;
        match_scores-->i = good_ones;
        ultimate = ScopeCeiling(n);

        if (context==HELD_TOKEN && parent(n)==actor)
        {   good_ones++; last=n; }
        if (context==MULTI_TOKEN && ultimate==ScopeCeiling(actor)
            && n~=actor && n hasnt concealed && n hasnt scenery) 
        {   good_ones++; last=n; }
        if (context==MULTIHELD_TOKEN && parent(n)==actor)
        {   good_ones++; last=n; }

        if (context==MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN)
        {   if (advance_warning==-1)
            {   if (context==MULTIEXCEPT_TOKEN)
                {   good_ones++; last=n;
                 }
                if (context==MULTIINSIDE_TOKEN)
                {   if (parent(n)~=actor) { good_ones++; last=n; }
                 }
            }
            else
            {   if (context==MULTIEXCEPT_TOKEN && n~=advance_warning)
                {   good_ones++; last=n; }
                if (context==MULTIINSIDE_TOKEN && n in advance_warning)
                {   good_ones++; last=n; }
            }
         }
        if (context==CREATURE_TOKEN && CreatureTest(n)==1)
        {   good_ones++; last=n; }
        
        match_scores-->i = 1000*(good_ones - match_scores-->i);
    }
    if (good_ones == 1) {
		if (indef_mode == 1 && indef_type & PLURAL_BIT ~= 0 &&
			context == MULTI_TOKEN or MULTIHELD_TOKEN or
				MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN) {
	        BeginActivity(DECIDING_WHETHER_ALL_INC_ACT, last);
            if ((ForActivity(DECIDING_WHETHER_ALL_INC_ACT, last)) &&
            	(RulebookFailed())) good_ones = 0;
	        EndActivity(DECIDING_WHETHER_ALL_INC_ACT, last);
			if (good_ones == 1) return last;
		} else {
			return last;
		}
    }

    ! If there is ambiguity about what was typed, but it definitely wasn't
    ! animate as required, then return anything; higher up in the parser
    ! a suitable error will be given.  (This prevents a question being asked.)

    if (context == CREATURE_TOKEN && good_ones == 0) return match_list-->0;

    if (indef_mode == 0) indef_type=0;

    ScoreMatchL(context);
    if (number_matched == 0) return -1;

    if (indef_mode == 0) {
        !  Is there now a single highest-scoring object?
        i = SingleBestGuess();
        if (i >= 0) {

            #Ifdef DEBUG;
            if (parser_trace >= 4) print "   Single best-scoring object returned.]^";
            #Endif; ! DEBUG
            return i;
        }
    }

    if (indef_mode == 1 && indef_type & PLURAL_BIT ~= 0) {
        if (context ~= MULTI_TOKEN or MULTIHELD_TOKEN or MULTIEXCEPT_TOKEN
                     or MULTIINSIDE_TOKEN) {
            etype = MULTI_PE;
            return -1;
        }
        i = 0; offset = multiple_object-->0;
        for (j=BestGuess(): j~=-1 && i<indef_wanted && i+offset<MATCH_LIST_WORDS-1:
        	j=BestGuess()) {
            flag = 0;
            BeginActivity(DECIDING_WHETHER_ALL_INC_ACT, j);
            if ((ForActivity(DECIDING_WHETHER_ALL_INC_ACT, j)) == 0) {
                if (j hasnt concealed && j hasnt worn) flag = 1;
                if (context == MULTIHELD_TOKEN or MULTIEXCEPT_TOKEN && parent(j) ~= actor)
                    flag = 0;

                if (action_to_be == ##Take or ##Remove && parent(j) == actor)
                    flag = 0;

                k = ChooseObjects(j, flag);

                if (k == 1)
                    flag = 1;
                else {
                    if (k == 2) flag = 0;
                }
            } else {
                flag = 0; if (RulebookSucceeded()) flag = 1;
            }
            EndActivity(DECIDING_WHETHER_ALL_INC_ACT, j);
            if (flag == 1) {
                i++; multiple_object-->(i+offset) = j;
                #Ifdef DEBUG;
                if (parser_trace >= 4) print "   Accepting it^";
                #Endif; ! DEBUG
            }
            else {
                i = i;
                #Ifdef DEBUG;
                if (parser_trace >= 4) print "   Rejecting it^";
                #Endif; ! DEBUG
            }
        }
        if (i < indef_wanted && indef_wanted < INDEF_ALL_WANTED) {
            etype = TOOFEW_PE; multi_wanted = indef_wanted;
			 if (parser_trace >= 4) print "Too few found^";
            multi_had=i;
            return -1;
        }
        multiple_object-->0 = i+offset;
        multi_context = context;
        #Ifdef DEBUG;
        if (parser_trace >= 4)
            print "   Made multiple object of size ", i, "]^";
        #Endif; ! DEBUG
        return 1;
    }

    for (i=0 : i<number_matched : i++) match_classes-->i = 0;

    n = 1;
    for (i=0 : i<number_matched : i++)
        if (match_classes-->i == 0) {
            match_classes-->i = n++; flag = 0;
            for (j=i+1 : j<number_matched : j++)
                if (match_classes-->j == 0 && Identical(match_list-->i, match_list-->j) == 1) {
                    flag=1;
                    match_classes-->j = match_classes-->i;
                }
            if (flag == 1) match_classes-->i = 1-n;
        }
     n--; number_of_classes = n;

    #Ifdef DEBUG;
    if (parser_trace >= 4) {
        print "   Grouped into ", n, " possibilities by name:^";
        for (i=0 : i<number_matched : i++)
            if (match_classes-->i > 0)
                print "   ", (The) match_list-->i, " (", match_list-->i, ")  ---  group ",
                  match_classes-->i, "^";
    }
    #Endif; ! DEBUG

    if (indef_mode == 0) {
        if (n > 1) {
            k = -1;
            for (i=0 : i<number_matched : i++) {
                if (match_scores-->i > k) {
                    k = match_scores-->i;
                    j = match_classes-->i; j = j*j;
                    flag = 0;
                }
                else
                    if (match_scores-->i == k) {
                        if ((match_classes-->i) * (match_classes-->i) ~= j)
                            flag = 1;
                    }
            }

        if (flag) {
            #Ifdef DEBUG;
            if (parser_trace >= 4) print "   Unable to choose best group, so ask player.]^";
            #Endif; ! DEBUG
            return 0;
        }
        #Ifdef DEBUG;
        if (parser_trace >= 4) print "   Best choices are all from the same group.^";
        #Endif; ! DEBUG
        }
    }

    !  When the player is really vague, or there's a single collection of
    !  indistinguishable objects to choose from, choose the one the player
    !  most recently acquired, or if the player has none of them, then
    !  the one most recently put where it is.

    if (n == 1) dont_infer = true;
    return BestGuess();

]; ! Adjudicate


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: ReviseMulti
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ReviseMulti second_p  i low;
    #Ifdef DEBUG;
    if (parser_trace >= 4)
    	print "   Revising multiple object list of size ", multiple_object-->0,
     	" with 2nd ", (name) second_p, "^";
    #Endif; ! DEBUG

    if (multi_context == MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN) {
        for (i=1,low=0 : i<=multiple_object-->0 : i++) {
            if ( (multi_context==MULTIEXCEPT_TOKEN && multiple_object-->i ~= second_p) ||
                 (multi_context==MULTIINSIDE_TOKEN && multiple_object-->i in second_p)) {
                low++;
                multiple_object-->low = multiple_object-->i;
            }
        }
        multiple_object-->0 = low;
    }

    if (multi_context == MULTI_TOKEN && action_to_be == ##Take) {
        #Ifdef DEBUG;
        if (parser_trace >= 4) print "   Token 2 plural case: number with actor ", low, "^";
        #Endif; ! DEBUG
        if (take_all_rule == 2) {
            for (i=1,low=0 : i<=multiple_object-->0 : i++) {
                if (ScopeCeiling(multiple_object-->i) == ScopeCeiling(actor)) {
                    low++;
                    multiple_object-->low = multiple_object-->i;
                }
            }
            multiple_object-->0 = low;
        }
    }

    i = multiple_object-->0;
    #Ifdef DEBUG;
    if (parser_trace >= 4) print "   Done: new size ", i, "^";
    #Endif; ! DEBUG
    if (i == 0) return NOTHING_PE;
    return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Match List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MakeMatch obj quality i;
    #Ifdef DEBUG;
    if (parser_trace >= 6) print "    Match with quality ",quality,"^";
    #Endif; ! DEBUG
    if (token_filter ~= 0 && ConsultNounFilterToken(obj) == 0) {
        #Ifdef DEBUG;
        if (parser_trace >= 6) print "    Match filtered out: token filter ", token_filter, "^";
        #Endif; ! DEBUG
        rtrue;
    }
    if (quality < match_length) rtrue;
    if (quality > match_length) { match_length = quality; number_matched = 0; }
    else {
        if (number_matched >= MATCH_LIST_WORDS) rtrue;
        for (i=0 : i<number_matched : i++)
            if (match_list-->i == obj) rtrue;
    }
    match_list-->number_matched++ = obj;
    #Ifdef DEBUG;
    if (parser_trace >= 6) print "    Match added to list^";
    #Endif; ! DEBUG
];

[ ConsultNounFilterToken obj sn rv;
    if (token_filter ofclass Routine) {
    	sn = noun;
	    noun = obj;
    	rv = indirect(token_filter);
    	noun = sn;
    	return rv;
    }
    if (obj has (token_filter-1)) rtrue;
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: ScoreMatchL
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant SCORE__CHOOSEOBJ = 1000;
Constant SCORE__IFGOOD = 500;
Constant SCORE__UNCONCEALED = 100;
Constant SCORE__BESTLOC = 60;
Constant SCORE__NEXTBESTLOC = 40;
Constant SCORE__NOTCOMPASS = 20;
Constant SCORE__NOTSCENERY = 10;
Constant SCORE__NOTACTOR = 5;
Constant SCORE__GNA = 1;
Constant SCORE__DIVISOR = 20;

Constant PREFER_HELD;
[ ScoreMatchL context its_owner its_score obj i j threshold met a_s l_s;
!   if (indef_type & OTHER_BIT ~= 0) threshold++;
    if (indef_type & MY_BIT ~= 0)    threshold++;
    if (indef_type & THAT_BIT ~= 0)  threshold++;
    if (indef_type & LIT_BIT ~= 0)   threshold++;
    if (indef_type & UNLIT_BIT ~= 0) threshold++;
    if (indef_owner ~= nothing)      threshold++;

    #Ifdef DEBUG;
    if (parser_trace >= 4) print "   Scoring match list: indef mode ", indef_mode, " type ",
      indef_type, ", satisfying ", threshold, " requirements:^";
    #Endif; ! DEBUG

    #ifdef PREFER_HELD;
    a_s = SCORE__BESTLOC; l_s = SCORE__NEXTBESTLOC;
    if (action_to_be == ##Take or ##Remove) {
        a_s = SCORE__NEXTBESTLOC; l_s = SCORE__BESTLOC;
    }
    context = context;  ! silence warning
    #ifnot;
    a_s = SCORE__NEXTBESTLOC; l_s = SCORE__BESTLOC;
    if (context == HELD_TOKEN or MULTIHELD_TOKEN or MULTIEXCEPT_TOKEN) {
        a_s = SCORE__BESTLOC; l_s = SCORE__NEXTBESTLOC;
    }
    #endif; ! PREFER_HELD

    for (i=0 : i<number_matched : i++) {
        obj = match_list-->i; its_owner = parent(obj); its_score=0; met=0;

        !      if (indef_type & OTHER_BIT ~= 0
        !          &&  obj ~= itobj or himobj or herobj) met++;
        if (indef_type & MY_BIT ~= 0 && its_owner == actor) met++;
        if (indef_type & THAT_BIT ~= 0 && its_owner == actors_location) met++;
        if (indef_type & LIT_BIT ~= 0 && obj has light) met++;
        if (indef_type & UNLIT_BIT ~= 0 && obj hasnt light) met++;
        if (indef_owner ~= 0 && its_owner == indef_owner) met++;

        if (met < threshold) {
            #Ifdef DEBUG;
            if (parser_trace >= 4)
            	print "   ", (The) match_list-->i, " (", match_list-->i, ") in ",
            	    (the) its_owner, " is rejected (doesn't match descriptors)^";
            #Endif; ! DEBUG
            match_list-->i = -1;
        }
        else {
            its_score = 0;
            if (obj hasnt concealed) its_score = SCORE__UNCONCEALED;

            if (its_owner == actor) its_score = its_score + a_s;
            else
                if (its_owner == actors_location) its_score = its_score + l_s;
                else
                    if (its_owner ~= compass) its_score = its_score + SCORE__NOTCOMPASS;

            its_score = its_score + SCORE__CHOOSEOBJ * ChooseObjects(obj, 2);

            if (obj hasnt scenery) its_score = its_score + SCORE__NOTSCENERY;
            if (obj ~= actor) its_score = its_score + SCORE__NOTACTOR;

            !   A small bonus for having the correct GNA,
            !   for sorting out ambiguous articles and the like.

            if (indef_cases & (PowersOfTwo_TB-->(GetGNAOfObject(obj))))
                its_score = its_score + SCORE__GNA;

            match_scores-->i = match_scores-->i + its_score;
            #Ifdef DEBUG;
            if (parser_trace >= 4) print "     ", (The) match_list-->i, " (", match_list-->i,
              ") in ", (the) its_owner, " : ", match_scores-->i, " points^";
            #Endif; ! DEBUG
        }
     }

    for (i=0 : i<number_matched : i++) {
        while (match_list-->i == -1) {
            if (i == number_matched-1) { number_matched--; break; }
            for (j=i : j<number_matched-1 : j++) {
                match_list-->j = match_list-->(j+1);
                match_scores-->j = match_scores-->(j+1);
            }
            number_matched--;
        }
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: BestGuess
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BestGuess  earliest its_score best i;
    earliest = 0; best = -1;
    for (i=0 : i<number_matched : i++) {
        if (match_list-->i >= 0) {
            its_score = match_scores-->i;
            if (its_score > best) { best = its_score; earliest = i; }
        }
    }
    #Ifdef DEBUG;
    if (parser_trace >= 4)
      if (best < 0) print "   Best guess ran out of choices^";
      else print "   Best guess ", (the) match_list-->earliest,
      	" (", match_list-->earliest, ")^";
    #Endif; ! DEBUG
    if (best < 0) return -1;
    i = match_list-->earliest;
    match_list-->earliest = -1;
    return i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: SingleBestGuess
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SingleBestGuess  earliest its_score best i;
    earliest = -1; best = -1000;
    for (i=0 : i<number_matched : i++) {
        its_score = match_scores-->i;
        if (its_score == best) earliest = -1;
        if (its_score > best) { best = its_score; earliest = match_list-->i; }
    }
    return earliest;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Identical
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Identical o1 o2 p1 p2 n1 n2 i j flag;
    if (o1 == o2) rtrue;  ! This should never happen, but to be on the safe side
    if (o1 == 0 || o2 == 0) rfalse;  ! Similarly
    if (o1 ofclass K3_direction || o2 ofclass K3_direction) rfalse; ! Saves time

    !  What complicates things is that o1 or o2 might have a parsing routine,
    !  so the parser can't know from here whether they are or aren't the same.
    !  If they have different parsing routines, we simply assume they're
    !  different.  If they have the same routine (which they probably got from
    !  a class definition) then the decision process is as follows:
    !
    !     the routine is called (with self being o1, not that it matters)
    !       with noun and second being set to o1 and o2, and action being set
    !       to the fake action TheSame.  If it returns -1, they are found
    !       identical; if -2, different; and if >=0, then the usual method
    !       is used instead.

    if (o1.parse_name ~= 0 || o2.parse_name ~= 0) {
      if (o1.parse_name ~= o2.parse_name) rfalse;
      parser_action = ##TheSame; parser_one = o1; parser_two = o2;
      j = wn; i = RunRoutines(o1,parse_name); wn = j;
      if (i == -1) rtrue;
      if (i == -2) rfalse;
    }

    !  This is the default algorithm: do they have the same words in their
    !  "name" (i.e. property no. 1) properties.  (Note that the following allows
    !  for repeated words and words in different orders.)

    p1 = o1.&1; n1 = (o1.#1)/WORDSIZE;
    p2 = o2.&1; n2 = (o2.#1)/WORDSIZE;

    !  for (i=0 : i<n1 : i++) { print (address) p1-->i, " "; } new_line;
    !  for (i=0 : i<n2 : i++) { print (address) p2-->i, " "; } new_line;

    for (i=0 : i<n1 : i++) {
        flag = 0;
        for (j=0 : j<n2 : j++)
            if (p1-->i == p2-->j) flag = 1;
        if (flag == 0) rfalse;
    }

    for (j=0 : j<n2 : j++) {
        flag = 0;
        for (i=0 : i<n1 : i++)
            if (p1-->i == p2-->j) flag = 1;
        if (flag == 0) rfalse;
    }

    !  print "Which are identical!^";
    rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Print Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintInferredCommand from singleton_noun;
	singleton_noun = FALSE;
	if ((from ~= 0) && (from == pcount-1) &&
		(pattern-->from > 1) && (pattern-->from < REPARSE_CODE))
			singleton_noun = TRUE;

	if (singleton_noun) {
		BeginActivity(CLARIFYING_PARSERS_CHOICE_ACT, pattern-->from);
		if (ForActivity(CLARIFYING_PARSERS_CHOICE_ACT, pattern-->from) == 0) {
			print "("; PrintCommand(from); print ")^";
		}
		EndActivity(CLARIFYING_PARSERS_CHOICE_ACT, pattern-->from);
	} else {
		print "("; PrintCommand(from); print ")^";
	}
];

[ PrintCommand from i k spacing_flag;
    if (from == 0) {
        i = verb_word;
        if (LanguageVerb(i) == 0)
            if (PrintVerb(i) == 0) print (address) i;
        from++; spacing_flag = true;
    }
    for (k=from : k<pcount : k++) {
        i = pattern-->k;
        if (i == PATTERN_NULL) continue;
        if (spacing_flag) print (char) ' ';
        if (i == 0) { PARSER_CLARIF_INTERNAL_RM('F'); jump TokenPrinted; }
        if (i == 1) { PARSER_CLARIF_INTERNAL_RM('G'); jump TokenPrinted; }
        if (i >= REPARSE_CODE)
            print (address) VM_NumberToDictionaryAddress(i-REPARSE_CODE);
        else
            if (i ofclass K3_direction)
                print (LanguageDirection) i; ! the direction name as adverb
            else
                print (the) i;
      .TokenPrinted;
        spacing_flag = true;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: CantSee
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CantSee  i w e;
    saved_oops=oops_from;

    if (scope_token ~= 0) {
        scope_error = scope_token; return ASKSCOPE_PE;
    }

    wn--; w = NextWord();
    e = CANTSEE_PE;
    if (w == pronoun_word) {
		w = NextWordStopped(); wn--;
		if ((w == -1) || (line_token-->(pcount) ~= ENDIT_TOKEN)) {
			if (pcount > 0) AnalyseToken(line_token-->(pcount-1));
			if ((pcount > 0) && (found_ttype == ROUTINE_FILTER_TT or ATTR_FILTER_TT))
				e = NOTINCONTEXT_PE;
			else {
				pronoun__word = pronoun_word; pronoun__obj = pronoun_obj;
				e = ITGONE_PE;
			}
		}
    }
    
    if (etype > e) return etype;
    return e;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Multiple Object List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MultiAdd o i j;
    i = multiple_object-->0;
    if (i == MATCH_LIST_WORDS-1) { toomany_flag = 1; rtrue; }
    for (j=1 : j<=i : j++)
        if (o == multiple_object-->j) rtrue;
    i++;
    multiple_object-->i = o;
    multiple_object-->0 = i;
];

[ MultiSub o i j k;
    i = multiple_object-->0;
    for (j=1 : j<=i : j++)
        if (o == multiple_object-->j) {
            for (k=j : k<=i : k++) multiple_object-->k = multiple_object-->(k+1);
            multiple_object-->0 = --i;
            return 0;
        }
    return VAGUE_PE;
];

[ MultiFilter attr  i j o;
	.MFiltl;
    i = multiple_object-->0;
    for (j=1 : j<=i : j++) {
        o = multiple_object-->j;
        if (o hasnt attr) { MultiSub(o); jump Mfiltl; }
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Scope
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PlaceInScope O opts ws; ! If opts is set, do not place contents in scope
	ws = wn; wn = match_from;
	if (opts == false) DoScopeActionAndRecurse(O);
	else DoScopeAction(O);
	wn = ws; return;
];

[ AddToScope obj;
    if (ats_flag >= 2) DoScopeActionAndRecurse(obj, 0, ats_flag-2);
    if (ats_flag == 1) { if (HasLightSource(obj)==1) ats_hls = 1; }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Scope Level 0
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestScope obj act a al sr x y;
    x = parser_one; y = parser_two;
    parser_one = obj; parser_two = 0; a = actor; al = actors_location;
    sr = scope_reason; scope_reason = TESTSCOPE_REASON;
    if (act == 0) actor = player; else actor = act;
    actors_location = ScopeCeiling(actor);
    SearchScope(actors_location, actor, 0); scope_reason = sr; actor = a;
    actors_location = al; parser_one = x; x = parser_two; parser_two = y;
    return x;
];

[ LoopOverScope routine act x y a al;
    x = parser_one; y = scope_reason; a = actor; al = actors_location;
    parser_one = routine;
    if (act == 0) actor = player; else actor = act;
    actors_location = ScopeCeiling(actor);
    scope_reason = LOOPOVERSCOPE_REASON;
    SearchScope(actors_location, actor, 0);
    parser_one = x; scope_reason = y; actor = a; actors_location = al;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: SearchScope
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SearchScope domain1 domain2 context i;
	if (domain1 == 0) return;
	! (a)
    if (scope_token) {
        scope_stage = 2;
        #Ifdef DEBUG;
        if (parser_trace >= 3) print "  [Scope routine called at stage 2]^";
        #Endif;
        if (indirect(scope_token) ~= 0) rtrue;
    }
	! (b)
    BeginActivity(DECIDING_SCOPE_ACT, actor);
    if (ForActivity(DECIDING_SCOPE_ACT, actor) == false) {
		! (c.1)
		if ((scope_reason == PARSING_REASON) && (context == MULTIINSIDE_TOKEN) &&
			(advance_warning ~= -1)) {
			if (IsSeeThrough(advance_warning) == 1)
			    ScopeWithin(advance_warning, 0, context);
		} else {
			! (c.2)
			if ((scope_reason == PARSING_REASON) && (context ~= CREATURE_TOKEN) &&
				(indef_mode == 0) && (domain1 == actors_location))
					ScopeWithin(compass);
			! (c.3)
			if (domain1 has supporter or container) DoScopeAction(domain1);
			ScopeWithin(domain1, domain2, context);
			! (c.4)
			if (domain2) {
				if (domain2 has supporter or container) DoScopeAction(domain2);
				ScopeWithin(domain2, 0, context);
			}
		}
		! (c.5)
		if (thedark == domain1 or domain2) {
			DoScopeActionAndRecurse(actor, actor, context);
			if (parent(actor) has supporter or container)
				DoScopeActionAndRecurse(parent(actor), parent(actor), context);
		}
    }
    EndActivity(DECIDING_SCOPE_ACT, actor);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: ScopeWithin
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ScopeWithin domain nosearch context obj next_obj;
    if (domain == 0) rtrue;

    ! Look through the objects in the domain, avoiding "objectloop" in case
    ! movements occur.
    obj = child(domain);
    while (obj) {
        next_obj = sibling(obj);
        if ((domain == actor) || (TestConcealment(domain, obj) == false))
            DoScopeActionAndRecurse(obj, nosearch, context);
        obj = next_obj;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: DoScopeActionAndRecurse
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DoScopeActionAndRecurse domain nosearch context i ad n obj next_obj;
	DoScopeAction(domain);

 	! (a)
    if ((domain ~= nosearch) &&
        ((domain ofclass K1_room or K8_person) || (IsSeeThrough(domain) == 1))) {
		obj = child(domain);
		while (obj) {
			next_obj = sibling(obj);
			if ((domain == actor) || (TestConcealment(domain, obj) == false))
				DoScopeActionAndRecurse(obj, nosearch, context);
			obj = next_obj;
		}
	}

	! (b)
	if (domain provides component_child) {
		obj = domain.component_child;
		while (obj) {
			next_obj = obj.component_sibling;
			if ((domain == actor) || (TestConcealment(domain, obj) == false))
				DoScopeActionAndRecurse(obj, 0, context);
			obj = next_obj;
		}
	}

    ! (c)
    ad = domain.&add_to_scope;
    if (ad ~= 0) {
        ! Test if the property value is not an object.
        #Ifdef TARGET_ZCODE;
        i = (UnsignedCompare(ad-->0, top_object) > 0);
        #Ifnot; ! TARGET_GLULX
        i = (((ad-->0)->0) ~= $70);
        #Endif; ! TARGET_

        if (i) {
            ats_flag = 2+context;
            RunRoutines(domain, add_to_scope);
            ats_flag = 0;
        }
        else {
            n = domain.#add_to_scope;
            for (i=0 : (WORDSIZE*i)<n : i++)
                if (ad-->i)
                    DoScopeActionAndRecurse(ad-->i, 0, context);
        }
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: DoScopeAction
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DoScopeAction item;

    #Ifdef DEBUG;
    if (parser_trace >= 6)
        print "[DSA on ", (the) item, " with reason = ", scope_reason,
            " p1 = ", parser_one, " p2 = ", parser_two, "]^";
    #Endif; ! DEBUG

    @push parser_one; @push scope_reason;

	switch(scope_reason) {
		TESTSCOPE_REASON: if (item == parser_one) parser_two = 1;
		LOOPOVERSCOPE_REASON: if (parser_one ofclass Routine) indirect(parser_one, item);
		PARSING_REASON, TALKING_REASON: MatchTextAgainstObject(item);
    }

    @pull scope_reason; @pull parser_one;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parsing Object Names
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MatchTextAgainstObject item i;
    if (token_filter ~= 0 && ConsultNounFilterToken(item) == 0) return;

	if (match_from <= num_words) { ! If there's any text to match, that is
		wn = match_from;
		i = NounWord();
		if ((i == 1) && (player == item)) MakeMatch(item, 1); ! "me"
		if ((i >= 2) && (i < 128) && (LanguagePronouns-->i == item)) MakeMatch(item, 1);
	}

	! Construing the current word as the start of a noun, can it refer to the
	! object?

	wn = match_from;
	if (TryGivenObject(item) > 0)
		if (indef_nspec_at > 0 && match_from ~= indef_nspec_at) {
			! This case arises if the player has typed a number in
			! which is hypothetically an indefinite descriptor:
			! e.g. "take two clubs".  We have just checked the object
			! against the word "clubs", in the hope of eventually finding
			! two such objects.  But we also backtrack and check it
			! against the words "two clubs", in case it turns out to
			! be the 2 of Clubs from a pack of cards, say.  If it does
			! match against "two clubs", we tear up our original
			! assumption about the meaning of "two" and lapse back into
			! definite mode.

			wn = indef_nspec_at;
			if (TryGivenObject(item) > 0) {
				match_from = indef_nspec_at;
				ResetDescriptors();
			}
			wn = match_from;
		}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: TryGivenObject
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TryGivenObject obj nomatch threshold k w j;
    #Ifdef DEBUG;
    if (parser_trace >= 5) print "    Trying ", (the) obj, " (", obj, ") at word ", wn, "^";
    #Endif; ! DEBUG

	if (nomatch && obj == 0) return 0;

! if (nomatch) print "*** TryGivenObject *** on ", (the) obj, " at wn = ", wn, "^";

    dict_flags_of_noun = 0;

!  If input has run out then always match, with only quality 0 (this saves
!  time).

    if (wn > num_words) {
    	if (nomatch) return 0;
        if (indef_mode ~= 0)
            dict_flags_of_noun = $$01110000;  ! Reject "plural" bit
        MakeMatch(obj,0);
        #Ifdef DEBUG;
        if (parser_trace >= 5) print "    Matched (0)^";
        #Endif; ! DEBUG
        return 1;
    }

!  Ask the object to parse itself if necessary, sitting up and taking notice
!  if it says the plural was used:

    if (obj.parse_name~=0) {
        parser_action = NULL; j=wn;
        k = RunRoutines(obj,parse_name);
        if (k > 0) {
            wn=j+k;

          .MMbyPN;

            if (parser_action == ##PluralFound)
                dict_flags_of_noun = dict_flags_of_noun | 4;

            if (dict_flags_of_noun & 4) {
                if (~~allow_plurals) k = 0;
                else {
                    if (indef_mode == 0) {
                        indef_mode = 1; indef_type = 0; indef_wanted = 0;
                    }
                    indef_type = indef_type | PLURAL_BIT;
                    if (indef_wanted == 0) indef_wanted = INDEF_ALL_WANTED;
                }
            }

            #Ifdef DEBUG;
            if (parser_trace >= 5) print "    Matched (", k, ")^";
            #Endif; ! DEBUG
            if (nomatch == false) MakeMatch(obj,k);
            return k;
        }
        if (k == 0) jump NoWordsMatch;
    }

    ! The default algorithm is simply to count up how many words pass the
    ! Refers test:

    parser_action = NULL;

    w = NounWord();

    if (w == 1 && player == obj) { k=1; jump MMbyPN; }

    if (w >= 2 && w < 128 && (LanguagePronouns-->w == obj)) { k = 1; jump MMbyPN; }

    if (Refers(obj, wn-1) == 0) {
        .NoWordsMatch;
        if (indef_mode ~= 0) { k = 0; parser_action = NULL; jump MMbyPN; }
        rfalse;
    }

	threshold = 1;
	dict_flags_of_noun = (w->#dict_par1) & $$01110100;
	w = NextWord();
	while (Refers(obj, wn-1)) {
		threshold++;
		if (w)
		   dict_flags_of_noun = dict_flags_of_noun | ((w->#dict_par1) & $$01110100);
		w = NextWord();
	}

    k = threshold;
    jump MMbyPN;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Refers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Refers obj wnum   wd k l m;
    if (obj == 0) rfalse;

    #Ifdef LanguageRefers;
    k = LanguageRefers(obj,wnum); if (k >= 0) return k;
    #Endif; ! LanguageRefers

    k = wn; wn = wnum; wd = NextWordStopped(); wn = k;

    if (parser_inflection >= 256) {
        k = indirect(parser_inflection, obj, wd);
        if (k >= 0) return k;
        m = -k;
    }
    else
        m = parser_inflection;
    k = obj.&m; l = (obj.#m)/WORDSIZE-1;
    for (m=0 : m<=l : m++)
        if (wd == k-->m) rtrue;
    rfalse;
];

[ WordInProperty wd obj prop k l m;
    k = obj.&prop; l = (obj.#prop)/WORDSIZE-1;
    for (m=0 : m<=l : m++)
        if (wd == k-->m) rtrue;
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: NounWord
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NounWord i j s;
    i = NextWord();
    if (i == 0) rfalse;
    if (i == ME1__WD or ME2__WD or ME3__WD) return 1;
    s = LanguagePronouns-->0;
    for (j=1 : j<=s : j=j+3)
        if (i == LanguagePronouns-->j)
            return j+2;
    if ((i->#dict_par1)&128 == 0) rfalse;
    return i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: TryNumber
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TryNumber wordnum   i j c num len mul tot d digit;
    i = wn; wn = wordnum; j = NextWord(); wn = i;
    j = NumberWord(j); ! Test for verbal forms ONE to THIRTY
    if (j >= 1) return j;

    #Ifdef TARGET_ZCODE;
    i = wordnum*4+1; j = parse->i; num = j+buffer; len = parse->(i-1);
    #Ifnot; ! TARGET_GLULX
    i = wordnum*3; j = parse-->i; num = j+buffer; len = parse-->(i-1);
    #Endif; ! TARGET_

    if (len >= 4) mul=1000;
    if (len == 3) mul=100;
    if (len == 2) mul=10;
    if (len == 1) mul=1;

    tot = 0; c = 0; len = len-1;

    for (c=0 : c<=len : c++) {
        digit=num->c;
        if (digit == '0') { d = 0; jump digok; }
        if (digit == '1') { d = 1; jump digok; }
        if (digit == '2') { d = 2; jump digok; }
        if (digit == '3') { d = 3; jump digok; }
        if (digit == '4') { d = 4; jump digok; }
        if (digit == '5') { d = 5; jump digok; }
        if (digit == '6') { d = 6; jump digok; }
        if (digit == '7') { d = 7; jump digok; }
        if (digit == '8') { d = 8; jump digok; }
        if (digit == '9') { d = 9; jump digok; }
        return -1000;
     .digok;
        tot = tot+mul*d; mul = mul/10;
    }
    if (len > 3) tot=10000;
    return tot;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Gender
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GetGender person;
    if (person hasnt female) rtrue;
    rfalse;
];

[ GetGNAOfObject obj case gender;
    if (obj hasnt animate) case = 6;
    if (obj has male) gender = male;
    if (obj has female) gender = female;
    if (obj has neuter) gender = neuter;
    if (gender == 0) {
        if (case == 0) gender = LanguageAnimateGender;
        else gender = LanguageInanimateGender;
    }
    if (gender == female)   case = case + 1;
    if (gender == neuter)   case = case + 2;
    if (obj has pluralname) case = case + 3;
    return case;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Noticing Plurals
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DetectPluralWord at n i w swn outcome;
	swn = wn; wn = at;
	for (i=0:i<n:i++) {
		w = NextWordStopped();
		if (w == 0 or THEN1__WD or COMMA_WORD or -1) break;
		if ((w->#dict_par1) & $$00000100) {
			parser_action = ##PluralFound;
			outcome = true;
		}
	}
	wn = swn;
	return outcome;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Pronoun Handling
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SetPronoun dword value x;
    for (x=1 : x<=LanguagePronouns-->0 : x=x+3)
        if (LanguagePronouns-->x == dword) {
            LanguagePronouns-->(x+2) = value; return;
        }
    RunTimeError(14);
];

[ PronounValue dword x;
    for (x=1 : x<=LanguagePronouns-->0 : x=x+3)
        if (LanguagePronouns-->x == dword)
            return LanguagePronouns-->(x+2);
    return 0;
];

[ ResetVagueWords obj; PronounNotice(obj); ];

[ PronounNotice obj x bm g;
    if (obj == player) return;

	g = (GetGNAOfObject(obj));

    bm = PowersOfTwo_TB-->g;
    for (x=1 : x<=LanguagePronouns-->0 : x=x+3)
        if (bm & (LanguagePronouns-->(x+1)) ~= 0)
            LanguagePronouns-->(x+2) = obj;

	if (((g % 6) < 3) && (obj has ambigpluralname)) {
		g = g + 3;
		bm = PowersOfTwo_TB-->g;
		for (x=1 : x<=LanguagePronouns-->0 : x=x+3)
			if (bm & (LanguagePronouns-->(x+1)) ~= 0)
				LanguagePronouns-->(x+2) = obj;
	}
];

[ PronounNoticeHeldObjects x;
#IFNDEF MANUAL_PRONOUNS;
	objectloop(x in player) PronounNotice(x);
#ENDIF;
	x = 0; ! To prevent a "not used" error
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Yes/No Questions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ YesOrNo i j;
    for (::) {
        #Ifdef TARGET_ZCODE;
        if (location == nothing || parent(player) == nothing) read buffer2 parse2;
        else read buffer2 parse2 DrawStatusLine;
        j = parse2->1;
        #Ifnot; ! TARGET_GLULX;
        if (location ~= nothing && parent(player) ~= nothing) DrawStatusLine();
        KeyboardPrimitive(buffer2, parse2);
        j = parse2-->0;
        #Endif; ! TARGET_
        if (j) { ! at least one word entered
            i = parse2-->1;
            if (i == YES1__WD or YES2__WD or YES3__WD) rtrue;
            if (i == NO1__WD or NO2__WD or NO3__WD) rfalse;
        }
        YES_OR_NO_QUESTION_INTERNAL_RM('A'); print "> ";
    }
];

[ YES_OR_NO_QUESTION_INTERNAL_R; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Number Words
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NumberWord o i n;
    n = LanguageNumbers-->0;
    for (i=1 : i<=n : i=i+2)
        if (o == LanguageNumbers-->i) return LanguageNumbers-->(i+1);
    return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Choose Objects
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

!Constant COBJ_DEBUG;

! the highest value returned by CheckDPMR (see the Standard Rules)
Constant HIGHEST_DPMR_SCORE = 4;

Array alt_match_list --> (MATCH_LIST_WORDS+1);

#ifdef TARGET_GLULX;
[ COBJ__Copy words from to  i;
	for (i=0: i<words: i++)
		to-->i = from-->i;
];
#ifnot;
[ COBJ__Copy words from to  bytes;
	bytes = words * 2;
	@copy_table from to bytes;
];
#endif;

! swap alt_match_list with match_list/number_matched
[ COBJ__SwapMatches i x;
	! swap the counts
	x = number_matched;
	number_matched = alt_match_list-->0;
	alt_match_list-->0 = x;
	! swap the values
	if (x < number_matched) x = number_matched;
	for (i=x: i>0: i--) {
		x = match_list-->(i-1);
		match_list-->(i-1) = alt_match_list-->i;
		alt_match_list-->i = x;
	}
];

[ ChooseObjects obj code  l i swn spcount;
	if (code<2) rfalse;

	if (cobj_flag == 1) {
		.CodeOne;
		if (parameters > 0) {
			#ifdef COBJ_DEBUG;
			print "[scoring ", (the) obj, " (second)]^";
			#endif;
			return ScoreDabCombo(parser_results-->INP1_PRES, obj);
		} else {
			#ifdef COBJ_DEBUG;
			print "[scoring ", (the) obj, " (first) in ",
				alt_match_list-->0, " combinations]^";
			#endif;
			l = 0;
			for (i=1: i<=alt_match_list-->0: i++) {
				spcount = ScoreDabCombo(obj, alt_match_list-->i);
				if (spcount == HIGHEST_DPMR_SCORE) {
					#ifdef COBJ_DEBUG;
					print "[scored ", spcount, " - best possible]^";
					#endif;
					return spcount;
				}
				if (spcount>l) l = spcount;
			}
			return l;
		}
	}
	if (cobj_flag == 2) {
		.CodeTwo;
		#ifdef COBJ_DEBUG;
		print "[scoring ", (the) obj, " (simple); parameters = ", parameters,
			" aw = ", advance_warning, "]^";
		#endif;
		@push action_to_be;
		if (parameters==0) {
			if (advance_warning > 0)
				l = ScoreDabCombo(obj, advance_warning);
			else
				l = ScoreDabCombo(obj, 0);
		} else {
			l = ScoreDabCombo(parser_results-->INP1_PRES, obj);
		}
		@pull action_to_be;
		return l;
	}

	#ifdef COBJ_DEBUG;
	print "[choosing a cobj strategy: ";
	#endif;
	swn = wn;
	spcount = pcount;
	while (line_ttype-->pcount == PREPOSITION_TT) pcount++;
	if (line_ttype-->pcount == ELEMENTARY_TT) {
		if (line_tdata-->pcount == TOPIC_TOKEN) {
			pcount = spcount;
			jump CodeTwo;
		}
		while (wn <= num_words) {
			l = NextWordStopped(); wn--;
			if (l == THEN1__WD) break;
			if ( (l ~= -1 or 0) && (l->#dict_par1) &8 ) { wn++; continue; }	! if preposition
			if (l == ALL1__WD or ALL2__WD or ALL3__WD or ALL4__WD or ALL5__WD) { wn++; continue; }
			SafeSkipDescriptors();
			! save the current match state
			@push match_length; @push token_filter; @push match_from;
			alt_match_list-->0 = number_matched;
			COBJ__Copy(number_matched, match_list, alt_match_list+WORDSIZE);
			! now get all the matches for the second noun
			match_length = 0; number_matched = 0; match_from = wn;
			token_filter = 0;
			SearchScope(actor, actors_location, line_tdata-->pcount);
			#ifdef COBJ_DEBUG;
			print number_matched, " possible second nouns]^";
			#endif;
			wn = swn;
			cobj_flag = 1;
			! restore match variables
			COBJ__SwapMatches();
			@pull match_from; @pull token_filter; @pull match_length;
			pcount = spcount;
			jump CodeOne;
		}
	}
	pcount = spcount;
	wn = swn;	
	
	#ifdef COBJ_DEBUG;
	print "nothing interesting]^";
	#endif;
	cobj_flag = 2;
	jump CodeTwo;
];

[ ScoreDabCombo a b  result;
	@push action; @push act_requester; @push noun; @push second;
	action = action_to_be;
	act_requester = player;
	if (action_reversed) { noun = b; second = a; }
	else { noun = a; second = b; }
	result = CheckDPMR();
	@pull second; @pull noun; @pull act_requester; @pull action;
	#ifdef COBJ_DEBUG;
	print "[", (the) a, " / ", (the) b, " => ", result, "]^";
	#endif;
	return result;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Default Topic
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DefaultTopic; return GPR_FAIL; ];



[ ParserError error_type;
	if (error_type) PrintSingleParagraph(error_type);
	rfalse;
];

Object InformLibrary "(Inform Library)" has proper;

Array Protect_I7_Arrays --> 16339 12345;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Order of Play
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Main
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global EarlyInTurnSequence;
Global IterationsOfTurnSequence;

[ Main;
	#ifdef TARGET_ZCODE; max_z_object = #largest_object - 255; #endif;
	ClearRTP();
	FollowRulebook(STARTUP_RB);
	#ifdef DEBUG; InternalTestCases(); #endif;
	while (true) {
		while (deadflag == false) {
			EarlyInTurnSequence = true;
			action = ##Wait; meta = false; noun = nothing; second = nothing;
			actor = player;
			FollowRulebook(TURN_SEQUENCE_RB);
			IterationsOfTurnSequence++;
		}
		if (FollowRulebook(SHUTDOWN_RB) == false) return;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Virtual Machine Startup Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VIRTUAL_MACHINE_STARTUP_R;
	CarryOutActivity(STARTING_VIRTUAL_MACHINE_ACT);
	VM_Initialise();
	print "^^^";
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Initial Situation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant PLAYER_OBJECT_INIS = 0;
Constant START_OBJECT_INIS = 1;
Constant START_ROOM_INIS = 2;
Constant START_TIME_INIS = 3;
Constant DONE_INIS = 4;

Array InitialSituation --> selfobj nothing I197_bedroom 540 0;




! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Initialise Memory Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ INITIALISE_MEMORY_R;
	#ifdef TARGET_GLULX; VM_PreInitialise(); #Endif;
	#Ifdef LanguageInitialise; LanguageInitialise(); #Endif;

	not_yet_in_play = true;
	#ifdef I7_LOOKMODE; lookmode = I7_LOOKMODE; #endif;
	player = InitialSituation-->PLAYER_OBJECT_INIS;
	the_time = InitialSituation-->START_TIME_INIS;
	real_location = nothing;
	location = nothing;

	CreatePropertyOffsets();
	HeapInitialise(); ! Create a completely unused memory allocation heap
	StackFramingInitialise(); ! Create an empty stack
	CreateDynamicRelations(); ! Create relation structures on the heap

	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Seed Random Number Generator Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SEED_RANDOM_NUMBER_GENERATOR_R i;
	if (0) VM_Seed_RNG(0);
	for (i=1: i<=100: i++) random(i);
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Position Player In Model World Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ POSITION_PLAYER_IN_MODEL_R player_to_be;

	player = selfobj;
	player_to_be = InitialSituation-->PLAYER_OBJECT_INIS;
	
	location = LocationOf(player_to_be);
	if (location == 0) {
		location = InitialSituation-->START_ROOM_INIS;
		if (InitialSituation-->START_OBJECT_INIS)
			move player_to_be to InitialSituation-->START_OBJECT_INIS;
		else move player_to_be to location;
	}

	if (player_to_be ~= player) { remove selfobj; ChangePlayer(player_to_be); }
	else { real_location = location; SilentlyConsiderLight(); }

	NOTE_OBJECT_ACQUISITIONS_R(); MoveFloatingObjects();
	
	actor = player; act_requester = nothing; actors_location = real_location; action = ##Wait;

	InitialSituation-->DONE_INIS = true;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Parse Command Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant ACTION_PRES = 0;
Constant NO_INPS_PRES = 1;
Constant INP1_PRES = 2;
Constant INP2_PRES = 3; ! Parser.i6t code assumes this is INP1_PRES + 1

[ PARSE_COMMAND_R;
	if (EarlyInTurnSequence == false) rfalse; ! Prevent use outside top level
	not_yet_in_play = false;

	Parser__parse();
	TreatParserResults();
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Treat Parser Results
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TreatParserResults;
	if (parser_results-->ACTION_PRES == ##MistakeAction) meta = true;

	if (parser_results-->ACTION_PRES == ##Tell &&
		parser_results-->INP1_PRES == player && actor ~= player) {
		parser_results-->ACTION_PRES = ##Ask;
		parser_results-->INP1_PRES = actor; actor = player;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Generate Action Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GENERATE_ACTION_R i;
	if (EarlyInTurnSequence == false) rfalse; ! Prevent use outside top level
	EarlyInTurnSequence = false;

	action = parser_results-->ACTION_PRES;
	act_requester = nothing; if (actor ~= player) act_requester = player;

	inp1 = 0; inp2 = 0; multiflag = false;
	if (parser_results-->NO_INPS_PRES >= 1) {
		inp1 = parser_results-->INP1_PRES; if (inp1 == 0) multiflag = true;
	}
	if (parser_results-->NO_INPS_PRES >= 2) {
		inp2 = parser_results-->INP2_PRES; if (inp2 == 0) multiflag = true;
	}

	if (inp1 == 1) noun = nothing; else noun = inp1;
	if (inp2 == 1) second = nothing; else second = inp2;

	if (multiflag) {
		if (multiple_object-->0 == 0) {
			if (actor == player) { GENERATE_ACTION_RM('B'); new_line; }
			return;
		}
		if (toomany_flag) {
			toomany_flag = false;
			if (actor == player) { GENERATE_ACTION_RM('A'); }
		}
		i = multiple_object-->0;
		FollowRulebook(MULTIPLE_ACTION_PROCESSING_RB);
		if ((multiple_object-->0 == 1) && (i > 1)) {
			multiflag = false;
			if (inp1 == 0) noun = multiple_object-->1;
			if ((inp2 == 0) && (parser_results-->NO_INPS_PRES >= 2))
				second = multiple_object-->1;
		}
		if (multiple_object-->0 == 0) rfalse;
	}
	
	if (multiflag) {
		GenerateMultipleActions();
		multiflag = false;
	} else BeginAction(action, noun, second);

	if ((actor ~= player) || (act_requester)) action = ##Wait;
	actor = player; act_requester = 0;

	if (meta) { RulebookSucceeds(); rtrue; }
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Generate Multiple Actions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GenerateMultipleActions initial_location k item;
	initial_location = location;
	for (k=1: k<=multiple_object-->0: k++) {
		item = multiple_object-->k;
		RunParagraphOn();
		if (inp1 == 0) { inp1 = item; BeginAction(action, item, second, item); inp1 = 0; }
		else { inp2 = item; BeginAction(action, noun, item, item); inp2 = 0; }
		if (deadflag) return;
		if (location ~= initial_location) {
			if (player == actor) { ACTION_PROCESSING_INTERNAL_RM('J'); new_line; }
			return;
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Timed Events Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TIMED_EVENTS_R i d event_timer fire rule;
	for (i=1: i<=(TimedEventsTable-->0): i++)
		if ((rule=TimedEventsTable-->i) ~= 0) {
			event_timer = TimedEventTimesTable-->i; fire = false;
			if (event_timer<0) {
				(TimedEventTimesTable-->i)++;
				if (TimedEventTimesTable-->i == 0) fire = true;
			} else {
				d = (the_time - event_timer + TWENTY_FOUR_HOURS) % TWENTY_FOUR_HOURS;
				if ((d >= 0) && (d < 30)) fire = true;
			}
			if (fire) {
				TimedEventsTable-->i = 0;
				FollowRulebook(rule);
			}
		}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Setting Timed Events
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SetTimedEvent rule event_time absolute_time i b;
	for (i=1: i<=(TimedEventsTable-->0): i++) {
		if (rule == TimedEventsTable-->i) { b=i; break; }
		if ((b==0) && (TimedEventsTable-->i == 0)) b=i;
	}
	if (b==0) return RunTimeProblem(RTP_TOOMANYEVENTS);
	TimedEventsTable-->b = rule;
	if (absolute_time) TimedEventTimesTable-->b = event_time;
	else TimedEventTimesTable-->b = -event_time;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Setting Time Of Day
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global time_step;

[ SetTime t s;
    the_time = t; time_rate = s; time_step = 0;
    if (s < 0) time_step = 0-s;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Advance Time Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ADVANCE_TIME_R;
    turns++;
    if (the_time ~= NULL) {
        if (time_rate >= 0) the_time = the_time+time_rate;
        else {
            time_step--;
            if (time_step == 0) {
                the_time++;
                time_step = -time_rate;
            }
        }
        the_time = the_time % TWENTY_FOUR_HOURS;
    }
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Note Object Acquisitions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NOTE_OBJECT_ACQUISITIONS_R obj;
    objectloop (obj in player) give obj moved;
    objectloop (obj has concealed)
    	if (IndirectlyContains(player, obj)) give obj ~concealed;
    #Ifdef RUCKSACK_CLASS;
	objectloop (obj in player)
		if (obj ofclass RUCKSACK_CLASS)
			SACK_OBJECT = obj;
	objectloop (obj ofclass RUCKSACK_CLASS && obj provides component_parent
		&& obj.component_parent == player)
		SACK_OBJECT = obj;
	#Endif;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Resurrect Player If Asked Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RESURRECT_PLAYER_IF_ASKED_R;
	if (resurrect_please) {
		RulebookSucceeds(); resurrect_please = false;
		deadflag = 0; story_complete = false; rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Ask The Final Question Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ASK_FINAL_QUESTION_R;
	print "^";
	while (true) {
		CarryOutActivity(DEALING_WITH_FINAL_QUESTION_ACT);
		DivideParagraphPoint();
		if (resurrect_please) rtrue;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Read The Final Answer Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ READ_FINAL_ANSWER_R;
	DrawStatusLine();
	KeyboardPrimitive(buffer, parse);
	players_command = 100 + WordCount();
	num_words = WordCount();
	wn = 1;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Immediately Restart VM Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IMMEDIATELY_RESTART_VM_R; @restart; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Immediately Restore Saved Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IMMEDIATELY_RESTORE_SAVED_R; actor = player; RESTORE_THE_GAME_R(); ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Immediately Quit Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IMMEDIATELY_QUIT_R; @quit; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Immediately Undo Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IMMEDIATELY_UNDO_R; Perform_Undo(); ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Print Obituary Headline Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PRINT_OBITUARY_HEADLINE_R;
    print "^^    ";
    VM_Style(ALERT_VMSTY);
    print "***";
    if (deadflag == 1) PRINT_OBITUARY_HEADLINE_RM('A');
    if (deadflag == 2) PRINT_OBITUARY_HEADLINE_RM('B');
    if (deadflag == 3) PRINT_OBITUARY_HEADLINE_RM('C');
    if (deadflag ~= 0 or 1 or 2 or 3)  {
        print " ";
        TEXT_TY_Say(deadflag);
        print " ";
    }
    print "***";
    VM_Style(NORMAL_VMSTY);
    print "^^"; #Ifndef NO_SCORING; print "^"; #Endif;
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Print Final Score Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PRINT_FINAL_SCORE_R;
	#Iftrue USE_SCORING ~= 0; ANNOUNCE_SCORE_R(); #Endif;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Display Final Status Line Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DISPLAY_FINAL_STATUS_LINE_R;
	sline1 = score; sline2 = turns;
	rfalse;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Properties
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant p3_list_grouping_key = list_together;
Constant p4_printed_name = short_name;
Constant p5_printed_plural_name = plural;
Constant p6_indefinite_article = article;
Constant p7_description = description;
Constant p8_map_region = map_region;
Constant p9_initial_appearance = initial;
Constant p11_other_side = door_to;
Constant p12_carrying_capacity = capacity;
Constant p13_matching_key = with_key;
Constant p22_plural_named = pluralname;
Constant p24_proper_named = proper;
Constant p26_ambiguously_plural = ambigpluralname;
Constant p27_privately_named = privately_named;
Constant p29_lighted = light;
Constant p31_visited = visited;
Constant p33_lit = light;
Constant p35_edible = edible;
Constant p37_fixed_in_place = static;
Constant p39_scenery = scenery;
Constant p40_wearable = clothing;
Constant p41_pushable_between_rooms = pushable;
Constant p42_handled = moved;
Constant p44_undescribed = concealed;
Constant p45_marked_for_listing = workflag;
Constant p47_mentioned = mentioned;
Constant p49_enterable = enterable;
Constant p51_transparent = transparent;
Constant p52_open = open;
Constant p54_openable = openable;
Constant p56_lockable = lockable;
Constant p57_locked = locked;
Constant p59_female = female;
Constant p61_neuter = neuter;
Constant p62_switched_on = on;
Constant p102 = worn;
Constant p103 = vector;
Constant p104 = room_index;
Constant p105 = door_dir;
Constant p106 = door_to;
Constant p107 = found_in;
Constant p108 = absent;
Constant p109 = cap_short_name;
Constant p110 = mark_as_room;
Constant p111 = mark_as_thing;
Constant p112 = component_parent;
Constant p113 = component_child;
Constant p114 = component_sibling;
Constant p115 = regional_found_in;
Constant p116 = IK1_Count;
Constant p117 = IK1_Link;
Constant p118 = IK2_Count;
Constant p119 = IK2_Link;
Constant p120 = IK3_Count;
Constant p121 = IK3_Link;
Constant p122 = IK4_Count;
Constant p123 = IK4_Link;
Constant p124 = IK5_Count;
Constant p125 = IK5_Link;
Constant p126 = IK6_Count;
Constant p127 = IK6_Link;
Constant p128 = IK7_Count;
Constant p129 = IK7_Link;
Constant p130 = IK8_Count;
Constant p131 = IK8_Link;
Constant p132 = IK9_Count;
Constant p133 = IK9_Link;
Constant p134 = IK10_Count;
Constant p135 = IK10_Link;
Constant p136 = IK11_Count;
Constant p137 = IK11_Link;
Constant p138 = IK12_Count;
Constant p139 = IK12_Link;
Constant p140 = IK13_Count;
Constant p141 = IK13_Link;
Constant p142 = IK14_Count;
Constant p143 = IK14_Link;
Constant p144 = IK15_Count;
Constant p145 = IK15_Link;
Constant p146 = IK16_Count;
Constant p147 = IK16_Link;
Constant p148 = IK17_Count;
Constant p149 = IK17_Link;
Constant p150 = IK18_Count;
Constant p151 = IK18_Link;
Constant p152 = IK19_Count;
Constant p153 = IK19_Link;
Constant p154 = IK20_Count;
Constant p155 = IK20_Link;
Constant p156 = IK21_Count;
Constant p157 = IK21_Link;
Constant p158 = IK22_Count;
Constant p159 = IK22_Link;
Constant p160 = IK23_Count;
Constant p161 = IK23_Link;
Constant p162 = KD_Count;
Constant p163 = name;
Constant p164 = parse_name;
Constant p165 = action_bitmap;

Attribute p66_game_available;
Attribute p67_playing;
Attribute p68_wrapped;
Attribute p70_toasted;
Attribute p71_plugged_in;
Attribute p73_done;
Attribute p74_active;
Attribute p75_tied;
Attribute p76_connected;
Attribute p77_plugged;
Attribute p78_on;
Constant FBNA_PROP_NUMBER = p64_recurring;
Object property_numberspace_forcer
    with p64_recurring false
    with p80_tub_relevant false
    with p81_hidden false
    with p82_low_on_fuel false
    with p83_waiting_for_confirmation false
    with p84_broken false
    with p85_disabled false
    with p86_out_of_control false
    with p87_stuck false
    with p88_started false
    with p89_ready false
    with p90_examined false
    with p92_laced false
    with p93_urge_passed false
    with p94_found false
    with p95_accustomed false
    with p96_asleep false
    with p98_cut false
    with p100_available false
    with p101_aged false
;

Array property_metadata -->
    ! offset 0: property p0_specification
    "specification" NULL
    ! offset 2: property p1_indefinite_appearance_tex
    "indefinite appearance text" NULL
    ! offset 4: property p2_variable_initial_value
    "variable initial value" K1_room K2_thing K3_direction K9_region NULL
    ! offset 10: property list_together
    "list grouping key" K1_room K2_thing K3_direction K9_region NULL
    ! offset 16: property short_name
    "printed name" K1_room K2_thing K3_direction K9_region NULL
    ! offset 22: property plural
    "printed plural name" K1_room K2_thing K3_direction K9_region NULL
    ! offset 28: property article
    "indefinite article" K1_room K2_thing K3_direction K9_region NULL
    ! offset 34: property description
    "description" K1_room K2_thing NULL
    ! offset 38: property map_region
    "map region" K1_room NULL
    ! offset 41: property initial
    "initial appearance" K2_thing NULL
    ! offset 44: property p10_opposite
    "opposite" K3_direction NULL
    ! offset 47: property door_to
    "other side" K4_door NULL
    ! offset 50: property capacity
    "carrying capacity" K5_container K6_supporter K8_person NULL
    ! offset 55: property with_key
    "matching key" K2_thing K4_door K5_container NULL
    ! offset 60: property p14_adaptive_text_viewpoint
    "adaptive text viewpoint" NULL
    ! offset 62: property p15_game_specific_help
    "game-specific help" I157_bare_help I184_help_about I186_help_score NULL
    ! offset 67: property p16_its_slice_count
    "its slice count" I205_toaster NULL
    ! offset 70: property p17_its_water_level
    "its water level" I259_bathtub NULL
    ! offset 73: property p18_finnickiness
    "finnickiness" I289_on_button NULL
    ! offset 76: property p19_branches
    "branches" K23_tree NULL
    ! offset 79: property p20_use_count
    "use count" I364_time_machine NULL
    ! offset 82: property p21_credits
    "credits" I366_coin_slot NULL
    ! offset 85: property pluralname
    "plural-named" K1_room K2_thing K3_direction K9_region NULL
    ! offset 91: property proper
    "proper-named" K1_room K2_thing K3_direction K9_region NULL
    ! offset 97: property ambigpluralname
    "ambiguously plural" K1_room K2_thing K3_direction K9_region NULL
    ! offset 103: property privately_named
    "privately-named" K1_room K2_thing K3_direction K9_region NULL
    ! offset 109: property light
    "lighted" K1_room K2_thing NULL
    ! offset 113: property visited
    "visited" K1_room K17_help_topic NULL
    ! offset 117: property light
    "lit" K1_room K2_thing NULL
    ! offset 121: property edible
    "edible" K2_thing NULL
    ! offset 124: property static
    "fixed in place" K2_thing NULL
    ! offset 127: property scenery
    "scenery" K2_thing NULL
    ! offset 130: property clothing
    "wearable" K2_thing NULL
    ! offset 133: property pushable
    "pushable between rooms" K2_thing NULL
    ! offset 136: property moved
    "handled" K2_thing NULL
    ! offset 139: property concealed
    "undescribed" K2_thing NULL
    ! offset 142: property workflag
    "marked for listing" K2_thing K3_direction NULL
    ! offset 146: property mentioned
    "mentioned" K2_thing NULL
    ! offset 149: property enterable
    "enterable" K5_container K6_supporter NULL
    ! offset 153: property transparent
    "transparent" K5_container NULL
    ! offset 156: property open
    "open" K4_door K5_container NULL
    ! offset 160: property openable
    "openable" K4_door K5_container NULL
    ! offset 164: property lockable
    "lockable" K4_door K5_container NULL
    ! offset 168: property locked
    "locked" K4_door K5_container NULL
    ! offset 172: property female
    "female" K8_person NULL
    ! offset 175: property neuter
    "neuter" K8_person NULL
    ! offset 178: property on
    "switched on" K13_device NULL
    ! offset 181: property p64_recurring
    "recurring" NULL
    ! offset 183: property p66_game_available
    "game-available" I184_help_about NULL
    ! offset 186: property p67_playing
    "playing" I200_ipod NULL
    ! offset 189: property p68_wrapped
    "wrapped" I214_loaf_of_bread NULL
    ! offset 192: property p70_toasted
    "toasted" K18_slice_of_bread NULL
    ! offset 195: property p71_plugged_in
    "plugged in" I205_toaster NULL
    ! offset 198: property p73_done
    "done" I205_toaster NULL
    ! offset 201: property p74_active
    "active" I216_play_button NULL
    ! offset 204: property p75_tied
    "tied" I228_toyota_key NULL
    ! offset 207: property p76_connected
    "connected" I239_earbuds NULL
    ! offset 210: property p77_plugged
    "plugged" I260_drain NULL
    ! offset 213: property p78_on
    "on" I261_faucet I288_spaceship NULL
    ! offset 217: property p80_tub_relevant
    "tub-relevant" K2_thing NULL
    ! offset 220: property p81_hidden
    "hidden" I284_bucket NULL
    ! offset 223: property p82_low_on_fuel
    "low on fuel" I288_spaceship NULL
    ! offset 226: property p83_waiting_for_confirmation
    "waiting for confirmation" I288_spaceship NULL
    ! offset 229: property p84_broken
    "broken" I288_spaceship NULL
    ! offset 232: property p85_disabled
    "disabled" I291_computer NULL
    ! offset 235: property p86_out_of_control
    "out of control" I288_spaceship NULL
    ! offset 238: property p87_stuck
    "stuck" I300_fork NULL
    ! offset 241: property p88_started
    "started" I302_blue_car NULL
    ! offset 244: property p89_ready
    "ready" I302_blue_car I303_abandoned_train_station NULL
    ! offset 248: property p90_examined
    "examined" I304_map I307_call_train_button NULL
    ! offset 252: property p92_laced
    "laced" I229_pair_of_running_shoes NULL
    ! offset 255: property p93_urge_passed
    "urge passed" I313_candle NULL
    ! offset 258: property p94_found
    "found" I337_wasps__nest NULL
    ! offset 261: property p95_accustomed
    "accustomed" I349_moose_head NULL
    ! offset 264: property p96_asleep
    "asleep" I353_grizzly_bear NULL
    ! offset 267: property p98_cut
    "cut" I362_super_glue NULL
    ! offset 270: property p100_available
    "available" I366_coin_slot NULL
    ! offset 273: property p101_aged
    "aged" I219_pie NULL
    ! offset 276: property worn
    "<nameless>" NULL
    ! offset 278: property vector
    "<nameless>" NULL
    ! offset 280: property room_index
    "<nameless>" NULL
    ! offset 282: property door_dir
    "<nameless>" NULL
    ! offset 284: property door_to
    "<nameless>" K4_door NULL
    ! offset 287: property found_in
    "<nameless>" NULL
    ! offset 289: property absent
    "<nameless>" NULL
    ! offset 291: property cap_short_name
    "<nameless>" NULL
    ! offset 293: property mark_as_room
    "<nameless>" NULL
    ! offset 295: property mark_as_thing
    "<nameless>" NULL
    ! offset 297: property component_parent
    "<nameless>" NULL
    ! offset 299: property component_child
    "<nameless>" NULL
    ! offset 301: property component_sibling
    "<nameless>" NULL
    ! offset 303: property regional_found_in
    "<nameless>" NULL
    ! offset 305: property IK1_Count
    "<nameless>" NULL
    ! offset 307: property IK1_Link
    "<nameless>" NULL
    ! offset 309: property IK2_Count
    "<nameless>" NULL
    ! offset 311: property IK2_Link
    "<nameless>" NULL
    ! offset 313: property IK3_Count
    "<nameless>" NULL
    ! offset 315: property IK3_Link
    "<nameless>" NULL
    ! offset 317: property IK4_Count
    "<nameless>" NULL
    ! offset 319: property IK4_Link
    "<nameless>" NULL
    ! offset 321: property IK5_Count
    "<nameless>" NULL
    ! offset 323: property IK5_Link
    "<nameless>" NULL
    ! offset 325: property IK6_Count
    "<nameless>" NULL
    ! offset 327: property IK6_Link
    "<nameless>" NULL
    ! offset 329: property IK7_Count
    "<nameless>" NULL
    ! offset 331: property IK7_Link
    "<nameless>" NULL
    ! offset 333: property IK8_Count
    "<nameless>" NULL
    ! offset 335: property IK8_Link
    "<nameless>" NULL
    ! offset 337: property IK9_Count
    "<nameless>" NULL
    ! offset 339: property IK9_Link
    "<nameless>" NULL
    ! offset 341: property IK10_Count
    "<nameless>" NULL
    ! offset 343: property IK10_Link
    "<nameless>" NULL
    ! offset 345: property IK11_Count
    "<nameless>" NULL
    ! offset 347: property IK11_Link
    "<nameless>" NULL
    ! offset 349: property IK12_Count
    "<nameless>" NULL
    ! offset 351: property IK12_Link
    "<nameless>" NULL
    ! offset 353: property IK13_Count
    "<nameless>" NULL
    ! offset 355: property IK13_Link
    "<nameless>" NULL
    ! offset 357: property IK14_Count
    "<nameless>" NULL
    ! offset 359: property IK14_Link
    "<nameless>" NULL
    ! offset 361: property IK15_Count
    "<nameless>" NULL
    ! offset 363: property IK15_Link
    "<nameless>" NULL
    ! offset 365: property IK16_Count
    "<nameless>" NULL
    ! offset 367: property IK16_Link
    "<nameless>" NULL
    ! offset 369: property IK17_Count
    "<nameless>" NULL
    ! offset 371: property IK17_Link
    "<nameless>" NULL
    ! offset 373: property IK18_Count
    "<nameless>" NULL
    ! offset 375: property IK18_Link
    "<nameless>" NULL
    ! offset 377: property IK19_Count
    "<nameless>" NULL
    ! offset 379: property IK19_Link
    "<nameless>" NULL
    ! offset 381: property IK20_Count
    "<nameless>" NULL
    ! offset 383: property IK20_Link
    "<nameless>" NULL
    ! offset 385: property IK21_Count
    "<nameless>" NULL
    ! offset 387: property IK21_Link
    "<nameless>" NULL
    ! offset 389: property IK22_Count
    "<nameless>" NULL
    ! offset 391: property IK22_Link
    "<nameless>" NULL
    ! offset 393: property IK23_Count
    "<nameless>" NULL
    ! offset 395: property IK23_Link
    "<nameless>" NULL
    ! offset 397: property KD_Count
    "<nameless>" NULL
    ! offset 399: property name
    "<nameless>" NULL
    ! offset 401: property parse_name
    "<nameless>" NULL
    ! offset 403: property action_bitmap
    "<nameless>" NULL
;

Constant attributed_property_offsets_SIZE 48;
Array attributed_property_offsets --> attributed_property_offsets_SIZE;
Constant valued_property_offsets_SIZE (100 + 166 + INDIV_PROP_START-48);
Array valued_property_offsets --> valued_property_offsets_SIZE;

[ CreatePropertyOffsets 
    i ! loop counter
    ;
    for (i=0: i<attributed_property_offsets_SIZE: i++)attributed_property_offsets-->i = -1;
    for (i=0: i<valued_property_offsets_SIZE: i++)valued_property_offsets-->i = -1;
    valued_property_offsets-->p0_specification = 0;
    valued_property_offsets-->p1_indefinite_appearance_tex = 2;
    valued_property_offsets-->p2_variable_initial_value = 4;
    valued_property_offsets-->list_together = 10;
    valued_property_offsets-->short_name = 16;
    valued_property_offsets-->plural = 22;
    valued_property_offsets-->article = 28;
    valued_property_offsets-->description = 34;
    valued_property_offsets-->map_region = 38;
    valued_property_offsets-->initial = 41;
    valued_property_offsets-->p10_opposite = 44;
    valued_property_offsets-->door_to = 47;
    valued_property_offsets-->capacity = 50;
    valued_property_offsets-->with_key = 55;
    valued_property_offsets-->p14_adaptive_text_viewpoint = 60;
    valued_property_offsets-->p15_game_specific_help = 62;
    valued_property_offsets-->p16_its_slice_count = 67;
    valued_property_offsets-->p17_its_water_level = 70;
    valued_property_offsets-->p18_finnickiness = 73;
    valued_property_offsets-->p19_branches = 76;
    valued_property_offsets-->p20_use_count = 79;
    valued_property_offsets-->p21_credits = 82;
    attributed_property_offsets-->pluralname = 85;
    attributed_property_offsets-->proper = 91;
    attributed_property_offsets-->ambigpluralname = 97;
    attributed_property_offsets-->privately_named = 103;
    attributed_property_offsets-->light = 109;
    attributed_property_offsets-->visited = 113;
    attributed_property_offsets-->light = 117;
    attributed_property_offsets-->edible = 121;
    attributed_property_offsets-->static = 124;
    attributed_property_offsets-->scenery = 127;
    attributed_property_offsets-->clothing = 130;
    attributed_property_offsets-->pushable = 133;
    attributed_property_offsets-->moved = 136;
    attributed_property_offsets-->concealed = 139;
    attributed_property_offsets-->workflag = 142;
    attributed_property_offsets-->mentioned = 146;
    attributed_property_offsets-->enterable = 149;
    attributed_property_offsets-->transparent = 153;
    attributed_property_offsets-->open = 156;
    attributed_property_offsets-->openable = 160;
    attributed_property_offsets-->lockable = 164;
    attributed_property_offsets-->locked = 168;
    attributed_property_offsets-->female = 172;
    attributed_property_offsets-->neuter = 175;
    attributed_property_offsets-->on = 178;
    valued_property_offsets-->p64_recurring = 181;
    attributed_property_offsets-->p66_game_available = 183;
    attributed_property_offsets-->p67_playing = 186;
    attributed_property_offsets-->p68_wrapped = 189;
    attributed_property_offsets-->p70_toasted = 192;
    attributed_property_offsets-->p71_plugged_in = 195;
    attributed_property_offsets-->p73_done = 198;
    attributed_property_offsets-->p74_active = 201;
    attributed_property_offsets-->p75_tied = 204;
    attributed_property_offsets-->p76_connected = 207;
    attributed_property_offsets-->p77_plugged = 210;
    attributed_property_offsets-->p78_on = 213;
    valued_property_offsets-->p80_tub_relevant = 217;
    valued_property_offsets-->p81_hidden = 220;
    valued_property_offsets-->p82_low_on_fuel = 223;
    valued_property_offsets-->p83_waiting_for_confirmation = 226;
    valued_property_offsets-->p84_broken = 229;
    valued_property_offsets-->p85_disabled = 232;
    valued_property_offsets-->p86_out_of_control = 235;
    valued_property_offsets-->p87_stuck = 238;
    valued_property_offsets-->p88_started = 241;
    valued_property_offsets-->p89_ready = 244;
    valued_property_offsets-->p90_examined = 248;
    valued_property_offsets-->p92_laced = 252;
    valued_property_offsets-->p93_urge_passed = 255;
    valued_property_offsets-->p94_found = 258;
    valued_property_offsets-->p95_accustomed = 261;
    valued_property_offsets-->p96_asleep = 264;
    valued_property_offsets-->p98_cut = 267;
    valued_property_offsets-->p100_available = 270;
    valued_property_offsets-->p101_aged = 273;
    attributed_property_offsets-->worn = 276;
    valued_property_offsets-->vector = 278;
    valued_property_offsets-->room_index = 280;
    valued_property_offsets-->door_dir = 282;
    valued_property_offsets-->door_to = 284;
    valued_property_offsets-->found_in = 287;
    attributed_property_offsets-->absent = 289;
    valued_property_offsets-->cap_short_name = 291;
    attributed_property_offsets-->mark_as_room = 293;
    attributed_property_offsets-->mark_as_thing = 295;
    valued_property_offsets-->component_parent = 297;
    valued_property_offsets-->component_child = 299;
    valued_property_offsets-->component_sibling = 301;
    valued_property_offsets-->regional_found_in = 303;
    valued_property_offsets-->IK1_Count = 305;
    valued_property_offsets-->IK1_Link = 307;
    valued_property_offsets-->IK2_Count = 309;
    valued_property_offsets-->IK2_Link = 311;
    valued_property_offsets-->IK3_Count = 313;
    valued_property_offsets-->IK3_Link = 315;
    valued_property_offsets-->IK4_Count = 317;
    valued_property_offsets-->IK4_Link = 319;
    valued_property_offsets-->IK5_Count = 321;
    valued_property_offsets-->IK5_Link = 323;
    valued_property_offsets-->IK6_Count = 325;
    valued_property_offsets-->IK6_Link = 327;
    valued_property_offsets-->IK7_Count = 329;
    valued_property_offsets-->IK7_Link = 331;
    valued_property_offsets-->IK8_Count = 333;
    valued_property_offsets-->IK8_Link = 335;
    valued_property_offsets-->IK9_Count = 337;
    valued_property_offsets-->IK9_Link = 339;
    valued_property_offsets-->IK10_Count = 341;
    valued_property_offsets-->IK10_Link = 343;
    valued_property_offsets-->IK11_Count = 345;
    valued_property_offsets-->IK11_Link = 347;
    valued_property_offsets-->IK12_Count = 349;
    valued_property_offsets-->IK12_Link = 351;
    valued_property_offsets-->IK13_Count = 353;
    valued_property_offsets-->IK13_Link = 355;
    valued_property_offsets-->IK14_Count = 357;
    valued_property_offsets-->IK14_Link = 359;
    valued_property_offsets-->IK15_Count = 361;
    valued_property_offsets-->IK15_Link = 363;
    valued_property_offsets-->IK16_Count = 365;
    valued_property_offsets-->IK16_Link = 367;
    valued_property_offsets-->IK17_Count = 369;
    valued_property_offsets-->IK17_Link = 371;
    valued_property_offsets-->IK18_Count = 373;
    valued_property_offsets-->IK18_Link = 375;
    valued_property_offsets-->IK19_Count = 377;
    valued_property_offsets-->IK19_Link = 379;
    valued_property_offsets-->IK20_Count = 381;
    valued_property_offsets-->IK20_Link = 383;
    valued_property_offsets-->IK21_Count = 385;
    valued_property_offsets-->IK21_Link = 387;
    valued_property_offsets-->IK22_Count = 389;
    valued_property_offsets-->IK22_Link = 391;
    valued_property_offsets-->IK23_Count = 393;
    valued_property_offsets-->IK23_Link = 395;
    valued_property_offsets-->KD_Count = 397;
    valued_property_offsets-->name = 399;
    valued_property_offsets-->parse_name = 401;
    valued_property_offsets-->action_bitmap = 403;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Activities
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant NUMBER_RULEBOOKS_CREATED = 425;
Constant V0_printing_the_name = 0;
Constant V1_printing_the_plural_name = 1;
Constant V2_printing_a_number = 2;
Constant V3_printing_room_description = 3;
Constant V4_printing_inventory_detail = 4;
Constant V5_listing_contents = 5;
Constant V6_grouping_together = 6;
Constant V7_writing_a_paragraph_about = 7;
Constant V8_listing_nondescript_items = 8;
Constant V9_printing_the_name_of_a_da = 9;
Constant V10_printing_the_description = 10;
Constant V11_printing_the_announcemen = 11;
Constant V12_printing_the_announcemen = 12;
Constant V13_printing_a_refusal_to_ac = 13;
Constant V14_constructing_the_status_ = 14;
Constant V15_printing_the_banner_text = 15;
Constant V16_reading_a_command = 16;
Constant V17_deciding_the_scope = 17;
Constant V18_deciding_the_concealed_p = 18;
Constant V19_deciding_whether_all_inc = 19;
Constant V20_clarifying_the_parser_s_ = 20;
Constant V21_asking_which_do_you_mean = 21;
Constant V22_printing_a_parser_error = 22;
Constant V23_supplying_a_missing_noun = 23;
Constant V24_supplying_a_missing_seco = 24;
Constant V25_implicitly_taking = 25;
Constant V26_starting_the_virtual_mac = 26;
Constant V27_amusing_a_victorious_pla = 27;
Constant V28_printing_the_player_s_ob = 28;
Constant V29_handling_the_final_quest = 29;
Constant V30_printing_the_locale_desc = 30;
Constant V31_choosing_notable_locale_ = 31;
Constant V32_printing_a_locale_paragr = 32;
Constant V33_issuing_the_response_tex = 33;

Array Activity_before_rulebooks --> 29 32 35 38 41 44 47 50 53 56 59 62 65 68 71 74 77 80 83 86 89 92 95 98 101 104 107 110 113 116 119 122 125 128 NULL;

Array Activity_for_rulebooks --> 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 NULL;

Array Activity_after_rulebooks --> 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76 79 82 85 88 91 94 97 100 103 106 109 112 115 118 121 124 127 130 NULL;

Array Activity_atb_rulebooks -> 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 $ff;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RELS_SYMMETRIC $8000;
Constant RELS_EQUIVALENCE $4000;
Constant RELS_X_UNIQUE $2000;
Constant RELS_Y_UNIQUE $1000;
Constant RELS_TEST $0800;
Constant RELS_ASSERT_TRUE $0400;
Constant RELS_ASSERT_FALSE $0200;
Constant RELS_SHOW $0100;
Constant RELS_ROUTE_FIND $0080;
Constant RELS_ROUTE_FIND_COUNT $0040;
Constant RELS_LOOKUP_ANY $0008;
Constant RELS_LOOKUP_ALL_X $0004;
Constant RELS_LOOKUP_ALL_Y $0002;
Constant RELS_LIST $0001;
#Iftrue (WORDSIZE == 2);
Constant REL_BLOCK_HEADER ($100*5 + $$1101);
#Ifnot;
Constant REL_BLOCK_HEADER ($100*6 + $$1101)*$10000;
#Endif;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Printing Routines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintSceneName 
    value ! Implied call parameter
    ;
    switch(value) {
        I78_entire_game: print "Entire Game";
        default: print "<illegal scene>";
    }
];
[ A_PrintSceneName 
    value ! Implied call parameter
    ;
    return (value % 1)+1;
];
[ B_PrintSceneName 
    value ! Implied call parameter
    ;
    return ((value+-1) % 1)+1;
];
[ R_PrintSceneName 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(1));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ PrintFigureName 
    value ! Implied call parameter
    ;
    switch(value) {
        I77_figure_of_cover: print "Figure of cover";
        default: print "<illegal figure name>";
    }
];
[ A_PrintFigureName 
    value ! Implied call parameter
    ;
    return (value % 1)+1;
];
[ B_PrintFigureName 
    value ! Implied call parameter
    ;
    return ((value+-1) % 1)+1;
];
[ R_PrintFigureName 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(1));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ PrintSoundName 
    value ! Implied call parameter
    ;
    switch(value) {
        default: print "<illegal sound name>";
    }
];
[ A_PrintSoundName 
    value ! Implied call parameter
    ;
    return (value % 0)+1;
];
[ B_PrintSoundName 
    value ! Implied call parameter
    ;
    return ((value+-2) % 0)+1;
];
[ R_PrintSoundName 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(0));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ PrintExternalFileName 
    value ! Implied call parameter
    ;
    switch(value) {
        default: print "<illegal external file>";
    }
];
[ A_PrintExternalFileName 
    value ! Implied call parameter
    ;
    return (value % 0)+1;
];
[ B_PrintExternalFileName 
    value ! Implied call parameter
    ;
    return ((value+-2) % 0)+1;
];
[ R_PrintExternalFileName 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(0));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E61 
    value ! Implied call parameter
    ;
    switch(value) {
        I71_german_language: print "German language";
        I72_italian_language: print "Italian language";
        I73_english_language: print "English language";
        I74_french_language: print "French language";
        I75_swedish_language: print "Swedish language";
        I76_spanish_language: print "Spanish language";
        default: print "<illegal natural language>";
    }
];
[ A_E61 
    value ! Implied call parameter
    ;
    return (value % 6)+1;
];
[ B_E61 
    value ! Implied call parameter
    ;
    return ((value+4) % 6)+1;
];
[ R_E61 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(6));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E62 
    value ! Implied call parameter
    ;
    switch(value) {
        I80_didn_t_understand_error: print "didn't understand error";
        I81_only_understood_as_far_a: print "only understood as far as error";
        I82_didn_t_understand_that_n: print "didn't understand that number error";
        I83_can_only_do_that_to_some: print "can only do that to something animate error";
        I84_can_t_see_any_such_thing: print "can't see any such thing error";
        I85_said_too_little_error: print "said too little error";
        I86_aren_t_holding_that_erro: print "aren't holding that error";
        I87_can_t_use_multiple_objec: print "can't use multiple objects error";
        I88_can_only_use_multiple_ob: print "can only use multiple objects error";
        I89_not_sure_what_it_refers_: print "not sure what it refers to error";
        I90_excepted_something_not_i: print "excepted something not included error";
        I91_not_a_verb_i_recognise_e: print "not a verb I recognise error";
        I92_not_something_you_need_t: print "not something you need to refer to error";
        I93_can_t_see_it_at_the_mome: print "can't see it at the moment error";
        I94_didn_t_understand_the_wa: print "didn't understand the way that finished error";
        I95_not_enough_of_those_avai: print "not enough of those available error";
        I96_nothing_to_do_error: print "nothing to do error";
        I97_noun_did_not_make_sense_: print "noun did not make sense in that context error";
        I98_referred_to_a_determinat: print "referred to a determination of scope error";
        I99_i_beg_your_pardon_error: print "I beg your pardon error";
        I100_can_t_again_the_address: print "can't again the addressee error";
        I101_comma_can_t_begin_error: print "comma can't begin error";
        I102_can_t_see_whom_to_talk_: print "can't see whom to talk to error";
        I103_can_t_talk_to_inanimate: print "can't talk to inanimate things error";
        I104_didn_t_understand_addre: print "didn't understand addressee's last name error";
        default: print "<illegal command parser error>";
    }
];
[ A_E62 
    value ! Implied call parameter
    ;
    return (value % 25)+1;
];
[ B_E62 
    value ! Implied call parameter
    ;
    return ((value+23) % 25)+1;
];
[ R_E62 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(25));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E63 
    value ! Implied call parameter
    ;
    switch(value) {
        I106_present_tense: print "present tense";
        I107_past_tense: print "past tense";
        I108_perfect_tense: print "perfect tense";
        I109_past_perfect_tense: print "past perfect tense";
        I110_future_tense: print "future tense";
        default: print "<illegal grammatical tense>";
    }
];
[ A_E63 
    value ! Implied call parameter
    ;
    return (value % 5)+1;
];
[ B_E63 
    value ! Implied call parameter
    ;
    return ((value+3) % 5)+1;
];
[ R_E63 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(5));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E64 
    value ! Implied call parameter
    ;
    switch(value) {
        I112_first_person_singular: print "first person singular";
        I113_second_person_singular: print "second person singular";
        I114_third_person_singular: print "third person singular";
        I115_first_person_plural: print "first person plural";
        I116_second_person_plural: print "second person plural";
        I117_third_person_plural: print "third person plural";
        default: print "<illegal narrative viewpoint>";
    }
];
[ A_E64 
    value ! Implied call parameter
    ;
    return (value % 6)+1;
];
[ B_E64 
    value ! Implied call parameter
    ;
    return ((value+4) % 6)+1;
];
[ R_E64 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(6));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E65 
    value ! Implied call parameter
    ;
    switch(value) {
        I119_nominative: print "nominative";
        I120_accusative: print "accusative";
        default: print "<illegal grammatical case>";
    }
];
[ A_E65 
    value ! Implied call parameter
    ;
    return (value % 2)+1;
];
[ B_E65 
    value ! Implied call parameter
    ;
    return ((value+0) % 2)+1;
];
[ R_E65 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(2));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E66 
    value ! Implied call parameter
    ;
    switch(value) {
        I122_neuter_gender: print "neuter gender";
        I123_masculine_gender: print "masculine gender";
        I124_feminine_gender: print "feminine gender";
        default: print "<illegal grammatical gender>";
    }
];
[ A_E66 
    value ! Implied call parameter
    ;
    return (value % 3)+1;
];
[ B_E66 
    value ! Implied call parameter
    ;
    return ((value+1) % 3)+1;
];
[ R_E66 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(3));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E67 
    value ! Implied call parameter
    ;
    switch(value) {
        I126_all_styles: print "all-styles";
        I127_normal_style: print "normal-style";
        I128_italic_style: print "italic-style";
        I129_fixed_letter_spacing_st: print "fixed-letter-spacing-style";
        I130_header_style: print "header-style";
        I131_bold_style: print "bold-style";
        I132_alert_style: print "alert-style";
        I133_note_style: print "note-style";
        I134_blockquote_style: print "blockquote-style";
        I135_input_style: print "input-style";
        I136_special_style_1: print "special-style-1";
        I137_special_style_2: print "special-style-2";
        default: print "<illegal glulx text style>";
    }
];
[ A_E67 
    value ! Implied call parameter
    ;
    return (value % 12)+1;
];
[ B_E67 
    value ! Implied call parameter
    ;
    return ((value+10) % 12)+1;
];
[ R_E67 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(12));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E68 
    value ! Implied call parameter
    ;
    switch(value) {
        I139_left_justified: print "left-justified";
        I140_left_right_justified: print "left-right-justified";
        I141_center_justified: print "center-justified";
        I142_right_justified: print "right-justified";
        default: print "<illegal text justification>";
    }
];
[ A_E68 
    value ! Implied call parameter
    ;
    return (value % 4)+1;
];
[ B_E68 
    value ! Implied call parameter
    ;
    return ((value+2) % 4)+1;
];
[ R_E68 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(4));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E69 
    value ! Implied call parameter
    ;
    switch(value) {
        I144_light_weight: print "light-weight";
        I145_regular_weight: print "regular-weight";
        I146_bold_weight: print "bold-weight";
        default: print "<illegal font weight>";
    }
];
[ A_E69 
    value ! Implied call parameter
    ;
    return (value % 3)+1;
];
[ B_E69 
    value ! Implied call parameter
    ;
    return ((value+1) % 3)+1;
];
[ R_E69 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(3));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ PrintKindValuePair 
    k ! Implied call parameter
    v ! Implied call parameter
    ;
    k = KindAtomic(k);
      switch(k) {
        2: print (DA_Number) v;
        3: print (DA_Number) v;
        4: print (DA_Number) v;
        5: print (DA_Number) v;
        6: print (DA_Number) v;
        7: print (DA_Number) v;
        8: print (DA_Number) v;
        9: print (DA_Number) v;
        10: print (PrintShortName) v;
        11: print (DecimalNumber) v;
        12: print (REAL_NUMBER_TY_Say) v;
        13: print (DA_TruthState) v;
        14: print (TEXT_TY_Say) v;
        15: print (DecimalNumber) v;
        16: print (PrintUseOption) v;
        17: print (PrintResponse) v;
        18: print (PrintVerbAsValue) v;
        19: print (PrintSnippet) v;
        20: print (PrintTableName) v;
        21: print (DA_Number) v;
        22: print (RulebookOutcomePrintingRule) v;
        23: print (DecimalNumber) v;
        25: print (DecimalNumber) v;
        27: print (SayPhraseName) v;
        28: print (DecimalNumber) v;
        29: print (DecimalNumber) v;
        30: print (RELATION_TY_Say) v;
        31: print (RulePrintingRule) v;
        32: print (RulePrintingRule) v;
        33: print (DecimalNumber) v;
        34: print (LIST_OF_TY_Say) v;
        35: print (DecimalNumber) v;
        36: print (PROPERTY_TY_Say) v;
        37: print (DecimalNumber) v;
        38: print (COMBINATION_TY_Say) v;
        39: print (DecimalNumber) v;
        40: print (STORED_ACTION_TY_Say) v;
        41: print (SayActionName) v;
        42: print (PrintTimeOfDay) v;
        43: print (PrintSceneName) v;
        44: print (PrintFigureName) v;
        45: print (PrintSoundName) v;
        46: print (PrintExternalFileName) v;
        47: print (E61) v;
        48: print (E62) v;
        49: print (E63) v;
        50: print (E64) v;
        51: print (E65) v;
        52: print (E66) v;
        53: print (E67) v;
        54: print (E68) v;
        55: print (E69) v;
        default: print v;
    }
];
[ DefaultValueOfKOV 
    sk ! Implied call parameter
    k ! weak kind ID
    ;
    k = KindAtomic(sk);
    switch(k) {
        10: return nothing;
        11: return 0;
        12: return 0;
        13: return false;
        14: return BlkValueCreate(sk);
        15: return 32;
        16: return 0;
        17: return 0;
        18: return ConjugateVerb_0;
        19: return 101;
        20: return TheEmptyTable;
        21: return 0;
        22: return RBNO_0;
        23: return DefaultTopic;
        25: return ;
        34: return BlkValueCreate(sk);
        39: return ;
        40: return BlkValueCreate(sk);
        41: return ##Wait;
        42: return 540;
        43: return I78_entire_game;
        44: return I77_figure_of_cover;
        45: return ;
        46: return ;
        47: return I71_german_language;
        48: return I80_didn_t_understand_error;
        49: return I106_present_tense;
        50: return I112_first_person_singular;
        51: return I119_nominative;
        52: return I122_neuter_gender;
        53: return I126_all_styles;
        54: return I139_left_justified;
        55: return I144_light_weight;
        default: return 0;
    }
];
[ KOVComparisonFunction 
    k ! Implied call parameter
    ;
    k = KindAtomic(k);
    switch(k) {
        10: return UnsignedCompare;
        12: return REAL_NUMBER_TY_Compare;
        13: return UnsignedCompare;
        14: return BlkValueCompare;
        15: return UnsignedCompare;
        16: return UnsignedCompare;
        17: return UnsignedCompare;
        18: return UnsignedCompare;
        19: return UnsignedCompare;
        20: return UnsignedCompare;
        21: return UnsignedCompare;
        22: return UnsignedCompare;
        23: return UnsignedCompare;
        25: return UnsignedCompare;
        34: return BlkValueCompare;
        39: return UnsignedCompare;
        40: return BlkValueCompare;
        41: return UnsignedCompare;
        43: return UnsignedCompare;
        44: return UnsignedCompare;
        45: return UnsignedCompare;
        46: return UnsignedCompare;
        default: return 0;
    }
];
[ KOVDomainSize 
    k ! Implied call parameter
    ;
    k = KindAtomic(k);
    switch(k) {
        43: return 1;
        44: return 1;
        45: return 0;
        46: return 0;
        47: return 6;
        48: return 25;
        49: return 5;
        50: return 6;
        51: return 2;
        52: return 3;
        53: return 12;
        54: return 4;
        55: return 3;
        default: return 0;
    }
];
[ KOVIsBlockValue 
    k ! Implied call parameter
    ;
    k = KindAtomic(k);
    if (k == 14 or 30 or 34 or 38 or 40) rtrue;
    rfalse;
];
[ KOVSupportFunction 
    k ! Implied call parameter
    fail ! Implied call parameter
    ;
    k = KindAtomic(k);
    switch(k) {
        14: return TEXT_TY_Support;
        30: return RELATION_TY_Support;
        34: return LIST_OF_TY_Support;
        38: return COMBINATION_TY_Support;
        40: return STORED_ACTION_TY_Support;
    }
    if (fail) BlkValueError(fail);
    rfalse;
];

[ I7_Kind_Name 
    k ! Implied call parameter
    ;
    if (k == K1_room) print "room";
    if (k == K2_thing) print "thing";
    if (k == K3_direction) print "direction";
    if (k == K4_door) print "door";
    if (k == K5_container) print "container";
    if (k == K6_supporter) print "supporter";
    if (k == K7_backdrop) print "backdrop";
    if (k == K8_person) print "person";
    if (k == K9_region) print "region";
    if (k == K10_man) print "man";
    if (k == K11_woman) print "woman";
    if (k == K12_animal) print "animal";
    if (k == K13_device) print "device";
    if (k == K14_vehicle) print "vehicle";
    if (k == K15_player_s_holdall) print "player's holdall";
    if (k == K16_liquid) print "liquid";
    if (k == K17_help_topic) print "help-topic";
    if (k == K18_slice_of_bread) print "slice of bread";
    if (k == K19_quarter) print "quarter";
    if (k == K20_wooden_drawer) print "wooden drawer";
    if (k == K21_mouse) print "mouse";
    if (k == K22_canister) print "canister";
    if (k == K23_tree) print "tree";
];

Constant RBNO_0 = "allow access";
Constant RBNO_1 = "deny access";
Constant RBNO_2 = "there is sufficient light";
Constant RBNO_3 = "there is insufficient light";
Constant RBNO_4 = "persuasion succeeds";
Constant RBNO_5 = "persuasion fails";
Constant RBNO_6 = "it is very likely";
Constant RBNO_7 = "it is likely";
Constant RBNO_8 = "it is possible";
Constant RBNO_9 = "it is unlikely";
Constant RBNO_10 = "it is very unlikely";
Constant RBNO_11 = "it does not";
Constant RBNO_12 = "it does";
[ RulebookOutcomePrintingRule 
    rbno ! Implied call parameter
    ;
    if (rbno == 0) print "(no outcome)";
    else print (string) rbno; rfalse;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Object Tree
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


Array KindHierarchy --> K0_kind (0) K1_room (0) K2_thing (0) K3_direction (0) K4_door (2) K5_container (2) K6_supporter (2) K7_backdrop (2) K8_person (2) K9_region (0) K10_man (8) K11_woman (8) K12_animal (8) K13_device (2) K14_vehicle (5) K15_player_s_holdall (5) K16_liquid (2) K17_help_topic (2) K18_slice_of_bread (2) K19_quarter (2) K20_wooden_drawer (5) K21_mouse (12) K22_canister (5) K23_tree (7) ;
Constant IK1_First = I197_bedroom;
Constant IK2_First = selfobj;
Constant IK3_First = I51_north;
Constant IK4_First = I203_staircase;
Constant IK5_First = I206_cabinet;
Constant IK6_First = I199_nightstand;
Constant IK7_First = I334_ash_tree;
Constant IK8_First = selfobj;
Constant IK9_First = I269_house;
Constant IK10_First = nothing;
Constant IK11_First = nothing;
Constant IK12_First = I315_snake;
Constant IK13_First = nothing;
Constant IK14_First = I302_blue_car;
Constant IK15_First = nothing;
Constant IK16_First = I212_cereal_crumbs;
Constant IK17_First = I157_bare_help;
Constant IK18_First = nothing;
Constant IK19_First = X237;
Constant IK20_First = I244_first_drawer;
Constant IK21_First = X322;
Constant IK22_First = X319;
Constant IK23_First = I334_ash_tree;
Constant No_Directions = 12;
! Table of direction object alias constants:
Constant DirectionObject_0 = I51_north;
Constant DirectionObject_1 = I52_northeast;
Constant DirectionObject_2 = I53_northwest;
Constant DirectionObject_3 = I54_south;
Constant DirectionObject_4 = I55_southeast;
Constant DirectionObject_5 = I56_southwest;
Constant DirectionObject_6 = I57_east;
Constant DirectionObject_7 = I58_west;
Constant DirectionObject_8 = I59_up;
Constant DirectionObject_9 = I60_down;
Constant DirectionObject_10 = in_obj;
Constant DirectionObject_11 = out_obj;
Array Map_Storage -->
 0 0 0 0 0 0 I201_hall I277_side_door 0 0 0 0 ! Exits from: I197_bedroom
 I203_staircase 0 0 I220_back_entryway 0 0 I204_kitchen I197_bedroom I227_upstairs_hall I262_basement 0 0 ! Exits from: I201_hall
 0 0 0 0 0 0 0 I201_hall 0 0 0 0 ! Exits from: I204_kitchen
 I201_hall 0 0 I222_back_door 0 0 0 0 0 0 0 0 ! Exits from: I220_back_entryway
 0 0 0 0 0 0 I254_bathroom I234_study 0 I203_staircase 0 0 ! Exits from: I227_upstairs_hall
 I222_back_door 0 0 0 0 0 0 0 0 0 0 0 ! Exits from: I230_backyard
 I240_closet_door 0 0 0 0 0 I227_upstairs_hall 0 0 0 0 0 ! Exits from: I234_study
 0 0 0 I240_closet_door 0 0 0 0 0 0 0 0 ! Exits from: I241_the_closet
 0 0 0 0 0 0 0 I227_upstairs_hall 0 0 0 0 ! Exits from: I254_bathroom
 0 0 0 0 0 0 0 I263_the_tunnel_of_extractio I201_hall 0 0 0 ! Exits from: I262_basement
 I354_mad_scientist_s_grand_e 0 0 0 0 0 0 0 I359_ladder 0 0 0 ! Exits from: I270_mad_scientist_s_house
 0 0 0 0 0 0 0 0 0 0 0 0 ! Exits from: I271_laboratory
 0 0 0 0 0 0 0 I303_abandoned_train_station 0 0 0 0 ! Exits from: I272_control_room
 I348_hunting_lodge_entrance 0 0 0 0 0 0 0 0 0 0 0 ! Exits from: I273_hunting_lodge
 I287_launch_pad 0 0 I286_outskirts_of_town 0 0 0 0 0 0 0 0 ! Exits from: I274_space_center
 I298_road 0 0 I311_a_spooky_lair 0 0 I309_town_square I330_clearing 0 I263_the_tunnel_of_extractio 0 0 ! Exits from: I275_abandoned_warehouse
 0 0 0 0 0 0 0 0 0 0 0 0 ! Exits from: I276_spooky_lair
 0 0 0 0 0 0 I277_side_door I286_outskirts_of_town 0 0 0 0 ! Exits from: I278_the_garden
 I274_space_center 0 0 I309_town_square 0 0 I278_the_garden I298_road 0 0 0 0 ! Exits from: I286_outskirts_of_town
 0 0 0 I274_space_center 0 0 0 0 0 0 0 0 ! Exits from: I287_launch_pad
 0 0 0 0 0 0 0 0 0 0 0 0 ! Exits from: I294_air
 0 0 0 0 0 0 0 0 0 0 0 0 ! Exits from: I295_outer_space
 0 0 0 0 0 0 0 0 0 0 0 0 ! Exits from: I297_ruins_of_the_tunnel_of_
 I299_further_along_the_road 0 0 I275_abandoned_warehouse 0 0 I286_outskirts_of_town I325_by_the_stream 0 0 0 0 ! Exits from: I298_road
 I303_abandoned_train_station 0 0 I298_road 0 0 0 I301_parking_lot 0 0 0 0 ! Exits from: I299_further_along_the_road
 0 0 0 0 0 0 I299_further_along_the_road 0 0 0 0 0 ! Exits from: I301_parking_lot
 0 0 0 I299_further_along_the_road 0 0 I272_control_room 0 0 0 0 0 ! Exits from: I303_abandoned_train_station
 I286_outskirts_of_town 0 0 I354_mad_scientist_s_grand_e 0 0 0 I275_abandoned_warehouse 0 0 0 0 ! Exits from: I309_town_square
 I275_abandoned_warehouse 0 0 0 0 0 0 0 0 0 0 0 ! Exits from: I311_a_spooky_lair
 0 0 0 I330_clearing 0 0 I298_road 0 0 0 0 0 ! Exits from: I325_by_the_stream
 I325_by_the_stream 0 0 0 0 0 I275_abandoned_warehouse I331_edge_of_the_woods 0 0 0 0 ! Exits from: I330_clearing
 0 0 0 0 0 0 I330_clearing I332_woods 0 0 0 0 ! Exits from: I331_edge_of_the_woods
 0 0 0 I347_hunting_grounds 0 0 I331_edge_of_the_woods 0 0 0 0 0 ! Exits from: I332_woods
 0 0 0 0 0 0 0 0 0 I343_upper_branches_of_ash_t 0 0 ! Exits from: I338_top_of_ash_tree
 0 0 0 0 0 0 0 0 I344_top_of_elm_tree I332_woods 0 0 ! Exits from: I339_middle_branches_of_elm_
 0 0 0 0 0 0 0 0 0 I332_woods 0 0 ! Exits from: I340_top_of_pine_tree
 0 0 0 0 0 0 0 0 I342_middle_branches_of_ash_ I332_woods 0 0 ! Exits from: I341_lower_branches_of_ash_t
 0 0 0 0 0 0 0 0 I343_upper_branches_of_ash_t I341_lower_branches_of_ash_t 0 0 ! Exits from: I342_middle_branches_of_ash_
 0 0 0 0 0 0 0 0 I338_top_of_ash_tree I342_middle_branches_of_ash_ 0 0 ! Exits from: I343_upper_branches_of_ash_t
 0 0 0 0 0 0 0 0 0 I339_middle_branches_of_elm_ 0 0 ! Exits from: I344_top_of_elm_tree
 I332_woods 0 0 I348_hunting_lodge_entrance 0 0 0 0 0 0 0 0 ! Exits from: I347_hunting_grounds
 0 0 0 0 0 0 0 0 0 I359_ladder 0 0 ! Exits from: I363_mad_science_laboratory
 0 0 0 0 0 0 I378_front_door 0 0 0 0 0 ! Exits from: I372_workshop
 0 0 0 0 0 0 0 I378_front_door 0 0 0 0 ! Exits from: I374_eastern_parking_lot
;

Class VPH_Class;
Array KOV_representatives --> 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ValuePropertyHolder_43 0 0 0 ValuePropertyHolder_47 0 0 0 0 0 0 0 0 ;
VPH_Class ValuePropertyHolder_43
    with value_range 1
    with p64_recurring KOVP_43_P64
    with description KOVP_43_P7
;
! Storage for property p64_recurring of kind SCENE_TY
Array KOVP_43_P64 table 0 0 (true) ;
! Storage for property description of kind SCENE_TY
Array KOVP_43_P7 table 0 0 (BC_3) ;
VPH_Class ValuePropertyHolder_47
    with value_range 6
    with p14_adaptive_text_viewpoint KOVP_47_P14
;
! Storage for property p14_adaptive_text_viewpoint of kind 
Array KOVP_47_P14 table 0 0 (I112_first_person_singular) (I112_first_person_singular) (I115_first_person_plural) (I112_first_person_singular) (I112_first_person_singular) (I112_first_person_singular) ;
Class K0_kind 
    has ~pluralname
    has ~proper
    with list_together BC_4
    with short_name BC_5
    with plural BC_6
    with article BC_7
    has ~ambigpluralname
;

Class K1_room 
    class K0_kind
    with description BC_8
    with map_region nothing
    has ~privately_named
    has light
    has ~visited
    with list_together BC_9
    with short_name BC_10
    with plural BC_11
    with article BC_12
;

Class K2_thing 
    class K0_kind
    has ~privately_named
    has ~light
    has ~edible
    has ~static
    has ~concealed
    has ~workflag
    has mentioned
    with p80_tub_relevant true
    with component_parent nothing
    with component_child nothing
    with component_sibling nothing
    with action_bitmap 0 0 0 0 0 0 0 
    has ~scenery
    has ~clothing
    has ~pushable
    has ~moved
    with description BC_13
    with initial BC_14
    with with_key nothing
    with list_together BC_15
    with short_name BC_16
    with plural BC_17
    with article BC_18
;

Class K6_supporter 
    class K2_thing

    	has transparent supporter

    with plural BC_19
    with capacity 100
    has static
    has ~enterable
    with description BC_20
    with initial BC_21
    with list_together BC_22
    with short_name BC_23
    with article BC_24
;

Class K8_person 
    class K2_thing

    	has transparent animate
    	with before NULL,

    with plural BC_25
    with capacity 100
    has ~female
    has ~neuter
    with description BC_26
    with initial BC_27
    with list_together BC_28
    with short_name BC_29
    with article BC_30
;

Class K10_man 
    class K8_person
    with plural BC_31
    has ~female
    has ~neuter
    with description BC_32
    with initial BC_33
    with list_together BC_34
    with short_name BC_35
    with article BC_36
;

Class K11_woman 
    class K8_person
    with plural BC_37
    has female
    has ~neuter
    with description BC_38
    with initial BC_39
    with list_together BC_40
    with short_name BC_41
    with article BC_42
;

Class K12_animal 
    class K8_person
    with plural BC_43
    with description BC_44
    with initial BC_45
    with list_together BC_46
    with short_name BC_47
    with article BC_48
;

Class K21_mouse 
    class K12_animal
    with plural BC_49
    with description BC_50
    with initial BC_51
    with list_together BC_52
    with short_name BC_53
    with article BC_54
;

Class K4_door 
    class K2_thing
     has door, 
    with plural BC_55
    has static
    has ~pushable
    has ~open
    has openable
    has ~lockable
    has ~locked
    with door_to nothing
    with with_key nothing
    with description BC_56
    with initial BC_57
    with list_together BC_58
    with short_name BC_59
    with article BC_60
;

Class K5_container 
    class K2_thing
     has container, 
    with plural BC_61
    with capacity 100
    has ~transparent
    has open
    has ~openable
    has ~lockable
    has ~locked
    has ~enterable
    with with_key nothing
    with description BC_62
    with initial BC_63
    with list_together BC_64
    with short_name BC_65
    with article BC_66
;

Class K14_vehicle 
    class K5_container
    with plural BC_67
    has static
    has enterable
    with description BC_68
    with initial BC_69
    with list_together BC_70
    with short_name BC_71
    with article BC_72
;

Class K15_player_s_holdall 
    class K5_container
    with plural BC_73
    has ~static
    has openable
    with description BC_74
    with initial BC_75
    with list_together BC_76
    with short_name BC_77
    with article BC_78
;

Class K20_wooden_drawer 
    class K5_container
    with plural BC_79
    has static
    has ~open
    has openable
    with description BC_80
    with initial BC_81
    with list_together BC_82
    with short_name BC_83
    with article BC_84
;

Class K22_canister 
    class K5_container
    with plural BC_85
    has ~open
    has openable
    with description BC_86
    with initial BC_87
    with list_together BC_88
    with short_name BC_89
    with article BC_90
;

Class K7_backdrop 
    class K2_thing
    with plural BC_91
    has static
    has scenery
    has ~pushable
    with description BC_92
    with initial BC_93
    with list_together BC_94
    with short_name BC_95
    with article BC_96
;

Class K23_tree 
    class K7_backdrop
    with plural BC_97
    with parse_name Parse_Name_GV168
    with p19_branches I197_bedroom
    with description BC_98
    with initial BC_99
    with list_together BC_100
    with short_name BC_101
    with article BC_102
;

Class K13_device 
    class K2_thing
     has switchable, 
    with plural BC_103
    has ~on
    with description BC_104
    with initial BC_105
    with list_together BC_106
    with short_name BC_107
    with article BC_108
;

Class K16_liquid 
    class K2_thing
    with plural BC_109
    with description BC_110
    with initial BC_111
    with list_together BC_112
    with short_name BC_113
    with article BC_114
;

Class K17_help_topic 
    class K2_thing
    with short_name BC_115
    with plural BC_116
    has ~visited
    with description BC_117
    with initial BC_118
    with list_together BC_119
    with article BC_120
;

Class K18_slice_of_bread 
    class K2_thing
    with plural BC_121
    with description BC_122
    has edible
    has ~p70_toasted
    with initial BC_123
    with list_together BC_124
    with short_name BC_125
    with article BC_126
;

Class K19_quarter 
    class K2_thing
    with plural BC_127
    with description BC_128
    with initial BC_129
    with list_together BC_130
    with short_name BC_131
    with article BC_132
;

Class K9_region 
    class K0_kind
    with plural BC_133
    has ~privately_named
    with list_together BC_134
    with short_name BC_135
    with article BC_136
;

Class K3_direction 
    class K0_kind

    	has scenery, ! class CompassDirection,

    with plural BC_137
    has ~privately_named
    has ~workflag
    with p10_opposite I51_north
    with list_together BC_138
    with short_name BC_139
    with article BC_140
;

Object I51_north "" Compass
    class K3_direction
    with short_name BC_141
    with article BC_142
    with p10_opposite I54_south
    with vector 0
    with IK3_Count 0
    with IK3_Link I52_northeast
    with KD_Count 3
    with name 'north' 'directions//p' 'n//' 
    with parse_name Parse_Name_GV1
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_143
    with plural BC_144
;

Object I52_northeast "" Compass
    class K3_direction
    with short_name BC_145
    with article BC_146
    with p10_opposite I56_southwest
    with vector 0
    with IK3_Count 1
    with IK3_Link I53_northwest
    with KD_Count 3
    with name 'northeast' 'directions//p' 'ne' 
    with parse_name Parse_Name_GV2
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_147
    with plural BC_148
;

Object I53_northwest "" Compass
    class K3_direction
    with short_name BC_149
    with article BC_150
    with p10_opposite I55_southeast
    with vector 0
    with IK3_Count 2
    with IK3_Link I54_south
    with KD_Count 3
    with name 'northwest' 'directions//p' 'nw' 
    with parse_name Parse_Name_GV3
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_151
    with plural BC_152
;

Object I54_south "" Compass
    class K3_direction
    with short_name BC_153
    with article BC_154
    with p10_opposite I51_north
    with vector 0
    with IK3_Count 3
    with IK3_Link I55_southeast
    with KD_Count 3
    with name 'south' 'directions//p' 's//' 
    with parse_name Parse_Name_GV4
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_155
    with plural BC_156
;

Object I55_southeast "" Compass
    class K3_direction
    with short_name BC_157
    with article BC_158
    with p10_opposite I53_northwest
    with vector 0
    with IK3_Count 4
    with IK3_Link I56_southwest
    with KD_Count 3
    with name 'southeast' 'directions//p' 'se' 
    with parse_name Parse_Name_GV5
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_159
    with plural BC_160
;

Object I56_southwest "" Compass
    class K3_direction
    with short_name BC_161
    with article BC_162
    with p10_opposite I52_northeast
    with vector 0
    with IK3_Count 5
    with IK3_Link I57_east
    with KD_Count 3
    with name 'southwest' 'directions//p' 'sw' 
    with parse_name Parse_Name_GV6
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_163
    with plural BC_164
;

Object I57_east "" Compass
    class K3_direction
    with short_name BC_165
    with article BC_166
    with p10_opposite I58_west
    with vector 0
    with IK3_Count 6
    with IK3_Link I58_west
    with KD_Count 3
    with name 'east' 'directions//p' 'e//' 
    with parse_name Parse_Name_GV7
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_167
    with plural BC_168
;

Object I58_west "" Compass
    class K3_direction
    with short_name BC_169
    with article BC_170
    with p10_opposite I57_east
    with vector 0
    with IK3_Count 7
    with IK3_Link I59_up
    with KD_Count 3
    with name 'west' 'directions//p' 'w//' 
    with parse_name Parse_Name_GV8
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_171
    with plural BC_172
;

Object I59_up "" Compass
    class K3_direction
    with short_name BC_173
    with article BC_174
    with p10_opposite I60_down
    with vector 0
    with IK3_Count 8
    with IK3_Link I60_down
    with KD_Count 3
    with name 'up' 'directions//p' 'u//' 
    with parse_name Parse_Name_GV9
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_175
    with plural BC_176
;

Object I60_down "" Compass
    class K3_direction
    with short_name BC_177
    with article BC_178
    with p10_opposite I59_up
    with vector 0
    with IK3_Count 9
    with IK3_Link in_obj
    with KD_Count 3
    with name 'down' 'directions//p' 'd//' 
    with parse_name Parse_Name_GV10
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_179
    with plural BC_180
;

Object in_obj "" Compass
    class K3_direction
    with short_name BC_181
    with article BC_182
    with p10_opposite out_obj
    with vector 0
    with IK3_Count 10
    with IK3_Link out_obj
    with KD_Count 3
    with name 'inside' 'directions//p' 'in' 
    with parse_name Parse_Name_GV11
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_183
    with plural BC_184
;

Object out_obj "" Compass
    class K3_direction
    with short_name BC_185
    with article BC_186
    with p10_opposite in_obj
    with vector 0
    with IK3_Count 11
    with IK3_Link nothing
    with KD_Count 3
    with name 'outside' 'directions//p' 'out' 
    with parse_name Parse_Name_GV12
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_187
    with plural BC_188
;

Object selfobj ""
    class K8_person

    	with saved_short_name TX_L_41,
     
    with short_name BC_189
    with description BC_190
    has proper
    has privately_named
    has concealed
    with vector 0
    with cap_short_name BC_191
    has mark_as_thing
    with IK2_Count 0
    with IK2_Link I147_pants
    with IK8_Count 0
    with IK8_Link I291_computer
    with KD_Count 8
    with parse_name Parse_Name_GV13
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_192
    with list_together BC_193
    with plural BC_194
    with article BC_195
;

Object -> I147_pants ""
    class K2_thing
    with short_name BC_196
    has proper
    has ~static
    has clothing
    has worn
    with vector 0
    with cap_short_name BC_197
    has mark_as_thing
    with IK2_Count 1
    with IK2_Link I148_underwear
    with KD_Count 2
    with name 'pants' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_198
    with initial BC_199
    with list_together BC_200
    with plural BC_201
    with article BC_202
;

Object -> I148_underwear ""
    class K2_thing
    with short_name BC_203
    has proper
    has ~static
    has clothing
    has worn
    with vector 0
    with cap_short_name BC_204
    has mark_as_thing
    with IK2_Count 2
    with IK2_Link I149_socks
    with KD_Count 2
    with name 'underwear' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_205
    with initial BC_206
    with list_together BC_207
    with plural BC_208
    with article BC_209
;

Object -> I149_socks ""
    class K2_thing
    with short_name BC_210
    has proper
    has ~static
    has clothing
    has worn
    with vector 0
    with cap_short_name BC_211
    has mark_as_thing
    with IK2_Count 3
    with IK2_Link I150_shirt
    with KD_Count 2
    with name 'socks' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_212
    with initial BC_213
    with list_together BC_214
    with plural BC_215
    with article BC_216
;

Object -> I150_shirt ""
    class K2_thing
    with short_name BC_217
    has ~static
    has clothing
    has worn
    with vector 0
    has mark_as_thing
    with IK2_Count 4
    with IK2_Link I151_work_shoes
    with KD_Count 2
    with name 'shirt' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_218
    with initial BC_219
    with list_together BC_220
    with plural BC_221
    with article BC_222
;

Object -> I151_work_shoes ""
    class K2_thing
    with short_name BC_223
    with description BC_224
    has proper
    has ~static
    has clothing
    has worn
    with vector 0
    with cap_short_name BC_225
    has mark_as_thing
    with IK2_Count 5
    with IK2_Link I152_belt
    with KD_Count 2
    with name 'work' 'shoes' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_226
    with list_together BC_227
    with plural BC_228
    with article BC_229
;

Object -> I152_belt ""
    class K2_thing
    with short_name BC_230
    has ~static
    has clothing
    has worn
    with vector 0
    has mark_as_thing
    with IK2_Count 6
    with IK2_Link I153_hat
    with KD_Count 2
    with name 'belt' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_231
    with initial BC_232
    with list_together BC_233
    with plural BC_234
    with article BC_235
;

Object -> I153_hat ""
    class K2_thing
    with short_name BC_236
    has ~static
    has clothing
    has worn
    with vector 0
    has mark_as_thing
    with IK2_Count 7
    with IK2_Link I154_jacket
    with KD_Count 2
    with name 'hat' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_237
    with initial BC_238
    with list_together BC_239
    with plural BC_240
    with article BC_241
;

Object -> I154_jacket ""
    class K2_thing
    with short_name BC_242
    has ~static
    has clothing
    has worn
    with vector 0
    has mark_as_thing
    with IK2_Count 8
    with IK2_Link I157_bare_help
    with KD_Count 2
    with name 'jacket' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_243
    with initial BC_244
    with list_together BC_245
    with plural BC_246
    with article BC_247
;

Object I157_bare_help ""
    class K17_help_topic
    with description BC_248
    with p15_game_specific_help BC_249
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 9
    with IK2_Link I158_help_basics
    with IK17_Count 0
    with IK17_Link I158_help_basics
    with KD_Count 17
    with name 'bare-help' 'help-topics//p' 'me' 'please' 
    with parse_name Parse_Name_GV98
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_250
    with list_together BC_251
    with short_name BC_252
    with plural BC_253
    with article BC_254
;

Object I158_help_basics ""
    class K17_help_topic
    with description BC_255
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 10
    with IK2_Link I159_help_movement
    with IK17_Count 1
    with IK17_Link I159_help_movement
    with KD_Count 17
    with name 'help-basics' 'help-topics//p' 'basic' 'basics' 'fundamental' 'important' 
    with parse_name Parse_Name_GV99
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_256
    with list_together BC_257
    with short_name BC_258
    with plural BC_259
    with article BC_260
;

Object I159_help_movement ""
    class K17_help_topic
    with description BC_261
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 11
    with IK2_Link I160_help_look
    with IK17_Count 2
    with IK17_Link I160_help_look
    with KD_Count 17
    with name 'help-movement' 'help-topics//p' 'movement' 'moving' 'travel' 'move' 'go' 'walk' 'run' 
    with parse_name Parse_Name_GV100
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_262
    with list_together BC_263
    with short_name BC_264
    with plural BC_265
    with article BC_266
;

Object I160_help_look ""
    class K17_help_topic
    with description BC_267
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 12
    with IK2_Link I161_help_examine
    with IK17_Count 3
    with IK17_Link I161_help_examine
    with KD_Count 17
    with name 'help-look' 'help-topics//p' 'look' 'l//' 
    with parse_name Parse_Name_GV101
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_268
    with list_together BC_269
    with short_name BC_270
    with plural BC_271
    with article BC_272
;

Object I161_help_examine ""
    class K17_help_topic
    with description BC_273
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 13
    with IK2_Link I162_help_inventory
    with IK17_Count 4
    with IK17_Link I162_help_inventory
    with KD_Count 17
    with name 'help-examine' 'help-topics//p' 'examine' 'x//' 
    with parse_name Parse_Name_GV102
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_274
    with list_together BC_275
    with short_name BC_276
    with plural BC_277
    with article BC_278
;

Object I162_help_inventory ""
    class K17_help_topic
    with description BC_279
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 14
    with IK2_Link I163_help_system
    with IK17_Count 5
    with IK17_Link I163_help_system
    with KD_Count 17
    with name 'help-inventory' 'help-topics//p' 'inventory' 'i//' 'inv' 
    with parse_name Parse_Name_GV103
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_280
    with list_together BC_281
    with short_name BC_282
    with plural BC_283
    with article BC_284
;

Object I163_help_system ""
    class K17_help_topic
    with description BC_285
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 15
    with IK2_Link I164_help_quit
    with IK17_Count 6
    with IK17_Link I164_help_quit
    with KD_Count 17
    with name 'help-system' 'help-topics//p' 'system' 'meta' 
    with parse_name Parse_Name_GV104
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_286
    with list_together BC_287
    with short_name BC_288
    with plural BC_289
    with article BC_290
;

Object I164_help_quit ""
    class K17_help_topic
    with description BC_291
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 16
    with IK2_Link I165_help_restart
    with IK17_Count 7
    with IK17_Link I165_help_restart
    with KD_Count 17
    with name 'help-quit' 'help-topics//p' 'quit' 'q//' 
    with parse_name Parse_Name_GV105
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_292
    with list_together BC_293
    with short_name BC_294
    with plural BC_295
    with article BC_296
;

Object I165_help_restart ""
    class K17_help_topic
    with description BC_297
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 17
    with IK2_Link I166_help_loadsave
    with IK17_Count 8
    with IK17_Link I166_help_loadsave
    with KD_Count 17
    with name 'help-restart' 'help-topics//p' 'restart' 
    with parse_name Parse_Name_GV106
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_298
    with list_together BC_299
    with short_name BC_300
    with plural BC_301
    with article BC_302
;

Object I166_help_loadsave ""
    class K17_help_topic
    with description BC_303
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 18
    with IK2_Link I167_help_undo
    with IK17_Count 9
    with IK17_Link I167_help_undo
    with KD_Count 17
    with name 'help-loadsave' 'help-topics//p' 'save' 'restore' 'load' 'saving' 
    with parse_name Parse_Name_GV107
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_304
    with list_together BC_305
    with short_name BC_306
    with plural BC_307
    with article BC_308
;

Object I167_help_undo ""
    class K17_help_topic
    with description BC_309
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 19
    with IK2_Link I168_help_again
    with IK17_Count 10
    with IK17_Link I168_help_again
    with KD_Count 17
    with name 'help-undo' 'help-topics//p' 'undo' 
    with parse_name Parse_Name_GV108
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_310
    with list_together BC_311
    with short_name BC_312
    with plural BC_313
    with article BC_314
;

Object I168_help_again ""
    class K17_help_topic
    with description BC_315
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 20
    with IK2_Link I169_help_script
    with IK17_Count 11
    with IK17_Link I169_help_script
    with KD_Count 17
    with name 'help-again' 'help-topics//p' 'again' 'g//' 
    with parse_name Parse_Name_GV109
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_316
    with list_together BC_317
    with short_name BC_318
    with plural BC_319
    with article BC_320
;

Object I169_help_script ""
    class K17_help_topic
    with description BC_321
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 21
    with IK2_Link I170_help_commands
    with IK17_Count 12
    with IK17_Link I170_help_commands
    with KD_Count 17
    with name 'help-script' 'help-topics//p' 'unscript' 
    with parse_name Parse_Name_GV110
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_322
    with list_together BC_323
    with short_name BC_324
    with plural BC_325
    with article BC_326
;

Object I170_help_commands ""
    class K17_help_topic
    with description BC_327
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 22
    with IK2_Link I171_help_getdrop
    with IK17_Count 13
    with IK17_Link I171_help_getdrop
    with KD_Count 17
    with name 'help-commands' 'help-topics//p' 'command' 'commands' 
    with parse_name Parse_Name_GV111
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_328
    with list_together BC_329
    with short_name BC_330
    with plural BC_331
    with article BC_332
;

Object I171_help_getdrop ""
    class K17_help_topic
    with description BC_333
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 23
    with IK2_Link I172_help_putthrow
    with IK17_Count 14
    with IK17_Link I172_help_putthrow
    with KD_Count 17
    with name 'help-getdrop' 'help-topics//p' 'get' 'take' 'drop' 
    with parse_name Parse_Name_GV112
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_334
    with list_together BC_335
    with short_name BC_336
    with plural BC_337
    with article BC_338
;

Object I172_help_putthrow ""
    class K17_help_topic
    with description BC_339
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 24
    with IK2_Link I173_help_pushpull
    with IK17_Count 15
    with IK17_Link I173_help_pushpull
    with KD_Count 17
    with name 'help-putthrow' 'help-topics//p' 
    with parse_name Parse_Name_GV113
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_340
    with list_together BC_341
    with short_name BC_342
    with plural BC_343
    with article BC_344
;

Object I173_help_pushpull ""
    class K17_help_topic
    with description BC_345
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 25
    with IK2_Link I174_help_enter
    with IK17_Count 16
    with IK17_Link I174_help_enter
    with KD_Count 17
    with name 'help-pushpull' 'help-topics//p' 'push' 'pull' 'turn' 
    with parse_name Parse_Name_GV114
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_346
    with list_together BC_347
    with short_name BC_348
    with plural BC_349
    with article BC_350
;

Object I174_help_enter ""
    class K17_help_topic
    with description BC_351
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 26
    with IK2_Link I175_help_openclose
    with IK17_Count 17
    with IK17_Link I175_help_openclose
    with KD_Count 17
    with name 'help-enter' 'help-topics//p' 'enter' 'sit' 'climb' 'exit' 'out' 'in' 
    with parse_name Parse_Name_GV115
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_352
    with list_together BC_353
    with short_name BC_354
    with plural BC_355
    with article BC_356
;

Object I175_help_openclose ""
    class K17_help_topic
    with description BC_357
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 27
    with IK2_Link I176_help_lockunlock
    with IK17_Count 18
    with IK17_Link I176_help_lockunlock
    with KD_Count 17
    with name 'help-openclose' 'help-topics//p' 'open' 'close' 
    with parse_name Parse_Name_GV116
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_358
    with list_together BC_359
    with short_name BC_360
    with plural BC_361
    with article BC_362
;

Object I176_help_lockunlock ""
    class K17_help_topic
    with description BC_363
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 28
    with IK2_Link I177_help_sensory
    with IK17_Count 19
    with IK17_Link I177_help_sensory
    with KD_Count 17
    with name 'help-lockunlock' 'help-topics//p' 
    with parse_name Parse_Name_GV117
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_364
    with list_together BC_365
    with short_name BC_366
    with plural BC_367
    with article BC_368
;

Object I177_help_sensory ""
    class K17_help_topic
    with description BC_369
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 29
    with IK2_Link I178_help_eatdrink
    with IK17_Count 20
    with IK17_Link I178_help_eatdrink
    with KD_Count 17
    with name 'help-sensory' 'help-topics//p' 
    with parse_name Parse_Name_GV118
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_370
    with list_together BC_371
    with short_name BC_372
    with plural BC_373
    with article BC_374
;

Object I178_help_eatdrink ""
    class K17_help_topic
    with description BC_375
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 30
    with IK2_Link I179_help_wearremove
    with IK17_Count 21
    with IK17_Link I179_help_wearremove
    with KD_Count 17
    with name 'help-eatdrink' 'help-topics//p' 'eat' 'drink' 
    with parse_name Parse_Name_GV119
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_376
    with list_together BC_377
    with short_name BC_378
    with plural BC_379
    with article BC_380
;

Object I179_help_wearremove ""
    class K17_help_topic
    with description BC_381
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 31
    with IK2_Link I180_help_search
    with IK17_Count 22
    with IK17_Link I180_help_search
    with KD_Count 17
    with name 'help-wearremove' 'help-topics//p' 'wear' 'remove' 'don' 'doff' 'disrobe' 
    with parse_name Parse_Name_GV120
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_382
    with list_together BC_383
    with short_name BC_384
    with plural BC_385
    with article BC_386
;

Object I180_help_search ""
    class K17_help_topic
    with description BC_387
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 32
    with IK2_Link I181_help_hit
    with IK17_Count 23
    with IK17_Link I181_help_hit
    with KD_Count 17
    with name 'help-search' 'help-topics//p' 'search' 
    with parse_name Parse_Name_GV121
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_388
    with list_together BC_389
    with short_name BC_390
    with plural BC_391
    with article BC_392
;

Object I181_help_hit ""
    class K17_help_topic
    with description BC_393
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 33
    with IK2_Link I182_help_wait
    with IK17_Count 24
    with IK17_Link I182_help_wait
    with KD_Count 17
    with name 'help-hit' 'help-topics//p' 
    with parse_name Parse_Name_GV122
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_394
    with list_together BC_395
    with short_name BC_396
    with plural BC_397
    with article BC_398
;

Object I182_help_wait ""
    class K17_help_topic
    with description BC_399
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 34
    with IK2_Link I183_help_specials
    with IK17_Count 25
    with IK17_Link I183_help_specials
    with KD_Count 17
    with name 'help-wait' 'help-topics//p' 'wait' 'z//' 
    with parse_name Parse_Name_GV123
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_400
    with list_together BC_401
    with short_name BC_402
    with plural BC_403
    with article BC_404
;

Object I183_help_specials ""
    class K17_help_topic
    with description BC_405
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 35
    with IK2_Link I184_help_about
    with IK17_Count 26
    with IK17_Link I184_help_about
    with KD_Count 17
    with name 'help-specials' 'help-topics//p' 'special' 'specials' 
    with parse_name Parse_Name_GV124
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_406
    with list_together BC_407
    with short_name BC_408
    with plural BC_409
    with article BC_410
;

Object I184_help_about ""
    class K17_help_topic
    with description BC_411
    with p15_game_specific_help BC_412
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 36
    with IK2_Link I185_help_verbose
    with IK17_Count 27
    with IK17_Link I185_help_verbose
    with KD_Count 17
    with name 'help-about' 'help-topics//p' 'about' 
    with parse_name Parse_Name_GV125
    with action_bitmap 0 0 0 0 0 0 0 
    has ~p66_game_available
    with initial BC_413
    with list_together BC_414
    with short_name BC_415
    with plural BC_416
    with article BC_417
;

Object I185_help_verbose ""
    class K17_help_topic
    with description BC_418
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 37
    with IK2_Link I186_help_score
    with IK17_Count 28
    with IK17_Link I186_help_score
    with KD_Count 17
    with name 'help-verbose' 'help-topics//p' 'verbose' 'brief' 
    with parse_name Parse_Name_GV126
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_419
    with list_together BC_420
    with short_name BC_421
    with plural BC_422
    with article BC_423
;

Object I186_help_score ""
    class K17_help_topic
    with description BC_424
    with p15_game_specific_help BC_425
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 38
    with IK2_Link I187_help_help
    with IK17_Count 29
    with IK17_Link I187_help_help
    with KD_Count 17
    with name 'help-score' 'help-topics//p' 'score' 
    with parse_name Parse_Name_GV127
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_426
    with list_together BC_427
    with short_name BC_428
    with plural BC_429
    with article BC_430
;

Object I187_help_help ""
    class K17_help_topic
    with description BC_431
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 39
    with IK2_Link I188_help_talking
    with IK17_Count 30
    with IK17_Link I188_help_talking
    with KD_Count 17
    with name 'help-help' 'help-topics//p' 'help' 
    with parse_name Parse_Name_GV128
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_432
    with list_together BC_433
    with short_name BC_434
    with plural BC_435
    with article BC_436
;

Object I188_help_talking ""
    class K17_help_topic
    with description BC_437
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 40
    with IK2_Link I189_help_talk
    with IK17_Count 31
    with IK17_Link I189_help_talk
    with KD_Count 17
    with name 'help-talking' 'help-topics//p' 'talking' 'people' 'character' 'conversation' 'interaction' 'dialog' 'dialogue' 'communication' 
    with parse_name Parse_Name_GV129
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_438
    with list_together BC_439
    with short_name BC_440
    with plural BC_441
    with article BC_442
;

Object I189_help_talk ""
    class K17_help_topic
    with description BC_443
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 41
    with IK2_Link I190_help_ask
    with IK17_Count 32
    with IK17_Link I190_help_ask
    with KD_Count 17
    with name 'help-talk' 'help-topics//p' 'talk' 
    with parse_name Parse_Name_GV130
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_444
    with list_together BC_445
    with short_name BC_446
    with plural BC_447
    with article BC_448
;

Object I190_help_ask ""
    class K17_help_topic
    with description BC_449
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 42
    with IK2_Link I191_help_tell
    with IK17_Count 33
    with IK17_Link I191_help_tell
    with KD_Count 17
    with name 'help-ask' 'help-topics//p' 'ask' 
    with parse_name Parse_Name_GV131
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_450
    with list_together BC_451
    with short_name BC_452
    with plural BC_453
    with article BC_454
;

Object I191_help_tell ""
    class K17_help_topic
    with description BC_455
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 43
    with IK2_Link I192_help_say
    with IK17_Count 34
    with IK17_Link I192_help_say
    with KD_Count 17
    with name 'help-tell' 'help-topics//p' 'tell' 
    with parse_name Parse_Name_GV132
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_456
    with list_together BC_457
    with short_name BC_458
    with plural BC_459
    with article BC_460
;

Object I192_help_say ""
    class K17_help_topic
    with description BC_461
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 44
    with IK2_Link I193_help_give
    with IK17_Count 35
    with IK17_Link I193_help_give
    with KD_Count 17
    with name 'help-say' 'help-topics//p' 'say' 'hello' 
    with parse_name Parse_Name_GV133
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_462
    with list_together BC_463
    with short_name BC_464
    with plural BC_465
    with article BC_466
;

Object I193_help_give ""
    class K17_help_topic
    with description BC_467
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 45
    with IK2_Link I194_help_show
    with IK17_Count 36
    with IK17_Link I194_help_show
    with KD_Count 17
    with name 'help-give' 'help-topics//p' 'give' 
    with parse_name Parse_Name_GV134
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_468
    with list_together BC_469
    with short_name BC_470
    with plural BC_471
    with article BC_472
;

Object I194_help_show ""
    class K17_help_topic
    with description BC_473
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 46
    with IK2_Link I195_help_strategy
    with IK17_Count 37
    with IK17_Link I195_help_strategy
    with KD_Count 17
    with name 'help-show' 'help-topics//p' 'show' 
    with parse_name Parse_Name_GV135
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_474
    with list_together BC_475
    with short_name BC_476
    with plural BC_477
    with article BC_478
;

Object I195_help_strategy ""
    class K17_help_topic
    with description BC_479
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 47
    with IK2_Link I196_help_use
    with IK17_Count 38
    with IK17_Link I196_help_use
    with KD_Count 17
    with name 'help-strategy' 'help-topics//p' 'strategy' 'playing' 
    with parse_name Parse_Name_GV136
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_480
    with list_together BC_481
    with short_name BC_482
    with plural BC_483
    with article BC_484
;

Object I196_help_use ""
    class K17_help_topic
    with description BC_485
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 48
    with IK2_Link I198_bed
    with IK17_Count 39
    with IK17_Link nothing
    with KD_Count 17
    with name 'help-use' 'help-topics//p' 'use' 
    with parse_name Parse_Name_GV137
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_486
    with list_together BC_487
    with short_name BC_488
    with plural BC_489
    with article BC_490
;

Object I197_bedroom ""
    class K1_room
    with short_name BC_491
    with description BC_492
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 0
    with IK1_Link I201_hall
    with KD_Count 1
    with name 'bedroom' 'rooms//p' 
    with list_together BC_493
    with plural BC_494
    with article BC_495
;

Object -> I198_bed ""
    class K2_thing
    with short_name BC_496
    with description BC_497
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 49
    with IK2_Link I199_nightstand
    with KD_Count 2
    with name 'bed' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_498
    with list_together BC_499
    with plural BC_500
    with article BC_501
;

Object -> I199_nightstand ""
    class K6_supporter
    with short_name BC_502
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 50
    with IK2_Link I200_ipod
    with IK6_Count 0
    with IK6_Link I208_stool
    with KD_Count 6
    with name 'nightstand' 'supporters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_503
    with initial BC_504
    with list_together BC_505
    with plural BC_506
    with article BC_507
;

Object -> -> I200_ipod ""
    class K2_thing
    with short_name BC_508
    with description BC_509
    has ~p67_playing
    with vector 0
    has mark_as_thing
    with component_child I216_play_button
    with IK2_Count 51
    with IK2_Link I202_muddy_brown_key
    with KD_Count 2
    with name 'ipod' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_510
    with list_together BC_511
    with plural BC_512
    with article BC_513
;

Object I201_hall ""
    class K1_room
    with short_name BC_514
    with article BC_515
    with description BC_516
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 1
    with IK1_Link I204_kitchen
    with KD_Count 1
    with name 'hall' 'rooms//p' 
    with list_together BC_517
    with plural BC_518
;

Object -> I202_muddy_brown_key ""
    class K2_thing
    with short_name BC_519
    with description BC_520
    has concealed
    with vector 0
    has mark_as_thing
    with IK2_Count 52
    with IK2_Link I203_staircase
    with KD_Count 2
    with name 'muddy' 'brown' 'key' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_521
    with list_together BC_522
    with plural BC_523
    with article BC_524
;

Object I203_staircase ""
    class K4_door
    with short_name BC_525
    with description BC_526
    has scenery
    has open
    has ~openable
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I201_hall) return I51_north; return I60_down;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I201_hall) return I227_upstairs_hall; return I201_hall;],
    with found_in I201_hall I227_upstairs_hall
    has mark_as_thing
    with IK2_Count 53
    with IK2_Link I205_toaster
    with IK4_Count 0
    with IK4_Link I222_back_door
    with KD_Count 4
    with name 'staircase' 'doors//p' 'stairs' 
    with parse_name Parse_Name_GV138
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_527
    with list_together BC_528
    with plural BC_529
    with article BC_530
;

Object I204_kitchen ""
    class K1_room
    with short_name BC_531
    with description BC_532
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 2
    with IK1_Link I220_back_entryway
    with KD_Count 1
    with name 'kitchen' 'rooms//p' 
    with list_together BC_533
    with plural BC_534
    with article BC_535
;

Object -> I205_toaster ""
    class K2_thing
    with short_name BC_536
    with description BC_537
    has static
    has ~p71_plugged_in
    has ~p73_done
    with vector 0
    has mark_as_thing
    with component_child I217_toast_button
    with IK2_Count 54
    with IK2_Link I206_cabinet
    with KD_Count 2
    with name 'toaster' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with p16_its_slice_count 0
    with initial BC_538
    with list_together BC_539
    with plural BC_540
    with article BC_541
;

Object -> I206_cabinet ""
    class K5_container
    with short_name BC_542
    with description BC_543
    has static
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 55
    with IK2_Link I209_top_drawer
    with IK5_Count 0
    with IK5_Link I209_top_drawer
    with KD_Count 5
    with name 'cabinet' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_544
    with list_together BC_545
    with plural BC_546
    with article BC_547
;

Object -> -> I209_top_drawer ""
    class K5_container
    with short_name BC_548
    has static
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 58
    with IK2_Link I212_cereal_crumbs
    with IK5_Count 2
    with IK5_Link I210_middle_drawer
    with KD_Count 5
    with name 'top' 'drawer' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_549
    with initial BC_550
    with list_together BC_551
    with plural BC_552
    with article BC_553
;

Object -> -> -> I212_cereal_crumbs ""
    class K16_liquid
    with short_name BC_554
    has proper
    with vector 0
    with cap_short_name BC_555
    has mark_as_thing
    with IK2_Count 61
    with IK2_Link I210_middle_drawer
    with IK16_Count 0
    with IK16_Link I265_rocket_fuel
    with KD_Count 16
    with name 'cereal' 'crumbs' 'liquids//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_556
    with initial BC_557
    with list_together BC_558
    with plural BC_559
    with article BC_560
;

Object -> -> I210_middle_drawer ""
    class K5_container
    with short_name BC_561
    has static
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 59
    with IK2_Link I213_big_tupperware_containe
    with IK5_Count 3
    with IK5_Link I213_big_tupperware_containe
    with KD_Count 5
    with name 'middle' 'drawer' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_562
    with initial BC_563
    with list_together BC_564
    with plural BC_565
    with article BC_566
;

Object -> -> -> I213_big_tupperware_containe ""
    class K5_container
    with short_name BC_567
    with description BC_568
    has static
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 62
    with IK2_Link I214_loaf_of_bread
    with IK5_Count 5
    with IK5_Link I211_bottom_drawer
    with KD_Count 5
    with name 'big' 'tupperware' 'container' 'containers//p' 'container' 
    with parse_name Parse_Name_GV140
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_569
    with list_together BC_570
    with plural BC_571
    with article BC_572
;

Object -> -> -> -> I214_loaf_of_bread ""
    class K2_thing
    with short_name BC_573
    with description BC_574
    has p68_wrapped
    with vector 0
    has mark_as_thing
    with IK2_Count 63
    with IK2_Link I211_bottom_drawer
    with KD_Count 2
    with name 'loaf' 'of' 'bread' 'things//p' 'bread' 
    with parse_name Parse_Name_GV141
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_575
    with list_together BC_576
    with plural BC_577
    with article BC_578
;

Object -> -> I211_bottom_drawer ""
    class K5_container
    with short_name BC_579
    has static
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 60
    with IK2_Link I207_refrigerator
    with IK5_Count 4
    with IK5_Link I207_refrigerator
    with KD_Count 5
    with name 'bottom' 'drawer' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_580
    with initial BC_581
    with list_together BC_582
    with plural BC_583
    with article BC_584
;

Object -> I207_refrigerator ""
    class K5_container
    with short_name BC_585
    has static
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 56
    with IK2_Link I218_fish
    with IK5_Count 1
    with IK5_Link I238_desk_drawer
    with KD_Count 5
    with name 'refrigerator' 'containers//p' 'fridge' 
    with parse_name Parse_Name_GV139
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_586
    with initial BC_587
    with list_together BC_588
    with plural BC_589
    with article BC_590
;

Object -> -> I218_fish ""
    class K2_thing
    with short_name BC_591
    with description BC_592
    has edible
    with vector 0
    has mark_as_thing
    with IK2_Count 66
    with IK2_Link I219_pie
    with KD_Count 2
    with name 'fish' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_593
    with list_together BC_594
    with plural BC_595
    with article BC_596
;

Object -> -> I219_pie ""
    class K2_thing
    with short_name BC_597
    with description BC_598
    has edible
    with p101_aged false
    with vector 0
    has mark_as_thing
    with IK2_Count 67
    with IK2_Link I208_stool
    with KD_Count 2
    with name 'pie' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_599
    with list_together BC_600
    with plural BC_601
    with article BC_602
;

Object -> I208_stool ""
    class K6_supporter
    with short_name BC_603
    with description BC_604
    has ~static
    has enterable
    with vector 0
    has mark_as_thing
    with IK2_Count 57
    with IK2_Link I216_play_button
    with IK6_Count 1
    with IK6_Link I235_desk
    with KD_Count 6
    with name 'stool' 'supporters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_605
    with list_together BC_606
    with plural BC_607
    with article BC_608
;

Object I216_play_button ""
    class K2_thing
    with short_name BC_609
    has ~p74_active
    with vector 0
    has mark_as_thing
    with component_parent I200_ipod
    with IK2_Count 64
    with IK2_Link I217_toast_button
    with KD_Count 2
    with name 'play' 'button' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_610
    with initial BC_611
    with list_together BC_612
    with plural BC_613
    with article BC_614
;

Object I217_toast_button ""
    class K2_thing
    with short_name BC_615
    has concealed
    with vector 0
    has mark_as_thing
    with component_parent I205_toaster
    with IK2_Count 65
    with IK2_Link I221_blue_key
    with KD_Count 2
    with name 'toast' 'button' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_616
    with initial BC_617
    with list_together BC_618
    with plural BC_619
    with article BC_620
;

Object I220_back_entryway ""
    class K1_room
    with short_name BC_621
    with description BC_622
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 3
    with IK1_Link I227_upstairs_hall
    with KD_Count 1
    with name 'back' 'entryway' 'rooms//p' 
    with list_together BC_623
    with plural BC_624
    with article BC_625
;

Object -> I221_blue_key ""
    class K2_thing
    with short_name BC_626
    with vector 0
    has mark_as_thing
    with IK2_Count 68
    with IK2_Link I223_coat_rack
    with KD_Count 2
    with name 'blue' 'key' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_627
    with initial BC_628
    with list_together BC_629
    with plural BC_630
    with article BC_631
;

Object -> I223_coat_rack ""
    class K2_thing
    with short_name BC_632
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 70
    with IK2_Link I224_trash_can
    with KD_Count 2
    with name 'coat' 'rack' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_633
    with initial BC_634
    with list_together BC_635
    with plural BC_636
    with article BC_637
;

Object -> I224_trash_can ""
    class K2_thing
    with short_name BC_638
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 71
    with IK2_Link I225_right_running_shoe
    with KD_Count 2
    with name 'trash' 'can' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_639
    with initial BC_640
    with list_together BC_641
    with plural BC_642
    with article BC_643
;

Object -> I225_right_running_shoe ""
    class K2_thing
    with short_name BC_644
    with description BC_645
    with vector 0
    has mark_as_thing
    with IK2_Count 72
    with IK2_Link I228_toyota_key
    with KD_Count 2
    with name 'right' 'running' 'shoe' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_646
    with list_together BC_647
    with plural BC_648
    with article BC_649
;

Object -> I228_toyota_key ""
    class K2_thing
    with short_name BC_650
    with description BC_651
    has p75_tied
    with vector 0
    has mark_as_thing
    with IK2_Count 74
    with IK2_Link I222_back_door
    with KD_Count 2
    with name 'toyota' 'key' 'things//p' 
    with parse_name Parse_Name_GV160
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_652
    with list_together BC_653
    with plural BC_654
    with article BC_655
;

Object I222_back_door ""
    class K4_door
    with short_name BC_656
    with article BC_657
    with with_key I221_blue_key
    has lockable
    has locked
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I220_back_entryway) return I54_south; return I51_north;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I220_back_entryway) return I230_backyard; return I220_back_entryway;],
    with found_in I220_back_entryway I230_backyard
    has mark_as_thing
    with IK2_Count 69
    with IK2_Link I226_left_running_shoe
    with IK4_Count 1
    with IK4_Link I240_closet_door
    with KD_Count 4
    with name 'back' 'door' 'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_658
    with initial BC_659
    with list_together BC_660
    with plural BC_661
;

Object I227_upstairs_hall ""
    class K1_room
    with short_name BC_662
    with article BC_663
    with description BC_664
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 4
    with IK1_Link I230_backyard
    with KD_Count 1
    with name 'upstairs' 'hall' 'rooms//p' 
    with list_together BC_665
    with plural BC_666
;

Object -> I226_left_running_shoe ""
    class K2_thing
    with short_name BC_667
    with description BC_668
    with vector 0
    has mark_as_thing
    with IK2_Count 73
    with IK2_Link I229_pair_of_running_shoes
    with KD_Count 2
    with name 'left' 'running' 'shoe' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_669
    with list_together BC_670
    with plural BC_671
    with article BC_672
;

Object I229_pair_of_running_shoes ""
    class K2_thing
    with short_name BC_673
    with description BC_674
    has clothing
    with p92_laced false
    with vector 0
    has mark_as_thing
    with IK2_Count 75
    with IK2_Link I231_stick
    with KD_Count 2
    with name 'pair' 'of' 'running' 'shoes' 'things//p' 'laces' 
    with parse_name Parse_Name_GV165
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_675
    with list_together BC_676
    with plural BC_677
    with article BC_678
;

Object I230_backyard ""
    class K1_room
    with short_name BC_679
    with description BC_680
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 5
    with IK1_Link I234_study
    with KD_Count 1
    with name 'backyard' 'rooms//p' 
    with list_together BC_681
    with plural BC_682
    with article BC_683
;

Object -> I231_stick ""
    class K2_thing
    with short_name BC_684
    with vector 0
    has mark_as_thing
    with IK2_Count 76
    with IK2_Link I232_grass
    with KD_Count 2
    with name 'stick' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_685
    with initial BC_686
    with list_together BC_687
    with plural BC_688
    with article BC_689
;

Object -> I232_grass ""
    class K2_thing
    with short_name BC_690
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 77
    with IK2_Link I235_desk
    with KD_Count 2
    with name 'grass' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_691
    with initial BC_692
    with list_together BC_693
    with plural BC_694
    with article BC_695
;

Object I234_study ""
    class K1_room
    with short_name BC_696
    with description BC_697
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 6
    with IK1_Link I241_the_closet
    with KD_Count 1
    with name 'study' 'rooms//p' 
    with list_together BC_698
    with plural BC_699
    with article BC_700
;

Object -> I235_desk ""
    class K6_supporter
    with short_name BC_701
    with description BC_702
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with component_child I238_desk_drawer
    with IK2_Count 78
    with IK2_Link I236_dime
    with IK6_Count 2
    with IK6_Link I357_tool_shelf
    with KD_Count 6
    with name 'desk' 'supporters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_703
    with list_together BC_704
    with plural BC_705
    with article BC_706
;

Object -> -> I236_dime ""
    class K2_thing
    with short_name BC_707
    with description BC_708
    with vector 0
    has mark_as_thing
    with IK2_Count 79
    with IK2_Link X237
    with KD_Count 2
    with name 'dime' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_709
    with list_together BC_710
    with plural BC_711
    with article BC_712
;

Object -> -> X237 ""
    class K19_quarter
    with short_name BC_713
    with vector 0
    has mark_as_thing
    with IK2_Count 80
    with IK2_Link I238_desk_drawer
    with IK19_Count 0
    with IK19_Link X245
    with KD_Count 19
    with name 'quarter' 'quarters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_714
    with initial BC_715
    with list_together BC_716
    with plural BC_717
    with article BC_718
;

Object I238_desk_drawer ""
    class K5_container
    with short_name BC_719
    has static
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with component_parent I235_desk
    with IK2_Count 81
    with IK2_Link I239_earbuds
    with IK5_Count 6
    with IK5_Link I244_first_drawer
    with KD_Count 5
    with name 'desk' 'drawer' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_720
    with initial BC_721
    with list_together BC_722
    with plural BC_723
    with article BC_724
;

Object -> I239_earbuds ""
    class K2_thing
    with short_name BC_725
    with description BC_726
    has proper
    has clothing
    has ~p76_connected
    with vector 0
    with cap_short_name BC_727
    has mark_as_thing
    with IK2_Count 82
    with IK2_Link I240_closet_door
    with KD_Count 2
    with name 'earbuds' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_728
    with list_together BC_729
    with plural BC_730
    with article BC_731
;

Object I240_closet_door ""
    class K4_door
    with short_name BC_732
    with article BC_733
    has open
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I234_study) return I51_north; return I54_south;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I234_study) return I241_the_closet; return I234_study;],
    with found_in I234_study I241_the_closet
    has mark_as_thing
    with IK2_Count 83
    with IK2_Link I243_chest_of_drawers
    with IK4_Count 2
    with IK4_Link I263_the_tunnel_of_extractio
    with KD_Count 4
    with name 'closet' 'door' 'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_734
    with initial BC_735
    with list_together BC_736
    with plural BC_737
;

Object I241_the_closet ""
    class K1_room
    with short_name BC_738
    with description BC_739
    with map_region I269_house
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 7
    with IK1_Link I254_bathroom
    with KD_Count 1
    with name 'the' 'closet' 'rooms//p' 
    with list_together BC_740
    with plural BC_741
    with article BC_742
;

Object -> I243_chest_of_drawers ""
    class K2_thing
    with short_name BC_743
    with description BC_744
    with vector 0
    has mark_as_thing
    with component_child I244_first_drawer
    with IK2_Count 84
    with IK2_Link I244_first_drawer
    with KD_Count 2
    with name 'chest' 'of' 'drawers' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_745
    with list_together BC_746
    with plural BC_747
    with article BC_748
;

Object I244_first_drawer ""
    class K20_wooden_drawer
    with short_name BC_749
    with article BC_750
    with vector 0
    has mark_as_thing
    with component_parent I243_chest_of_drawers
    with component_sibling I246_second_drawer
    with IK2_Count 85
    with IK2_Link X245
    with IK5_Count 7
    with IK5_Link I246_second_drawer
    with IK20_Count 0
    with IK20_Link I246_second_drawer
    with KD_Count 20
    with name 'first' 'drawer' 'wooden//p' 'drawers//p' 
    with parse_name Parse_Name_GV146
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_751
    with initial BC_752
    with list_together BC_753
    with plural BC_754
;

Object -> X245 ""
    class K19_quarter
    with short_name BC_755
    with vector 0
    has mark_as_thing
    with IK2_Count 86
    with IK2_Link I246_second_drawer
    with IK19_Count 1
    with IK19_Link X247
    with KD_Count 19
    with name 'quarter' 'quarters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_756
    with initial BC_757
    with list_together BC_758
    with plural BC_759
    with article BC_760
;

Object I246_second_drawer ""
    class K20_wooden_drawer
    with short_name BC_761
    with article BC_762
    with vector 0
    has mark_as_thing
    with component_parent I243_chest_of_drawers
    with component_sibling I248_third_drawer
    with IK2_Count 87
    with IK2_Link X247
    with IK5_Count 8
    with IK5_Link I248_third_drawer
    with IK20_Count 1
    with IK20_Link I248_third_drawer
    with KD_Count 20
    with name 'second' 'drawer' 'wooden//p' 'drawers//p' 
    with parse_name Parse_Name_GV147
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_763
    with initial BC_764
    with list_together BC_765
    with plural BC_766
;

Object -> X247 ""
    class K19_quarter
    with short_name BC_767
    with vector 0
    has mark_as_thing
    with IK2_Count 88
    with IK2_Link I248_third_drawer
    with IK19_Count 2
    with IK19_Link X249
    with KD_Count 19
    with name 'quarter' 'quarters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_768
    with initial BC_769
    with list_together BC_770
    with plural BC_771
    with article BC_772
;

Object I248_third_drawer ""
    class K20_wooden_drawer
    with short_name BC_773
    with article BC_774
    with vector 0
    has mark_as_thing
    with component_parent I243_chest_of_drawers
    with component_sibling I250_fourth_drawer
    with IK2_Count 89
    with IK2_Link X249
    with IK5_Count 9
    with IK5_Link I250_fourth_drawer
    with IK20_Count 2
    with IK20_Link I250_fourth_drawer
    with KD_Count 20
    with name 'third' 'drawer' 'wooden//p' 'drawers//p' 
    with parse_name Parse_Name_GV148
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_775
    with initial BC_776
    with list_together BC_777
    with plural BC_778
;

Object -> X249 ""
    class K19_quarter
    with short_name BC_779
    with vector 0
    has mark_as_thing
    with IK2_Count 90
    with IK2_Link I250_fourth_drawer
    with IK19_Count 3
    with IK19_Link X251
    with KD_Count 19
    with name 'quarter' 'quarters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_780
    with initial BC_781
    with list_together BC_782
    with plural BC_783
    with article BC_784
;

Object I250_fourth_drawer ""
    class K20_wooden_drawer
    with short_name BC_785
    with article BC_786
    with vector 0
    has mark_as_thing
    with component_parent I243_chest_of_drawers
    with component_sibling I252_fifth_drawer
    with IK2_Count 91
    with IK2_Link X251
    with IK5_Count 10
    with IK5_Link I252_fifth_drawer
    with IK20_Count 3
    with IK20_Link I252_fifth_drawer
    with KD_Count 20
    with name 'fourth' 'drawer' 'wooden//p' 'drawers//p' 
    with parse_name Parse_Name_GV149
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_787
    with initial BC_788
    with list_together BC_789
    with plural BC_790
;

Object -> X251 ""
    class K19_quarter
    with short_name BC_791
    with vector 0
    has mark_as_thing
    with IK2_Count 92
    with IK2_Link I252_fifth_drawer
    with IK19_Count 4
    with IK19_Link X253
    with KD_Count 19
    with name 'quarter' 'quarters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_792
    with initial BC_793
    with list_together BC_794
    with plural BC_795
    with article BC_796
;

Object I252_fifth_drawer ""
    class K20_wooden_drawer
    with short_name BC_797
    with article BC_798
    has open
    with vector 0
    has mark_as_thing
    with component_parent I243_chest_of_drawers
    with IK2_Count 93
    with IK2_Link X253
    with IK5_Count 11
    with IK5_Link I256_medicine_cabinet
    with IK20_Count 4
    with IK20_Link nothing
    with KD_Count 20
    with name 'fifth' 'drawer' 'wooden//p' 'drawers//p' 
    with parse_name Parse_Name_GV150
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_799
    with initial BC_800
    with list_together BC_801
    with plural BC_802
;

Object -> X253 ""
    class K19_quarter
    with short_name BC_803
    with vector 0
    has mark_as_thing
    with IK2_Count 94
    with IK2_Link I255_mirror
    with IK19_Count 5
    with IK19_Link nothing
    with KD_Count 19
    with name 'quarter' 'quarters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_804
    with initial BC_805
    with list_together BC_806
    with plural BC_807
    with article BC_808
;

Object I254_bathroom ""
    class K1_room
    with short_name BC_809
    with description BC_810
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 8
    with IK1_Link I262_basement
    with KD_Count 1
    with name 'bathroom' 'rooms//p' 
    with list_together BC_811
    with plural BC_812
    with article BC_813
;

Object -> I255_mirror ""
    class K2_thing
    with short_name BC_814
    with description BC_815
    has static
    with vector 0
    has mark_as_thing
    with IK2_Count 95
    with IK2_Link I256_medicine_cabinet
    with KD_Count 2
    with name 'mirror' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_816
    with list_together BC_817
    with plural BC_818
    with article BC_819
;

Object -> I256_medicine_cabinet ""
    class K5_container
    with short_name BC_820
    with description BC_821
    has static
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 96
    with IK2_Link I257_can_of_hair_gel
    with IK5_Count 12
    with IK5_Link I259_bathtub
    with KD_Count 5
    with name 'medicine' 'cabinet' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_822
    with list_together BC_823
    with plural BC_824
    with article BC_825
;

Object -> -> I257_can_of_hair_gel ""
    class K2_thing
    with short_name BC_826
    with description BC_827
    with vector 0
    has mark_as_thing
    with IK2_Count 97
    with IK2_Link I259_bathtub
    with KD_Count 2
    with name 'can' 'of' 'hair' 'gel' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_828
    with list_together BC_829
    with plural BC_830
    with article BC_831
;

Object -> I259_bathtub ""
    class K5_container
    with short_name BC_832
    with description BC_833
    has static
    has enterable
    with vector 0
    has mark_as_thing
    with component_child I260_drain
    with IK2_Count 99
    with IK2_Link I258_dollop_of_hair_gel
    with IK5_Count 13
    with IK5_Link I264_vat
    with KD_Count 5
    with name 'bathtub' 'containers//p' 'tub' 
    with parse_name Parse_Name_GV151
    with action_bitmap 0 0 0 0 0 0 0 
    with p17_its_water_level 0
    with initial BC_834
    with list_together BC_835
    with plural BC_836
    with article BC_837
;

Object I258_dollop_of_hair_gel ""
    class K2_thing
    with short_name BC_838
    has clothing
    with p80_tub_relevant false
    with vector 0
    has mark_as_thing
    with IK2_Count 98
    with IK2_Link I260_drain
    with KD_Count 2
    with name 'dollop' 'of' 'hair' 'gel' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_839
    with initial BC_840
    with list_together BC_841
    with plural BC_842
    with article BC_843
;

Object I260_drain ""
    class K2_thing
    with short_name BC_844
    with vector 0
    has mark_as_thing
    with component_parent I259_bathtub
    with component_sibling I261_faucet
    with IK2_Count 100
    with IK2_Link I261_faucet
    with KD_Count 2
    with name 'drain' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    has ~p77_plugged
    with description BC_845
    with initial BC_846
    with list_together BC_847
    with plural BC_848
    with article BC_849
;

Object I261_faucet ""
    class K2_thing
    with short_name BC_850
    with vector 0
    has mark_as_thing
    with component_parent I259_bathtub
    with IK2_Count 101
    with IK2_Link I264_vat
    with KD_Count 2
    with name 'faucet' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    has ~p78_on
    with description BC_851
    with initial BC_852
    with list_together BC_853
    with plural BC_854
    with article BC_855
;

Object I262_basement ""
    class K1_room
    with short_name BC_856
    with description BC_857
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 9
    with IK1_Link I270_mad_scientist_s_house
    with KD_Count 1
    with name 'basement' 'rooms//p' 
    with list_together BC_858
    with plural BC_859
    with article BC_860
;

Object -> I264_vat ""
    class K5_container
    with short_name BC_861
    with description BC_862
    has static
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 103
    with IK2_Link I265_rocket_fuel
    with IK5_Count 14
    with IK5_Link I267_key_cabinet
    with KD_Count 5
    with name 'vat' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_863
    with list_together BC_864
    with plural BC_865
    with article BC_866
;

Object -> -> I265_rocket_fuel ""
    class K16_liquid
    with short_name BC_867
    has proper
    with vector 0
    with cap_short_name BC_868
    has mark_as_thing
    with IK2_Count 104
    with IK2_Link I267_key_cabinet
    with IK16_Count 1
    with IK16_Link I266_bucketful_of_rocket_fue
    with KD_Count 16
    with name 'rocket' 'fuel' 'liquids//p' 'liquid' 
    with parse_name Parse_Name_GV152
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_869
    with initial BC_870
    with list_together BC_871
    with plural BC_872
    with article BC_873
;

Object -> I267_key_cabinet ""
    class K5_container
    with short_name BC_874
    with description BC_875
    has static
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 106
    with IK2_Link I268_small_metal_key
    with IK5_Count 15
    with IK5_Link I360_small_tool_box
    with KD_Count 5
    with name 'key' 'cabinet' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_876
    with list_together BC_877
    with plural BC_878
    with article BC_879
;

Object -> -> I268_small_metal_key ""
    class K2_thing
    with short_name BC_880
    with description BC_881
    with vector 0
    has mark_as_thing
    with IK2_Count 107
    with IK2_Link I263_the_tunnel_of_extractio
    with KD_Count 2
    with name 'small' 'metal' 'key' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_882
    with list_together BC_883
    with plural BC_884
    with article BC_885
;

Object I263_the_tunnel_of_extractio ""
    class K4_door
    with short_name BC_886
    with description BC_887
    has proper
    has open
    has ~openable
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I262_basement) return I58_west; return I60_down;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I262_basement) return I275_abandoned_warehouse; return I262_basement;],
    with found_in I262_basement I275_abandoned_warehouse
    has mark_as_thing
    with IK2_Count 102
    with IK2_Link I266_bucketful_of_rocket_fue
    with IK4_Count 3
    with IK4_Link I277_side_door
    with KD_Count 4
    with name 'the' 'tunnel' 'of' 'extraction' 'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_888
    with list_together BC_889
    with plural BC_890
    with article BC_891
;

Object I266_bucketful_of_rocket_fue ""
    class K16_liquid
    with short_name BC_892
    with vector 0
    has mark_as_thing
    with IK2_Count 105
    with IK2_Link I355_gadgets
    with IK16_Count 2
    with IK16_Link I329_bucketful_of_piranha_in
    with KD_Count 16
    with name 'bucketful' 'of' 'rocket' 'fuel' 'liquids//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_893
    with initial BC_894
    with list_together BC_895
    with plural BC_896
    with article BC_897
;

Object I269_house ""
    class K9_region
    with short_name BC_898
    with vector 0
    with regional_found_in [ ;
        if (TestRegionalContainment(location, I269_house)) rtrue; rfalse;],
    with IK9_Count 0
    with IK9_Link I296_floating
    with KD_Count 9
    with name 'house' 'regions//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_899
    with plural BC_900
    with article BC_901
;

Object I270_mad_scientist_s_house ""
    class K1_room
    with short_name BC_902
    with description BC_903
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 10
    with IK1_Link I271_laboratory
    with KD_Count 1
    with name 'mad' 'scientist^s' 'house' 'rooms//p' 
    with list_together BC_904
    with plural BC_905
    with article BC_906
;

Object -> I355_gadgets ""
    class K2_thing
    with short_name BC_907
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 158
    with IK2_Link I356_tubes
    with KD_Count 2
    with name 'gadgets' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_908
    with initial BC_909
    with list_together BC_910
    with plural BC_911
    with article BC_912
;

Object -> I356_tubes ""
    class K2_thing
    with short_name BC_913
    has proper
    has static
    has scenery
    with vector 0
    with cap_short_name BC_914
    has mark_as_thing
    with IK2_Count 159
    with IK2_Link I357_tool_shelf
    with KD_Count 2
    with name 'tubes' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_915
    with initial BC_916
    with list_together BC_917
    with plural BC_918
    with article BC_919
;

Object -> I357_tool_shelf ""
    class K6_supporter
    with short_name BC_920
    with description BC_921
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 160
    with IK2_Link I360_small_tool_box
    with IK6_Count 6
    with IK6_Link I283_roof_of_the_shed
    with KD_Count 6
    with name 'tool' 'shelf' 'supporters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_922
    with list_together BC_923
    with plural BC_924
    with article BC_925
;

Object -> -> I360_small_tool_box ""
    class K5_container
    with short_name BC_926
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 163
    with IK2_Link I362_super_glue
    with IK5_Count 25
    with IK5_Link I282_shed
    with KD_Count 5
    with name 'small' 'tool' 'box' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_927
    with initial BC_928
    with list_together BC_929
    with plural BC_930
    with article BC_931
;

Object -> -> -> I362_super_glue ""
    class K2_thing
    with short_name BC_932
    with description BC_933
    has proper
    has edible
    with p98_cut false
    with vector 0
    has mark_as_thing
    with IK2_Count 165
    with IK2_Link I361_bottle_of_soylent
    with KD_Count 2
    with name 'super' 'glue' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_934
    with list_together BC_935
    with plural BC_936
    with article BC_937
;

Object -> -> I361_bottle_of_soylent ""
    class K2_thing
    with short_name BC_938
    with description BC_939
    has edible
    with vector 0
    has mark_as_thing
    with IK2_Count 164
    with IK2_Link I358_amplifier
    with KD_Count 2
    with name 'bottle' 'of' 'soylent' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_940
    with list_together BC_941
    with plural BC_942
    with article BC_943
;

Object -> I358_amplifier ""
    class K2_thing
    with short_name BC_944
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 161
    with IK2_Link I307_call_train_button
    with KD_Count 2
    with name 'amplifier' 'things//p' 'amp' 
    with parse_name Parse_Name_GV171
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_945
    with initial BC_946
    with list_together BC_947
    with plural BC_948
    with article BC_949
;

Object I271_laboratory ""
    class K1_room
    with short_name BC_950
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 11
    with IK1_Link I272_control_room
    with KD_Count 1
    with name 'laboratory' 'rooms//p' 
    with description BC_951
    with list_together BC_952
    with plural BC_953
    with article BC_954
;

Object I272_control_room ""
    class K1_room
    with short_name BC_955
    with description BC_956
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 12
    with IK1_Link I273_hunting_lodge
    with KD_Count 1
    with name 'control' 'room' 'rooms//p' 
    with list_together BC_957
    with plural BC_958
    with article BC_959
;

Object -> I307_call_train_button ""
    class K2_thing
    with short_name BC_960
    with article BC_961
    with description BC_962
    with vector 0
    has mark_as_thing
    with IK2_Count 127
    with IK2_Link I308_old_screen
    with KD_Count 2
    with name 'call' 'train' 'button' 'things//p' 'note' 
    with parse_name Parse_Name_GV162
    with action_bitmap 0 0 0 0 0 0 0 
    with p90_examined false
    with initial BC_963
    with list_together BC_964
    with plural BC_965
;

Object -> I308_old_screen ""
    class K2_thing
    with short_name BC_966
    with description BC_967
    has static
    with vector 0
    has mark_as_thing
    with IK2_Count 128
    with IK2_Link I349_moose_head
    with KD_Count 2
    with name 'old' 'screen' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_968
    with list_together BC_969
    with plural BC_970
    with article BC_971
;

Object I273_hunting_lodge ""
    class K1_room
    with short_name BC_972
    with article BC_973
    with description BC_974
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 13
    with IK1_Link I274_space_center
    with KD_Count 1
    with name 'hunting' 'lodge' 'rooms//p' 
    with list_together BC_975
    with plural BC_976
;

Object -> I349_moose_head ""
    class K2_thing
    with short_name BC_977
    has ~static
    has clothing
    has concealed
    with p95_accustomed false
    with vector 0
    has mark_as_thing
    with IK2_Count 152
    with IK2_Link I350_deer_head
    with KD_Count 2
    with name 'moose' 'head' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_978
    with initial BC_979
    with list_together BC_980
    with plural BC_981
    with article BC_982
;

Object -> I350_deer_head ""
    class K2_thing
    with short_name BC_983
    has ~static
    has concealed
    with vector 0
    has mark_as_thing
    with IK2_Count 153
    with IK2_Link I351_lion_head
    with KD_Count 2
    with name 'deer' 'head' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_984
    with initial BC_985
    with list_together BC_986
    with plural BC_987
    with article BC_988
;

Object -> I351_lion_head ""
    class K2_thing
    with short_name BC_989
    has concealed
    with vector 0
    has mark_as_thing
    with IK2_Count 154
    with IK2_Link I352_poster
    with KD_Count 2
    with name 'lion' 'head' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_990
    with initial BC_991
    with list_together BC_992
    with plural BC_993
    with article BC_994
;

Object -> I352_poster ""
    class K2_thing
    with short_name BC_995
    with description BC_996
    with vector 0
    has mark_as_thing
    with IK2_Count 155
    with IK2_Link I310_hole
    with KD_Count 2
    with name 'poster' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_997
    with list_together BC_998
    with plural BC_999
    with article BC_1000
;

Object I274_space_center ""
    class K1_room
    with short_name BC_1001
    with description BC_1002
    with map_region I269_house
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 14
    with IK1_Link I275_abandoned_warehouse
    with KD_Count 1
    with name 'space' 'center' 'rooms//p' 
    with list_together BC_1003
    with plural BC_1004
    with article BC_1005
;

Object I275_abandoned_warehouse ""
    class K1_room
    with short_name BC_1006
    with description BC_1007
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 15
    with IK1_Link I276_spooky_lair
    with KD_Count 1
    with name 'abandoned' 'warehouse' 'rooms//p' 
    with list_together BC_1008
    with plural BC_1009
    with article BC_1010
;

Object -> I310_hole ""
    class K2_thing
    with short_name BC_1011
    with description BC_1012
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 129
    with IK2_Link I277_side_door
    with KD_Count 2
    with name 'hole' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1013
    with list_together BC_1014
    with plural BC_1015
    with article BC_1016
;

Object I276_spooky_lair ""
    class K1_room
    with short_name BC_1017
    with map_region I269_house
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 16
    with IK1_Link I278_the_garden
    with KD_Count 1
    with name 'spooky' 'lair' 'rooms//p' 
    with description BC_1018
    with list_together BC_1019
    with plural BC_1020
    with article BC_1021
;

Object I277_side_door ""
    class K4_door
    with short_name BC_1022
    with article BC_1023
    has scenery
    has ~open
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I197_bedroom) return I58_west; return I57_east;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I197_bedroom) return I278_the_garden; return I197_bedroom;],
    with found_in I197_bedroom I278_the_garden
    has mark_as_thing
    with IK2_Count 108
    with IK2_Link I279_spigot
    with IK4_Count 4
    with IK4_Link I348_hunting_lodge_entrance
    with KD_Count 4
    with name 'side' 'door' 'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1024
    with initial BC_1025
    with list_together BC_1026
    with plural BC_1027
;

Object I278_the_garden ""
    class K1_room
    with short_name BC_1028
    with description BC_1029
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 17
    with IK1_Link I286_outskirts_of_town
    with KD_Count 1
    with name 'the' 'garden' 'rooms//p' 
    with list_together BC_1030
    with plural BC_1031
    with article BC_1032
;

Object -> I279_spigot ""
    class K2_thing
    with short_name BC_1033
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 109
    with IK2_Link I280_flowers
    with KD_Count 2
    with name 'spigot' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1034
    with initial BC_1035
    with list_together BC_1036
    with plural BC_1037
    with article BC_1038
;

Object -> I280_flowers ""
    class K2_thing
    with short_name BC_1039
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 110
    with IK2_Link I281_squash
    with KD_Count 2
    with name 'flowers' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1040
    with initial BC_1041
    with list_together BC_1042
    with plural BC_1043
    with article BC_1044
;

Object -> I281_squash ""
    class K2_thing
    with short_name BC_1045
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 111
    with IK2_Link I282_shed
    with KD_Count 2
    with name 'squash' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1046
    with initial BC_1047
    with list_together BC_1048
    with plural BC_1049
    with article BC_1050
;

Object -> I282_shed ""
    class K5_container
    with short_name BC_1051
    with article BC_1052
    with description BC_1053
    with with_key I202_muddy_brown_key
    has static
    has ~open
    has openable
    has lockable
    has locked
    with vector 0
    has mark_as_thing
    with component_child I283_roof_of_the_shed
    with IK2_Count 112
    with IK2_Link I285_cage
    with IK5_Count 16
    with IK5_Link I285_cage
    with KD_Count 5
    with name 'shed' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1054
    with list_together BC_1055
    with plural BC_1056
;

Object -> -> I285_cage ""
    class K5_container
    with short_name BC_1057
    with description BC_1058
    with with_key I268_small_metal_key
    has transparent
    has open
    has openable
    has lockable
    with vector 0
    has mark_as_thing
    with IK2_Count 115
    with IK2_Link I283_roof_of_the_shed
    with IK5_Count 18
    with IK5_Link I284_bucket
    with KD_Count 5
    with name 'cage' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1059
    with list_together BC_1060
    with plural BC_1061
    with article BC_1062
;

Object I283_roof_of_the_shed ""
    class K6_supporter
    with short_name BC_1063
    with vector 0
    has mark_as_thing
    with component_parent I282_shed
    with IK2_Count 113
    with IK2_Link I284_bucket
    with IK6_Count 3
    with IK6_Link I306_edge_of_the_platform
    with KD_Count 6
    with name 'roof' 'of' 'the' 'shed' 'supporters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1064
    with initial BC_1065
    with list_together BC_1066
    with plural BC_1067
    with article BC_1068
;

Object -> I284_bucket ""
    class K5_container
    with short_name BC_1069
    has open
    has ~openable
    with p81_hidden true
    with vector 0
    has mark_as_thing
    with IK2_Count 114
    with IK2_Link I288_spaceship
    with IK5_Count 17
    with IK5_Link I288_spaceship
    with KD_Count 5
    with name 'bucket' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1070
    with initial BC_1071
    with list_together BC_1072
    with plural BC_1073
    with article BC_1074
;

Object I286_outskirts_of_town ""
    class K1_room
    with short_name BC_1075
    with description BC_1076
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 18
    with IK1_Link I287_launch_pad
    with KD_Count 1
    with name 'outskirts' 'of' 'town' 'rooms//p' 
    with list_together BC_1077
    with plural BC_1078
    with article BC_1079
;

Object I287_launch_pad ""
    class K1_room
    with short_name BC_1080
    with description BC_1081
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 19
    with IK1_Link I294_air
    with KD_Count 1
    with name 'launch' 'pad' 'rooms//p' 
    with list_together BC_1082
    with plural BC_1083
    with article BC_1084
;

Object -> I288_spaceship ""
    class K5_container
    with short_name BC_1085
    with description BC_1086
    has static
    has enterable
    has ~open
    has openable
    with p82_low_on_fuel true
    with p84_broken false
    with p86_out_of_control false
    with vector 0
    has mark_as_thing
    with IK2_Count 116
    with IK2_Link I289_on_button
    with IK5_Count 19
    with IK5_Link I302_blue_car
    with KD_Count 5
    with name 'spaceship' 'containers//p' 'ship' 'door' 
    with parse_name Parse_Name_GV158
    with action_bitmap 0 0 0 0 0 0 0 
    has ~p78_on
    with p83_waiting_for_confirmation false
    with initial BC_1087
    with list_together BC_1088
    with plural BC_1089
    with article BC_1090
;

Object -> -> I289_on_button ""
    class K2_thing
    with short_name BC_1091
    with description BC_1092
    with p18_finnickiness 18
    has light
    has static
    with vector 0
    has mark_as_thing
    with IK2_Count 117
    with IK2_Link I290_launch_button
    with KD_Count 2
    with name 'on' 'button' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1093
    with list_together BC_1094
    with plural BC_1095
    with article BC_1096
;

Object -> -> I290_launch_button ""
    class K2_thing
    with short_name BC_1097
    with description BC_1098
    has static
    with vector 0
    has mark_as_thing
    with IK2_Count 118
    with IK2_Link I291_computer
    with KD_Count 2
    with name 'launch' 'button' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1099
    with list_together BC_1100
    with plural BC_1101
    with article BC_1102
;

Object -> -> I291_computer ""
    class K8_person
    with short_name BC_1103
    has static
    has concealed
    with p85_disabled false
    with vector 0
    has mark_as_thing
    with IK2_Count 119
    with IK2_Link I292_spacesuit
    with IK8_Count 1
    with IK8_Link I315_snake
    with KD_Count 8
    with name 'computer' 'people//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1104
    with initial BC_1105
    with list_together BC_1106
    with plural BC_1107
    with article BC_1108
;

Object -> -> I292_spacesuit ""
    class K2_thing
    with short_name BC_1109
    has clothing
    with vector 0
    has mark_as_thing
    with IK2_Count 120
    with IK2_Link I293_helmet
    with KD_Count 2
    with name 'spacesuit' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1110
    with initial BC_1111
    with list_together BC_1112
    with plural BC_1113
    with article BC_1114
;

Object -> -> I293_helmet ""
    class K2_thing
    with short_name BC_1115
    has clothing
    with vector 0
    has mark_as_thing
    with IK2_Count 121
    with IK2_Link I300_fork
    with KD_Count 2
    with name 'helmet' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1116
    with initial BC_1117
    with list_together BC_1118
    with plural BC_1119
    with article BC_1120
;

Object I294_air ""
    class K1_room
    with short_name BC_1121
    with map_region I296_floating
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 20
    with IK1_Link I295_outer_space
    with KD_Count 1
    with name 'air' 'rooms//p' 
    with description BC_1122
    with list_together BC_1123
    with plural BC_1124
    with article BC_1125
;

Object I295_outer_space ""
    class K1_room
    with short_name BC_1126
    with map_region I296_floating
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 21
    with IK1_Link I297_ruins_of_the_tunnel_of_
    with KD_Count 1
    with name 'outer' 'space' 'rooms//p' 
    with description BC_1127
    with list_together BC_1128
    with plural BC_1129
    with article BC_1130
;

Object I296_floating ""
    class K9_region
    with short_name BC_1131
    has proper
    with vector 0
    with cap_short_name BC_1132
    with regional_found_in [ ;
        if (TestRegionalContainment(location, I296_floating)) rtrue; rfalse;],
    with IK9_Count 1
    with IK9_Link nothing
    with KD_Count 9
    with name 'floating' 'regions//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with list_together BC_1133
    with plural BC_1134
    with article BC_1135
;

Object I297_ruins_of_the_tunnel_of_ ""
    class K1_room
    with short_name BC_1136
    with article BC_1137
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 22
    with IK1_Link I298_road
    with KD_Count 1
    with name 'ruins' 'of' 'the' 'tunnel' 'of' 'extraction' 'rooms//p' 
    with description BC_1138
    with list_together BC_1139
    with plural BC_1140
;

Object I298_road ""
    class K1_room
    with short_name BC_1141
    with description BC_1142
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 23
    with IK1_Link I299_further_along_the_road
    with KD_Count 1
    with name 'road' 'rooms//p' 
    with list_together BC_1143
    with plural BC_1144
    with article BC_1145
;

Object I299_further_along_the_road ""
    class K1_room
    with short_name BC_1146
    with description BC_1147
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 24
    with IK1_Link I301_parking_lot
    with KD_Count 1
    with name 'further' 'along' 'the' 'road' 'rooms//p' 
    with list_together BC_1148
    with plural BC_1149
    with article BC_1150
;

Object -> I300_fork ""
    class K2_thing
    with short_name BC_1151
    with description BC_1152
    has concealed
    with p87_stuck true
    with vector 0
    has mark_as_thing
    with IK2_Count 122
    with IK2_Link I302_blue_car
    with KD_Count 2
    with name 'fork' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1153
    with list_together BC_1154
    with plural BC_1155
    with article BC_1156
;

Object I301_parking_lot ""
    class K1_room
    with short_name BC_1157
    with description BC_1158
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 25
    with IK1_Link I303_abandoned_train_station
    with KD_Count 1
    with name 'parking' 'lot' 'rooms//p' 
    with list_together BC_1159
    with plural BC_1160
    with article BC_1161
;

Object -> I302_blue_car ""
    class K14_vehicle
    with short_name BC_1162
    with description BC_1163
    has transparent
    has ~open
    has openable
    with p89_ready false
    with vector 0
    has mark_as_thing
    with IK2_Count 123
    with IK2_Link I304_map
    with IK5_Count 20
    with IK5_Link I318_ancient_cabinet
    with IK14_Count 0
    with IK14_Link nothing
    with KD_Count 14
    with name 'blue' 'car' 'vehicles//p' 
    with parse_name Parse_Name_GV159
    with action_bitmap 0 0 0 0 0 0 0 
    with p88_started false
    with initial BC_1164
    with list_together BC_1165
    with plural BC_1166
    with article BC_1167
;

Object I303_abandoned_train_station ""
    class K1_room
    with short_name BC_1168
    with description BC_1169
    with p89_ready false
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 26
    with IK1_Link I309_town_square
    with KD_Count 1
    with name 'abandoned' 'train' 'station' 'rooms//p' 
    with list_together BC_1170
    with plural BC_1171
    with article BC_1172
;

Object -> I304_map ""
    class K2_thing
    with short_name BC_1173
    with description BC_1174
    with p90_examined false
    with vector 0
    has mark_as_thing
    with IK2_Count 124
    with IK2_Link I305_tracks
    with KD_Count 2
    with name 'map' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1175
    with list_together BC_1176
    with plural BC_1177
    with article BC_1178
;

Object -> I305_tracks ""
    class K2_thing
    with short_name BC_1179
    with description BC_1180
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 125
    with IK2_Link I306_edge_of_the_platform
    with KD_Count 2
    with name 'tracks' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1181
    with list_together BC_1182
    with plural BC_1183
    with article BC_1184
;

Object -> I306_edge_of_the_platform ""
    class K6_supporter
    with short_name BC_1185
    has concealed
    has enterable
    with vector 0
    has mark_as_thing
    with IK2_Count 126
    with IK2_Link I312_table
    with IK6_Count 4
    with IK6_Link I312_table
    with KD_Count 6
    with name 'edge' 'of' 'the' 'platform' 'supporters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1186
    with initial BC_1187
    with list_together BC_1188
    with plural BC_1189
    with article BC_1190
;

Object I309_town_square ""
    class K1_room
    with short_name BC_1191
    with description BC_1192
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 27
    with IK1_Link I311_a_spooky_lair
    with KD_Count 1
    with name 'town' 'square' 'rooms//p' 
    with list_together BC_1193
    with plural BC_1194
    with article BC_1195
;

Object I311_a_spooky_lair ""
    class K1_room
    with short_name BC_1196
    with description BC_1197
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 28
    with IK1_Link I325_by_the_stream
    with KD_Count 1
    with name 'a//' 'spooky' 'lair' 'rooms//p' 
    with list_together BC_1198
    with plural BC_1199
    with article BC_1200
;

Object -> I312_table ""
    class K6_supporter
    with short_name BC_1201
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 130
    with IK2_Link I313_candle
    with IK6_Count 5
    with IK6_Link nothing
    with KD_Count 6
    with name 'table' 'supporters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1202
    with initial BC_1203
    with list_together BC_1204
    with plural BC_1205
    with article BC_1206
;

Object -> -> I313_candle ""
    class K2_thing
    with short_name BC_1207
    with description BC_1208
    has light
    with p93_urge_passed false
    with vector 0
    has mark_as_thing
    with IK2_Count 131
    with IK2_Link I314_sacrificial_knife
    with KD_Count 2
    with name 'candle' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1209
    with list_together BC_1210
    with plural BC_1211
    with article BC_1212
;

Object -> -> I314_sacrificial_knife ""
    class K2_thing
    with short_name BC_1213
    with description BC_1214
    with vector 0
    has mark_as_thing
    with IK2_Count 132
    with IK2_Link I315_snake
    with KD_Count 2
    with name 'sacrificial' 'knife' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1215
    with list_together BC_1216
    with plural BC_1217
    with article BC_1218
;

Object -> I315_snake ""
    class K12_animal
    with short_name BC_1219
    with description BC_1220
    with vector 0
    has mark_as_thing
    with IK2_Count 133
    with IK2_Link I318_ancient_cabinet
    with IK8_Count 2
    with IK8_Link X322
    with IK12_Count 0
    with IK12_Link X322
    with KD_Count 12
    with name 'snake' 'animals//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1221
    with list_together BC_1222
    with plural BC_1223
    with article BC_1224
;

Object -> I318_ancient_cabinet ""
    class K5_container
    with short_name BC_1225
    with description BC_1226
    has static
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 134
    with IK2_Link X319
    with IK5_Count 21
    with IK5_Link X319
    with KD_Count 5
    with name 'ancient' 'cabinet' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1227
    with list_together BC_1228
    with plural BC_1229
    with article BC_1230
;

Object -> -> X319 ""
    class K22_canister
    with short_name BC_1231
    with vector 0
    has mark_as_thing
    with IK2_Count 135
    with IK2_Link X322
    with IK5_Count 22
    with IK5_Link X320
    with IK22_Count 0
    with IK22_Link X320
    with KD_Count 22
    with name 'canister' 'canisters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1232
    with initial BC_1233
    with list_together BC_1234
    with plural BC_1235
    with article BC_1236
;

Object -> -> -> X322 ""
    class K21_mouse
    with short_name BC_1237
    with vector 0
    has mark_as_thing
    with IK2_Count 138
    with IK2_Link X320
    with IK8_Count 3
    with IK8_Link X323
    with IK12_Count 1
    with IK12_Link X323
    with IK21_Count 0
    with IK21_Link X323
    with KD_Count 21
    with name 'mouse' 'mice//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1238
    with initial BC_1239
    with list_together BC_1240
    with plural BC_1241
    with article BC_1242
;

Object -> -> X320 ""
    class K22_canister
    with short_name BC_1243
    with vector 0
    has mark_as_thing
    with IK2_Count 136
    with IK2_Link X323
    with IK5_Count 23
    with IK5_Link X321
    with IK22_Count 1
    with IK22_Link X321
    with KD_Count 22
    with name 'canister' 'canisters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1244
    with initial BC_1245
    with list_together BC_1246
    with plural BC_1247
    with article BC_1248
;

Object -> -> -> X323 ""
    class K21_mouse
    with short_name BC_1249
    with vector 0
    has mark_as_thing
    with IK2_Count 139
    with IK2_Link X321
    with IK8_Count 4
    with IK8_Link X324
    with IK12_Count 2
    with IK12_Link X324
    with IK21_Count 1
    with IK21_Link X324
    with KD_Count 21
    with name 'mouse' 'mice//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1250
    with initial BC_1251
    with list_together BC_1252
    with plural BC_1253
    with article BC_1254
;

Object -> -> X321 ""
    class K22_canister
    with short_name BC_1255
    with vector 0
    has mark_as_thing
    with IK2_Count 137
    with IK2_Link X324
    with IK5_Count 24
    with IK5_Link I364_time_machine
    with IK22_Count 2
    with IK22_Link nothing
    with KD_Count 22
    with name 'canister' 'canisters//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1256
    with initial BC_1257
    with list_together BC_1258
    with plural BC_1259
    with article BC_1260
;

Object -> -> -> X324 ""
    class K21_mouse
    with short_name BC_1261
    with vector 0
    has mark_as_thing
    with IK2_Count 140
    with IK2_Link I326_warning_sign
    with IK8_Count 5
    with IK8_Link I353_grizzly_bear
    with IK12_Count 3
    with IK12_Link I353_grizzly_bear
    with IK21_Count 2
    with IK21_Link nothing
    with KD_Count 21
    with name 'mouse' 'mice//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1262
    with initial BC_1263
    with list_together BC_1264
    with plural BC_1265
    with article BC_1266
;

Object I325_by_the_stream ""
    class K1_room
    with short_name BC_1267
    with description BC_1268
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 29
    with IK1_Link I330_clearing
    with KD_Count 1
    with name 'by' 'the' 'stream' 'rooms//p' 
    with list_together BC_1269
    with plural BC_1270
    with article BC_1271
;

Object -> I326_warning_sign ""
    class K2_thing
    with short_name BC_1272
    with description BC_1273
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 141
    with IK2_Link I327_stream
    with KD_Count 2
    with name 'warning' 'sign' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1274
    with list_together BC_1275
    with plural BC_1276
    with article BC_1277
;

Object -> I327_stream ""
    class K2_thing
    with short_name BC_1278
    with article BC_1279
    with description BC_1280
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 142
    with IK2_Link I328_swimming_piranhas
    with KD_Count 2
    with name 'stream' 'things//p' 'water' 
    with parse_name Parse_Name_GV167
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1281
    with list_together BC_1282
    with plural BC_1283
;

Object I328_swimming_piranhas ""
    class K2_thing
    with short_name BC_1284
    has concealed
    with vector 0
    has mark_as_thing
    with IK2_Count 143
    with IK2_Link I329_bucketful_of_piranha_in
    with KD_Count 2
    with name 'swimming' 'piranhas' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1285
    with initial BC_1286
    with list_together BC_1287
    with plural BC_1288
    with article BC_1289
;

Object I329_bucketful_of_piranha_in ""
    class K16_liquid
    with short_name BC_1290
    with vector 0
    has mark_as_thing
    with IK2_Count 144
    with IK2_Link I334_ash_tree
    with IK16_Count 3
    with IK16_Link I370_pie_crumbs
    with KD_Count 16
    with name 'bucketful' 'of' 'piranha-infested' 'water' 'liquids//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1291
    with initial BC_1292
    with list_together BC_1293
    with plural BC_1294
    with article BC_1295
;

Object I330_clearing ""
    class K1_room
    with short_name BC_1296
    with description BC_1297
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 30
    with IK1_Link I331_edge_of_the_woods
    with KD_Count 1
    with name 'clearing' 'rooms//p' 
    with list_together BC_1298
    with plural BC_1299
    with article BC_1300
;

Object I331_edge_of_the_woods ""
    class K1_room
    with short_name BC_1301
    with description BC_1302
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 31
    with IK1_Link I332_woods
    with KD_Count 1
    with name 'edge' 'of' 'the' 'woods' 'rooms//p' 
    with list_together BC_1303
    with plural BC_1304
    with article BC_1305
;

Object I332_woods ""
    class K1_room
    with short_name BC_1306
    with article BC_1307
    with description BC_1308
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 32
    with IK1_Link I338_top_of_ash_tree
    with KD_Count 1
    with name 'woods' 'rooms//p' 
    with list_together BC_1309
    with plural BC_1310
;

Object I334_ash_tree ""
    class K23_tree
    with short_name BC_1311
    with p19_branches I341_lower_branches_of_ash_t
    with vector 0
    with found_in I332_woods I338_top_of_ash_tree I345_lower_part_of_ash_tree I346_upper_part_of_ash_tree 
    has mark_as_thing
    with IK2_Count 145
    with IK2_Link I335_elm_tree
    with IK7_Count 0
    with IK7_Link I335_elm_tree
    with IK23_Count 0
    with IK23_Link I335_elm_tree
    with KD_Count 23
    with name 'ash' 'tree' 'trees//p' 'branch' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1312
    with initial BC_1313
    with list_together BC_1314
    with plural BC_1315
    with article BC_1316
;

Object I335_elm_tree ""
    class K23_tree
    with short_name BC_1317
    with p19_branches I339_middle_branches_of_elm_
    with vector 0
    with found_in I332_woods I339_middle_branches_of_elm_ I344_top_of_elm_tree 
    has mark_as_thing
    with IK2_Count 146
    with IK2_Link I336_pine_tree
    with IK7_Count 1
    with IK7_Link I336_pine_tree
    with IK23_Count 1
    with IK23_Link I336_pine_tree
    with KD_Count 23
    with name 'elm' 'tree' 'trees//p' 'branch' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1318
    with initial BC_1319
    with list_together BC_1320
    with plural BC_1321
    with article BC_1322
;

Object I336_pine_tree ""
    class K23_tree
    with short_name BC_1323
    with p19_branches I340_top_of_pine_tree
    with vector 0
    with found_in I332_woods I340_top_of_pine_tree 
    has mark_as_thing
    with IK2_Count 147
    with IK2_Link I337_wasps__nest
    with IK7_Count 2
    with IK7_Link nothing
    with IK23_Count 2
    with IK23_Link nothing
    with KD_Count 23
    with name 'pine' 'tree' 'trees//p' 'branch' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1324
    with initial BC_1325
    with list_together BC_1326
    with plural BC_1327
    with article BC_1328
;

Object I338_top_of_ash_tree ""
    class K1_room
    with short_name BC_1329
    with description BC_1330
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 33
    with IK1_Link I339_middle_branches_of_elm_
    with KD_Count 1
    with name 'top' 'of' 'ash' 'tree' 'rooms//p' 
    with list_together BC_1331
    with plural BC_1332
    with article BC_1333
;

Object -> I337_wasps__nest ""
    class K2_thing
    with short_name BC_1334
    with description BC_1335
    with p94_found false
    with vector 0
    has mark_as_thing
    with IK2_Count 148
    with IK2_Link I345_lower_part_of_ash_tree
    with KD_Count 2
    with name 'wasps^' 'nest' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1336
    with list_together BC_1337
    with plural BC_1338
    with article BC_1339
;

Object I339_middle_branches_of_elm_ ""
    class K1_room
    with short_name BC_1340
    with description BC_1341
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 34
    with IK1_Link I340_top_of_pine_tree
    with KD_Count 1
    with name 'middle' 'branches' 'of' 'elm' 'tree' 'rooms//p' 
    with list_together BC_1342
    with plural BC_1343
    with article BC_1344
;

Object I340_top_of_pine_tree ""
    class K1_room
    with short_name BC_1345
    with description BC_1346
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 35
    with IK1_Link I341_lower_branches_of_ash_t
    with KD_Count 1
    with name 'top' 'of' 'pine' 'tree' 'rooms//p' 
    with list_together BC_1347
    with plural BC_1348
    with article BC_1349
;

Object I341_lower_branches_of_ash_t ""
    class K1_room
    with short_name BC_1350
    with description BC_1351
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 36
    with IK1_Link I342_middle_branches_of_ash_
    with KD_Count 1
    with name 'lower' 'branches' 'of' 'ash' 'tree' 'rooms//p' 
    with list_together BC_1352
    with plural BC_1353
    with article BC_1354
;

Object I342_middle_branches_of_ash_ ""
    class K1_room
    with short_name BC_1355
    with description BC_1356
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 37
    with IK1_Link I343_upper_branches_of_ash_t
    with KD_Count 1
    with name 'middle' 'branches' 'of' 'ash' 'tree' 'rooms//p' 
    with list_together BC_1357
    with plural BC_1358
    with article BC_1359
;

Object I343_upper_branches_of_ash_t ""
    class K1_room
    with short_name BC_1360
    with description BC_1361
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 38
    with IK1_Link I344_top_of_elm_tree
    with KD_Count 1
    with name 'upper' 'branches' 'of' 'ash' 'tree' 'rooms//p' 
    with list_together BC_1362
    with plural BC_1363
    with article BC_1364
;

Object I344_top_of_elm_tree ""
    class K1_room
    with short_name BC_1365
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 39
    with IK1_Link I347_hunting_grounds
    with KD_Count 1
    with name 'top' 'of' 'elm' 'tree' 'rooms//p' 
    with description BC_1366
    with list_together BC_1367
    with plural BC_1368
    with article BC_1369
;

Object I345_lower_part_of_ash_tree ""
    class K2_thing
    with short_name BC_1370
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 149
    with IK2_Link I346_upper_part_of_ash_tree
    with KD_Count 2
    with name 'lower' 'part' 'of' 'ash' 'tree' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1371
    with initial BC_1372
    with list_together BC_1373
    with plural BC_1374
    with article BC_1375
;

Object I346_upper_part_of_ash_tree ""
    class K2_thing
    with short_name BC_1376
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 150
    with IK2_Link I348_hunting_lodge_entrance
    with KD_Count 2
    with name 'upper' 'part' 'of' 'ash' 'tree' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1377
    with initial BC_1378
    with list_together BC_1379
    with plural BC_1380
    with article BC_1381
;

Object I347_hunting_grounds ""
    class K1_room
    with short_name BC_1382
    with description BC_1383
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 40
    with IK1_Link I363_mad_science_laboratory
    with KD_Count 1
    with name 'hunting' 'grounds' 'rooms//p' 
    with list_together BC_1384
    with plural BC_1385
    with article BC_1386
;

Object I348_hunting_lodge_entrance ""
    class K4_door
    with short_name BC_1387
    with article BC_1388
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I347_hunting_grounds) return I54_south; return I51_north;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I347_hunting_grounds) return I273_hunting_lodge; return I347_hunting_grounds;],
    with found_in I347_hunting_grounds I273_hunting_lodge
    has mark_as_thing
    with IK2_Count 151
    with IK2_Link I353_grizzly_bear
    with IK4_Count 5
    with IK4_Link I354_mad_scientist_s_grand_e
    with KD_Count 4
    with name 'hunting' 'lodge' 'entrance' 'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1389
    with initial BC_1390
    with list_together BC_1391
    with plural BC_1392
;

Object I353_grizzly_bear ""
    class K12_animal
    with short_name BC_1393
    has neuter
    with p96_asleep false
    with vector 0
    has mark_as_thing
    with IK2_Count 156
    with IK2_Link I354_mad_scientist_s_grand_e
    with IK8_Count 6
    with IK8_Link nothing
    with IK12_Count 4
    with IK12_Link nothing
    with KD_Count 12
    with name 'grizzly' 'bear' 'animals//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1394
    with initial BC_1395
    with list_together BC_1396
    with plural BC_1397
    with article BC_1398
;

Object I354_mad_scientist_s_grand_e ""
    class K4_door
    with short_name BC_1399
    with article BC_1400
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I309_town_square) return I54_south; return I51_north;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I309_town_square) return I270_mad_scientist_s_house; return I309_town_square;],
    with found_in I309_town_square I270_mad_scientist_s_house
    has mark_as_thing
    with IK2_Count 157
    with IK2_Link I359_ladder
    with IK4_Count 6
    with IK4_Link I359_ladder
    with KD_Count 4
    with name 'mad' 'scientist^s' 'grand' 'entrance' 'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1401
    with initial BC_1402
    with list_together BC_1403
    with plural BC_1404
;

Object I359_ladder ""
    class K4_door
    with short_name BC_1405
    has open
    has ~openable
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I270_mad_scientist_s_house) return I59_up; return I60_down;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I270_mad_scientist_s_house) return I363_mad_science_laboratory; return I270_mad_scientist_s_house;],
    with found_in I270_mad_scientist_s_house I363_mad_science_laboratory
    has mark_as_thing
    with IK2_Count 162
    with IK2_Link I364_time_machine
    with IK4_Count 7
    with IK4_Link I378_front_door
    with KD_Count 4
    with name 'ladder' 'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1406
    with initial BC_1407
    with list_together BC_1408
    with plural BC_1409
    with article BC_1410
;

Object I363_mad_science_laboratory ""
    class K1_room
    with short_name BC_1411
    with description BC_1412
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 41
    with IK1_Link I372_workshop
    with KD_Count 1
    with name 'mad' 'science' 'laboratory' 'rooms//p' 'lab' 
    with parse_name Parse_Name_GV172
    with list_together BC_1413
    with plural BC_1414
    with article BC_1415
;

Object -> I364_time_machine ""
    class K5_container
    with short_name BC_1416
    with description BC_1417
    has static
    has enterable
    with vector 0
    has mark_as_thing
    with IK2_Count 166
    with IK2_Link I365_red_button
    with IK5_Count 26
    with IK5_Link I366_coin_slot
    with KD_Count 5
    with name 'time' 'machine' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with p20_use_count 0
    with initial BC_1418
    with list_together BC_1419
    with plural BC_1420
    with article BC_1421
;

Object -> -> I365_red_button ""
    class K2_thing
    with short_name BC_1422
    with description BC_1423
    has static
    with vector 0
    has mark_as_thing
    with IK2_Count 167
    with IK2_Link I366_coin_slot
    with KD_Count 2
    with name 'red' 'button' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1424
    with list_together BC_1425
    with plural BC_1426
    with article BC_1427
;

Object -> -> I366_coin_slot ""
    class K5_container
    with short_name BC_1428
    with description BC_1429
    has static
    has ~open
    has ~openable
    with p100_available true
    with vector 0
    has mark_as_thing
    with IK2_Count 168
    with IK2_Link I367_time_safe
    with IK5_Count 27
    with IK5_Link I367_time_safe
    with KD_Count 5
    with name 'coin' 'slot' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with p21_credits 0
    with initial BC_1430
    with list_together BC_1431
    with plural BC_1432
    with article BC_1433
;

Object -> I367_time_safe ""
    class K5_container
    with short_name BC_1434
    with description BC_1435
    has static
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 169
    with IK2_Link I368_middle_safe
    with IK5_Count 28
    with IK5_Link I368_middle_safe
    with KD_Count 5
    with name 'time' 'safe' 'containers//p' 
    with parse_name Parse_Name_GV174
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1436
    with list_together BC_1437
    with plural BC_1438
    with article BC_1439
;

Object -> -> I368_middle_safe ""
    class K5_container
    with short_name BC_1440
    with description BC_1441
    has static
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 170
    with IK2_Link I369_inner_safe
    with IK5_Count 29
    with IK5_Link I369_inner_safe
    with KD_Count 5
    with name 'middle' 'safe' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1442
    with list_together BC_1443
    with plural BC_1444
    with article BC_1445
;

Object -> -> -> I369_inner_safe ""
    class K5_container
    with short_name BC_1446
    with description BC_1447
    with capacity 1
    has static
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 171
    with IK2_Link I370_pie_crumbs
    with IK5_Count 30
    with IK5_Link I376_garage
    with KD_Count 5
    with name 'inner' 'safe' 'containers//p' 
    with parse_name Parse_Name_GV173
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1448
    with list_together BC_1449
    with plural BC_1450
    with article BC_1451
;

Object I370_pie_crumbs ""
    class K16_liquid
    with short_name BC_1452
    with description BC_1453
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 172
    with IK2_Link I371_red_herring
    with IK16_Count 4
    with IK16_Link nothing
    with KD_Count 16
    with name 'pie' 'crumbs' 'liquids//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1454
    with list_together BC_1455
    with plural BC_1456
    with article BC_1457
;

Object I371_red_herring ""
    class K2_thing
    with short_name BC_1458
    with description BC_1459
    with vector 0
    has mark_as_thing
    with IK2_Count 173
    with IK2_Link I373_wire
    with KD_Count 2
    with name 'red' 'herring' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1460
    with list_together BC_1461
    with plural BC_1462
    with article BC_1463
;

Object I372_workshop ""
    class K1_room
    with short_name BC_1464
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 42
    with IK1_Link I374_eastern_parking_lot
    with KD_Count 1
    with name 'workshop' 'rooms//p' 
    with description BC_1465
    with list_together BC_1466
    with plural BC_1467
    with article BC_1468
;

Object -> I373_wire ""
    class K2_thing
    with short_name BC_1469
    with description BC_1470
    with vector 0
    has mark_as_thing
    with IK2_Count 174
    with IK2_Link I376_garage
    with KD_Count 2
    with name 'wire' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1471
    with list_together BC_1472
    with plural BC_1473
    with article BC_1474
;

Object I374_eastern_parking_lot ""
    class K1_room
    with short_name BC_1475
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 43
    with IK1_Link nothing
    with KD_Count 1
    with name 'eastern' 'parking' 'lot' 'rooms//p' 
    with description BC_1476
    with list_together BC_1477
    with plural BC_1478
    with article BC_1479
;

Object I376_garage ""
    class K5_container
    with short_name BC_1480
    with vector 0
    has mark_as_thing
    with IK2_Count 176
    with IK2_Link I375_black_car
    with IK5_Count 31
    with IK5_Link I377_clothes_dryer
    with KD_Count 5
    with name 'garage' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1481
    with initial BC_1482
    with list_together BC_1483
    with plural BC_1484
    with article BC_1485
;

Object -> I375_black_car ""
    class K2_thing
    with short_name BC_1486
    with vector 0
    has mark_as_thing
    with IK2_Count 175
    with IK2_Link I377_clothes_dryer
    with KD_Count 2
    with name 'black' 'car' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1487
    with initial BC_1488
    with list_together BC_1489
    with plural BC_1490
    with article BC_1491
;

Object I377_clothes_dryer ""
    class K5_container
    with short_name BC_1492
    with vector 0
    has mark_as_thing
    with IK2_Count 177
    with IK2_Link I378_front_door
    with IK5_Count 32
    with IK5_Link nothing
    with KD_Count 5
    with name 'clothes' 'dryer' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with description BC_1493
    with initial BC_1494
    with list_together BC_1495
    with plural BC_1496
    with article BC_1497
;

Object I378_front_door ""
    class K4_door
    with short_name BC_1498
    with description BC_1499
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I372_workshop) return I57_east; return I58_west;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I372_workshop) return I374_eastern_parking_lot; return I372_workshop;],
    with found_in I372_workshop I374_eastern_parking_lot
    has mark_as_thing
    with IK2_Count 178
    with IK2_Link nothing
    with IK4_Count 8
    with IK4_Link nothing
    with KD_Count 4
    with name 'front' 'door' 'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 
    with initial BC_1500
    with list_together BC_1501
    with plural BC_1502
    with article BC_1503
;

Constant I71_german_language = 1;
Constant I72_italian_language = 2;
Constant I73_english_language = 3;
Constant I74_french_language = 4;
Constant I75_swedish_language = 5;
Constant I76_spanish_language = 6;
Constant I77_figure_of_cover = 1;
Constant I78_entire_game = 1;
Constant I80_didn_t_understand_error = 1;
Constant I81_only_understood_as_far_a = 2;
Constant I82_didn_t_understand_that_n = 3;
Constant I83_can_only_do_that_to_some = 4;
Constant I84_can_t_see_any_such_thing = 5;
Constant I85_said_too_little_error = 6;
Constant I86_aren_t_holding_that_erro = 7;
Constant I87_can_t_use_multiple_objec = 8;
Constant I88_can_only_use_multiple_ob = 9;
Constant I89_not_sure_what_it_refers_ = 10;
Constant I90_excepted_something_not_i = 11;
Constant I91_not_a_verb_i_recognise_e = 12;
Constant I92_not_something_you_need_t = 13;
Constant I93_can_t_see_it_at_the_mome = 14;
Constant I94_didn_t_understand_the_wa = 15;
Constant I95_not_enough_of_those_avai = 16;
Constant I96_nothing_to_do_error = 17;
Constant I97_noun_did_not_make_sense_ = 18;
Constant I98_referred_to_a_determinat = 19;
Constant I99_i_beg_your_pardon_error = 20;
Constant I100_can_t_again_the_address = 21;
Constant I101_comma_can_t_begin_error = 22;
Constant I102_can_t_see_whom_to_talk_ = 23;
Constant I103_can_t_talk_to_inanimate = 24;
Constant I104_didn_t_understand_addre = 25;
Constant I106_present_tense = 1;
Constant I107_past_tense = 2;
Constant I108_perfect_tense = 3;
Constant I109_past_perfect_tense = 4;
Constant I110_future_tense = 5;
Constant I112_first_person_singular = 1;
Constant I113_second_person_singular = 2;
Constant I114_third_person_singular = 3;
Constant I115_first_person_plural = 4;
Constant I116_second_person_plural = 5;
Constant I117_third_person_plural = 6;
Constant I119_nominative = 1;
Constant I120_accusative = 2;
Constant I122_neuter_gender = 1;
Constant I123_masculine_gender = 2;
Constant I124_feminine_gender = 3;
Constant I126_all_styles = 1;
Constant I127_normal_style = 2;
Constant I128_italic_style = 3;
Constant I129_fixed_letter_spacing_st = 4;
Constant I130_header_style = 5;
Constant I131_bold_style = 6;
Constant I132_alert_style = 7;
Constant I133_note_style = 8;
Constant I134_blockquote_style = 9;
Constant I135_input_style = 10;
Constant I136_special_style_1 = 11;
Constant I137_special_style_2 = 12;
Constant I139_left_justified = 1;
Constant I140_left_right_justified = 2;
Constant I141_center_justified = 3;
Constant I142_right_justified = 4;
Constant I144_light_weight = 1;
Constant I145_regular_weight = 2;
Constant I146_bold_weight = 3;
Array Global_Vars -->
  (false) ! 7 darkness witnessed
  (BC_1504) ! 25 command prompt
  (I73_english_language) ! 29 language of play
  (BC_1505) ! 32 story author
  (BC_1506) ! 33 story headline
  (BC_1507) ! 34 story genre
  (BC_1508) ! 35 story description
  (8) ! 36 release number
  (2019) ! 37 story creation year
  (0) ! 45 locale paragraph count
  (0) ! 60 toaster's slice count
  (0) ! 61 water level
  (0) ! 62 tunnel's count
  (5) ! 63 poster weeks
  (0) ! 64 time machine's use count
  (0) ! 65 coin slot's credits
;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====



Array T0_final_question_options table  tab_0_0 tab_0_1 tab_0_2 tab_0_3 tab_0_4;
Array tab_0_0 table $0664 0 (BC_1509) (BC_1510) (BC_1511) (BC_1512) (BC_1513) ;
Array tab_0_1 table $0465 1 (0) (0) (1) (0) (0) ;
Array tab_0_2 table $2066 2 (Consult_Grammar_178) (Consult_Grammar_179) (Consult_Grammar_180) (Consult_Grammar_181) (Consult_Grammar_182) ;
Array tab_0_3 table $0067 3 (IMMEDIATELY_RESTART_VM_R) (IMMEDIATELY_RESTORE_SAVED_R) ( TABLE_NOVALUE) (IMMEDIATELY_QUIT_R) (IMMEDIATELY_UNDO_R) ;
Array tab_0_4 table $0068 4 ( TABLE_NOVALUE) ( TABLE_NOVALUE) (V27_amusing_a_victorious_pla) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T1_locale_priorities table  tab_1_0 tab_1_1;
Array tab_1_0 table
Array tab_1_1 table $446a
Array T2_user_styles table  tab_2_0 tab_2_1 tab_2_2 tab_2_3 tab_2_4 tab_2_5 tab_2_6 tab_2_7 tab_2_8 tab_2_9 tab_2_10;
Array tab_2_0 table $4c6b NULL (I136_special_style_1)  TABLE_NOVALUE;
Array tab_2_1 table $066c 28 ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_2_2 table $066d 29 (BC_1514)  TABLE_NOVALUE;
Array tab_2_3 table $446e 30 ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_2_4 table $046f 31 ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_2_5 table $4c70 NULL ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_2_6 table $4471 32 ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_2_7 table $0472 33 ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_2_8 table $4c73 NULL ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_2_9 table $4474 34 ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_2_10 table $0475 35 ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array TB_Blanks -> 
  ! For table T0_final_question_options
  $00  ! Column 0
  $00  ! Column 1
  $00  ! Column 2
  $04  ! Column 3
  $1b  ! Column 4
  
  ! For table T1_locale_priorities
  $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $0f  ! Column 1
  
  ! For table T2_user_styles
  $03  ! Column 1
  $02  ! Column 2
  $03  ! Column 3
  $03  ! Column 4
  $03  ! Column 6
  $03  ! Column 7
  $03  ! Column 9
  $03  ! Column 10
  
  ! End of table
  NULL NULL;
Array TableOfTables --> TheEmptyTable T0_final_question_options  T1_locale_priorities  T2_user_styles  0 0;
[ TC_KOV 
    tc ! Implied call parameter
    ;
    switch (tc) {
        100: return TEXT_TY; ! final question wording: text
        101: return TRUTH_STATE_TY; ! only if victorious: truth state
        102: return UNDERSTANDING_TY; ! topic: topic
        103: return KD0_rule; ! final response rule: rule
        104: return KD1_activity; ! final response activity: activity
        105: return OBJECT_TY; ! notable-object: object
        106: return NUMBER_TY; ! locale description priority: number
        107: return 53; ! style name: glulx text style
        108: return TEXT_TY; ! background color: text
        109: return TEXT_TY; ! color: text
        110: return NUMBER_TY; ! first line indentation: number
        111: return TRUTH_STATE_TY; ! fixed width: truth state
        112: return 55; ! font weight: font weight
        113: return NUMBER_TY; ! indentation: number
        114: return TRUTH_STATE_TY; ! italic: truth state
        115: return 54; ! justification: text justification
        116: return NUMBER_TY; ! relative size: number
        117: return TRUTH_STATE_TY; ! reversed: truth state
    }
    return UNKNOWN_TY;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Equations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====





! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Actions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====




Array ActionData table
  ##Inv  $$00000000  OBJECT_TY OBJECT_TY  0 20000
  ##Take  $$00001001  OBJECT_TY OBJECT_TY  0 20001
  ##Remove  $$00011011  OBJECT_TY OBJECT_TY  0 20002
  ##Drop  $$00001001  OBJECT_TY OBJECT_TY  0 20003
  ##PutOn  $$00011011  OBJECT_TY OBJECT_TY  0 20004
  ##Insert  $$00011011  OBJECT_TY OBJECT_TY  0 20005
  ##Eat  $$00001001  OBJECT_TY OBJECT_TY  0 20006
  ##Go  $$00001000  OBJECT_TY OBJECT_TY  ANSTVC_7 20007
  ##Enter  $$00001001  OBJECT_TY OBJECT_TY  0 20008
  ##Exit  $$00000000  OBJECT_TY OBJECT_TY  ANSTVC_9 20009
  ##GetOff  $$00001001  OBJECT_TY OBJECT_TY  0 20010
  ##Look  $$00000000  OBJECT_TY OBJECT_TY  ANSTVC_11 20011
  ##Examine  $$00001100  OBJECT_TY OBJECT_TY  ANSTVC_12 20012
  ##LookUnder  $$00001100  OBJECT_TY OBJECT_TY  0 20013
  ##Search  $$00001101  OBJECT_TY OBJECT_TY  0 20014
  ##Consult  $$00011001  OBJECT_TY UNDERSTANDING_TY  0 20015
  ##Lock  $$10011011  OBJECT_TY OBJECT_TY  0 20016
  ##Unlock  $$10011011  OBJECT_TY OBJECT_TY  0 20017
  ##SwitchOn  $$00001001  OBJECT_TY OBJECT_TY  0 20018
  ##SwitchOff  $$00001001  OBJECT_TY OBJECT_TY  0 20019
  ##Open  $$00001001  OBJECT_TY OBJECT_TY  0 20020
  ##Close  $$00001001  OBJECT_TY OBJECT_TY  0 20021
  ##Wear  $$01001001  OBJECT_TY OBJECT_TY  0 20022
  ##Disrobe  $$00001001  OBJECT_TY OBJECT_TY  0 20023
  ##Give  $$01011011  OBJECT_TY OBJECT_TY  0 20024
  ##Show  $$01011001  OBJECT_TY OBJECT_TY  0 20025
  ##WakeOther  $$00001001  OBJECT_TY OBJECT_TY  0 20026
  ##ThrowAt  $$01011001  OBJECT_TY OBJECT_TY  0 20027
  ##Attack  $$00001001  OBJECT_TY OBJECT_TY  0 20028
  ##Kiss  $$00001001  OBJECT_TY OBJECT_TY  0 20029
  ##Answer  $$00011001  OBJECT_TY UNDERSTANDING_TY  0 20030
  ##Tell  $$00011001  OBJECT_TY UNDERSTANDING_TY  0 20031
  ##Ask  $$00011001  OBJECT_TY UNDERSTANDING_TY  0 20032
  ##AskFor  $$00011011  OBJECT_TY OBJECT_TY  0 20033
  ##Wait  $$00000000  OBJECT_TY OBJECT_TY  0 20034
  ##Touch  $$00001001  OBJECT_TY OBJECT_TY  0 20035
  ##Wave  $$00001001  OBJECT_TY OBJECT_TY  0 20036
  ##Pull  $$00001001  OBJECT_TY OBJECT_TY  0 20037
  ##Push  $$00001001  OBJECT_TY OBJECT_TY  0 20038
  ##Turn  $$00001001  OBJECT_TY OBJECT_TY  0 20039
  ##PushDir  $$00011001  OBJECT_TY OBJECT_TY  0 20040
  ##Squeeze  $$00001001  OBJECT_TY OBJECT_TY  0 20041
  ##Yes  $$00000000  OBJECT_TY OBJECT_TY  0 20042
  ##No  $$00000000  OBJECT_TY OBJECT_TY  0 20043
  ##Burn  $$00001001  OBJECT_TY OBJECT_TY  0 20044
  ##Wake  $$00000000  OBJECT_TY OBJECT_TY  0 20045
  ##Think  $$00000000  OBJECT_TY OBJECT_TY  0 20046
  ##Smell  $$00001001  OBJECT_TY OBJECT_TY  0 20047
  ##Listen  $$00001001  OBJECT_TY OBJECT_TY  0 20048
  ##Taste  $$00001001  OBJECT_TY OBJECT_TY  0 20049
  ##Cut  $$00001001  OBJECT_TY OBJECT_TY  0 20050
  ##Jump  $$00000000  OBJECT_TY OBJECT_TY  0 20051
  ##Tie  $$00011011  OBJECT_TY OBJECT_TY  0 20052
  ##Drink  $$00001001  OBJECT_TY OBJECT_TY  0 20053
  ##Sorry  $$00000000  OBJECT_TY OBJECT_TY  0 20054
  ##Swing  $$00001001  OBJECT_TY OBJECT_TY  0 20055
  ##Rub  $$00001001  OBJECT_TY OBJECT_TY  0 20056
  ##SetTo  $$00011001  OBJECT_TY UNDERSTANDING_TY  0 20057
  ##WaveHands  $$00000000  OBJECT_TY OBJECT_TY  0 20058
  ##Buy  $$00001001  OBJECT_TY OBJECT_TY  0 20059
  ##Climb  $$00001001  OBJECT_TY OBJECT_TY  0 20060
  ##Sleep  $$00000000  OBJECT_TY OBJECT_TY  0 20061
  ##Quit  $$00100000  OBJECT_TY OBJECT_TY  0 20062
  ##Save  $$00100000  OBJECT_TY OBJECT_TY  0 20063
  ##Restore  $$00100000  OBJECT_TY OBJECT_TY  0 20064
  ##Restart  $$00100000  OBJECT_TY OBJECT_TY  0 20065
  ##Verify  $$00100000  OBJECT_TY OBJECT_TY  0 20066
  ##ScriptOn  $$00100000  OBJECT_TY OBJECT_TY  0 20067
  ##ScriptOff  $$00100000  OBJECT_TY OBJECT_TY  0 20068
  ##Version  $$00100000  OBJECT_TY OBJECT_TY  0 20069
  ##Score  $$00100000  OBJECT_TY OBJECT_TY  0 20070
  ##LMode3  $$00100000  OBJECT_TY OBJECT_TY  0 20071
  ##LMode2  $$00100000  OBJECT_TY OBJECT_TY  0 20072
  ##LMode1  $$00100000  OBJECT_TY OBJECT_TY  0 20073
  ##NotifyOn  $$00100000  OBJECT_TY OBJECT_TY  0 20074
  ##NotifyOff  $$00100000  OBJECT_TY OBJECT_TY  0 20075
  ##Pronouns  $$00100000  OBJECT_TY OBJECT_TY  0 20076
  ##A77_dumping  $$00001000  OBJECT_TY OBJECT_TY  0 20077
  ##A78_using  $$00001001  OBJECT_TY OBJECT_TY  0 20078
  ##A79_bare_help_invoking  $$00100000  OBJECT_TY OBJECT_TY  0 20079
  ##A80_move_help_invoking  $$00101000  OBJECT_TY OBJECT_TY  0 20080
  ##A81_help_invoking  $$00101000  OBJECT_TY OBJECT_TY  0 20081
  ##A82_plugging  $$00001000  OBJECT_TY OBJECT_TY  0 20082
  ##A83_unplugging  $$00001000  OBJECT_TY OBJECT_TY  0 20083
  ##A84_untieing  $$00001000  OBJECT_TY OBJECT_TY  0 20084
  ##A85_flying  $$00001000  OBJECT_TY OBJECT_TY  0 20085
  ##A86_suiting_up  $$00000000  OBJECT_TY OBJECT_TY  0 20086
  ##A87_confirming  $$00000000  OBJECT_TY OBJECT_TY  0 20087
  ##A88_canceling  $$00000000  OBJECT_TY OBJECT_TY  0 20088
  ##A89_running_across  $$00000000  OBJECT_TY OBJECT_TY  0 20089
  ##A90_running  $$00000000  OBJECT_TY OBJECT_TY  0 20090
  ##A91_lacing  $$00001001  OBJECT_TY OBJECT_TY  0 20091
  ##A92_blowing_out  $$00001001  OBJECT_TY OBJECT_TY  0 20092
  ##A93_shaking  $$00001001  OBJECT_TY OBJECT_TY  0 20093
  ##A94_going_up  $$00000000  OBJECT_TY OBJECT_TY  0 20094
  ##A95_going_down  $$00000000  OBJECT_TY OBJECT_TY  0 20095
  ##A96_xyzzying  $$00000000  OBJECT_TY OBJECT_TY  0 20096
  ##A97_plughing  $$00000000  OBJECT_TY OBJECT_TY  0 20097
;
Constant AD_RECORDS = 98;
[ ANSTVC_7 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = I197_bedroom; pos++;
        MStack-->pos = nothing; pos++;
        MStack-->pos = nothing; pos++;
        MStack-->pos = nothing; pos++;
        MStack-->pos = nothing; pos++;
    } else {
        pos++;
        pos++;
        pos++;
        pos++;
        pos++;
    }
    return 5;
];
[ ANSTVC_9 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = nothing; pos++;
    } else {
        pos++;
    }
    return 1;
];
[ ANSTVC_11 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = ##Wait; pos++;
        MStack-->pos = false; pos++;
        MStack-->pos = 0; pos++;
        MStack-->pos = nothing; pos++;
    } else {
        pos++;
        pos++;
        pos++;
        pos++;
    }
    return 4;
];
[ ANSTVC_12 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = false; pos++;
    } else {
        pos++;
    }
    return 1;
];
[ DB_Action_Details 
    act ! Implied call parameter
    n ! Implied call parameter
    s ! Implied call parameter
    for_say ! Implied call parameter
    ;
    switch (act) {
        ##Inv: print "taking inventory"; 
        ##Take: print "taking"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Remove: print "removing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "from"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Drop: print "dropping"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##PutOn: print "putting"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "on"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Insert: print "inserting"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "into"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Eat: print "eating"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Go: print "going"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Enter: print "entering"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Exit: print "exiting"; 
        ##GetOff: print "getting off"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Look: print "looking"; 
        ##Examine: print "examining"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##LookUnder: print "looking under"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Search: print "searching"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Consult: print "consulting"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "about"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##Lock: print "locking"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "with"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Unlock: print "unlocking"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "with"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##SwitchOn: print "switching on"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##SwitchOff: print "switching off"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Open: print "opening"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Close: print "closing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Wear: print "wearing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Disrobe: print "taking off"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Give: print "giving"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "to"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Show: print "showing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "to"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##WakeOther: print "waking"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##ThrowAt: print "throwing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "at"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Attack: print "attacking"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Kiss: print "kissing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Answer: print "answering"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "that"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##Tell: print "telling"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "about"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##Ask: print "asking"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "about"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##AskFor: print "asking"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "for"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Wait: print "waiting"; 
        ##Touch: print "touching"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Wave: print "waving"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Pull: print "pulling"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Push: print "pushing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Turn: print "turning"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##PushDir: print "pushing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "to"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Squeeze: print "squeezing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Yes: print "saying yes"; 
        ##No: print "saying no"; 
        ##Burn: print "burning"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Wake: print "waking up"; 
        ##Think: print "thinking"; 
        ##Smell: print "smelling"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Listen: print "listening to"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Taste: print "tasting"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Cut: print "cutting"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Jump: print "jumping"; 
        ##Tie: print "tying"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "to"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Drink: print "drinking"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Sorry: print "saying sorry"; 
        ##Swing: print "swinging"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Rub: print "rubbing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##SetTo: print "setting"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "to"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##WaveHands: print "waving hands"; 
        ##Buy: print "buying"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Climb: print "climbing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Sleep: print "sleeping"; 
        ##Quit: print "quitting the game"; 
        ##Save: print "saving the game"; 
        ##Restore: print "restoring the game"; 
        ##Restart: print "restarting the game"; 
        ##Verify: print "verifying the story file"; 
        ##ScriptOn: print "switching the story transcript on"; 
        ##ScriptOff: print "switching the story transcript off"; 
        ##Version: print "requesting the story file version"; 
        ##Score: print "requesting the score"; 
        ##LMode3: print "preferring abbreviated room descriptions"; 
        ##LMode2: print "preferring unabbreviated room descriptions"; 
        ##LMode1: print "preferring sometimes abbreviated room descriptions"; 
        ##NotifyOn: print "switching score notification on"; 
        ##NotifyOff: print "switching score notification off"; 
        ##Pronouns: print "requesting the pronoun meanings"; 
        ##A77_dumping: print "dumping"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A78_using: print "using"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A79_bare_help_invoking: print "bare-help-invoking"; 
        ##A80_move_help_invoking: print "move-help-invoking"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A81_help_invoking: print "help-invoking"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A82_plugging: print "plugging"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A83_unplugging: print "unplugging"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A84_untieing: print "untieing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A85_flying: print "flying"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A86_suiting_up: print "suiting-up"; 
        ##A87_confirming: print "confirming"; 
        ##A88_canceling: print "canceling"; 
        ##A89_running_across: print "running-across"; 
        ##A90_running: print "running"; 
        ##A91_lacing: print "lacing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A92_blowing_out: print "blowing out"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A93_shaking: print "shaking"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A94_going_up: print "going-up"; 
        ##A95_going_down: print "going-down"; 
        ##A96_xyzzying: print "xyzzying"; 
        ##A97_plughing: print "plughing"; 
    }
];

Array ActionCoding -->
    ##Inv ##Take ##Remove ##Drop ##PutOn ##Insert ##Eat ##Go
    ##Enter ##Exit ##GetOff ##Look ##Examine ##LookUnder ##Search ##Consult
    ##Lock ##Unlock ##SwitchOn ##SwitchOff ##Open ##Close ##Wear ##Disrobe
    ##Give ##Show ##WakeOther ##ThrowAt ##Attack ##Kiss ##Answer ##Tell
    ##Ask ##AskFor ##Wait ##Touch ##Wave ##Pull ##Push ##Turn
    ##PushDir ##Squeeze ##Yes ##No ##Burn ##Wake ##Think ##Smell
    ##Listen ##Taste ##Cut ##Jump ##Tie ##Drink ##Sorry ##Swing
    ##Rub ##SetTo ##WaveHands ##Buy ##Climb ##Sleep ##Quit ##Save
    ##Restore ##Restart ##Verify ##ScriptOn ##ScriptOff ##Version ##Score ##LMode3
    ##LMode2 ##LMode1 ##NotifyOn ##NotifyOff ##Pronouns ##A77_dumping ##A78_using ##A79_bare_help_invoking
    ##A80_move_help_invoking ##A81_help_invoking ##A82_plugging ##A83_unplugging ##A84_untieing ##A85_flying ##A86_suiting_up ##A87_confirming
    ##A88_canceling ##A89_running_across ##A90_running ##A91_lacing ##A92_blowing_out ##A93_shaking ##A94_going_up ##A95_going_down
    ##A96_xyzzying ##A97_plughing;


Array ActionHappened --> 0 0 0 0 0 0 0;


[ InvSub ;
    return GenericVerbSub(131,132,133);
];
[ TakeSub ;
    return GenericVerbSub(134,135,136);
];
[ RemoveSub ;
    return GenericVerbSub(137,138,139);
];
[ DropSub ;
    return GenericVerbSub(140,141,142);
];
[ PutOnSub ;
    return GenericVerbSub(143,144,145);
];
[ InsertSub ;
    return GenericVerbSub(146,147,148);
];
[ EatSub ;
    return GenericVerbSub(149,150,151);
];
[ GoSub ;
    return GenericVerbSub(152,153,154);
];
[ EnterSub ;
    return GenericVerbSub(155,156,157);
];
[ ExitSub ;
    return GenericVerbSub(158,159,160);
];
[ GetOffSub ;
    return GenericVerbSub(161,162,163);
];
[ LookSub ;
    return GenericVerbSub(164,165,166);
];
[ ExamineSub ;
    return GenericVerbSub(167,168,169);
];
[ LookUnderSub ;
    return GenericVerbSub(170,171,172);
];
[ SearchSub ;
    return GenericVerbSub(173,174,175);
];
[ ConsultSub ;
    return GenericVerbSub(176,177,178);
];
[ LockSub ;
    return GenericVerbSub(179,180,181);
];
[ UnlockSub ;
    return GenericVerbSub(182,183,184);
];
[ SwitchOnSub ;
    return GenericVerbSub(185,186,187);
];
[ SwitchOffSub ;
    return GenericVerbSub(188,189,190);
];
[ OpenSub ;
    return GenericVerbSub(191,192,193);
];
[ CloseSub ;
    return GenericVerbSub(194,195,196);
];
[ WearSub ;
    return GenericVerbSub(197,198,199);
];
[ DisrobeSub ;
    return GenericVerbSub(200,201,202);
];
[ GiveSub ;
    return GenericVerbSub(203,204,205);
];
[ ShowSub ;
    return GenericVerbSub(206,207,208);
];
[ WakeOtherSub ;
    return GenericVerbSub(209,210,211);
];
[ ThrowAtSub ;
    return GenericVerbSub(212,213,214);
];
[ AttackSub ;
    return GenericVerbSub(215,216,217);
];
[ KissSub ;
    return GenericVerbSub(218,219,220);
];
[ AnswerSub ;
    return GenericVerbSub(221,222,223);
];
[ TellSub ;
    return GenericVerbSub(224,225,226);
];
[ AskSub ;
    return GenericVerbSub(227,228,229);
];
[ AskForSub ;
    return GenericVerbSub(230,231,232);
];
[ WaitSub ;
    return GenericVerbSub(233,234,235);
];
[ TouchSub ;
    return GenericVerbSub(236,237,238);
];
[ WaveSub ;
    return GenericVerbSub(239,240,241);
];
[ PullSub ;
    return GenericVerbSub(242,243,244);
];
[ PushSub ;
    return GenericVerbSub(245,246,247);
];
[ TurnSub ;
    return GenericVerbSub(248,249,250);
];
[ PushDirSub ;
    return GenericVerbSub(251,252,253);
];
[ SqueezeSub ;
    return GenericVerbSub(254,255,256);
];
[ YesSub ;
    return GenericVerbSub(257,258,259);
];
[ NoSub ;
    return GenericVerbSub(260,261,262);
];
[ BurnSub ;
    return GenericVerbSub(263,264,265);
];
[ WakeSub ;
    return GenericVerbSub(266,267,268);
];
[ ThinkSub ;
    return GenericVerbSub(269,270,271);
];
[ SmellSub ;
    return GenericVerbSub(272,273,274);
];
[ ListenSub ;
    return GenericVerbSub(275,276,277);
];
[ TasteSub ;
    return GenericVerbSub(278,279,280);
];
[ CutSub ;
    return GenericVerbSub(281,282,283);
];
[ JumpSub ;
    return GenericVerbSub(284,285,286);
];
[ TieSub ;
    return GenericVerbSub(287,288,289);
];
[ DrinkSub ;
    return GenericVerbSub(290,291,292);
];
[ SorrySub ;
    return GenericVerbSub(293,294,295);
];
[ SwingSub ;
    return GenericVerbSub(296,297,298);
];
[ RubSub ;
    return GenericVerbSub(299,300,301);
];
[ SetToSub ;
    return GenericVerbSub(302,303,304);
];
[ WaveHandsSub ;
    return GenericVerbSub(305,306,307);
];
[ BuySub ;
    return GenericVerbSub(308,309,310);
];
[ ClimbSub ;
    return GenericVerbSub(311,312,313);
];
[ SleepSub ;
    return GenericVerbSub(314,315,316);
];
[ QuitSub ;
    return GenericVerbSub(317,318,319);
];
[ SaveSub ;
    return GenericVerbSub(320,321,322);
];
[ RestoreSub ;
    return GenericVerbSub(323,324,325);
];
[ RestartSub ;
    return GenericVerbSub(326,327,328);
];
[ VerifySub ;
    return GenericVerbSub(329,330,331);
];
[ ScriptOnSub ;
    return GenericVerbSub(332,333,334);
];
[ ScriptOffSub ;
    return GenericVerbSub(335,336,337);
];
[ VersionSub ;
    return GenericVerbSub(338,339,340);
];
[ ScoreSub ;
    return GenericVerbSub(341,342,343);
];
[ LMode3Sub ;
    return GenericVerbSub(344,345,346);
];
[ LMode2Sub ;
    return GenericVerbSub(347,348,349);
];
[ LMode1Sub ;
    return GenericVerbSub(350,351,352);
];
[ NotifyOnSub ;
    return GenericVerbSub(353,354,355);
];
[ NotifyOffSub ;
    return GenericVerbSub(356,357,358);
];
[ PronounsSub ;
    return GenericVerbSub(359,360,361);
];
[ A77_dumpingSub ;
    return GenericVerbSub(362,363,364);
];
[ A78_usingSub ;
    return GenericVerbSub(365,366,367);
];
[ A79_bare_help_invokingSub ;
    return GenericVerbSub(368,369,370);
];
[ A80_move_help_invokingSub ;
    return GenericVerbSub(371,372,373);
];
[ A81_help_invokingSub ;
    return GenericVerbSub(374,375,376);
];
[ A82_pluggingSub ;
    return GenericVerbSub(377,378,379);
];
[ A83_unpluggingSub ;
    return GenericVerbSub(380,381,382);
];
[ A84_untieingSub ;
    return GenericVerbSub(383,384,385);
];
[ A85_flyingSub ;
    return GenericVerbSub(386,387,388);
];
[ A86_suiting_upSub ;
    return GenericVerbSub(389,390,391);
];
[ A87_confirmingSub ;
    return GenericVerbSub(392,393,394);
];
[ A88_cancelingSub ;
    return GenericVerbSub(395,396,397);
];
[ A89_running_acrossSub ;
    return GenericVerbSub(398,399,400);
];
[ A90_runningSub ;
    return GenericVerbSub(401,402,403);
];
[ A91_lacingSub ;
    return GenericVerbSub(404,405,406);
];
[ A92_blowing_outSub ;
    return GenericVerbSub(407,408,409);
];
[ A93_shakingSub ;
    return GenericVerbSub(410,411,412);
];
[ A94_going_upSub ;
    return GenericVerbSub(413,414,415);
];
[ A95_going_downSub ;
    return GenericVerbSub(416,417,418);
];
[ A96_xyzzyingSub ;
    return GenericVerbSub(419,420,421);
];
[ A97_plughingSub ;
    return GenericVerbSub(422,423,424);
];

[ MistakeActionSub ;
    switch(understand_as_mistake_number) {
        388: ParserError(BC_1515);
        397: ParserError(BC_1516);
        398: ParserError(BC_1517);
        406: ParserError(BC_1518);
        407: ParserError(BC_1519);
        411: ParserError(BC_1520);
        419: ParserError(BC_1521);
        424: ParserError(BC_1522);
        425: ParserError(BC_1523);
        426: ParserError(BC_1524);
        430: ParserError(BC_1525);
        431: ParserError(BC_1526);
        439: ParserError(BC_1527);
        440: ParserError(BC_1528);
        441: ParserError(BC_1529);
        default: "I didn't understand that sentence.";
    }
    say__p = 1;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Phrases
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! Definitions of rules in rulebooks


! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Startup (B0_startup)
! ----------------------------------------------------------------------------------------------------
! Rule 1/11: INITIALISE_MEMORY_R
!   === equally specific with ===
! Rule 2/11: VIRTUAL_MACHINE_STARTUP_R
!   === equally specific with ===
! Rule 3/11: SEED_RANDOM_NUMBER_GENERATOR_R
!   === equally specific with ===
! Rule 4/11: UPDATE_CHRONOLOGICAL_RECORDS_R
!   === equally specific with ===
! Rule 5/11 ! This is the declare everything initially unmentioned rule:
!   === equally specific with ===
! Rule 6/11: POSITION_PLAYER_IN_MODEL_R
!   === equally specific with ===
! Rule 7/11 ! This is the start in the correct scenes rule:
! --- now the mid-placed rules ---
! Rule 8/11 ! This is the when play begins stage rule:
!   === equally specific with ===
! Rule 9/11 ! This is the fix baseline scoring rule:
!   === equally specific with ===
! Rule 10/11 ! This is the display banner rule:
!   === equally specific with ===
! Rule 11/11 ! This is the initial room description rule:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! This is the declare everything initially unmentioned rule:
[ R_9 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if (debug_rules) DB_Rule(R_9, 9);
    ! [2: repeat with item running through things]
    for (tmp_0=Prop_0(0), tmp_1=Prop_0(tmp_0): tmp_0: tmp_0=tmp_1, tmp_1=Prop_0(tmp_1))
    {! [3: now the item is not mentioned]
        (Adj_67_t3_v10(tmp_0));
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! This is the start in the correct scenes rule:
[ R_10 ;
    if (debug_rules) DB_Rule(R_10, 10);
    ! [2: follow the scene changing rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(3));
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the when play begins stage rule:
[ R_11 ;
    if (debug_rules) DB_Rule(R_11, 11);
    ! [2: follow the when play begins rulebook]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(4));
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the fix baseline scoring rule:
[ R_12 ;
    if (debug_rules) DB_Rule(R_12, 12);
    ! [2: now the last notified score is the score]
    last_score = score;
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the display banner rule:
[ R_13 ;
    if (debug_rules) DB_Rule(R_13, 13);
    ! [2: say ~[banner text]~]
    say__p=1;! [3: banner text]
    ParaContent(); Banner(); .L_Say0; .L_SayX0;rfalse;
];
! From the Standard Rules
! No specific request
! This is the initial room description rule:
[ R_14 ;
    if (debug_rules) DB_Rule(R_14, 14);
    ! [2: try looking]
    TryAction(0, player, ##Look, 0, 0);
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Turn sequence (B1_turn_sequence)
! ----------------------------------------------------------------------------------------------------
! Rule 1/12: PARSE_COMMAND_R
!   === equally specific with ===
! Rule 2/12 ! This is the declare everything initially unmentioned rule:
!   === equally specific with ===
! Rule 3/12: GENERATE_ACTION_R
!   === equally specific with ===
! Rule 4/12 ! A first turn sequence rule:
!   === equally specific with ===
! Rule 5/12 ! A first turn sequence rule ( this is the every turn stage rule ):
! --- now the mid-placed rules ---
! Rule 6/12: TIMED_EVENTS_R
!   === equally specific with ===
! Rule 7/12: ADVANCE_TIME_R
!   === equally specific with ===
! Rule 8/12: UPDATE_CHRONOLOGICAL_RECORDS_R
! --- now the last-placed rules ---
! Rule 9/12 ! A last turn sequence rule:
!   === equally specific with ===
! Rule 10/12: ADJUST_LIGHT_R
!   === equally specific with ===
! Rule 11/12: NOTE_OBJECT_ACQUISITIONS_R
!   === equally specific with ===
! Rule 12/12 ! This is the notify score changes rule:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! A first turn sequence rule:
[ R_16 ;
    if (debug_rules) DB_Rule(R_16, 16);
    ! [2: follow the scene changing rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(3));
    rfalse;
];
! From the Standard Rules
! No specific request
! A first turn sequence rule ( this is the every turn stage rule ):
[ R_15 ;
    if (debug_rules) DB_Rule(R_15, 15);
    ! [2: follow the every turn rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(8));
    rfalse;
];
! From the Standard Rules
! No specific request
! A last turn sequence rule:
[ R_17 ;
    if (debug_rules) DB_Rule(R_17, 17);
    ! [2: follow the scene changing rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(3));
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the notify score changes rule:
[ R_18 ;
    if (debug_rules) DB_Rule(R_18, 18);
    ! [2: if the score is not the last notified score]
    if (((~~((score == last_score)))))
    {! [3: issue score notification message]
        NotifyTheScore();
        ! [4: now the last notified score is the score]
        last_score = score;
        }
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Shutdown (B2_shutdown)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! This is the when play ends stage rule:
! --- now the last-placed rules ---
! Rule 2/4: RESURRECT_PLAYER_IF_ASKED_R
!   === equally specific with ===
! Rule 3/4 ! This is the print player's obituary rule:
!   === equally specific with ===
! Rule 4/4: ASK_FINAL_QUESTION_R
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! This is the when play ends stage rule:
[ R_19 ;
    if (debug_rules) DB_Rule(R_19, 19);
    ! [2: follow the when play ends rulebook]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(5));
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the print player's obituary rule:
[ R_20 ;
    if (debug_rules) DB_Rule(R_20, 20);
    ! [2: carry out the printing the player's obituary activity]
    CarryOutActivity(V28_printing_the_player_s_ob);
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: When play begins (B4_when_play_begins)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! When play begins:
! ----------------------------------------------------------------------------------------------------
! No specific request
! When play begins:
[ R_826 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_0();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_0 ;
    if (debug_rules) DB_Rule(R_826, 826);
    ! [2: now the right hand status line is ~Moves: [turn count - 1]~]
    BlkValueCopy(right_hand_status_line, (TEXT_TY_ExpandIfPerishable(I7SFRAME,TX_S_202)));
    ! [3: say ~[red letters]At 10:45am EDT on Thursday March 21st, the behavior of the safe was changed.^^At 1:15am EDT on Sunday March 24th, the behavior of some of the player's clothing was changed.[default letters]^^Welcome to [italic type]Unsafe[roman type]. If you're not sure what to do, type 'help'.~]
    say__p=1;! [4: red letters]
    ParaContent(); (PHR_824_r0 ());! [5: ~At 10:45am EDT on Thursday March 21st, the behavior of the safe was changed.^^At 1:15am EDT on Sunday March 24th, the behavior of some of the player's clothing was changed.~]
    ParaContent(); print "At 10:45am EDT on Thursday March 21st, the behavior of the safe was changed.^^At 1:15am EDT on Sunday March 24th, the behavior of some of the player's clothing was changed."; new_line;! [6: default letters]
    ParaContent(); (PHR_825_r1 ());! [7: ~^^Welcome to ~]
    ParaContent(); print "^^Welcome to ";! [8: italic type]
    ParaContent(); style underline;! [9: ~Unsafe~]
    ParaContent(); print "Unsafe";! [10: roman type]
    ParaContent(); style roman;! [11: ~. If you're not sure what to do, type 'help'.~]
    ParaContent(); print ". If you're not sure what to do, type ~help~."; new_line; .L_Say1; .L_SayX1;rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: When scene begins (B6_when_scene_begins)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! When a scene ( called the event ) begins ( this is the scene description text rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! When a scene ( called the event ) begins ( this is the scene description text rule ):
[ R_65 
    tmp_0 ! Let/loop value, e.g., 'event': scene
    ;
    if ((((tmp_0 = parameter_value, (((true) && (tmp_0=(parameter_value), true))))) || (tmp_0 = I78_entire_game,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_65, 65);
    ! [2: if the description of the event is not ~~]
    if (((~~(( BlkValueCompare(GProperty(SCENE_TY, tmp_0,description), EMPTY_TEXT_VALUE) == 0)))))
    {! [3: say ~[description of the event][paragraph break]~]
        say__p=1;! [4: description of the event]
        ParaContent(); @push self; print (TEXT_TY_Say) GProperty(SCENE_TY, self=tmp_0,description);@pull self; ! [5: paragraph break]
        ParaContent(); DivideParagraphPoint(); new_line; .L_Say2; .L_SayX2;}
        } else if (debug_rules > 1) DB_Rule(R_65, 65, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Every turn (B8_every_turn)
! ----------------------------------------------------------------------------------------------------
! Rule 1/8 ! Every turn when the player has the right running shoe and the player has the left running shoe:
!   === equally specific with ===
! Rule 2/8 ! Every turn while the water level is greater than 9 and the drain is plugged:
!   === equally specific with ===
! Rule 3/8 ! Every turn while the faucet is on and the drain is plugged:
!   === equally specific with ===
! Rule 4/8 ! Every turn when the player can see the bear and the bear is awake:
!   >>> III - When/while requirement >>>
! Rule 5/8 ! Every turn while the spaceship is out of control:
!   === equally specific with ===
! Rule 6/8 ! Every turn when the player is on the edge of the platform:
!   === equally specific with ===
! Rule 7/8 ! Every turn when the player is in the lair:
!   >>> I - Number of aspects constrained >>>
! Rule 8/8 ! Every turn:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Every turn when the player has the right running shoe and the player has the left running shoe:
[ R_906 ;
    if (((((((player == OwnerOf(I225_right_running_shoe)))) && (((player == OwnerOf(I226_left_running_shoe)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_906, 906);
    ! [2: now the left running shoe is nowhere]
    RemoveFromPlay(I226_left_running_shoe);;
    ! [3: now the right running shoe is nowhere]
    RemoveFromPlay(I225_right_running_shoe);;
    ! [4: now the player has the pair of running shoes]
    MoveObject(I229_pair_of_running_shoes,player);
    } else if (debug_rules > 1) DB_Rule(R_906, 906, 'context');
    rfalse;
];
! No specific request
! Every turn while the water level is greater than 9 and the drain is plugged:
[ R_914 ;
    if ((((((((Global_Vars-->11) > 9))) && ((((Adj_96_t1_v10(I260_drain))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_914, 914);
    ! [2: if the player is in the bathroom]
    if (((I254_bathroom == ContainerOf(player))))
    {! [3: say ~The tub overflows and a fair amount of water flows out of the bathtub into the rest of the bathroom.~]
        say__p=1;! [4: ~The tub overflows and a fair amount of water flows out of the bathtub into the rest of the bathroom.~]
        ParaContent(); print "The tub overflows and a fair amount of water flows out of the bathtub into the rest of the bathroom."; new_line; .L_Say3; .L_SayX3;}
    ! [5: decrease the water level by 1]
    (Global_Vars-->11) = (Global_Vars-->11) - 1;;
    } else if (debug_rules > 1) DB_Rule(R_914, 914, 'context');
    rfalse;
];
! No specific request
! Every turn while the faucet is on and the drain is plugged:
[ R_915 ;
    if ((((((((Adj_97_t1_v10(I261_faucet))))) && ((((Adj_96_t1_v10(I260_drain))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_915, 915);
    ! [2: if the water level is not 10]
    if (((~~(((Global_Vars-->11) == 10)))))
    {! [3: increase the water level by 1]
        (Global_Vars-->11) = (Global_Vars-->11) + 1;;
        }
        } else if (debug_rules > 1) DB_Rule(R_915, 915, 'context');
        rfalse;
];
! No specific request
! Every turn when the player can see the bear and the bear is awake:
[ R_1004 ;
    if (((((((TestVisibility(player,I353_grizzly_bear)))) && ((((Adj_116_t1_v10(I353_grizzly_bear))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1004, 1004);
    ! [2: say ~The grizzly bear [one of]tries to catch an insect as it flies by[or]stares off into the distance[or]menacingly bares its teeth[or]looks profoundly bored[at random].~]
    say__p=1;! [3: ~The grizzly bear ~]
    ParaContent(); print "The grizzly bear ";! [4: one of]
    ParaContent(); 
    	
    	if (I7_ST_say_one_flag-->0 == false) {
    		I7_ST_say_one_of-->0 = i7_soo_ran(I7_ST_say_one_of-->0,
    4);
    	 	I7_ST_say_one_flag-->0 = true;
    	}
    	if (say__comp == false) I7_ST_say_one_flag-->0 =
    false;
    	switch ((I7_ST_say_one_of-->0)%(4+1)-1)
    {
    		0:! [5: ~tries to catch an insect as it flies by~]
    ParaContent(); print "tries to catch an insect as it flies by";! [6: or]
    ParaContent(); @nop; 1:! [7: ~stares off into the distance~]
    ParaContent(); print "stares off into the distance";! [8: or]
    ParaContent(); @nop; 2:! [9: ~menacingly bares its teeth~]
    ParaContent(); print "menacingly bares its teeth";! [10: or]
    ParaContent(); @nop; 3:! [11: ~looks profoundly bored~]
    ParaContent(); print "looks profoundly bored";! [12: at random]
    ParaContent(); }! [13: ~.~]
    ParaContent(); print "."; new_line; .L_Say4; .L_SayX4;} else if (debug_rules > 1) DB_Rule(R_1004, 1004, 'context');
    rfalse;
];
! No specific request
! Every turn while the spaceship is out of control:
[ R_948 ;
    if (((((((Adj_105_t1_v10(I288_spaceship)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_948, 948);
    ! [2: say ~AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA~]
    say__p=1;! [3: ~AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA~]
    ParaContent(); print "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"; .L_Say5; .L_SayX5;! [4: say ~AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA![line break]~]
    say__p=1;! [5: ~AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!~]
    ParaContent(); print "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!";! [6: line break]
    ParaContent(); new_line; .L_Say6; .L_SayX6;! [7: say ~The ship barrels toward the ground at an alarming rate.~]
    say__p=1;! [8: ~The ship barrels toward the ground at an alarming rate.~]
    ParaContent(); print "The ship barrels toward the ground at an alarming rate."; new_line; .L_Say7; .L_SayX7;} else if (debug_rules > 1) DB_Rule(R_948, 948, 'context');
    rfalse;
];
! No specific request
! Every turn when the player is on the edge of the platform:
[ R_963 ;
    if ((((((I306_edge_of_the_platform == SupporterOf(player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_963, 963);
    ! [2: if the train is ready]
    if ((((Adj_108_t1_v10(I303_abandoned_train_station)))))
    {! [3: if the player is wearing the earbuds and the ipod is playing and the player has the ipod and the earbuds are connected]
        if ((((player == WearerOf(I239_earbuds)))) && (((((Adj_87_t1_v10(I200_ipod))))) && ((((player == OwnerOf(I200_ipod)))) && ((((Adj_95_t1_v10(I239_earbuds))))))))
        {! [4: say ~A train enters the station while you're jamming to the music, and you trip and fall into the train tracks in front of it. That was really dumb.~]
            say__p=1;! [5: ~A train enters the station while you're jamming to the music, and you trip and fall into the train tracks in front of it. That was really dumb.~]
            ParaContent(); print "A train enters the station while you're jamming to the music, and you trip and fall into the train tracks in front of it. That was really dumb."; new_line; .L_Say8; .L_SayX8;! [6: conclude with 37]
            (PHR_827_r2 (37));
            } else {
            ! [7: say ~A train approaches the platform and you are nearly run over; however, you hear it coming and move away from the edge in order to be safe. It passes the station by while you watch, not slowing a bit.~]
            say__p=1;! [8: ~A train approaches the platform and you are nearly run over; however, you hear it coming and move away from the edge in order to be safe. It passes the station by while you watch, not slowing a bit.~]
            ParaContent(); print "A train approaches the platform and you are nearly run over; however, you hear it coming and move away from the edge in order to be safe. It passes the station by while you watch, not slowing a bit."; new_line; .L_Say9; .L_SayX9;! [9: now the train is not ready]
            (Adj_108_t3_v10(I303_abandoned_train_station));
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_963, 963, 'context');
            rfalse;
];
! No specific request
! Every turn when the player is in the lair:
[ R_974 ;
    if ((((((I311_a_spooky_lair == ContainerOf(player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_974, 974);
    ! [2: if the player is wearing the dollop and the candle is not urge passed]
    if ((((player == WearerOf(I258_dollop_of_hair_gel)))) && (((~~(((Adj_112_t1_v10(I313_candle))))))))
    {! [3: say ~You feel drawn toward the candle, as though its destiny and yours are intertwined.~]
        say__p=1;! [4: ~You feel drawn toward the candle, as though its destiny and yours are intertwined.~]
        ParaContent(); print "You feel drawn toward the candle, as though its destiny and yours are intertwined."; new_line; .L_Say10; .L_SayX10;! [5: now the candle is urge passed]
        (Adj_112_t2_v10(I313_candle));
        }
        } else if (debug_rules > 1) DB_Rule(R_974, 974, 'context');
        rfalse;
];
! No specific request
! Every turn:
[ R_1023 ;
    if (debug_rules) DB_Rule(R_1023, 1023);
    ! [2: now the coin slot is available]
    (Adj_119_t2_v10(I366_coin_slot));
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Action-processing (B9_action_processing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/11 ! This is the announce items from multiple object lists rule:
!   === equally specific with ===
! Rule 2/11 ! This is the set pronouns from items from multiple object lists rule:
!   === equally specific with ===
! Rule 3/11 ! This is the before stage rule:
! --- now the mid-placed rules ---
! Rule 4/11: BASIC_VISIBILITY_R
!   === equally specific with ===
! Rule 5/11: BASIC_ACCESSIBILITY_R
!   === equally specific with ===
! Rule 6/11: CARRYING_REQUIREMENTS_R
! --- now the last-placed rules ---
! Rule 7/11 ! This is the instead stage rule:
!   === equally specific with ===
! Rule 8/11: REQUESTED_ACTIONS_REQUIRE_R
!   === equally specific with ===
! Rule 9/11: CARRY_OUT_REQUESTED_ACTIONS_R
!   === equally specific with ===
! Rule 10/11: DESCEND_TO_SPECIFIC_ACTION_R
!   === equally specific with ===
! Rule 11/11 ! This is the end action-processing in success rule:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! This is the announce items from multiple object lists rule:
[ R_22 ;
    if (debug_rules) DB_Rule(R_22, 22);
    ! [2: if the current item from the multiple object list is not nothing]
    if (((~~((multiple_object_item == nothing)))))
    {! [3: say ~[current item from the multiple object list]: [run paragraph on]~ ( a )]
        say__p=1;! [4: ~[current item from the multiple object list]: [run paragraph on]~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_134); .L_Say11; .L_SayX11;}
        rfalse;
];
! From the Standard Rules
! No specific request
! This is the set pronouns from items from multiple object lists rule:
[ R_21 ;
    if (debug_rules) DB_Rule(R_21, 21);
    ! [2: if the current item from the multiple object list is not nothing]
    if (((~~((multiple_object_item == nothing)))))
    {! [3: set pronouns from the current item from the multiple object list]
        PronounNotice(multiple_object_item);
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! This is the before stage rule:
[ R_23 ;
    if (debug_rules) DB_Rule(R_23, 23);
    ! [2: abide by the before rules]
    if (FollowRulebook(RULEBOOK_TY_to_RULE_TY(19))) rtrue;
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the instead stage rule:
[ R_24 ;
    if (debug_rules) DB_Rule(R_24, 24);
    ! [2: abide by the instead rules]
    if (FollowRulebook(RULEBOOK_TY_to_RULE_TY(20))) rtrue;
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the end action-processing in success rule:
[ R_25 ;
    if (debug_rules) DB_Rule(R_25, 25);
    ! [2: rule succeeds]
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Setting action variables (B10_setting_action_variables)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Rule for setting action variables for going ( this is the standard set going variables rule ):
!   === equally specific with ===
! Rule 2/3 ! Setting action variables for exiting:
!   === equally specific with ===
! Rule 3/3 ! Setting action variables for looking ( this is the determine visibility ceiling rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Rule for setting action variables for going ( this is the standard set going variables rule ):
[ R_151 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    @push formal_par1;
    I7RBLK = KERNEL_1();
    @pull formal_par1;
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_1 
    tmp_0 ! Let/loop value, e.g., 'carriage': vehicle
    tmp_1 ! Let/loop value, e.g., 'target': object
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((action ==##Go)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_151, 151);
    ! [2: now the thing gone with is the item-pushed-between-rooms]
    (MStack-->MstVO(20007,4)) = move_pushing;
    ! [3: now the room gone from is the location of the actor]
    (MStack-->MstVO(20007,0)) = LocationOf(actor);
    ! [4: if the actor is in an enterable vehicle ( called the carriage )]
    if (((ContainerOf(actor) ofclass K14_vehicle) && ((Adj_69_t1_v10(ContainerOf(actor)))) && (tmp_0=(ContainerOf(actor)), true)))
    {! [5: now the vehicle gone by is the carriage]
        (MStack-->MstVO(20007,3)) = tmp_0;
        }
    ! [6: let the target be nothing]

    		tmp_1 = nothing;
    ! [7: if the noun is a direction]
    if (((noun ofclass K3_direction)))
    {! [8: let direction d be the noun]

        		tmp_2 = noun;
        ! [9: let the target be the room-or-door direction d from the room gone from]
        tmp_1 = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par0 ofclass K3_direction) && (formal_par0 ofclass K3_direction))))) && ((
                        formal_rv = RoomOrDoorFrom(formal_par1,formal_par0)) | 1)
                        )|| (ArgumentTypeFailed(2287, 1))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = (MStack-->MstVO(20007,0))) +
                    (formal_par0 = tmp_2)
                    ))
            )

        ! Resolution complete
        ;
        } else {
        ! [10: if the noun is a door]
        if (((noun ofclass K4_door)))
        {! [11: let the target be the noun]
            tmp_1 = noun;
            }
            }
    ! [12: if the target is a door]
    if (((tmp_1 ofclass K4_door)))
    {! [13: now the door gone through is the target]
        (MStack-->MstVO(20007,2)) = tmp_1;
        ! [14: now the target is the other side of the target from the room gone from]
        tmp_1 = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par0 ofclass K4_door) && (formal_par0 ofclass K4_door))))) && ((
                        formal_rv = OtherSideOfDoor(formal_par0,formal_par1)) | 1)
                        )|| (ArgumentTypeFailed(2292, 1))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = (MStack-->MstVO(20007,0))) +
                    (formal_par0 = tmp_1)
                    ))
            )

        ! Resolution complete
        ;
        }
    ! [15: now the room gone to is the target]
    (MStack-->MstVO(20007,1)) = tmp_1;
    } else if (debug_rules > 1) DB_Rule(R_151, 151, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Setting action variables for exiting:
[ R_174 ;
    if ((((action ==##Exit)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_174, 174);
    ! [2: now the container exited from is the holder of the actor]
    (MStack-->MstVO(20009,0)) = (HolderOf(actor));
    } else if (debug_rules > 1) DB_Rule(R_174, 174, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Setting action variables for looking ( this is the determine visibility ceiling rule ):
[ R_186 ;
    if ((((action ==##Look)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_186, 186);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: calculate visibility ceiling at low level]
        FindVisibilityLevels();
        }
    ! [4: now the visibility level count is the visibility ceiling count calculated]
    (MStack-->MstVO(20011,2)) = visibility_levels;
    ! [5: now the visibility ceiling is the visibility ceiling calculated]
    (MStack-->MstVO(20011,3)) = visibility_ceiling;
    ! [6: now the room-describing action is the looking action]
    (MStack-->MstVO(20011,0)) = ##Look;
    } else if (debug_rules > 1) DB_Rule(R_186, 186, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: specific action-processing (B11_specific_action_processi)
! ----------------------------------------------------------------------------------------------------
! Rule 1/8: WORK_OUT_DETAILS_OF_SPECIFIC_R
! --- now the mid-placed rules ---
! Rule 2/8 ! A specific action-processing rule ( this is the investigate player's awareness before action rule ):
!   === equally specific with ===
! Rule 3/8 ! A specific action-processing rule ( this is the check stage rule ):
!   === equally specific with ===
! Rule 4/8 ! A specific action-processing rule ( this is the carry out stage rule ):
!   === equally specific with ===
! Rule 5/8 ! A specific action-processing rule ( this is the after stage rule ):
!   === equally specific with ===
! Rule 6/8 ! A specific action-processing rule ( this is the investigate player's awareness after action rule ):
!   === equally specific with ===
! Rule 7/8 ! A specific action-processing rule ( this is the report stage rule ):
! --- now the last-placed rules ---
! Rule 8/8 ! The last specific action-processing rule:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! A specific action-processing rule ( this is the investigate player's awareness before action rule ):
[ R_26 ;
    if (debug_rules) DB_Rule(R_26, 26);
    ! [2: follow the player's action awareness rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(12));
    ! [3: if rule succeeded]
    if (((RulebookSucceeded())))
    {! [4: now within the player's sight is true]
        (MStack-->MstVO(11,5)) = 1;
        } else {
        ! [5: now within the player's sight is false]
        (MStack-->MstVO(11,5)) = 0;
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! A specific action-processing rule ( this is the check stage rule ):
[ R_27 ;
    if (debug_rules) DB_Rule(R_27, 27);
    ! [2: anonymously abide by the specific check rulebook]
    if (temporary_value = FollowRulebook(RULEBOOK_TY_to_RULE_TY((MStack-->MstVO(11,2))))) {
    		if (RulebookSucceeded()) ActRulebookSucceeds(temporary_value);
    		else ActRulebookFails(temporary_value);
    		return 2;
    	}
    rfalse;
];
! From the Standard Rules
! No specific request
! A specific action-processing rule ( this is the carry out stage rule ):
[ R_28 ;
    if (debug_rules) DB_Rule(R_28, 28);
    ! [2: follow the specific carry out rulebook]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY((MStack-->MstVO(11,3))));
    rfalse;
];
! From the Standard Rules
! No specific request
! A specific action-processing rule ( this is the after stage rule ):
[ R_29 ;
    if (debug_rules) DB_Rule(R_29, 29);
    ! [2: if action in world is true]
    if (((((MStack-->MstVO(11,0)) && true) == (1 && true))))
    {! [3: abide by the after rules]
        if (FollowRulebook(RULEBOOK_TY_to_RULE_TY(23))) rtrue;
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! A specific action-processing rule ( this is the investigate player's awareness after action rule ):
[ R_30 ;
    if (debug_rules) DB_Rule(R_30, 30);
    ! [2: if within the player's sight is false]
    if (((((MStack-->MstVO(11,5)) && true) == (0 && true))))
    {! [3: follow the player's action awareness rules]
        FollowRulebook(RULEBOOK_TY_to_RULE_TY(12));
        ! [4: if rule succeeded]
        if (((RulebookSucceeded())))
        {! [5: now within the player's sight is true]
            (MStack-->MstVO(11,5)) = 1;
            }
            }
            rfalse;
];
! From the Standard Rules
! No specific request
! A specific action-processing rule ( this is the report stage rule ):
[ R_31 ;
    if (debug_rules) DB_Rule(R_31, 31);
    ! [2: if within the player's sight is true and action keeping silent is false]
    if ((((((MStack-->MstVO(11,5)) && true) == (1 && true)))) && (((((MStack-->MstVO(11,1)) && true) == (0 && true)))))
    {! [3: follow the specific report rulebook]
        FollowRulebook(RULEBOOK_TY_to_RULE_TY((MStack-->MstVO(11,4))));
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! The last specific action-processing rule:
[ R_32 ;
    if (debug_rules) DB_Rule(R_32, 32);
    ! [2: rule succeeds]
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: player's action awareness (B12_player_s_action_awarenes)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! A player's action awareness rule ( this is the player aware of his own actions rule ):
!   === equally specific with ===
! Rule 2/4 ! A player's action awareness rule ( this is the player aware of actions by visible actors rule ):
!   === equally specific with ===
! Rule 3/4 ! A player's action awareness rule ( this is the player aware of actions on visible nouns rule ):
!   === equally specific with ===
! Rule 4/4 ! A player's action awareness rule ( this is the player aware of actions on visible second nouns rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! A player's action awareness rule ( this is the player aware of his own actions rule ):
[ R_33 ;
    if (debug_rules) DB_Rule(R_33, 33);
    ! [2: if the player is the actor]
    if (((player == actor)))
    {! [3: rule succeeds]
        RulebookSucceeds(); rtrue;
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! A player's action awareness rule ( this is the player aware of actions by visible actors rule ):
[ R_34 ;
    if (debug_rules) DB_Rule(R_34, 34);
    ! [2: if the player is not the actor and the player can see the actor]
    if ((((~~((player == actor))))) && (((TestVisibility(player,actor)))))
    {! [3: rule succeeds]
        RulebookSucceeds(); rtrue;
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! A player's action awareness rule ( this is the player aware of actions on visible nouns rule ):
[ R_35 ;
    if (debug_rules) DB_Rule(R_35, 35);
    ! [2: if the noun is a thing and the player can see the noun]
    if ((((noun ofclass K2_thing))) && (((TestVisibility(player,noun)))))
    {! [3: rule succeeds]
        RulebookSucceeds(); rtrue;
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! A player's action awareness rule ( this is the player aware of actions on visible second nouns rule ):
[ R_36 ;
    if (debug_rules) DB_Rule(R_36, 36);
    ! [2: if the second noun is a thing and the player can see the second noun]
    if ((((second ofclass K2_thing))) && (((TestVisibility(player,second)))))
    {! [3: rule succeeds]
        RulebookSucceeds(); rtrue;
        }
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Reaching inside (B14_reaching_inside)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! A rule for reaching inside the roof of the shed:
!   === equally specific with ===
! Rule 2/4 ! A rule for reaching inside the shelf:
! --- now the last-placed rules ---
! Rule 3/4: CANT_REACH_INSIDE_ROOMS_R
!   === equally specific with ===
! Rule 4/4: CANT_REACH_INSIDE_CLOSED_R
! ----------------------------------------------------------------------------------------------------
! No specific request
! A rule for reaching inside the roof of the shed:
[ R_930 ;
    if (((((parameter_value == I283_roof_of_the_shed) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_930, 930);
    ! [2: if the player is not on the stool]
    if (((~~((I208_stool == SupporterOf(player))))))
    {! [3: say ~You can't reach the roof of the shed.~]
        say__p=1;! [4: ~You can't reach the roof of the shed.~]
        ParaContent(); print "You can't reach the roof of the shed."; new_line; .L_Say12; .L_SayX12;! [5: deny access]
        RulebookFails(22, RBNO_1); rtrue;

        }
    ! [6: allow access]
    RulebookSucceeds(22, RBNO_0); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_930, 930, 'action');
    rfalse;
];
! No specific request
! A rule for reaching inside the shelf:
[ R_1020 ;
    if (((((parameter_value == I357_tool_shelf) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1020, 1020);
    ! [2: if the player is not on the stool]
    if (((~~((I208_stool == SupporterOf(player))))))
    {! [3: say ~You can't reach the shelf.~]
        say__p=1;! [4: ~You can't reach the shelf.~]
        ParaContent(); print "You can't reach the shelf."; new_line; .L_Say13; .L_SayX13;! [5: deny access]
        RulebookFails(22, RBNO_1); rtrue;

        }
    ! [6: allow access]
    RulebookSucceeds(22, RBNO_0); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1020, 1020, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Visibility (B16_visibility)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! The last visibility rule ( this is the can't act in the dark rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! The last visibility rule ( this is the can't act in the dark rule ):
[ R_37 ;
    if (debug_rules) DB_Rule(R_37, 37);
    ! [2: if in darkness]
    if (((location==thedark)))
    {! [3: rule succeeds]
        RulebookSucceeds(); rtrue;
        }
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Before (B19_before)
! ----------------------------------------------------------------------------------------------------
! Rule 1/7 ! Before going through the tunnel:
!   >>> III.2.1 - Action/Where/Going In Exotic Ways >>>
! Rule 2/7 ! Before unlocking the back door with the blue key:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 3/7 ! Before taking the Toyota key:
!   === equally specific with ===
! Rule 4/7 ! Before taking the bucket:
!   === equally specific with ===
! Rule 5/7 ! Before opening the blue car:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 6/7 ! Before wearing something:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 7/7 ! Before going when the player is in the car:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Before going through the tunnel:
[ R_973 ;
    if ((((action ==##Go) &&  (actor==player) && (((MStack-->MstVON(20007,2)) == I263_the_tunnel_of_extractio) && (true)) && ((MStack-->MstVON(20007,1)) ~= nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_973, 973);
    ! [2: if the tunnel's count is 1]
    if ((((Global_Vars-->12) == 1)))
    {! [3: say ~This tunnel was pretty spooky the first time you went through it. You take a second to mentally prepare yourself before going through again.~]
        say__p=1;! [4: ~This tunnel was pretty spooky the first time you went through it. You take a second to mentally prepare yourself before going through again.~]
        ParaContent(); print "This tunnel was pretty spooky the first time you went through it. You take a second to mentally prepare yourself before going through again."; new_line; .L_Say14; .L_SayX14;! [5: increment the tunnel's count]
        (Global_Vars-->12) = (Global_Vars-->12) + 1;;
        ! [6: stop the action]
        rtrue;
        }
    ! [7: increment the tunnel's count]
    (Global_Vars-->12) = (Global_Vars-->12) + 1;;
    ! [8: if the player is not wearing work shoes and the player is not wearing the pair of running shoes]
    if ((((~~((player == WearerOf(I151_work_shoes)))))) && (((~~((player == WearerOf(I229_pair_of_running_shoes)))))))
    {! [9: say ~That doesn't look like a safe place to go without shoes.~]
        say__p=1;! [10: ~That doesn't look like a safe place to go without shoes.~]
        ParaContent(); print "That doesn't look like a safe place to go without shoes."; new_line; .L_Say15; .L_SayX15;! [11: stop the action]
        rtrue;
        } else {
        ! [12: if the player is not wearing a jacket or the player is not wearing a hat]
        if ((((~~((player == WearerOf(I154_jacket)))))) || (((~~((player == WearerOf(I153_hat)))))))
        {! [13: say ~The tunnel looks cold and ominous. You think you should be dressed warmly in a jacket and a hat before attempting to traverse it.~]
            say__p=1;! [14: ~The tunnel looks cold and ominous. You think you should be dressed warmly in a jacket and a hat before attempting to traverse it.~]
            ParaContent(); print "The tunnel looks cold and ominous. You think you should be dressed warmly in a jacket and a hat before attempting to traverse it."; new_line; .L_Say16; .L_SayX16;! [15: stop the action]
            rtrue;
            } else {
            ! [16: if the player is not wearing pants]
            if (((~~((player == WearerOf(I147_pants))))))
            {! [17: say ~The tunnel looks cold and ominous. You would rather not expose so much of your lower body to its harsh conditions.~]
                say__p=1;! [18: ~The tunnel looks cold and ominous. You would rather not expose so much of your lower body to its harsh conditions.~]
                ParaContent(); print "The tunnel looks cold and ominous. You would rather not expose so much of your lower body to its harsh conditions."; new_line; .L_Say17; .L_SayX17;! [19: stop the action]
                rtrue;
                } else {
                ! [20: if the player is not wearing a belt]
                if (((~~((player == WearerOf(I152_belt))))))
                {! [21: say ~The tunnel looks difficult to traverse. You think your pants would fall off without a belt.~]
                    say__p=1;! [22: ~The tunnel looks difficult to traverse. You think your pants would fall off without a belt.~]
                    ParaContent(); print "The tunnel looks difficult to traverse. You think your pants would fall off without a belt."; new_line; .L_Say18; .L_SayX18;! [23: stop the action]
                    rtrue;
                    } else {
                    ! [24: if the player is wearing the earbuds]
                    if (((player == WearerOf(I239_earbuds))))
                    {! [25: say ~You go through the long and winding Tunnel of Extraction.^^As you follow all the twists and turns of the tunnel, you turn your head one too many times and your earbuds fall out of your ears. You manage to grab them before they fall to the ground.~]
                        say__p=1;! [26: ~You go through the long and winding Tunnel of Extraction.^^As you follow all the twists and turns of the tunnel, you turn your head one too many times and your earbuds fall out of your ears. You manage to grab them before they fall to the ground.~]
                        ParaContent(); print "You go through the long and winding Tunnel of Extraction.^^As you follow all the twists and turns of the tunnel, you turn your head one too many times and your earbuds fall out of your ears. You manage to grab them before they fall to the ground."; new_line; .L_Say19; .L_SayX19;! [27: now the player is carrying the earbuds]
                        MoveObject(I239_earbuds,player);
                        } else {
                        ! [28: say ~You go through the long and winding Tunnel of Extraction.~]
                        say__p=1;! [29: ~You go through the long and winding Tunnel of Extraction.~]
                        ParaContent(); print "You go through the long and winding Tunnel of Extraction."; new_line; .L_Say20; .L_SayX20;}
                        }
                        }
                        }
                        }
                        } else if (debug_rules > 1) DB_Rule(R_973, 973, 'action');
                        rfalse;
];
! No specific request
! Before unlocking the back door with the blue key:
[ R_896 ;
    if ((((action ==##Unlock) &&  (actor==player) && ((noun == I222_back_door) && (true)) && ((second == I221_blue_key) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_896, 896);
    ! [2: if the player is not holding the blue key]
    if (((~~((player == HolderOf(I221_blue_key))))))
    {! [3: say ~You need to take the key before you can do that.~]
        say__p=1;! [4: ~You need to take the key before you can do that.~]
        ParaContent(); print "You need to take the key before you can do that."; new_line; .L_Say21; .L_SayX21;! [5: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_896, 896, 'action');
        rfalse;
];
! No specific request
! Before taking the Toyota key:
[ R_903 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I228_toyota_key) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_903, 903);
    ! [2: if the toyota key is tied]
    if ((((Adj_94_t1_v10(I228_toyota_key)))))
    {! [3: say ~The Toyota key is tied to the coat rack; you should untie it before you take it.~]
        say__p=1;! [4: ~The Toyota key is tied to the coat rack; you should untie it before you take it.~]
        ParaContent(); print "The Toyota key is tied to the coat rack; you should untie it before you take it."; new_line; .L_Say22; .L_SayX22;! [5: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_903, 903, 'action');
        rfalse;
];
! No specific request
! Before taking the bucket:
[ R_929 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I284_bucket) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_929, 929);
    ! [2: now the bucket is not hidden]
    (Adj_100_t3_v10(I284_bucket));
    } else if (debug_rules > 1) DB_Rule(R_929, 929, 'action');
    rfalse;
];
! No specific request
! Before opening the blue car:
[ R_955 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I302_blue_car) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_955, 955);
    ! [2: if the player does not have the toyota key]
    if (((~~((player == OwnerOf(I228_toyota_key))))))
    {! [3: say ~You can't do that without the key.~]
        say__p=1;! [4: ~You can't do that without the key.~]
        ParaContent(); print "You can't do that without the key."; new_line; .L_Say23; .L_SayX23;! [5: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_955, 955, 'action');
        rfalse;
];
! No specific request
! Before wearing something:
[ R_1012 ;
    if ((((action ==##Wear) &&  (actor==player) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1012, 1012);
    ! [2: if the player does not have the noun]
    if (((~~((player == OwnerOf(noun))))))
    {! [3: say ~You'd have to pick up [the noun] first.~]
        say__p=1;! [4: ~You'd have to pick up ~]
        ParaContent(); print "You'd have to pick up ";! [5: the noun]
        ParaContent(); print (the) noun;! [6: ~ first.~]
        ParaContent(); print " first."; new_line; .L_Say24; .L_SayX24;! [7: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1012, 1012, 'action');
        rfalse;
];
! No specific request
! Before going when the player is in the car:
[ R_958 ;
    if ((((action ==##Go) &&  (actor==player) && (self=actor,true) && (((I302_blue_car == ContainerOf(player))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_958, 958);
    ! [2: if the car is open]
    if ((((Adj_72_t1_v10(I302_blue_car)))))
    {! [3: say ~That would be unsafe. You should close the car door.~]
        say__p=1;! [4: ~That would be unsafe. You should close the car door.~]
        ParaContent(); print "That would be unsafe. You should close the car door."; new_line; .L_Say25; .L_SayX25;! [5: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_958, 958, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Instead (B20_instead)
! ----------------------------------------------------------------------------------------------------
! Rule 1/132 ! Instead of going from the house to a room which is not in the house when the jacket is not worn:
!   === equally specific with ===
! Rule 2/132 ! Instead of going from the house to a room which is not in the house when the hat is not worn:
!   === equally specific with ===
! Rule 3/132 ! Instead of going from the house to a room which is not in the house when the belt is not worn:
!   >>> III.2.2 - Action/Where/Room Where Action Takes Place >>>
! Rule 4/132 ! Instead of opening the spaceship in the air:
!   === equally specific with ===
! Rule 5/132 ! Instead of opening the spaceship in outer space:
!   === equally specific with ===
! Rule 6/132 ! Instead of taking off the spacesuit in outer space:
!   === equally specific with ===
! Rule 7/132 ! Instead of taking off the helmet in outer space:
!   === equally specific with ===
! Rule 8/132 ! Instead of going up from the Woods:
!   === equally specific with ===
! Rule 9/132 ! Instead of going down from the Woods:
!   === equally specific with ===
! Rule 10/132 ! Instead of going up from the Woods:
!   === equally specific with ===
! Rule 11/132 ! Instead of going outside from the Hunting Lodge:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 12/132 ! Instead of going from the kitchen when the button is active:
!   >>> III.2.2 - Action/Where/Room Where Action Takes Place >>>
! Rule 13/132 ! Instead of going to the hunting grounds when the player is wearing the moose head and it is hunting season and the moose head is accustomed:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 14/132 ! Instead of going to the abandoned train station when the player is in the car:
!   === equally specific with ===
! Rule 15/132 ! Instead of going to the woods when not the woods are accessible:
!   >>> III.2.2 - Action/Where/Room Where Action Takes Place >>>
! Rule 16/132 ! Instead of going to the house when the player is in the car:
!   >>> III.2.2 - Action/Where/Room Where Action Takes Place >>>
! Rule 17/132 ! Instead of putting on a belt when the player is not wearing pants:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 18/132 ! Instead of putting on a shirt when the player is wearing a jacket:
!   === equally specific with ===
! Rule 19/132 ! Instead of putting on pants when the player is wearing shoes:
!   === equally specific with ===
! Rule 20/132 ! Instead of putting on underwear when the player is wearing pants:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 21/132 ! Instead of putting on socks when the player is wearing work shoes or the player is wearing the pair of running shoes:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 22/132 ! Instead of entering the bathtub when the player is wearing anything tub-relevant:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 23/132 ! Instead of taking off the jacket when the player is not in the house:
!   === equally specific with ===
! Rule 24/132 ! Instead of taking off the hat when the player is not in the house:
!   === equally specific with ===
! Rule 25/132 ! Instead of taking off the belt when the player is not in the house:
!   === equally specific with ===
! Rule 26/132 ! Instead of entering the spaceship when a mouse is enclosed by the player:
!   === equally specific with ===
! Rule 27/132 ! Instead of dropping the wasps' nest when the player does not have the wasps' nest:
!   === equally specific with ===
! Rule 28/132 ! Instead of taking the wasps' nest when the player is not in the Woods:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 29/132 ! Instead of taking off a shirt when the player is wearing a jacket:
!   === equally specific with ===
! Rule 30/132 ! Instead of taking off pants when the player is wearing shoes:
!   === equally specific with ===
! Rule 31/132 ! Instead of taking off pants when the player is wearing a belt:
!   === equally specific with ===
! Rule 32/132 ! Instead of taking off underwear when the player is wearing pants:
!   === equally specific with ===
! Rule 33/132 ! Instead of taking the toast button when the toaster is done:
!   === equally specific with ===
! Rule 34/132 ! Instead of wearing the running shoes when the work shoes are worn:
!   === equally specific with ===
! Rule 35/132 ! Instead of wearing the work shoes when the running shoes are worn:
!   === equally specific with ===
! Rule 36/132 ! Instead of entering the bathtub when the water level is less than 5:
!   === equally specific with ===
! Rule 37/132 ! Instead of entering the bathtub when the piranhas are in the bathtub:
!   === equally specific with ===
! Rule 38/132 ! Instead of taking the stream when the player has the bucket:
!   === equally specific with ===
! Rule 39/132 ! Instead of dropping the fish when the fish is ready to be thrown:
!   === equally specific with ===
! Rule 40/132 ! Instead of taking the pie when the player is in the time machine:
!   === equally specific with ===
! Rule 41/132 ! Instead of eating the pie when the pie is in the inner safe:
!   === equally specific with ===
! Rule 42/132 ! Instead of eating the pie when the pie is aged:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 43/132 ! Instead of taking off socks when the player is wearing work shoes or the player is wearing the pair of running shoes:
!   >>> III.4.1 - Action/How/What Happens >>>
! Rule 44/132 ! Instead of opening or closing the medicine cabinet when the player is not on the stool:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 45/132 ! Instead of taking or pulling the fork when the fork is stuck:
!   === equally specific with ===
! Rule 46/132 ! Instead of taking or touching the candle when the player is wearing a dollop of hair gel:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 47/132 ! Instead of taking something when the number of entries in the multiple object list is greater than 1:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 48/132 ! Instead of going somewhere when the player is wearing the moose head and the moose head is not accustomed:
!   >>> I - Number of aspects constrained >>>
! Rule 49/132 ! Instead of going through a closed door:
!   >>> III.2.1 - Action/Where/Going In Exotic Ways >>>
! Rule 50/132 ! Instead of inserting the earbuds into the iPod:
!   === equally specific with ===
! Rule 51/132 ! Instead of inserting the bucket into the bathtub:
!   === equally specific with ===
! Rule 52/132 ! Instead of inserting the bucket into the rocket fuel:
!   === equally specific with ===
! Rule 53/132 ! Instead of inserting the bucket into the vat:
!   === equally specific with ===
! Rule 54/132 ! Instead of inserting bucketful of rocket fuel into the spaceship:
!   === equally specific with ===
! Rule 55/132 ! Instead of inserting the bucket into the stream:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 56/132 ! Instead of inserting something into the toaster:
!   === equally specific with ===
! Rule 57/132 ! Instead of inserting something into the vat:
!   === equally specific with ===
! Rule 58/132 ! Instead of inserting something into the cage:
!   === equally specific with ===
! Rule 59/132 ! Instead of inserting something into the coin slot:
!   === equally specific with ===
! Rule 60/132 ! Instead of inserting something into the middle safe:
!   === equally specific with ===
! Rule 61/132 ! Instead of inserting something into the time safe:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 62/132 ! Instead of answering the computer that ~confirm~:
!   === equally specific with ===
! Rule 63/132 ! Instead of answering the computer that ~SUIT UP~:
!   === equally specific with ===
! Rule 64/132 ! Instead of answering the computer that ~CANCEL~:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 65/132 ! Instead of unlocking the car with something:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 66/132 ! Instead of turning on the spigot:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 67/132 ! Instead of dumping the bucket:
!   === equally specific with ===
! Rule 68/132 ! Instead of using the ladder:
!   === equally specific with ===
! Rule 69/132 ! Instead of using the iPod:
!   === equally specific with ===
! Rule 70/132 ! Instead of using the stool:
!   === equally specific with ===
! Rule 71/132 ! Instead of using the car:
!   === equally specific with ===
! Rule 72/132 ! Instead of using the hair gel:
!   === equally specific with ===
! Rule 73/132 ! Instead of entering the bed:
!   === equally specific with ===
! Rule 74/132 ! Instead of wearing the iPod:
!   === equally specific with ===
! Rule 75/132 ! Instead of climbing the staircase:
!   === equally specific with ===
! Rule 76/132 ! Instead of opening the bottom drawer:
!   === equally specific with ===
! Rule 77/132 ! Instead of taking the cereal crumbs:
!   === equally specific with ===
! Rule 78/132 ! Instead of taking the tupperware:
!   === equally specific with ===
! Rule 79/132 ! Instead of eating the loaf:
!   === equally specific with ===
! Rule 80/132 ! Instead of opening the bread:
!   === equally specific with ===
! Rule 81/132 ! Instead of switching on the toaster:
!   === equally specific with ===
! Rule 82/132 ! Instead of pushing the TOAST button:
!   === equally specific with ===
! Rule 83/132 ! Instead of climbing the stool:
!   === equally specific with ===
! Rule 84/132 ! Instead of untieing the work shoes:
!   === equally specific with ===
! Rule 85/132 ! Instead of untieing the running shoes:
!   === equally specific with ===
! Rule 86/132 ! Instead of untieing the Toyota key:
!   === equally specific with ===
! Rule 87/132 ! Instead of wearing the left running shoe:
!   === equally specific with ===
! Rule 88/132 ! Instead of wearing the right running shoe:
!   === equally specific with ===
! Rule 89/132 ! Instead of examining the closet door:
!   === equally specific with ===
! Rule 90/132 ! Instead of opening the chest:
!   === equally specific with ===
! Rule 91/132 ! Instead of taking off the dollop of hair gel:
!   === equally specific with ===
! Rule 92/132 ! Instead of wearing the can of hair gel:
!   === equally specific with ===
! Rule 93/132 ! Instead of switching on the faucet:
!   === equally specific with ===
! Rule 94/132 ! Instead of switching off the faucet:
!   === equally specific with ===
! Rule 95/132 ! Instead of turning the faucet:
!   === equally specific with ===
! Rule 96/132 ! Instead of opening the vat:
!   === equally specific with ===
! Rule 97/132 ! Instead of taking the key cabinet:
!   === equally specific with ===
! Rule 98/132 ! Instead of flying the spaceship:
!   === equally specific with ===
! Rule 99/132 ! Instead of pushing the ON button:
!   === equally specific with ===
! Rule 100/132 ! Instead of pushing the LAUNCH button:
!   === equally specific with ===
! Rule 101/132 ! Instead of entering the tracks:
!   === equally specific with ===
! Rule 102/132 ! Instead of pushing the CALL TRAIN button:
!   === equally specific with ===
! Rule 103/132 ! Instead of lacing the pair of running shoes:
!   === equally specific with ===
! Rule 104/132 ! Instead of taking the snake:
!   === equally specific with ===
! Rule 105/132 ! Instead of taking the candle:
!   === equally specific with ===
! Rule 106/132 ! Instead of blowing out the candle:
!   === equally specific with ===
! Rule 107/132 ! Instead of entering the stream:
!   === equally specific with ===
! Rule 108/132 ! Instead of dropping the wasps' nest:
!   === equally specific with ===
! Rule 109/132 ! Instead of wearing the moose head:
!   === equally specific with ===
! Rule 110/132 ! Instead of attacking the bear:
!   === equally specific with ===
! Rule 111/132 ! Instead of drinking the soylent:
!   === equally specific with ===
! Rule 112/132 ! Instead of cutting the super glue:
!   === equally specific with ===
! Rule 113/132 ! Instead of eating the super glue:
!   === equally specific with ===
! Rule 114/132 ! Instead of climbing the ladder:
!   === equally specific with ===
! Rule 115/132 ! Instead of pushing the button:
!   === equally specific with ===
! Rule 116/132 ! Instead of touching the wire:
!   === equally specific with ===
! Rule 117/132 ! Instead of attacking the black car:
!   === equally specific with ===
! Rule 118/132 ! Instead of entering the clothes dryer:
!   === equally specific with ===
! Rule 119/132 ! Instead of opening the front door:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 120/132 ! Instead of opening something portable:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 121/132 ! Instead of taking a liquid:
!   === equally specific with ===
! Rule 122/132 ! Instead of shaking a tree:
!   === equally specific with ===
! Rule 123/132 ! Instead of climbing a tree ( called the apparatus ):
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 124/132 ! Instead of listening when the player is in the woods and the nest is not found:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 125/132 ! Instead of listening when the iPod is playing:
!   === equally specific with ===
! Rule 126/132 ! Instead of going when the player is wearing the pair of running shoes:
!   >>> I - Number of aspects constrained >>>
! Rule 127/132 ! Instead of suiting-up:
!   === equally specific with ===
! Rule 128/132 ! Instead of confirming:
!   === equally specific with ===
! Rule 129/132 ! Instead of canceling:
!   === equally specific with ===
! Rule 130/132 ! Instead of going-up:
!   === equally specific with ===
! Rule 131/132 ! Instead of going-down:
! --- now the last-placed rules ---
! Rule 132/132 ! Instead of going nowhere from the Woods ( this is the too many trees rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Instead of going from the house to a room which is not in the house when the jacket is not worn:
[ R_829 ;
    if ((((action ==##Go) &&  (actor==player) && (TestRegionalContainment((MStack-->MstVON(20007,0)),I269_house)) && (((MStack-->MstVON(20007,1)) ofclass K1_room) && (~~((TestRegionalContainment((MStack-->MstVON(20007,1)),I269_house))))) && (self=actor,true) && (((~~(((Adj_0_t1_v10(I154_jacket)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_829, 829);
    ! [2: say ~You step outside, but you shiver and decide you need a jacket. You step back inside.~]
    say__p=1;! [3: ~You step outside, but you shiver and decide you need a jacket. You step back inside.~]
    ParaContent(); print "You step outside, but you shiver and decide you need a jacket. You step back inside."; new_line; .L_Say26; .L_SayX26;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_829, 829, 'action');
    rfalse;
];
! No specific request
! Instead of going from the house to a room which is not in the house when the hat is not worn:
[ R_831 ;
    if ((((action ==##Go) &&  (actor==player) && (TestRegionalContainment((MStack-->MstVON(20007,0)),I269_house)) && (((MStack-->MstVON(20007,1)) ofclass K1_room) && (~~((TestRegionalContainment((MStack-->MstVON(20007,1)),I269_house))))) && (self=actor,true) && (((~~(((Adj_0_t1_v10(I153_hat)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_831, 831);
    ! [2: say ~You step outside, but you shiver and decide you need a hat. You step back inside.~]
    say__p=1;! [3: ~You step outside, but you shiver and decide you need a hat. You step back inside.~]
    ParaContent(); print "You step outside, but you shiver and decide you need a hat. You step back inside."; new_line; .L_Say27; .L_SayX27;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_831, 831, 'action');
    rfalse;
];
! No specific request
! Instead of going from the house to a room which is not in the house when the belt is not worn:
[ R_833 ;
    if ((((action ==##Go) &&  (actor==player) && (TestRegionalContainment((MStack-->MstVON(20007,0)),I269_house)) && (((MStack-->MstVON(20007,1)) ofclass K1_room) && (~~((TestRegionalContainment((MStack-->MstVON(20007,1)),I269_house))))) && (self=actor,true) && (((~~(((Adj_0_t1_v10(I152_belt)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_833, 833);
    ! [2: say ~You step outside for a moment, then look at your lack of pants and a belt and decide you should go out looking presentable.~]
    say__p=1;! [3: ~You step outside for a moment, then look at your lack of pants and a belt and decide you should go out looking presentable.~]
    ParaContent(); print "You step outside for a moment, then look at your lack of pants and a belt and decide you should go out looking presentable."; new_line; .L_Say28; .L_SayX28;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_833, 833, 'action');
    rfalse;
];
! No specific request
! Instead of opening the spaceship in the air:
[ R_943 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I288_spaceship) && (true)) && ((real_location == I294_air) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_943, 943);
    ! [2: say ~The doors of the spaceship don't open while you're in the atmosphere.~]
    say__p=1;! [3: ~The doors of the spaceship don't open while you're in the atmosphere.~]
    ParaContent(); print "The doors of the spaceship don't open while you're in the atmosphere."; new_line; .L_Say29; .L_SayX29;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_943, 943, 'action');
    rfalse;
];
! No specific request
! Instead of opening the spaceship in outer space:
[ R_944 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I288_spaceship) && (true)) && ((real_location == I295_outer_space) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_944, 944);
    ! [2: if the player is wearing the spacesuit and the player is wearing the helmet]
    if ((((player == WearerOf(I292_spacesuit)))) && (((player == WearerOf(I293_helmet)))))
    {! [3: continue the action]
        rfalse;
        } else {
        ! [4: say ~Space is pretty and all, but you wouldn't want to go out there without wearing a helmet and a spacesuit.~]
        say__p=1;! [5: ~Space is pretty and all, but you wouldn't want to go out there without wearing a helmet and a spacesuit.~]
        ParaContent(); print "Space is pretty and all, but you wouldn't want to go out there without wearing a helmet and a spacesuit."; new_line; .L_Say30; .L_SayX30;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_944, 944, 'action');
        rfalse;
];
! No specific request
! Instead of taking off the spacesuit in outer space:
[ R_952 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun == I292_spacesuit) && (true)) && ((real_location == I295_outer_space) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_952, 952);
    ! [2: say ~That seems like an extraordinarily dumb thing to do.~]
    say__p=1;! [3: ~That seems like an extraordinarily dumb thing to do.~]
    ParaContent(); print "That seems like an extraordinarily dumb thing to do."; new_line; .L_Say31; .L_SayX31;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_952, 952, 'action');
    rfalse;
];
! No specific request
! Instead of taking off the helmet in outer space:
[ R_953 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun == I293_helmet) && (true)) && ((real_location == I295_outer_space) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_953, 953);
    ! [2: if the player is in the spaceship]
    if (((I288_spaceship == ContainerOf(player))))
    {! [3: say ~You can't reach onto your head while wearing this bulky spacesuit in this confining ship.~]
        say__p=1;! [4: ~You can't reach onto your head while wearing this bulky spacesuit in this confining ship.~]
        ParaContent(); print "You can't reach onto your head while wearing this bulky spacesuit in this confining ship."; new_line; .L_Say32; .L_SayX32;} else {
        ! [5: say ~You see space, with your own eyes. It's stunningly beautiful. Then your head explodes.~]
        say__p=1;! [6: ~You see space, with your own eyes. It's stunningly beautiful. Then your head explodes.~]
        ParaContent(); print "You see space, with your own eyes. It's stunningly beautiful. Then your head explodes."; new_line; .L_Say33; .L_SayX33;! [7: conclude with 29]
        (PHR_827_r2 (29));
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_953, 953, 'action');
        rfalse;
];
! No specific request
! Instead of going up from the Woods:
[ R_986 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == I59_up) && (true)) && (((MStack-->MstVON(20007,0)) == I332_woods) && ((MStack-->MstVON(20007,0)) ofclass K1_room)) && ((MStack-->MstVON(20007,1)) ~= nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_986, 986);
    ! [2: if the player is in the car]
    if (((I302_blue_car == ContainerOf(player))))
    {! [3: say ~This isn't a flying car, unfortunately.~]
        say__p=1;! [4: ~This isn't a flying car, unfortunately.~]
        ParaContent(); print "This isn't a flying car, unfortunately."; new_line; .L_Say34; .L_SayX34;} else {
        ! [5: say ~There are many trees you could climb. You'll have to name one specifically.~]
        say__p=1;! [6: ~There are many trees you could climb. You'll have to name one specifically.~]
        ParaContent(); print "There are many trees you could climb. You'll have to name one specifically."; new_line; .L_Say35; .L_SayX35;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_986, 986, 'action');
        rfalse;
];
! No specific request
! Instead of going down from the Woods:
[ R_987 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == I60_down) && (true)) && (((MStack-->MstVON(20007,0)) == I332_woods) && ((MStack-->MstVON(20007,0)) ofclass K1_room)) && ((MStack-->MstVON(20007,1)) ~= nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_987, 987);
    ! [2: say ~There's nothing but dirt in that direction.~]
    say__p=1;! [3: ~There's nothing but dirt in that direction.~]
    ParaContent(); print "There's nothing but dirt in that direction."; new_line; .L_Say36; .L_SayX36;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_987, 987, 'action');
    rfalse;
];
! No specific request
! Instead of going up from the Woods:
[ R_994 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == I59_up) && (true)) && (((MStack-->MstVON(20007,0)) == I332_woods) && ((MStack-->MstVON(20007,0)) ofclass K1_room)) && ((MStack-->MstVON(20007,1)) ~= nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_994, 994);
    ! [2: say ~There are many trees you could climb. You'll have to name one specifically.~]
    say__p=1;! [3: ~There are many trees you could climb. You'll have to name one specifically.~]
    ParaContent(); print "There are many trees you could climb. You'll have to name one specifically."; new_line; .L_Say37; .L_SayX37;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_994, 994, 'action');
    rfalse;
];
! No specific request
! Instead of going outside from the Hunting Lodge:
[ R_998 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == out_obj) && (true)) && (((MStack-->MstVON(20007,0)) == I273_hunting_lodge) && ((MStack-->MstVON(20007,0)) ofclass K1_room)) && ((MStack-->MstVON(20007,1)) ~= nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_998, 998);
    ! [2: try going north]
    TryAction(0, player, ##Go, I51_north, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_998, 998, 'action');
    rfalse;
];
! No specific request
! Instead of going from the kitchen when the button is active:
[ R_885 ;
    if ((((action ==##Go) &&  (actor==player) && (((MStack-->MstVON(20007,0)) == I204_kitchen) && ((MStack-->MstVON(20007,0)) ofclass K1_room)) && ((MStack-->MstVON(20007,1)) ~= nothing) && (self=actor,true) && ((((Adj_25_t1_v10(I216_play_button)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_885, 885);
    ! [2: say ~You can't leave the toaster unattended - what if the toast gets burnt?!~]
    say__p=1;! [3: ~You can't leave the toaster unattended - what if the toast gets burnt?!~]
    ParaContent(); print "You can't leave the toaster unattended - what if the toast gets burnt?!"; new_line; .L_Say38; .L_SayX38;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_885, 885, 'action');
    rfalse;
];
! No specific request
! Instead of going to the hunting grounds when the player is wearing the moose head and it is hunting season and the moose head is accustomed:
[ R_1002 ;
    if ((((action ==##Go) &&  (actor==player) && (((MStack-->MstVON(20007,1)) == I347_hunting_grounds) && (true)) && (self=actor,true) && ((((player == WearerOf(I349_moose_head)))) && ((((PHR_999_r3 ()))) && ((((Adj_114_t1_v10(I349_moose_head)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1002, 1002);
    ! [2: say ~You go into the hunting grounds, foolishly forgetting that there is a moose head atop your own. The hunters waste no time before shooting you... at least you got a quick death.~]
    say__p=1;! [3: ~You go into the hunting grounds, foolishly forgetting that there is a moose head atop your own. The hunters waste no time before shooting you... at least you got a quick death.~]
    ParaContent(); print "You go into the hunting grounds, foolishly forgetting that there is a moose head atop your own. The hunters waste no time before shooting you... at least you got a quick death."; new_line; .L_Say39; .L_SayX39;! [4: conclude with 36]
    (PHR_827_r2 (36));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1002, 1002, 'action');
    rfalse;
];
! No specific request
! Instead of going to the abandoned train station when the player is in the car:
[ R_960 ;
    if ((((action ==##Go) &&  (actor==player) && (((MStack-->MstVON(20007,1)) == I303_abandoned_train_station) && (true)) && (self=actor,true) && (((I302_blue_car == ContainerOf(player))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_960, 960);
    ! [2: if the train is not ready]
    if (((~~(((Adj_108_t1_v10(I303_abandoned_train_station)))))))
    {! [3: say ~You drive across the tracks into the train station turnaround. This is the end of the road.~]
        say__p=1;! [4: ~You drive across the tracks into the train station turnaround. This is the end of the road.~]
        ParaContent(); print "You drive across the tracks into the train station turnaround. This is the end of the road."; new_line; .L_Say40; .L_SayX40;! [5: continue the action]
        rfalse;
        } else {
        ! [6: if the car is not ready]
        if (((~~(((Adj_108_t1_v10(I302_blue_car)))))))
        {! [7: say ~The boom gates are closing, it looks like a train is coming. You instinctively flinch and prevent yourself from driving toward the train station. After a moment of steeling your nerves, though, you think you could try again if you wanted.~]
            say__p=1;! [8: ~The boom gates are closing, it looks like a train is coming. You instinctively flinch and prevent yourself from driving toward the train station. After a moment of steeling your nerves, though, you think you could try again if you wanted.~]
            ParaContent(); print "The boom gates are closing, it looks like a train is coming. You instinctively flinch and prevent yourself from driving toward the train station. After a moment of steeling your nerves, though, you think you could try again if you wanted."; new_line; .L_Say41; .L_SayX41;! [9: now the car is ready]
            (Adj_108_t2_v10(I302_blue_car));
            } else {
            ! [10: say ~The boom gates are closing, it looks like a train is coming. You drive around them and toward the train station. As you go past them, a train comes and runs you over. That was really dumb.~]
            say__p=1;! [11: ~The boom gates are closing, it looks like a train is coming. You drive around them and toward the train station. As you go past them, a train comes and runs you over. That was really dumb.~]
            ParaContent(); print "The boom gates are closing, it looks like a train is coming. You drive around them and toward the train station. As you go past them, a train comes and runs you over. That was really dumb."; new_line; .L_Say42; .L_SayX42;! [12: conclude with 39]
            (PHR_827_r2 (39));
            }
            }
            RulebookFails(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_960, 960, 'action');
            rfalse;
];
! No specific request
! Instead of going to the woods when not the woods are accessible:
[ R_1005 ;
    if ((((action ==##Go) &&  (actor==player) && (((MStack-->MstVON(20007,1)) == I332_woods) && (true)) && (self=actor,true) && ((~~((((PHR_1003_r4 ()))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1005, 1005);
    ! [2: if the bear is in the woods]
    if (((I332_woods == ContainerOf(I353_grizzly_bear))))
    {! [3: say ~You're too scared of the bear to go there. You might be able to distract the bear with something it likes eating, though.~]
        say__p=1;! [4: ~You're too scared of the bear to go there. You might be able to distract the bear with something it likes eating, though.~]
        ParaContent(); print "You're too scared of the bear to go there. You might be able to distract the bear with something it likes eating, though."; new_line; .L_Say43; .L_SayX43;} else {
        ! [5: say ~As you walk into the woods, a large grizzly bear shows up, baring (bear-ing?) its teeth at you. You hastily take three steps back.~]
        say__p=1;! [6: ~As you walk into the woods, a large grizzly bear shows up, baring (bear-ing?) its teeth at you. You hastily take three steps back.~]
        ParaContent(); print "As you walk into the woods, a large grizzly bear shows up, baring (bear-ing?) its teeth at you. You hastily take three steps back."; new_line; .L_Say44; .L_SayX44;! [7: say ~The bear seems to be guarding the entrance to the woods. Seems like it would be awfully difficult to get through here unless the bear were somehow distracted. With food, maybe?~]
        say__p=1;! [8: ~The bear seems to be guarding the entrance to the woods. Seems like it would be awfully difficult to get through here unless the bear were somehow distracted. With food, maybe?~]
        ParaContent(); print "The bear seems to be guarding the entrance to the woods. Seems like it would be awfully difficult to get through here unless the bear were somehow distracted. With food, maybe?"; new_line; .L_Say45; .L_SayX45;! [9: now the bear is in the woods]
        MoveObject(I353_grizzly_bear,I332_woods);
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1005, 1005, 'action');
        rfalse;
];
! No specific request
! Instead of going to the house when the player is in the car:
[ R_957 ;
    if ((((action ==##Go) &&  (actor==player) && (TestRegionalContainment((MStack-->MstVON(20007,1)),I269_house)) && (self=actor,true) && (((I302_blue_car == ContainerOf(player))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_957, 957);
    ! [2: say ~You can't drive indoors, that would be a safety hazard.~]
    say__p=1;! [3: ~You can't drive indoors, that would be a safety hazard.~]
    ParaContent(); print "You can't drive indoors, that would be a safety hazard."; new_line; .L_Say46; .L_SayX46;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_957, 957, 'action');
    rfalse;
];
! No specific request
! Instead of putting on a belt when the player is not wearing pants:
[ R_843 ;
    if ((((action ==##PutOn) &&  (actor==player) && ((second == I152_belt) && (true)) && (self=actor,true) && (((~~((player == WearerOf(I147_pants))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_843, 843);
    ! [2: say ~Your belt goes over pants.~]
    say__p=1;! [3: ~Your belt goes over pants.~]
    ParaContent(); print "Your belt goes over pants."; new_line; .L_Say47; .L_SayX47;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_843, 843, 'action');
    rfalse;
];
! No specific request
! Instead of putting on a shirt when the player is wearing a jacket:
[ R_841 ;
    if ((((action ==##PutOn) &&  (actor==player) && ((second == I150_shirt) && (true)) && (self=actor,true) && (((player == WearerOf(I154_jacket))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_841, 841);
    ! [2: say ~You need to take your jacket off first!~]
    say__p=1;! [3: ~You need to take your jacket off first!~]
    ParaContent(); print "You need to take your jacket off first!"; new_line; .L_Say48; .L_SayX48;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_841, 841, 'action');
    rfalse;
];
! No specific request
! Instead of putting on pants when the player is wearing shoes:
[ R_842 ;
    if ((((action ==##PutOn) &&  (actor==player) && ((second == I147_pants) && (true)) && (self=actor,true) && (((player == WearerOf(I151_work_shoes))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_842, 842);
    ! [2: say ~You need to take your shoes off first!~]
    say__p=1;! [3: ~You need to take your shoes off first!~]
    ParaContent(); print "You need to take your shoes off first!"; new_line; .L_Say49; .L_SayX49;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_842, 842, 'action');
    rfalse;
];
! No specific request
! Instead of putting on underwear when the player is wearing pants:
[ R_844 ;
    if ((((action ==##PutOn) &&  (actor==player) && ((second == I148_underwear) && (true)) && (self=actor,true) && (((player == WearerOf(I147_pants))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_844, 844);
    ! [2: say ~You need to take your pants off first!~]
    say__p=1;! [3: ~You need to take your pants off first!~]
    ParaContent(); print "You need to take your pants off first!"; new_line; .L_Say50; .L_SayX50;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_844, 844, 'action');
    rfalse;
];
! No specific request
! Instead of putting on socks when the player is wearing work shoes or the player is wearing the pair of running shoes:
[ R_840 ;
    if ((((action ==##PutOn) &&  (actor==player) && ((second == I149_socks) && (true)) && (self=actor,true) && ((((player == WearerOf(I151_work_shoes)))) || (((player == WearerOf(I229_pair_of_running_shoes)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_840, 840);
    ! [2: say ~You need to take your shoes off first!~]
    say__p=1;! [3: ~You need to take your shoes off first!~]
    ParaContent(); print "You need to take your shoes off first!"; new_line; .L_Say51; .L_SayX51;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_840, 840, 'action');
    rfalse;
];
! No specific request
! Instead of entering the bathtub when the player is wearing anything tub-relevant:
[ R_921 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I259_bathtub) && (true)) && (self=actor,true) && ((((Prop_1()))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_921, 921);
    ! [2: say ~You are a person of few principles, but one of those principles is never to enter a bathtub while wearing anything. (You're wearing [a list of things worn by the player].)~]
    say__p=1;! [3: ~You are a person of few principles, but one of those principles is never to enter a bathtub while wearing anything. (You're wearing ~]
    ParaContent(); print "You are a person of few principles, but one of those principles is never to enter a bathtub while wearing anything. (You're wearing ";! [4: a list of things worn by the player]
    ParaContent(); objectloop(tmp_0 ofclass Object)
    			if (((tmp_0 ofclass K2_thing) && (player == WearerOf(tmp_0))))
    				give tmp_0 workflag2;
    			else
    				give tmp_0 ~workflag2;
    		WriteListOfMarkedObjects(ENGLISH_BIT);! [5: ~.)~]
    ParaContent(); print ".)"; new_line; .L_Say52; .L_SayX52;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_921, 921, 'action');
    rfalse;
];
! No specific request
! Instead of taking off the jacket when the player is not in the house:
[ R_830 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun == I154_jacket) && (true)) && (self=actor,true) && (((~~((TestRegionalContainment(player,I269_house))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_830, 830);
    ! [2: say ~It's cold out here. You'd rather keep that on.~]
    say__p=1;! [3: ~It's cold out here. You'd rather keep that on.~]
    ParaContent(); print "It's cold out here. You'd rather keep that on."; new_line; .L_Say53; .L_SayX53;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_830, 830, 'action');
    rfalse;
];
! No specific request
! Instead of taking off the hat when the player is not in the house:
[ R_832 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun == I153_hat) && (true)) && (self=actor,true) && (((~~((TestRegionalContainment(player,I269_house))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_832, 832);
    ! [2: say ~It's cold out here. You'd rather keep that on.~]
    say__p=1;! [3: ~It's cold out here. You'd rather keep that on.~]
    ParaContent(); print "It's cold out here. You'd rather keep that on."; new_line; .L_Say54; .L_SayX54;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_832, 832, 'action');
    rfalse;
];
! No specific request
! Instead of taking off the belt when the player is not in the house:
[ R_834 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun == I152_belt) && (true)) && (self=actor,true) && (((~~((TestRegionalContainment(player,I269_house))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_834, 834);
    ! [2: say ~You'd rather stay presentable out here.~]
    say__p=1;! [3: ~You'd rather stay presentable out here.~]
    ParaContent(); print "You'd rather stay presentable out here."; new_line; .L_Say55; .L_SayX55;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_834, 834, 'action');
    rfalse;
];
! No specific request
! Instead of entering the spaceship when a mouse is enclosed by the player:
[ R_935 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I288_spaceship) && (true)) && (self=actor,true) && ((((Prop_2()))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_935, 935);
    ! [2: say ~This space center has a strict no-mice policy. You'll have to put down any mice you are carrying before you get in.~]
    say__p=1;! [3: ~This space center has a strict no-mice policy. You'll have to put down any mice you are carrying before you get in.~]
    ParaContent(); print "This space center has a strict no-mice policy. You'll have to put down any mice you are carrying before you get in."; new_line; .L_Say56; .L_SayX56;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_935, 935, 'action');
    rfalse;
];
! No specific request
! Instead of dropping the wasps' nest when the player does not have the wasps' nest:
[ R_989 ;
    if ((((action ==##Drop) &&  (actor==player) && ((noun == I337_wasps__nest) && (true)) && (self=actor,true) && (((~~((player == OwnerOf(I337_wasps__nest))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_989, 989);
    ! [2: say ~You can only throw something you already have.~]
    say__p=1;! [3: ~You can only throw something you already have.~]
    ParaContent(); print "You can only throw something you already have."; new_line; .L_Say57; .L_SayX57;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_989, 989, 'action');
    rfalse;
];
! No specific request
! Instead of taking the wasps' nest when the player is not in the Woods:
[ R_990 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I337_wasps__nest) && (true)) && (self=actor,true) && (((~~((I332_woods == ContainerOf(player))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_990, 990);
    ! [2: say ~Try as you might, you can't reach the nest. But you think you could shake the tree to make it drop.~]
    say__p=1;! [3: ~Try as you might, you can't reach the nest. But you think you could shake the tree to make it drop.~]
    ParaContent(); print "Try as you might, you can't reach the nest. But you think you could shake the tree to make it drop."; new_line; .L_Say58; .L_SayX58;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_990, 990, 'action');
    rfalse;
];
! No specific request
! Instead of taking off a shirt when the player is wearing a jacket:
[ R_836 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun == I150_shirt) && (true)) && (self=actor,true) && (((player == WearerOf(I154_jacket))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_836, 836);
    ! [2: say ~You need to take your jacket off first!~]
    say__p=1;! [3: ~You need to take your jacket off first!~]
    ParaContent(); print "You need to take your jacket off first!"; new_line; .L_Say59; .L_SayX59;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_836, 836, 'action');
    rfalse;
];
! No specific request
! Instead of taking off pants when the player is wearing shoes:
[ R_837 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun == I147_pants) && (true)) && (self=actor,true) && (((player == WearerOf(I151_work_shoes))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_837, 837);
    ! [2: say ~You need to take your shoes off first!~]
    say__p=1;! [3: ~You need to take your shoes off first!~]
    ParaContent(); print "You need to take your shoes off first!"; new_line; .L_Say60; .L_SayX60;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_837, 837, 'action');
    rfalse;
];
! No specific request
! Instead of taking off pants when the player is wearing a belt:
[ R_838 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun == I147_pants) && (true)) && (self=actor,true) && (((player == WearerOf(I152_belt))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_838, 838);
    ! [2: say ~You need to take your belt off first!~]
    say__p=1;! [3: ~You need to take your belt off first!~]
    ParaContent(); print "You need to take your belt off first!"; new_line; .L_Say61; .L_SayX61;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_838, 838, 'action');
    rfalse;
];
! No specific request
! Instead of taking off underwear when the player is wearing pants:
[ R_839 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun == I148_underwear) && (true)) && (self=actor,true) && (((player == WearerOf(I147_pants))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_839, 839);
    ! [2: say ~You need to take your pants off first!~]
    say__p=1;! [3: ~You need to take your pants off first!~]
    ParaContent(); print "You need to take your pants off first!"; new_line; .L_Say62; .L_SayX62;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_839, 839, 'action');
    rfalse;
];
! No specific request
! Instead of taking the toast button when the toaster is done:
[ R_894 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I217_toast_button) && (true)) && (self=actor,true) && ((((Adj_93_t1_v10(I205_toaster)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_894, 894);
    ! [2: say ~You can't reach into the thin toast hole. Maybe you could stick something in instead?~]
    say__p=1;! [3: ~You can't reach into the thin toast hole. Maybe you could stick something in instead?~]
    ParaContent(); print "You can't reach into the thin toast hole. Maybe you could stick something in instead?"; new_line; .L_Say63; .L_SayX63;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_894, 894, 'action');
    rfalse;
];
! No specific request
! Instead of wearing the running shoes when the work shoes are worn:
[ R_898 ;
    if ((((action ==##Wear) &&  (actor==player) && ((noun == I229_pair_of_running_shoes) && (true)) && (self=actor,true) && ((((Adj_0_t1_v10(I151_work_shoes)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_898, 898);
    ! [2: say ~You should probably take your work shoes off first.~]
    say__p=1;! [3: ~You should probably take your work shoes off first.~]
    ParaContent(); print "You should probably take your work shoes off first."; new_line; .L_Say64; .L_SayX64;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_898, 898, 'action');
    rfalse;
];
! No specific request
! Instead of wearing the work shoes when the running shoes are worn:
[ R_899 ;
    if ((((action ==##Wear) &&  (actor==player) && ((noun == I151_work_shoes) && (true)) && (self=actor,true) && ((((Adj_0_t1_v10(I229_pair_of_running_shoes)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_899, 899);
    ! [2: say ~You should probably take off the running shoes first.~]
    say__p=1;! [3: ~You should probably take off the running shoes first.~]
    ParaContent(); print "You should probably take off the running shoes first."; new_line; .L_Say65; .L_SayX65;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_899, 899, 'action');
    rfalse;
];
! No specific request
! Instead of entering the bathtub when the water level is less than 5:
[ R_916 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I259_bathtub) && (true)) && (self=actor,true) && ((((Global_Vars-->11) < 5)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_916, 916);
    ! [2: say ~You can't enter that tub, it's not even half full!~]
    say__p=1;! [3: ~You can't enter that tub, it's not even half full!~]
    ParaContent(); print "You can't enter that tub, it's not even half full!"; new_line; .L_Say66; .L_SayX66;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_916, 916, 'action');
    rfalse;
];
! No specific request
! Instead of entering the bathtub when the piranhas are in the bathtub:
[ R_922 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I259_bathtub) && (true)) && (self=actor,true) && (((I259_bathtub == ContainerOf(I328_swimming_piranhas))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_922, 922);
    ! [2: say ~You get in the tub. The warm water feels wonderful for a few seconds, and then the piranhas start to attack. They eat your feet, your legs, and... you can imagine the rest.~]
    say__p=1;! [3: ~You get in the tub. The warm water feels wonderful for a few seconds, and then the piranhas start to attack. They eat your feet, your legs, and... you can imagine the rest.~]
    ParaContent(); print "You get in the tub. The warm water feels wonderful for a few seconds, and then the piranhas start to attack. They eat your feet, your legs, and... you can imagine the rest."; new_line; .L_Say67; .L_SayX67;! [4: conclude with 32]
    (PHR_827_r2 (32));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_922, 922, 'action');
    rfalse;
];
! No specific request
! Instead of taking the stream when the player has the bucket:
[ R_984 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I327_stream) && (true)) && (self=actor,true) && (((player == OwnerOf(I284_bucket))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_984, 984);
    ! [2: try inserting the bucket into the stream]
    TryAction(0, player, ##Insert, I284_bucket, I327_stream);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_984, 984, 'action');
    rfalse;
];
! No specific request
! Instead of dropping the fish when the fish is ready to be thrown:
[ R_1008 ;
    if ((((action ==##Drop) &&  (actor==player) && ((noun == I218_fish) && (true)) && (self=actor,true) && (((PHR_1007_r5 ())))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1008, 1008);
    ! [2: say ~You throw the fish to the West. The bear looks at the fish curiously.~]
    say__p=1;! [3: ~You throw the fish to the West. The bear looks at the fish curiously.~]
    ParaContent(); print "You throw the fish to the West. The bear looks at the fish curiously."; new_line; .L_Say68; .L_SayX68;! [4: now the fish is nowhere]
    RemoveFromPlay(I218_fish);;
    ! [5: the bear eats the fish in one turn from now]
    SetTimedEvent(R_1009, 1+1, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1008, 1008, 'action');
    rfalse;
];
! No specific request
! Instead of taking the pie when the player is in the time machine:
[ R_1029 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I219_pie) && (true)) && (self=actor,true) && (((I364_time_machine == ContainerOf(player))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1029, 1029);
    ! [2: say ~You can't reach the time safe from in the time machine. You'll have to get out first.~]
    say__p=1;! [3: ~You can't reach the time safe from in the time machine. You'll have to get out first.~]
    ParaContent(); print "You can't reach the time safe from in the time machine. You'll have to get out first."; new_line; .L_Say69; .L_SayX69;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1029, 1029, 'action');
    rfalse;
];
! No specific request
! Instead of eating the pie when the pie is in the inner safe:
[ R_1030 ;
    if ((((action ==##Eat) &&  (actor==player) && ((noun == I219_pie) && (true)) && (self=actor,true) && (((I369_inner_safe == ContainerOf(I219_pie))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1030, 1030);
    ! [2: say ~First you need to take the pie out of the safe.~]
    say__p=1;! [3: ~First you need to take the pie out of the safe.~]
    ParaContent(); print "First you need to take the pie out of the safe."; new_line; .L_Say70; .L_SayX70;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1030, 1030, 'action');
    rfalse;
];
! No specific request
! Instead of eating the pie when the pie is aged:
[ R_1031 ;
    if ((((action ==##Eat) &&  (actor==player) && ((noun == I219_pie) && (true)) && (self=actor,true) && ((((Adj_120_t1_v10(I219_pie)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1031, 1031);
    ! [2: say ~You eat the pie. It tastes... strange. As though it's been sitting out for 2 weeks. Your stomach starts to feel unpleasant and then --~]
    say__p=1;! [3: ~You eat the pie. It tastes... strange. As though it's been sitting out for 2 weeks. Your stomach starts to feel unpleasant and then --~]
    ParaContent(); print "You eat the pie. It tastes... strange. As though it's been sitting out for 2 weeks. Your stomach starts to feel unpleasant and then --"; .L_Say71; .L_SayX71;! [4: conclude with 31]
    (PHR_827_r2 (31));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1031, 1031, 'action');
    rfalse;
];
! No specific request
! Instead of taking off socks when the player is wearing work shoes or the player is wearing the pair of running shoes:
[ R_835 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun == I149_socks) && (true)) && (self=actor,true) && ((((player == WearerOf(I151_work_shoes)))) || (((player == WearerOf(I229_pair_of_running_shoes)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_835, 835);
    ! [2: say ~You need to take your shoes off first!~]
    say__p=1;! [3: ~You need to take your shoes off first!~]
    ParaContent(); print "You need to take your shoes off first!"; new_line; .L_Say72; .L_SayX72;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_835, 835, 'action');
    rfalse;
];
! No specific request
! Instead of opening or closing the medicine cabinet when the player is not on the stool:
[ R_911 ;
    if ((((action ==##Close or ##Open) &&  (actor==player) && ((noun == I256_medicine_cabinet) && (true)) && (self=actor,true) && (((~~((I208_stool == SupporterOf(player))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_911, 911);
    ! [2: say ~You're not tall enough to reach the medicine cabinet. Drat!~]
    say__p=1;! [3: ~You're not tall enough to reach the medicine cabinet. Drat!~]
    ParaContent(); print "You're not tall enough to reach the medicine cabinet. Drat!"; new_line; .L_Say73; .L_SayX73;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_911, 911, 'action');
    rfalse;
];
! No specific request
! Instead of taking or pulling the fork when the fork is stuck:
[ R_954 ;
    if ((((action ==##Pull or ##Take) &&  (actor==player) && ((noun == I300_fork) && (true)) && (self=actor,true) && ((((Adj_106_t1_v10(I300_fork)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_954, 954);
    ! [2: say ~You try to pull the fork out of the road, but it's pretty stuck. Your hand slips off the fork just as you feel it has dislodged slightly from the road.~]
    say__p=1;! [3: ~You try to pull the fork out of the road, but it's pretty stuck. Your hand slips off the fork just as you feel it has dislodged slightly from the road.~]
    ParaContent(); print "You try to pull the fork out of the road, but it's pretty stuck. Your hand slips off the fork just as you feel it has dislodged slightly from the road."; new_line; .L_Say74; .L_SayX74;! [4: now the fork is not stuck]
    (Adj_106_t3_v10(I300_fork));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_954, 954, 'action');
    rfalse;
];
! No specific request
! Instead of taking or touching the candle when the player is wearing a dollop of hair gel:
[ R_977 ;
    if ((((action ==##Touch or ##Take) &&  (actor==player) && ((noun == I313_candle) && (true)) && (self=actor,true) && (((player == WearerOf(I258_dollop_of_hair_gel))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_977, 977);
    ! [2: say ~You touch the candle. The flame leaps onto your hair. Boom!~]
    say__p=1;! [3: ~You touch the candle. The flame leaps onto your hair. Boom!~]
    ParaContent(); print "You touch the candle. The flame leaps onto your hair. Boom!"; new_line; .L_Say75; .L_SayX75;! [4: conclude with 17]
    (PHR_827_r2 (17));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_977, 977, 'action');
    rfalse;
];
! No specific request
! Instead of taking something when the number of entries in the multiple object list is greater than 1:
[ R_828 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, KD2_list_of_objects);
    I7RBLK = KERNEL_2();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_2 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun ofclass K2_thing)) && (self=actor,true) && (((LIST_OF_TY_GetLength(LIST_OF_TY_Mol(I7SFRAME)) > 1)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_828, 828);
    ! [2: say ~One thing at a time!~]
    say__p=1;! [3: ~One thing at a time!~]
    ParaContent(); print "One thing at a time!"; new_line; .L_Say76; .L_SayX76;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_828, 828, 'action');
    rfalse;
];
! No specific request
! Instead of going somewhere when the player is wearing the moose head and the moose head is not accustomed:
[ R_1001 ;
    if ((((action ==##Go) &&  (actor==player) && (((MStack-->MstVON(20007,1)) ofclass K1_room)) && (self=actor,true) && ((((player == WearerOf(I349_moose_head)))) && (((~~(((Adj_114_t1_v10(I349_moose_head))))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1001, 1001);
    ! [2: say ~Wow, you nearly fell over. Walking while wearing a taxidermied moose head is hard. Maybe it'll go better if you try that again now that you have your balance?~]
    say__p=1;! [3: ~Wow, you nearly fell over. Walking while wearing a taxidermied moose head is hard. Maybe it'll go better if you try that again now that you have your balance?~]
    ParaContent(); print "Wow, you nearly fell over. Walking while wearing a taxidermied moose head is hard. Maybe it'll go better if you try that again now that you have your balance?"; new_line; .L_Say77; .L_SayX77;! [4: now the moose head is accustomed]
    (Adj_114_t2_v10(I349_moose_head));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1001, 1001, 'action');
    rfalse;
];
! No specific request
! Instead of going through a closed door:
[ R_800 ;
    if ((((action ==##Go) &&  (actor==player) && (((MStack-->MstVON(20007,2)) ofclass K4_door) && ((Adj_73_t1_v10((MStack-->MstVON(20007,2)))))) && ((MStack-->MstVON(20007,1)) ~= nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_800, 800);
    ! [2: say ~You can't go through [the door gone through] because it's closed.~]
    say__p=1;! [3: ~You can't go through ~]
    ParaContent(); print "You can't go through ";! [4: the door gone through]
    ParaContent(); print (the) (MStack-->MstVO(20007,2));! [5: ~ because it's closed.~]
    ParaContent(); print " because it's closed."; new_line; .L_Say78; .L_SayX78;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_800, 800, 'action');
    rfalse;
];
! No specific request
! Instead of inserting the earbuds into the iPod:
[ R_877 ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun == I239_earbuds) && (true)) && ((second == I200_ipod) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_877, 877);
    ! [2: try plugging the earbuds]
    TryAction(0, player, ##A82_plugging, I239_earbuds, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_877, 877, 'action');
    rfalse;
];
! No specific request
! Instead of inserting the bucket into the bathtub:
[ R_913 ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun == I284_bucket) && (true)) && ((second == I259_bathtub) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_913, 913);
    ! [2: say ~You don't really feel like dirtying your pristine tub with the garden bucket.~]
    say__p=1;! [3: ~You don't really feel like dirtying your pristine tub with the garden bucket.~]
    ParaContent(); print "You don't really feel like dirtying your pristine tub with the garden bucket."; new_line; .L_Say79; .L_SayX79;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_913, 913, 'action');
    rfalse;
];
! No specific request
! Instead of inserting the bucket into the rocket fuel:
[ R_924 ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun == I284_bucket) && (true)) && ((second == I265_rocket_fuel) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_924, 924);
    ! [2: try inserting the bucket into the vat]
    TryAction(0, player, ##Insert, I284_bucket, I264_vat);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_924, 924, 'action');
    rfalse;
];
! No specific request
! Instead of inserting the bucket into the vat:
[ R_925 ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun == I284_bucket) && (true)) && ((second == I264_vat) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_925, 925);
    ! [2: if the vat is closed]
    if ((((Adj_73_t1_v10(I264_vat)))))
    {! [3: say ~You can't do that while the vat is closed!~]
        say__p=1;! [4: ~You can't do that while the vat is closed!~]
        ParaContent(); print "You can't do that while the vat is closed!"; new_line; .L_Say80; .L_SayX80;} else {
        ! [5: if the piranha-infested water is in the bucket]
        if (((I284_bucket == ContainerOf(I329_bucketful_of_piranha_in))))
        {! [6: say ~You should probably empty the bucket out first.~]
            say__p=1;! [7: ~You should probably empty the bucket out first.~]
            ParaContent(); print "You should probably empty the bucket out first."; new_line; .L_Say81; .L_SayX81;} else {
            ! [8: say ~You dip the bucket in the vat of rocket fuel and come out with a fair amount. This stuff is lighter than it looks!~]
            say__p=1;! [9: ~You dip the bucket in the vat of rocket fuel and come out with a fair amount. This stuff is lighter than it looks!~]
            ParaContent(); print "You dip the bucket in the vat of rocket fuel and come out with a fair amount. This stuff is lighter than it looks!"; new_line; .L_Say82; .L_SayX82;! [10: now the bucketful is in the bucket]
            MoveObject(I266_bucketful_of_rocket_fue,I284_bucket);
            }
            }
            RulebookFails(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_925, 925, 'action');
            rfalse;
];
! No specific request
! Instead of inserting bucketful of rocket fuel into the spaceship:
[ R_951 ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun == I266_bucketful_of_rocket_fue) && (true)) && ((second == I288_spaceship) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_951, 951);
    ! [2: if the player is in the spaceship]
    if (((I288_spaceship == ContainerOf(player))))
    {! [3: say ~You can't reach the fuel port from inside the ship.~]
        say__p=1;! [4: ~You can't reach the fuel port from inside the ship.~]
        ParaContent(); print "You can't reach the fuel port from inside the ship."; new_line; .L_Say83; .L_SayX83;} else {
        ! [5: say ~You pour the rocket fuel into the ship's fuel hatch, closing the hatch when you are done.~]
        say__p=1;! [6: ~You pour the rocket fuel into the ship's fuel hatch, closing the hatch when you are done.~]
        ParaContent(); print "You pour the rocket fuel into the ship's fuel hatch, closing the hatch when you are done."; new_line; .L_Say84; .L_SayX84;! [7: now the bucketful of rocket fuel is nowhere]
        RemoveFromPlay(I266_bucketful_of_rocket_fue);;
        ! [8: now the spaceship is not low on fuel]
        (Adj_101_t3_v10(I288_spaceship));
        ! [9: if the spaceship is closed]
        if ((((Adj_73_t1_v10(I288_spaceship)))))
        {! [10: say ~As if in a gesture of thanks, the computer opens the door to the spaceship for you.~]
            say__p=1;! [11: ~As if in a gesture of thanks, the computer opens the door to the spaceship for you.~]
            ParaContent(); print "As if in a gesture of thanks, the computer opens the door to the spaceship for you."; new_line; .L_Say85; .L_SayX85;! [12: now the spaceship is open]
            (Adj_72_t2_v10(I288_spaceship));
            }
            }
            RulebookFails(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_951, 951, 'action');
            rfalse;
];
! No specific request
! Instead of inserting the bucket into the stream:
[ R_985 ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun == I284_bucket) && (true)) && ((second == I327_stream) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_985, 985);
    ! [2: say ~You dip the bucket in the water, coming out with a bucketful of water and a few... piranhas?!~]
    say__p=1;! [3: ~You dip the bucket in the water, coming out with a bucketful of water and a few... piranhas?!~]
    ParaContent(); print "You dip the bucket in the water, coming out with a bucketful of water and a few... piranhas?!"; new_line; .L_Say86; .L_SayX86;! [4: now the piranha-infested water is in the bucket]
    MoveObject(I329_bucketful_of_piranha_in,I284_bucket);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_985, 985, 'action');
    rfalse;
];
! No specific request
! Instead of inserting something into the toaster:
[ R_884 ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second == I205_toaster) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_884, 884);
    ! [2: if the noun is the fork and the toaster is plugged in and the toaster is done]
    if ((((noun == I300_fork))) && (((((Adj_91_t1_v10(I205_toaster))))) && ((((Adj_93_t1_v10(I205_toaster)))))))
    {! [3: say ~You stick the fork in the toaster, hoping it will help you remove your toast. Unfortunately, the toaster is electrified and as soon as your fork touches the coil you are electrocuted. You'll never get to eat that delicious toast... :(~]
        say__p=1;! [4: ~You stick the fork in the toaster, hoping it will help you remove your toast. Unfortunately, the toaster is electrified and as soon as your fork touches the coil you are electrocuted. You'll never get to eat that delicious toast... :(~]
        ParaContent(); print "You stick the fork in the toaster, hoping it will help you remove your toast. Unfortunately, the toaster is electrified and as soon as your fork touches the coil you are electrocuted. You'll never get to eat that delicious toast... :("; .L_Say87; .L_SayX87;! [5: conclude with 24]
        (PHR_827_r2 (24));
        } else {
        ! [6: if the button is active]
        if ((((Adj_25_t1_v10(I216_play_button)))))
        {! [7: say ~The toaster is hard at work, don't bother it.~]
            say__p=1;! [8: ~The toaster is hard at work, don't bother it.~]
            ParaContent(); print "The toaster is hard at work, don't bother it."; new_line; .L_Say88; .L_SayX88;} else {
            ! [9: if the noun is the sacrificial knife]
            if (((noun == I314_sacrificial_knife)))
            {! [10: say ~That seems too important to tarnish it by putting it in a toaster.[if the toaster is done] A fork might be more apropos.[end if]~]
                say__p=1;! [11: ~That seems too important to tarnish it by putting it in a toaster.~]
                ParaContent(); print "That seems too important to tarnish it by putting it in a toaster."; new_line;! [12: if the toaster is done]

                	if (~~(((((Adj_93_t1_v10(I205_toaster))))))) jump L_Say89;! [13: ~ A fork might be more apropos.~]
                ParaContent(); print " A fork might be more apropos."; new_line;! [14: end if]

                	.L_Say89; .L_SayX89; .L_Say90; .L_SayX90;} else {
                ! [15: if the noun is not the loaf of bread]
                if (((~~((noun == I214_loaf_of_bread)))))
                {! [16: say ~That's not what you're supposed to put in a toaster!~]
                    say__p=1;! [17: ~That's not what you're supposed to put in a toaster!~]
                    ParaContent(); print "That's not what you're supposed to put in a toaster!"; new_line; .L_Say91; .L_SayX91;} else {
                    ! [18: if the bread is wrapped]
                    if ((((Adj_88_t1_v10(I214_loaf_of_bread)))))
                    {! [19: say ~You need to unwrap that bread before you can put it in the toaster.~]
                        say__p=1;! [20: ~You need to unwrap that bread before you can put it in the toaster.~]
                        ParaContent(); print "You need to unwrap that bread before you can put it in the toaster."; new_line; .L_Say92; .L_SayX92;} else {
                        ! [21: if the toaster's slice count is 2]
                        if ((((Global_Vars-->10) == 2)))
                        {! [22: say ~The toaster is full. Probably you don't want to overload it.~]
                            say__p=1;! [23: ~The toaster is full. Probably you don't want to overload it.~]
                            ParaContent(); print "The toaster is full. Probably you don't want to overload it."; new_line; .L_Say93; .L_SayX93;} else {
                            ! [24: say ~You put a slice of bread in the toaster.~]
                            say__p=1;! [25: ~You put a slice of bread in the toaster.~]
                            ParaContent(); print "You put a slice of bread in the toaster."; new_line; .L_Say94; .L_SayX94;! [26: increase the toaster's slice count by 1]
                            (Global_Vars-->10) = (Global_Vars-->10) + 1;;
                            }
                            }
                            }
                            }
                            }
                            }
                            RulebookFails(); rtrue;
                            } else if (debug_rules > 1) DB_Rule(R_884, 884, 'action');
                            rfalse;
];
! No specific request
! Instead of inserting something into the vat:
[ R_926 ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second == I264_vat) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_926, 926);
    ! [2: say ~You don't get the feeling [the noun] would do well in a vat of rocket fuel.~]
    say__p=1;! [3: ~You don't get the feeling ~]
    ParaContent(); print "You don't get the feeling ";! [4: the noun]
    ParaContent(); print (the) noun;! [5: ~ would do well in a vat of rocket fuel.~]
    ParaContent(); print " would do well in a vat of rocket fuel."; new_line; .L_Say95; .L_SayX95;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_926, 926, 'action');
    rfalse;
];
! No specific request
! Instead of inserting something into the cage:
[ R_981 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second == I285_cage) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_981, 981);
    ! [2: if the player does not have the noun]
    if (((~~((player == OwnerOf(noun))))))
    {! [3: say ~You can't put [the noun] in the cage without first taking it.~]
        say__p=1;! [4: ~You can't put ~]
        ParaContent(); print "You can't put ";! [5: the noun]
        ParaContent(); print (the) noun;! [6: ~ in the cage without first taking it.~]
        ParaContent(); print " in the cage without first taking it."; new_line; .L_Say96; .L_SayX96;! [7: stop the action]
        rtrue;
        } else {
        ! [8: if the noun is not a mouse]
        if (((~~((noun ofclass K21_mouse)))))
        {! [9: continue the action]
            rfalse;
            } else {
            ! [10: if the cage is closed]
            if ((((Adj_73_t1_v10(I285_cage)))))
            {! [11: say ~You can't put a mouse in a closed cage!~]
                say__p=1;! [12: ~You can't put a mouse in a closed cage!~]
                ParaContent(); print "You can't put a mouse in a closed cage!"; new_line; .L_Say97; .L_SayX97;} else {
                ! [13: if the player has the cage]
                if (((player == OwnerOf(I285_cage))))
                {! [14: say ~You try to put the mouse in the cage while holding both of them, but in the end you drop the cage and the mouse scurries off. Oh well, maybe there are more mice.~]
                    say__p=1;! [15: ~You try to put the mouse in the cage while holding both of them, but in the end you drop the cage and the mouse scurries off. Oh well, maybe there are more mice.~]
                    ParaContent(); print "You try to put the mouse in the cage while holding both of them, but in the end you drop the cage and the mouse scurries off. Oh well, maybe there are more mice."; new_line; .L_Say98; .L_SayX98;! [16: now the noun is nowhere]
                    RemoveFromPlay(noun);;
                    ! [17: let x be the location of the player]

                    		tmp_0 = LocationOf(player);
                    ! [18: now the cage is in x]
                    MoveObject(I285_cage,tmp_0);
                    } else {
                    ! [19: if the player is in the lair]
                    if (((I311_a_spooky_lair == ContainerOf(player))))
                    {! [20: say ~A rattlesnake rushes into the cage and hungrily slurps up the mouse before it even has time to get its bearings.~]
                        say__p=1;! [21: ~A rattlesnake rushes into the cage and hungrily slurps up the mouse before it even has time to get its bearings.~]
                        ParaContent(); print "A rattlesnake rushes into the cage and hungrily slurps up the mouse before it even has time to get its bearings."; new_line; .L_Say99; .L_SayX99;! [22: now the noun is nowhere]
                        RemoveFromPlay(noun);;
                        ! [23: move the snake to the cage]
                        MoveObject(I315_snake, I285_cage, 0, false);
                        ! [24: the snake leaves the cage in 2 turns from now]
                        SetTimedEvent(R_982, 2+1, 0);
                        } else {
                        ! [25: say ~The mouse scurries out of the cage and runs off to wherever it is mice go. Oh well, there are probably more mice wherever that one came from.~]
                        say__p=1;! [26: ~The mouse scurries out of the cage and runs off to wherever it is mice go. Oh well, there are probably more mice wherever that one came from.~]
                        ParaContent(); print "The mouse scurries out of the cage and runs off to wherever it is mice go. Oh well, there are probably more mice wherever that one came from."; new_line; .L_Say100; .L_SayX100;! [27: now the noun is nowhere]
                        RemoveFromPlay(noun);;
                        }
                        }
                        }
                        }
                        }
                        RulebookFails(); rtrue;
                        } else if (debug_rules > 1) DB_Rule(R_981, 981, 'action');
                        rfalse;
];
! No specific request
! Instead of inserting something into the coin slot:
[ R_1024 ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second == I366_coin_slot) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1024, 1024);
    ! [2: if the player is not in the time machine]
    if (((~~((I364_time_machine == ContainerOf(player))))))
    {! [3: say ~You can't reach that from outside the time machine.~]
        say__p=1;! [4: ~You can't reach that from outside the time machine.~]
        ParaContent(); print "You can't reach that from outside the time machine."; new_line; .L_Say101; .L_SayX101;! [5: stop the action]
        rtrue;
        }
    ! [6: if the coin slot is not available]
    if (((~~(((Adj_119_t1_v10(I366_coin_slot)))))))
    {! [7: say ~The previous quarter is still making its way into the slot.~]
        say__p=1;! [8: ~The previous quarter is still making its way into the slot.~]
        ParaContent(); print "The previous quarter is still making its way into the slot."; new_line; .L_Say102; .L_SayX102;! [9: stop the action]
        rtrue;
        }
    ! [10: if the noun is not a quarter]
    if (((~~((noun ofclass K19_quarter)))))
    {! [11: say ~That doesn't fit in the slot!~]
        say__p=1;! [12: ~That doesn't fit in the slot!~]
        ParaContent(); print "That doesn't fit in the slot!"; new_line; .L_Say103; .L_SayX103;! [13: stop the action]
        rtrue;
        }
    ! [14: say ~You put a quarter in the slot. It makes a satisfying *clink*.~]
    say__p=1;! [15: ~You put a quarter in the slot. It makes a satisfying *clink*.~]
    ParaContent(); print "You put a quarter in the slot. It makes a satisfying *clink*."; new_line; .L_Say104; .L_SayX104;! [16: now the noun is nowhere]
    RemoveFromPlay(noun);;
    ! [17: now the coin slot is not available]
    (Adj_119_t3_v10(I366_coin_slot));
    ! [18: increase the coin slot's credits by 1]
    (Global_Vars-->15) = (Global_Vars-->15) + 1;;
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1024, 1024, 'action');
    rfalse;
];
! No specific request
! Instead of inserting something into the middle safe:
[ R_1025 ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second == I368_middle_safe) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1025, 1025);
    ! [2: say ~There's no room. You have to put it in the inner safe.~]
    say__p=1;! [3: ~There's no room. You have to put it in the inner safe.~]
    ParaContent(); print "There's no room. You have to put it in the inner safe."; new_line; .L_Say105; .L_SayX105;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1025, 1025, 'action');
    rfalse;
];
! No specific request
! Instead of inserting something into the time safe:
[ R_1026 ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second == I367_time_safe) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1026, 1026);
    ! [2: say ~There's no room. You have to put it in the innermost safe.~]
    say__p=1;! [3: ~There's no room. You have to put it in the innermost safe.~]
    ParaContent(); print "There's no room. You have to put it in the innermost safe."; new_line; .L_Say106; .L_SayX106;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1026, 1026, 'action');
    rfalse;
];
! No specific request
! Instead of answering the computer that ~confirm~:
[ R_936 ;
    if ((((action ==##Answer) &&  (actor==player) && ((noun == I291_computer) && (true)) && (Consult_Grammar_183(consult_from, consult_words)~=GPR_FAIL)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_936, 936);
    ! [2: if the spaceship is waiting for confirmation]
    if ((((Adj_102_t1_v10(I288_spaceship)))))
    {! [3: say ~The dialog on the screen goes away. The screen now reads READY FOR LAUNCH.~]
        say__p=1;! [4: ~The dialog on the screen goes away. The screen now reads READY FOR LAUNCH.~]
        ParaContent(); print "The dialog on the screen goes away. The screen now reads READY FOR LAUNCH."; new_line; .L_Say107; .L_SayX107;! [5: now the spaceship is not waiting for confirmation]
        (Adj_102_t3_v10(I288_spaceship));
        } else {
        ! [6: say ~Nothing happens.~]
        say__p=1;! [7: ~Nothing happens.~]
        ParaContent(); print "Nothing happens."; new_line; .L_Say108; .L_SayX108;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_936, 936, 'action');
        rfalse;
];
! No specific request
! Instead of answering the computer that ~SUIT UP~:
[ R_937 ;
    if ((((action ==##Answer) &&  (actor==player) && ((noun == I291_computer) && (true)) && (Consult_Grammar_184(consult_from, consult_words)~=GPR_FAIL)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_937, 937);
    ! [2: if the player is not in the spaceship]
    if (((~~((I288_spaceship == ContainerOf(player))))))
    {! [3: say ~The computer beeps. 'No humans detected in range. Please enter spaceship for automatic space suit assembly.'~]
        say__p=1;! [4: ~The computer beeps. 'No humans detected in range. Please enter spaceship for automatic space suit assembly.'~]
        ParaContent(); print "The computer beeps. ~No humans detected in range. Please enter spaceship for automatic space suit assembly.~"; new_line; .L_Say109; .L_SayX109;} else {
        ! [5: if the spaceship is in the launch pad]
        if (((I287_launch_pad == ContainerOf(I288_spaceship))))
        {! [6: say ~The computer beeps. 'Space suit assembly is not available in launch pad.'~]
            say__p=1;! [7: ~The computer beeps. 'Space suit assembly is not available in launch pad.'~]
            ParaContent(); print "The computer beeps. ~Space suit assembly is not available in launch pad.~"; new_line; .L_Say110; .L_SayX110;} else {
            ! [8: if the player is wearing the spacesuit and the player is wearing the helmet]
            if ((((player == WearerOf(I292_spacesuit)))) && (((player == WearerOf(I293_helmet)))))
            {! [9: say ~The computer beeps. 'Space suit already be assembled. Aborting assembly procedure.'~]
                say__p=1;! [10: ~The computer beeps. 'Space suit already be assembled. Aborting assembly procedure.'~]
                ParaContent(); print "The computer beeps. ~Space suit already be assembled. Aborting assembly procedure.~"; new_line; .L_Say111; .L_SayX111;} else {
                ! [11: say ~The spaceship's machinery puts a space suit on you faster than you could possibly have done it yourself.~]
                say__p=1;! [12: ~The spaceship's machinery puts a space suit on you faster than you could possibly have done it yourself.~]
                ParaContent(); print "The spaceship's machinery puts a space suit on you faster than you could possibly have done it yourself."; new_line; .L_Say112; .L_SayX112;! [13: now the player is wearing the spacesuit]
                WearObject(I292_spacesuit,player);
                ! [14: now the player is wearing the helmet]
                WearObject(I293_helmet,player);
                }
                }
                }
                RulebookFails(); rtrue;
                } else if (debug_rules > 1) DB_Rule(R_937, 937, 'action');
                rfalse;
];
! No specific request
! Instead of answering the computer that ~CANCEL~:
[ R_938 ;
    if ((((action ==##Answer) &&  (actor==player) && ((noun == I291_computer) && (true)) && (Consult_Grammar_185(consult_from, consult_words)~=GPR_FAIL)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_938, 938);
    ! [2: if the spaceship is in the air and the computer is not disabled]
    if ((((I294_air == ContainerOf(I288_spaceship)))) && (((~~(((Adj_104_t1_v10(I291_computer))))))))
    {! [3: now the computer is disabled]
        (Adj_104_t2_v10(I291_computer));
        ! [4: say ~The computer beeps. 'Autopilot is now disengaged.'~]
        say__p=1;! [5: ~The computer beeps. 'Autopilot is now disengaged.'~]
        ParaContent(); print "The computer beeps. ~Autopilot is now disengaged.~"; new_line; .L_Say113; .L_SayX113;} else {
        ! [6: say ~Nothing happens.~]
        say__p=1;! [7: ~Nothing happens.~]
        ParaContent(); print "Nothing happens."; new_line; .L_Say114; .L_SayX114;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_938, 938, 'action');
        rfalse;
];
! No specific request
! Instead of unlocking the car with something:
[ R_959 ;
    if ((((action ==##Unlock) &&  (actor==player) && ((noun == I302_blue_car) && (true)) && ((second ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_959, 959);
    ! [2: if the noun is the toyota key]
    if (((noun == I228_toyota_key)))
    {! [3: say ~Try OPENing the car.~]
        say__p=1;! [4: ~Try OPENing the car.~]
        ParaContent(); print "Try OPENing the car."; new_line; .L_Say115; .L_SayX115;} else {
        ! [5: say ~That doesn't seem to fit in the keyhole. You seem to remember that your car key had a Toyota logo on it.~]
        say__p=1;! [6: ~That doesn't seem to fit in the keyhole. You seem to remember that your car key had a Toyota logo on it.~]
        ParaContent(); print "That doesn't seem to fit in the keyhole. You seem to remember that your car key had a Toyota logo on it."; new_line; .L_Say116; .L_SayX116;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_959, 959, 'action');
        rfalse;
];
! No specific request
! Instead of turning on the spigot:
[ R_928 ;
    if ((((action ==##Turn) &&  (actor==player) && ((noun == I279_spigot) && ((Adj_97_t1_v10(noun))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_928, 928);
    ! [2: say ~It won't turn.~]
    say__p=1;! [3: ~It won't turn.~]
    ParaContent(); print "It won't turn."; new_line; .L_Say117; .L_SayX117;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_928, 928, 'action');
    rfalse;
];
! No specific request
! Instead of dumping the bucket:
[ R_847 ;
    if ((((action ==##A77_dumping) &&  (actor==player) && ((noun == I284_bucket) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_847, 847);
    ! [2: if the player is in the bathroom and the piranha-infested water is in the bucket]
    if ((((I254_bathroom == ContainerOf(player)))) && (((I284_bucket == ContainerOf(I329_bucketful_of_piranha_in)))))
    {! [3: say ~You dump the water and the piranhas into the tub. ~]
        say__p=1;! [4: ~You dump the water and the piranhas into the tub. ~]
        ParaContent(); print "You dump the water and the piranhas into the tub. "; .L_Say118; .L_SayX118;! [5: if the drain is plugged]
        if ((((Adj_96_t1_v10(I260_drain)))))
        {! [6: say ~The piranhas swim around in the bathwater.~]
            say__p=1;! [7: ~The piranhas swim around in the bathwater.~]
            ParaContent(); print "The piranhas swim around in the bathwater."; new_line; .L_Say119; .L_SayX119;! [8: move the swimming piranhas to the bathtub]
            MoveObject(I328_swimming_piranhas, I259_bathtub, 0, false);
            ! [9: increase the water level by 1]
            (Global_Vars-->11) = (Global_Vars-->11) + 1;;
            } else {
            ! [10: say ~The water, and the piranhas with it, flow out the drain.~]
            say__p=1;! [11: ~The water, and the piranhas with it, flow out the drain.~]
            ParaContent(); print "The water, and the piranhas with it, flow out the drain."; new_line; .L_Say120; .L_SayX120;}
        ! [12: now the piranha-infested water is nowhere]
        RemoveFromPlay(I329_bucketful_of_piranha_in);;
        } else {
        ! [13: if the player is in the house]
        if (((TestRegionalContainment(player,I269_house))))
        {! [14: say ~That doesn't really seem like a good idea here.~]
            say__p=1;! [15: ~That doesn't really seem like a good idea here.~]
            ParaContent(); print "That doesn't really seem like a good idea here."; new_line; .L_Say121; .L_SayX121;} else {
            ! [16: if a bucketful of rocket fuel is in the bucket]
            if (((I284_bucket == ContainerOf(I266_bucketful_of_rocket_fue))))
            {! [17: if the player is in the launch pad]
                if (((I287_launch_pad == ContainerOf(player))))
                {! [18: try inserting a bucketful of rocket fuel into the spaceship]
                    TryAction(0, player, ##Insert, I266_bucketful_of_rocket_fue, I288_spaceship);
                    } else {
                    ! [19: say ~You pour the rocket fuel out onto the ground. It immediately starts to evaporate. Smells kinda funky.~]
                    say__p=1;! [20: ~You pour the rocket fuel out onto the ground. It immediately starts to evaporate. Smells kinda funky.~]
                    ParaContent(); print "You pour the rocket fuel out onto the ground. It immediately starts to evaporate. Smells kinda funky."; new_line; .L_Say122; .L_SayX122;! [21: now a bucketful of rocket fuel is nowhere]
                    RemoveFromPlay(I266_bucketful_of_rocket_fue);;
                    }
                    } else {
                ! [22: if the piranha-infested water is in the bucket]
                if (((I284_bucket == ContainerOf(I329_bucketful_of_piranha_in))))
                {! [23: say ~You unceremoniously dump the piranhas and the water out of the bucket. Good riddance.~]
                    say__p=1;! [24: ~You unceremoniously dump the piranhas and the water out of the bucket. Good riddance.~]
                    ParaContent(); print "You unceremoniously dump the piranhas and the water out of the bucket. Good riddance."; new_line; .L_Say123; .L_SayX123;! [25: now the piranha-infested water is nowhere]
                    RemoveFromPlay(I329_bucketful_of_piranha_in);;
                    } else {
                    ! [26: say ~You can't dump an empty bucket.~]
                    say__p=1;! [27: ~You can't dump an empty bucket.~]
                    ParaContent(); print "You can't dump an empty bucket."; new_line; .L_Say124; .L_SayX124;}
                    }
                    }
                    }
                    RulebookFails(); rtrue;
                    } else if (debug_rules > 1) DB_Rule(R_847, 847, 'action');
                    rfalse;
];
! No specific request
! Instead of using the ladder:
[ R_849 ;
    if ((((action ==##A78_using) &&  (actor==player) && ((noun == I359_ladder) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_849, 849);
    ! [2: try going up]
    TryAction(0, player, ##Go, I59_up, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_849, 849, 'action');
    rfalse;
];
! No specific request
! Instead of using the iPod:
[ R_850 ;
    if ((((action ==##A78_using) &&  (actor==player) && ((noun == I200_ipod) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_850, 850);
    ! [2: if the ipod is playing]
    if ((((Adj_87_t1_v10(I200_ipod)))))
    {! [3: say ~Often people use music playing devices by listening to the place the music is coming from.~]
        say__p=1;! [4: ~Often people use music playing devices by listening to the place the music is coming from.~]
        ParaContent(); print "Often people use music playing devices by listening to the place the music is coming from."; new_line; .L_Say125; .L_SayX125;} else {
        ! [5: say ~You try playing a song but you think the speaker in the iPod is broken. Maybe you need to plug in headphones or something?~]
        say__p=1;! [6: ~You try playing a song but you think the speaker in the iPod is broken. Maybe you need to plug in headphones or something?~]
        ParaContent(); print "You try playing a song but you think the speaker in the iPod is broken. Maybe you need to plug in headphones or something?"; new_line; .L_Say126; .L_SayX126;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_850, 850, 'action');
        rfalse;
];
! No specific request
! Instead of using the stool:
[ R_851 ;
    if ((((action ==##A78_using) &&  (actor==player) && ((noun == I208_stool) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_851, 851);
    ! [2: if the player has the stool]
    if (((player == OwnerOf(I208_stool))))
    {! [3: try dropping the stool]
        TryAction(0, player, ##Drop, I208_stool, 0);
        ! [4: say ~Now you might want to get on the stool.~]
        say__p=1;! [5: ~Now you might want to get on the stool.~]
        ParaContent(); print "Now you might want to get on the stool."; new_line; .L_Say127; .L_SayX127;} else {
        ! [6: try entering the stool]
        TryAction(0, player, ##Enter, I208_stool, 0);
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_851, 851, 'action');
        rfalse;
];
! No specific request
! Instead of using the car:
[ R_852 ;
    if ((((action ==##A78_using) &&  (actor==player) && ((noun == I302_blue_car) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_852, 852);
    ! [2: if the player is in the car]
    if (((I302_blue_car == ContainerOf(player))))
    {! [3: say ~Try going in a direction.~]
        say__p=1;! [4: ~Try going in a direction.~]
        ParaContent(); print "Try going in a direction."; new_line; .L_Say128; .L_SayX128;} else {
        ! [5: try entering the car]
        TryAction(0, player, ##Enter, I302_blue_car, 0);
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_852, 852, 'action');
        rfalse;
];
! No specific request
! Instead of using the hair gel:
[ R_853 ;
    if ((((action ==##A78_using) &&  (actor==player) && ((noun == I257_can_of_hair_gel) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_853, 853);
    ! [2: try wearing the hair gel]
    TryAction(0, player, ##Wear, I257_can_of_hair_gel, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_853, 853, 'action');
    rfalse;
];
! No specific request
! Instead of entering the bed:
[ R_875 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I198_bed) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_875, 875);
    ! [2: say ~You don't feel sleepy.~]
    say__p=1;! [3: ~You don't feel sleepy.~]
    ParaContent(); print "You don't feel sleepy."; new_line; .L_Say129; .L_SayX129;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_875, 875, 'action');
    rfalse;
];
! No specific request
! Instead of wearing the iPod:
[ R_876 ;
    if ((((action ==##Wear) &&  (actor==player) && ((noun == I200_ipod) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_876, 876);
    ! [2: say ~People tend to wear headphones these days; wearing iPods is less fashionable.~]
    say__p=1;! [3: ~People tend to wear headphones these days; wearing iPods is less fashionable.~]
    ParaContent(); print "People tend to wear headphones these days; wearing iPods is less fashionable."; new_line; .L_Say130; .L_SayX130;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_876, 876, 'action');
    rfalse;
];
! No specific request
! Instead of climbing the staircase:
[ R_879 ;
    if ((((action ==##Climb) &&  (actor==player) && ((noun == I203_staircase) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_879, 879);
    ! [2: try going north]
    TryAction(0, player, ##Go, I51_north, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_879, 879, 'action');
    rfalse;
];
! No specific request
! Instead of opening the bottom drawer:
[ R_880 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I211_bottom_drawer) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_880, 880);
    ! [2: say ~It's stuck. But you're pretty sure it's empty; you don't recall ever having used it.~]
    say__p=1;! [3: ~It's stuck. But you're pretty sure it's empty; you don't recall ever having used it.~]
    ParaContent(); print "It's stuck. But you're pretty sure it's empty; you don't recall ever having used it."; new_line; .L_Say131; .L_SayX131;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_880, 880, 'action');
    rfalse;
];
! No specific request
! Instead of taking the cereal crumbs:
[ R_881 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I212_cereal_crumbs) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_881, 881);
    ! [2: say ~Those probably aren't worth your time.~]
    say__p=1;! [3: ~Those probably aren't worth your time.~]
    ParaContent(); print "Those probably aren't worth your time."; new_line; .L_Say132; .L_SayX132;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_881, 881, 'action');
    rfalse;
];
! No specific request
! Instead of taking the tupperware:
[ R_882 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I213_big_tupperware_containe) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_882, 882);
    ! [2: say ~It seems to be stuck to the drawer with honey or something. Probably best just to leave it there.~]
    say__p=1;! [3: ~It seems to be stuck to the drawer with honey or something. Probably best just to leave it there.~]
    ParaContent(); print "It seems to be stuck to the drawer with honey or something. Probably best just to leave it there."; new_line; .L_Say133; .L_SayX133;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_882, 882, 'action');
    rfalse;
];
! No specific request
! Instead of eating the loaf:
[ R_883 ;
    if ((((action ==##Eat) &&  (actor==player) && ((noun == I214_loaf_of_bread) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_883, 883);
    ! [2: if the bread is wrapped]
    if ((((Adj_88_t1_v10(I214_loaf_of_bread)))))
    {! [3: say ~You can't eat this, it's wrapped in plastic.~]
        say__p=1;! [4: ~You can't eat this, it's wrapped in plastic.~]
        ParaContent(); print "You can't eat this, it's wrapped in plastic."; new_line; .L_Say134; .L_SayX134;} else {
        ! [5: say ~You take a slice off of the loaf of bread and eat it. It tastes delicious! Probably even better toasted though.~]
        say__p=1;! [6: ~You take a slice off of the loaf of bread and eat it. It tastes delicious! Probably even better toasted though.~]
        ParaContent(); print "You take a slice off of the loaf of bread and eat it. It tastes delicious! Probably even better toasted though."; new_line; .L_Say135; .L_SayX135;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_883, 883, 'action');
        rfalse;
];
! No specific request
! Instead of opening the bread:
[ R_886 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I214_loaf_of_bread) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_886, 886);
    ! [2: if the player does not have the bread]
    if (((~~((player == OwnerOf(I214_loaf_of_bread))))))
    {! [3: say ~You need to take the bread first.~]
        say__p=1;! [4: ~You need to take the bread first.~]
        ParaContent(); print "You need to take the bread first."; new_line; .L_Say136; .L_SayX136;} else {
        ! [5: say ~You take off the plastic wrap and now the bread smells heavenly.~]
        say__p=1;! [6: ~You take off the plastic wrap and now the bread smells heavenly.~]
        ParaContent(); print "You take off the plastic wrap and now the bread smells heavenly."; new_line; .L_Say137; .L_SayX137;! [7: now the bread is unwrapped]
        (Adj_89_t2_v10(I214_loaf_of_bread));
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_886, 886, 'action');
        rfalse;
];
! No specific request
! Instead of switching on the toaster:
[ R_887 ;
    if ((((action ==##SwitchOn) &&  (actor==player) && ((noun == I205_toaster) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_887, 887);
    ! [2: say ~The toaster doesn't seem to have a switch. Just a button and a plug, and some slots for bread.~]
    say__p=1;! [3: ~The toaster doesn't seem to have a switch. Just a button and a plug, and some slots for bread.~]
    ParaContent(); print "The toaster doesn't seem to have a switch. Just a button and a plug, and some slots for bread."; new_line; .L_Say138; .L_SayX138;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_887, 887, 'action');
    rfalse;
];
! No specific request
! Instead of pushing the TOAST button:
[ R_892 ;
    if ((((action ==##Push) &&  (actor==player) && ((noun == I217_toast_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_892, 892);
    ! [2: if the toaster is unplugged]
    if ((((Adj_92_t1_v10(I205_toaster)))))
    {! [3: say ~Nothing happens. What did you expect from an unplugged toaster??~]
        say__p=1;! [4: ~Nothing happens. What did you expect from an unplugged toaster??~]
        ParaContent(); print "Nothing happens. What did you expect from an unplugged toaster??"; new_line; .L_Say139; .L_SayX139;} else {
        ! [5: if the toaster's slice count is 1]
        if ((((Global_Vars-->10) == 1)))
        {! [6: say ~Wouldn't it be better to have 2 slices of toast than just one?~]
            say__p=1;! [7: ~Wouldn't it be better to have 2 slices of toast than just one?~]
            ParaContent(); print "Wouldn't it be better to have 2 slices of toast than just one?"; new_line; .L_Say140; .L_SayX140;} else {
            ! [8: if the toaster's slice count is 0]
            if ((((Global_Vars-->10) == 0)))
            {! [9: say ~Nothing happens. This isn't a magical toaster - it turns BREAD into toast, not air.~]
                say__p=1;! [10: ~Nothing happens. This isn't a magical toaster - it turns BREAD into toast, not air.~]
                ParaContent(); print "Nothing happens. This isn't a magical toaster - it turns BREAD into toast, not air."; new_line; .L_Say141; .L_SayX141;} else {
                ! [11: if the toaster is done]
                if ((((Adj_93_t1_v10(I205_toaster)))))
                {! [12: say ~Do you want to set off a fire alarm or something? the toast is already done.~]
                    say__p=1;! [13: ~Do you want to set off a fire alarm or something? the toast is already done.~]
                    ParaContent(); print "Do you want to set off a fire alarm or something? the toast is already done."; new_line; .L_Say142; .L_SayX142;} else {
                    ! [14: if the button is active]
                    if ((((Adj_25_t1_v10(I216_play_button)))))
                    {! [15: say ~The toaster is hard at work, don't bother it.~]
                        say__p=1;! [16: ~The toaster is hard at work, don't bother it.~]
                        ParaContent(); print "The toaster is hard at work, don't bother it."; new_line; .L_Say143; .L_SayX143;} else {
                        ! [17: say ~The bread recedes into the toaster, and the coils start to light up red. In just a minute, you'll have some tasty tasty toast.~]
                        say__p=1;! [18: ~The bread recedes into the toaster, and the coils start to light up red. In just a minute, you'll have some tasty tasty toast.~]
                        ParaContent(); print "The bread recedes into the toaster, and the coils start to light up red. In just a minute, you'll have some tasty tasty toast."; new_line; .L_Say144; .L_SayX144;! [19: the toaster beeps in two turns from now]
                        SetTimedEvent(R_893, 2+1, 0);
                        ! [20: now the button is active]
                        (Adj_25_t2_v10(I216_play_button));
                        }
                        }
                        }
                        }
                        }
                        RulebookFails(); rtrue;
                        } else if (debug_rules > 1) DB_Rule(R_892, 892, 'action');
                        rfalse;
];
! No specific request
! Instead of climbing the stool:
[ R_895 ;
    if ((((action ==##Climb) &&  (actor==player) && ((noun == I208_stool) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_895, 895);
    ! [2: try entering the stool]
    TryAction(0, player, ##Enter, I208_stool, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_895, 895, 'action');
    rfalse;
];
! No specific request
! Instead of untieing the work shoes:
[ R_900 ;
    if ((((action ==##A84_untieing) &&  (actor==player) && ((noun == I151_work_shoes) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_900, 900);
    ! [2: say ~These are velcro shoes, baby.~]
    say__p=1;! [3: ~These are velcro shoes, baby.~]
    ParaContent(); print "These are velcro shoes, baby."; new_line; .L_Say145; .L_SayX145;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_900, 900, 'action');
    rfalse;
];
! No specific request
! Instead of untieing the running shoes:
[ R_901 ;
    if ((((action ==##A84_untieing) &&  (actor==player) && ((noun == I229_pair_of_running_shoes) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_901, 901);
    ! [2: say ~You untie the running shoes.~]
    say__p=1;! [3: ~You untie the running shoes.~]
    ParaContent(); print "You untie the running shoes."; new_line; .L_Say146; .L_SayX146;! [4: now the running shoes are not laced]
    (Adj_111_t3_v10(I229_pair_of_running_shoes));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_901, 901, 'action');
    rfalse;
];
! No specific request
! Instead of untieing the Toyota key:
[ R_902 ;
    if ((((action ==##A84_untieing) &&  (actor==player) && ((noun == I228_toyota_key) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_902, 902);
    ! [2: say ~You untie the Toyota key, but in your clumsiness it falls to the floor.~]
    say__p=1;! [3: ~You untie the Toyota key, but in your clumsiness it falls to the floor.~]
    ParaContent(); print "You untie the Toyota key, but in your clumsiness it falls to the floor."; new_line; .L_Say147; .L_SayX147;! [4: now the toyota key is not tied]
    (Adj_94_t3_v10(I228_toyota_key));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_902, 902, 'action');
    rfalse;
];
! No specific request
! Instead of wearing the left running shoe:
[ R_904 ;
    if ((((action ==##Wear) &&  (actor==player) && ((noun == I226_left_running_shoe) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_904, 904);
    ! [2: say ~You can't wear just one running shoe - that would simply be unstylish.~]
    say__p=1;! [3: ~You can't wear just one running shoe - that would simply be unstylish.~]
    ParaContent(); print "You can't wear just one running shoe - that would simply be unstylish."; new_line; .L_Say148; .L_SayX148;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_904, 904, 'action');
    rfalse;
];
! No specific request
! Instead of wearing the right running shoe:
[ R_905 ;
    if ((((action ==##Wear) &&  (actor==player) && ((noun == I225_right_running_shoe) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_905, 905);
    ! [2: say ~You can't wear just one running shoe - that would simply be unstylish.~]
    say__p=1;! [3: ~You can't wear just one running shoe - that would simply be unstylish.~]
    ParaContent(); print "You can't wear just one running shoe - that would simply be unstylish."; new_line; .L_Say149; .L_SayX149;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_905, 905, 'action');
    rfalse;
];
! No specific request
! Instead of examining the closet door:
[ R_907 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I240_closet_door) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_907, 907);
    ! [2: if the player is in the study]
    if (((I234_study == ContainerOf(player))))
    {! [3: say ~You look into the closet. There's a chest of drawers in there.~]
        say__p=1;! [4: ~You look into the closet. There's a chest of drawers in there.~]
        ParaContent(); print "You look into the closet. There's a chest of drawers in there."; new_line; .L_Say150; .L_SayX150;} else {
        ! [5: say ~It looks like a door.~]
        say__p=1;! [6: ~It looks like a door.~]
        ParaContent(); print "It looks like a door."; new_line; .L_Say151; .L_SayX151;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_907, 907, 'action');
        rfalse;
];
! No specific request
! Instead of opening the chest:
[ R_908 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I243_chest_of_drawers) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_908, 908);
    ! [2: say ~Which drawer do you want to open?~]
    say__p=1;! [3: ~Which drawer do you want to open?~]
    ParaContent(); print "Which drawer do you want to open?"; new_line; .L_Say152; .L_SayX152;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_908, 908, 'action');
    rfalse;
];
! No specific request
! Instead of taking off the dollop of hair gel:
[ R_909 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun == I258_dollop_of_hair_gel) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_909, 909);
    ! [2: say ~That's not how hair gel works.~]
    say__p=1;! [3: ~That's not how hair gel works.~]
    ParaContent(); print "That's not how hair gel works."; new_line; .L_Say153; .L_SayX153;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_909, 909, 'action');
    rfalse;
];
! No specific request
! Instead of wearing the can of hair gel:
[ R_910 ;
    if ((((action ==##Wear) &&  (actor==player) && ((noun == I257_can_of_hair_gel) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_910, 910);
    ! [2: if the mirror is not visible]
    if (((~~(((Adj_3_t1_v10(I255_mirror)))))))
    {! [3: say ~You can't put hair gel on without using a mirror! How unseemly.~]
        say__p=1;! [4: ~You can't put hair gel on without using a mirror! How unseemly.~]
        ParaContent(); print "You can't put hair gel on without using a mirror! How unseemly."; new_line; .L_Say154; .L_SayX154;} else {
        ! [5: if the player is wearing a dollop of hair gel]
        if (((player == WearerOf(I258_dollop_of_hair_gel))))
        {! [6: say ~You are already wearing hair gel. There's no point~]
            say__p=1;! [7: ~You are already wearing hair gel. There's no point~]
            ParaContent(); print "You are already wearing hair gel. There's no point"; .L_Say155; .L_SayX155;} else {
            ! [8: say ~Carefully, you spray the hair gel on your head while looking on the mirror. It looks great! You look very fancy.~]
            say__p=1;! [9: ~Carefully, you spray the hair gel on your head while looking on the mirror. It looks great! You look very fancy.~]
            ParaContent(); print "Carefully, you spray the hair gel on your head while looking on the mirror. It looks great! You look very fancy."; new_line; .L_Say156; .L_SayX156;! [10: now the player is wearing a dollop of hair gel]
            WearObject(I258_dollop_of_hair_gel,player);
            }
            }
            RulebookFails(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_910, 910, 'action');
            rfalse;
];
! No specific request
! Instead of switching on the faucet:
[ R_917 ;
    if ((((action ==##SwitchOn) &&  (actor==player) && ((noun == I261_faucet) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_917, 917);
    ! [2: say ~You turn on the faucet. Water starts flowing out.~]
    say__p=1;! [3: ~You turn on the faucet. Water starts flowing out.~]
    ParaContent(); print "You turn on the faucet. Water starts flowing out."; new_line; .L_Say157; .L_SayX157;! [4: now the faucet is on]
    (Adj_97_t2_v10(I261_faucet));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_917, 917, 'action');
    rfalse;
];
! No specific request
! Instead of switching off the faucet:
[ R_918 ;
    if ((((action ==##SwitchOff) &&  (actor==player) && ((noun == I261_faucet) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_918, 918);
    ! [2: say ~You turn off the faucet. Water stops flowing.~]
    say__p=1;! [3: ~You turn off the faucet. Water stops flowing.~]
    ParaContent(); print "You turn off the faucet. Water stops flowing."; new_line; .L_Say158; .L_SayX158;! [4: now the faucet is off]
    (Adj_98_t2_v10(I261_faucet));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_918, 918, 'action');
    rfalse;
];
! No specific request
! Instead of turning the faucet:
[ R_919 ;
    if ((((action ==##Turn) &&  (actor==player) && ((noun == I261_faucet) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_919, 919);
    ! [2: if the faucet is on]
    if ((((Adj_97_t1_v10(I261_faucet)))))
    {! [3: try switching off the faucet]
        TryAction(0, player, ##SwitchOff, I261_faucet, 0);
        } else {
        ! [4: try switching on the faucet]
        TryAction(0, player, ##SwitchOn, I261_faucet, 0);
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_919, 919, 'action');
        rfalse;
];
! No specific request
! Instead of opening the vat:
[ R_923 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I264_vat) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_923, 923);
    ! [2: say ~You lift the large plastic lid off of the vat, revealing the pungent rocket fuel beneath.~]
    say__p=1;! [3: ~You lift the large plastic lid off of the vat, revealing the pungent rocket fuel beneath.~]
    ParaContent(); print "You lift the large plastic lid off of the vat, revealing the pungent rocket fuel beneath."; new_line; .L_Say159; .L_SayX159;! [4: now the vat is open]
    (Adj_72_t2_v10(I264_vat));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_923, 923, 'action');
    rfalse;
];
! No specific request
! Instead of taking the key cabinet:
[ R_927 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I267_key_cabinet) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_927, 927);
    ! [2: say ~(the small metal key)~]
    say__p=1;! [3: ~(the small metal key)~]
    ParaContent(); print "(the small metal key)"; .L_Say160; .L_SayX160;! [4: try taking the small metal key]
    TryAction(0, player, ##Take, I268_small_metal_key, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_927, 927, 'action');
    rfalse;
];
! No specific request
! Instead of flying the spaceship:
[ R_933 ;
    if ((((action ==##A85_flying) &&  (actor==player) && ((noun == I288_spaceship) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_933, 933);
    ! [2: if the spaceship is not in the launch pad]
    if (((~~((I287_launch_pad == ContainerOf(I288_spaceship))))))
    {! [3: say ~You don't really know how but you try your best.[if the spaceship is out of control] It's not working very well.[end if]~]
        say__p=1;! [4: ~You don't really know how but you try your best.~]
        ParaContent(); print "You don't really know how but you try your best."; new_line;! [5: if the spaceship is out of control]

        	if (~~(((((Adj_105_t1_v10(I288_spaceship))))))) jump L_Say161;! [6: ~ It's not working very well.~]
        ParaContent(); print " It's not working very well."; new_line;! [7: end if]

        	.L_Say161; .L_SayX161; .L_Say162; .L_SayX162;} else {
        ! [8: say ~In order to do that you need to lift off the ground.~]
        say__p=1;! [9: ~In order to do that you need to lift off the ground.~]
        ParaContent(); print "In order to do that you need to lift off the ground."; new_line; .L_Say163; .L_SayX163;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_933, 933, 'action');
        rfalse;
];
! No specific request
! Instead of pushing the ON button:
[ R_934 ;
    if ((((action ==##Push) &&  (actor==player) && ((noun == I289_on_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_934, 934);
    ! [2: if the player is not in the spaceship]
    if (((~~((I288_spaceship == ContainerOf(player))))))
    {! [3: say ~You can't do that without being in the ship.~]
        say__p=1;! [4: ~You can't do that without being in the ship.~]
        ParaContent(); print "You can't do that without being in the ship."; new_line; .L_Say164; .L_SayX164;} else {
        ! [5: if the spaceship is broken]
        if ((((Adj_103_t1_v10(I288_spaceship)))))
        {! [6: say ~The spaceship doesn't seem to work anymore. Maybe someone crashed it.~]
            say__p=1;! [7: ~The spaceship doesn't seem to work anymore. Maybe someone crashed it.~]
            ParaContent(); print "The spaceship doesn't seem to work anymore. Maybe someone crashed it."; new_line; .L_Say165; .L_SayX165;} else {
            ! [8: if the spaceship is on]
            if ((((Adj_97_t1_v10(I288_spaceship)))))
            {! [9: say ~The spaceship is already on, you're not confident about what pressing that again would do so you're not gonna do it.~]
                say__p=1;! [10: ~The spaceship is already on, you're not confident about what pressing that again would do so you're not gonna do it.~]
                ParaContent(); print "The spaceship is already on, you're not confident about what pressing that again would do so you're not gonna do it."; new_line; .L_Say166; .L_SayX166;} else {
                ! [11: say ~You press the ON button. All around you dials spin and lights blink.~]
                say__p=1;! [12: ~You press the ON button. All around you dials spin and lights blink.~]
                ParaContent(); print "You press the ON button. All around you dials spin and lights blink."; new_line; .L_Say167; .L_SayX167;! [13: now the spaceship is on]
                (Adj_97_t2_v10(I288_spaceship));
                ! [14: if the spaceship is low on fuel]
                if ((((Adj_101_t1_v10(I288_spaceship)))))
                {! [15: say ~[paragraph break]A dialog appears on the screen: WARNING: LOW FUEL. SAY 'confirm' to continue. Mission abort HIGHLY recommended.~]
                    say__p=1;! [16: paragraph break]
                    ParaContent(); DivideParagraphPoint(); new_line;! [17: ~A dialog appears on the screen: WARNING: LOW FUEL. SAY 'confirm' to continue. Mission abort HIGHLY recommended.~]
                    ParaContent(); print "A dialog appears on the screen: WARNING: LOW FUEL. SAY ~confirm~ to continue. Mission abort HIGHLY recommended."; new_line; .L_Say168; .L_SayX168;! [18: now the spaceship is waiting for confirmation]
                    (Adj_102_t2_v10(I288_spaceship));
                    }
                    }
                    }
                    }
                    RulebookFails(); rtrue;
                    } else if (debug_rules > 1) DB_Rule(R_934, 934, 'action');
                    rfalse;
];
! No specific request
! Instead of pushing the LAUNCH button:
[ R_942 ;
    if ((((action ==##Push) &&  (actor==player) && ((noun == I290_launch_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_942, 942);
    ! [2: if the spaceship is off]
    if ((((Adj_98_t1_v10(I288_spaceship)))))
    {! [3: say ~The button doesn't do anything. Maybe try turning on the spaceship first?~]
        say__p=1;! [4: ~The button doesn't do anything. Maybe try turning on the spaceship first?~]
        ParaContent(); print "The button doesn't do anything. Maybe try turning on the spaceship first?"; new_line; .L_Say169; .L_SayX169;} else {
        ! [5: if the spaceship is open]
        if ((((Adj_72_t1_v10(I288_spaceship)))))
        {! [6: say ~Launching with the door open seems like an extraordinarily bad idea, even for yourself.~]
            say__p=1;! [7: ~Launching with the door open seems like an extraordinarily bad idea, even for yourself.~]
            ParaContent(); print "Launching with the door open seems like an extraordinarily bad idea, even for yourself."; new_line; .L_Say170; .L_SayX170;} else {
            ! [8: if the spaceship is waiting for confirmation]
            if ((((Adj_102_t1_v10(I288_spaceship)))))
            {! [9: say ~The warning about fuel flashes angrily at you. It's expecting a response.~]
                say__p=1;! [10: ~The warning about fuel flashes angrily at you. It's expecting a response.~]
                ParaContent(); print "The warning about fuel flashes angrily at you. It's expecting a response."; new_line; .L_Say171; .L_SayX171;} else {
                ! [11: if the spaceship is in the launch pad]
                if (((I287_launch_pad == ContainerOf(I288_spaceship))))
                {! [12: say ~The computer counts down: '3... 2... 1... LAUNCHING'. [paragraph break] The world around you starts to disappear into the smoke emitted from the rocket engine. You feel yourself pressed into the seat as the spaceship lifts off toward the sky. [paragraph break]The computer says 'This ship is equipped with an auto space suit. Simply say SUIT UP and the ship will automatically put your space suit on you so you can go out into space.'~]
                    say__p=1;! [13: ~The computer counts down: '3... 2... 1... LAUNCHING'. ~]
                    ParaContent(); print "The computer counts down: ~3... 2... 1... LAUNCHING~. ";! [14: paragraph break]
                    ParaContent(); DivideParagraphPoint(); new_line;! [15: ~ The world around you starts to disappear into the smoke emitted from the rocket engine. You feel yourself pressed into the seat as the spaceship lifts off toward the sky. ~]
                    ParaContent(); print " The world around you starts to disappear into the smoke emitted from the rocket engine. You feel yourself pressed into the seat as the spaceship lifts off toward the sky. ";! [16: paragraph break]
                    ParaContent(); DivideParagraphPoint(); new_line;! [17: ~The computer says 'This ship is equipped with an auto space suit. Simply say SUIT UP and the ship will automatically put your space suit on you so you can go out into space.'~]
                    ParaContent(); print "The computer says ~This ship is equipped with an auto space suit. Simply say SUIT UP and the ship will automatically put your space suit on you so you can go out into space.~"; new_line; .L_Say172; .L_SayX172;! [18: now the spaceship is in the air]
                    MoveObject(I288_spaceship,I294_air);
                    ! [19: autopilot engages in one turns from now]
                    SetTimedEvent(R_945, 1+1, 0);
                    } else {
                    ! [20: say ~You've already launched, what do you expect to happen?~]
                    say__p=1;! [21: ~You've already launched, what do you expect to happen?~]
                    ParaContent(); print "You've already launched, what do you expect to happen?"; new_line; .L_Say173; .L_SayX173;}
                    }
                    }
                    }
                    RulebookFails(); rtrue;
                    } else if (debug_rules > 1) DB_Rule(R_942, 942, 'action');
                    rfalse;
];
! No specific request
! Instead of entering the tracks:
[ R_962 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I305_tracks) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_962, 962);
    ! [2: if the train is ready]
    if ((((Adj_108_t1_v10(I303_abandoned_train_station)))))
    {! [3: say ~As you start to climb down, you see the train coming in the distance and you think better of it. Maybe if you ran across you'd make it in time?~]
        say__p=1;! [4: ~As you start to climb down, you see the train coming in the distance and you think better of it. Maybe if you ran across you'd make it in time?~]
        ParaContent(); print "As you start to climb down, you see the train coming in the distance and you think better of it. Maybe if you ran across you'd make it in time?"; new_line; .L_Say174; .L_SayX174;} else {
        ! [5: say ~You wander around the abandoned train tracks. Cool! You return to the platform where it's probably safer.~]
        say__p=1;! [6: ~You wander around the abandoned train tracks. Cool! You return to the platform where it's probably safer.~]
        ParaContent(); print "You wander around the abandoned train tracks. Cool! You return to the platform where it's probably safer."; new_line; .L_Say175; .L_SayX175;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_962, 962, 'action');
        rfalse;
];
! No specific request
! Instead of pushing the CALL TRAIN button:
[ R_964 ;
    if ((((action ==##Push) &&  (actor==player) && ((noun == I307_call_train_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_964, 964);
    ! [2: if the finnickiness of the button is 16 and the button is unexamined]
    if ((((GProperty(10, I289_on_button,p18_finnickiness) == 16))) && ((((Adj_110_t1_v10(I289_on_button))))))
    {! [3: say ~Now that you've been standing here for a bit, you notice a sticky note next to the button.~]
        say__p=1;! [4: ~Now that you've been standing here for a bit, you notice a sticky note next to the button.~]
        ParaContent(); print "Now that you've been standing here for a bit, you notice a sticky note next to the button."; new_line; .L_Say176; .L_SayX176;}
    ! [5: if the finnickiness of the button is not 0]
    if (((~~((GProperty(10, I289_on_button,p18_finnickiness) == 0)))))
    {! [6: say ~You press the CALL TRAIN button. Nothing happens. Maybe try pressing the button again.~]
        say__p=1;! [7: ~You press the CALL TRAIN button. Nothing happens. Maybe try pressing the button again.~]
        ParaContent(); print "You press the CALL TRAIN button. Nothing happens. Maybe try pressing the button again."; new_line; .L_Say177; .L_SayX177;! [8: decrease the finnickiness of the button by 1]
        WriteGProperty(10, I289_on_button,p18_finnickiness,GProperty(10, I289_on_button,p18_finnickiness) - 1);;
        } else {
        ! [9: say ~You press the CALL TRAIN button. An electronic voice informs you, 'The train will be here any minute now.' That was easy.~]
        say__p=1;! [10: ~You press the CALL TRAIN button. An electronic voice informs you, 'The train will be here any minute now.' That was easy.~]
        ParaContent(); print "You press the CALL TRAIN button. An electronic voice informs you, ~The train will be here any minute now.~ That was easy."; new_line; .L_Say178; .L_SayX178;! [11: now the train is ready]
        (Adj_108_t2_v10(I303_abandoned_train_station));
        ! [12: the train comes in 10 turns from now]
        SetTimedEvent(R_966, 10+1, 0);
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_964, 964, 'action');
        rfalse;
];
! No specific request
! Instead of lacing the pair of running shoes:
[ R_971 ;
    if ((((action ==##A91_lacing) &&  (actor==player) && ((noun == I229_pair_of_running_shoes) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_971, 971);
    ! [2: if the player is not wearing the pair of running shoes]
    if (((~~((player == WearerOf(I229_pair_of_running_shoes))))))
    {! [3: say ~That seems like a rather pointless endeavor if you're not wearing the shoes..~]
        say__p=1;! [4: ~That seems like a rather pointless endeavor if you're not wearing the shoes..~]
        ParaContent(); print "That seems like a rather pointless endeavor if you're not wearing the shoes.."; new_line; .L_Say179; .L_SayX179;} else {
        ! [5: say ~You tie the laces on the running shoes so that there is no chance you could trip on them. You're ready to run!~]
        say__p=1;! [6: ~You tie the laces on the running shoes so that there is no chance you could trip on them. You're ready to run!~]
        ParaContent(); print "You tie the laces on the running shoes so that there is no chance you could trip on them. You're ready to run!"; new_line; .L_Say180; .L_SayX180;! [7: now the pair of running shoes is laced]
        (Adj_111_t2_v10(I229_pair_of_running_shoes));
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_971, 971, 'action');
        rfalse;
];
! No specific request
! Instead of taking the snake:
[ R_975 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I315_snake) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_975, 975);
    ! [2: say ~The snake is moving too fast for that. Maybe if you could lure them to you...~]
    say__p=1;! [3: ~The snake is moving too fast for that. Maybe if you could lure them to you...~]
    ParaContent(); print "The snake is moving too fast for that. Maybe if you could lure them to you..."; new_line; .L_Say181; .L_SayX181;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_975, 975, 'action');
    rfalse;
];
! No specific request
! Instead of taking the candle:
[ R_978 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I313_candle) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_978, 978);
    ! [2: say ~You feel like taking the candle will disrupt the rituals here and curse you and your descendants. Probably better not to disturb it.~]
    say__p=1;! [3: ~You feel like taking the candle will disrupt the rituals here and curse you and your descendants. Probably better not to disturb it.~]
    ParaContent(); print "You feel like taking the candle will disrupt the rituals here and curse you and your descendants. Probably better not to disturb it."; new_line; .L_Say182; .L_SayX182;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_978, 978, 'action');
    rfalse;
];
! No specific request
! Instead of blowing out the candle:
[ R_980 ;
    if ((((action ==##A92_blowing_out) &&  (actor==player) && ((noun == I313_candle) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_980, 980);
    ! [2: say ~That seems really rude. Someone lit that candle for a reason, and you can't just go blowing things out willy nilly.~]
    say__p=1;! [3: ~That seems really rude. Someone lit that candle for a reason, and you can't just go blowing things out willy nilly.~]
    ParaContent(); print "That seems really rude. Someone lit that candle for a reason, and you can't just go blowing things out willy nilly."; new_line; .L_Say183; .L_SayX183;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_980, 980, 'action');
    rfalse;
];
! No specific request
! Instead of entering the stream:
[ R_983 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I327_stream) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_983, 983);
    ! [2: say ~Water is nice, but out here? Maybe in the privacy of your own home you'd reconsider.~]
    say__p=1;! [3: ~Water is nice, but out here? Maybe in the privacy of your own home you'd reconsider.~]
    ParaContent(); print "Water is nice, but out here? Maybe in the privacy of your own home you'd reconsider."; new_line; .L_Say184; .L_SayX184;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_983, 983, 'action');
    rfalse;
];
! No specific request
! Instead of dropping the wasps' nest:
[ R_991 ;
    if ((((action ==##Drop) &&  (actor==player) && ((noun == I337_wasps__nest) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_991, 991);
    ! [2: say ~You toss the wasps[apostrophe] nest. Your last sensation is a barrage of stings from the army of angry wasps that bursts from the nest to attack you.~]
    say__p=1;! [3: ~You toss the wasps~]
    ParaContent(); print "You toss the wasps";! [4: apostrophe]
    ParaContent(); print "'";! [5: ~ nest. Your last sensation is a barrage of stings from the army of angry wasps that bursts from the nest to attack you.~]
    ParaContent(); print " nest. Your last sensation is a barrage of stings from the army of angry wasps that bursts from the nest to attack you."; new_line; .L_Say185; .L_SayX185;! [6: conclude with 34]
    (PHR_827_r2 (34));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_991, 991, 'action');
    rfalse;
];
! No specific request
! Instead of wearing the moose head:
[ R_1000 ;
    if ((((action ==##Wear) &&  (actor==player) && ((noun == I349_moose_head) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1000, 1000);
    ! [2: if the player is in the hunting grounds or the player is in the woods]
    if ((((I347_hunting_grounds == ContainerOf(player)))) || (((I332_woods == ContainerOf(player)))))
    {! [3: say ~You slip in mud while trying to put the moose head over your own. Maybe you should do this on more stable ground.~]
        say__p=1;! [4: ~You slip in mud while trying to put the moose head over your own. Maybe you should do this on more stable ground.~]
        ParaContent(); print "You slip in mud while trying to put the moose head over your own. Maybe you should do this on more stable ground."; new_line; .L_Say186; .L_SayX186;} else {
        ! [5: continue the action]
        rfalse;
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1000, 1000, 'action');
        rfalse;
];
! No specific request
! Instead of attacking the bear:
[ R_1006 ;
    if ((((action ==##Attack) &&  (actor==player) && ((noun == I353_grizzly_bear) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1006, 1006);
    ! [2: if the player is holding the stick]
    if (((player == HolderOf(I231_stick))))
    {! [3: say ~You take your stick and poke the bear. It wakes up and promptly eats you.~]
        say__p=1;! [4: ~You take your stick and poke the bear. It wakes up and promptly eats you.~]
        ParaContent(); print "You take your stick and poke the bear. It wakes up and promptly eats you."; new_line; .L_Say187; .L_SayX187;! [5: conclude with 24]
        (PHR_827_r2 (24));
        } else {
        ! [6: if the player is holding the knife]
        if (((player == HolderOf(I314_sacrificial_knife))))
        {! [7: say ~You're not so violent as to use a knife on a poor innocent bear.~]
            say__p=1;! [8: ~You're not so violent as to use a knife on a poor innocent bear.~]
            ParaContent(); print "You're not so violent as to use a knife on a poor innocent bear."; new_line; .L_Say188; .L_SayX188;} else {
            ! [9: say ~With your bear (*ahem*) bare hands? You're kind of dumb, but not *that* dumb.~]
            say__p=1;! [10: ~With your bear (*ahem*) bare hands? You're kind of dumb, but not *that* dumb.~]
            ParaContent(); print "With your bear (*ahem*) bare hands? You're kind of dumb, but not *that* dumb."; new_line; .L_Say189; .L_SayX189;}
            }
            RulebookFails(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_1006, 1006, 'action');
            rfalse;
];
! No specific request
! Instead of drinking the soylent:
[ R_1014 ;
    if ((((action ==##Drink) &&  (actor==player) && ((noun == I361_bottle_of_soylent) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1014, 1014);
    ! [2: try eating the soylent]
    TryAction(0, player, ##Eat, I361_bottle_of_soylent, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1014, 1014, 'action');
    rfalse;
];
! No specific request
! Instead of cutting the super glue:
[ R_1017 ;
    if ((((action ==##Cut) &&  (actor==player) && ((noun == I362_super_glue) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1017, 1017);
    ! [2: if the player does not have the glue]
    if (((~~((player == OwnerOf(I362_super_glue))))))
    {! [3: say ~You need to take the tube of super glue first.~]
        say__p=1;! [4: ~You need to take the tube of super glue first.~]
        ParaContent(); print "You need to take the tube of super glue first."; new_line; .L_Say190; .L_SayX190;} else {
        ! [5: if the player has the knife]
        if (((player == OwnerOf(I314_sacrificial_knife))))
        {! [6: if the super glue is whole]
            if ((((Adj_118_t1_v10(I362_super_glue)))))
            {! [7: say ~You use the sacrificial knife to cut the super glue's tip right off. Glue gurgles out of the tube viscously.~]
                say__p=1;! [8: ~You use the sacrificial knife to cut the super glue's tip right off. Glue gurgles out of the tube viscously.~]
                ParaContent(); print "You use the sacrificial knife to cut the super glue's tip right off. Glue gurgles out of the tube viscously."; new_line; .L_Say191; .L_SayX191;! [9: now the glue is cut]
                (Adj_117_t2_v10(I362_super_glue));
                ! [10: the glue recongeals in three turns from now]
                SetTimedEvent(R_1018, 3+1, 0);
                } else {
                ! [11: say ~That seems hard to do without gluing your fingers together.~]
                say__p=1;! [12: ~That seems hard to do without gluing your fingers together.~]
                ParaContent(); print "That seems hard to do without gluing your fingers together."; new_line; .L_Say192; .L_SayX192;}
                } else {
            ! [13: say ~With your bare hands??~]
            say__p=1;! [14: ~With your bare hands??~]
            ParaContent(); print "With your bare hands??"; new_line; .L_Say193; .L_SayX193;}
            }
            RulebookFails(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_1017, 1017, 'action');
            rfalse;
];
! No specific request
! Instead of eating the super glue:
[ R_1019 ;
    if ((((action ==##Eat) &&  (actor==player) && ((noun == I362_super_glue) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1019, 1019);
    ! [2: if the super glue is whole]
    if ((((Adj_118_t1_v10(I362_super_glue)))))
    {! [3: say ~That doesn't look very edible right now. Maybe if there were an opening and you could actually squeeze it into your mouth?~]
        say__p=1;! [4: ~That doesn't look very edible right now. Maybe if there were an opening and you could actually squeeze it into your mouth?~]
        ParaContent(); print "That doesn't look very edible right now. Maybe if there were an opening and you could actually squeeze it into your mouth?"; new_line; .L_Say194; .L_SayX194;} else {
        ! [5: say ~You squeeze the tube of super glue into your mouth. It tastes like candy! Shortly thereafter, it starts to taste like your throat is glued shut. Maybe this wasn't a great idea...~]
        say__p=1;! [6: ~You squeeze the tube of super glue into your mouth. It tastes like candy! Shortly thereafter, it starts to taste like your throat is glued shut. Maybe this wasn't a great idea...~]
        ParaContent(); print "You squeeze the tube of super glue into your mouth. It tastes like candy! Shortly thereafter, it starts to taste like your throat is glued shut. Maybe this wasn't a great idea..."; new_line; .L_Say195; .L_SayX195;! [7: conclude with 19]
        (PHR_827_r2 (19));
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1019, 1019, 'action');
        rfalse;
];
! No specific request
! Instead of climbing the ladder:
[ R_1021 ;
    if ((((action ==##Climb) &&  (actor==player) && ((noun == I359_ladder) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1021, 1021);
    ! [2: try going up]
    TryAction(0, player, ##Go, I59_up, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1021, 1021, 'action');
    rfalse;
];
! No specific request
! Instead of pushing the button:
[ R_1032 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((action ==##Push) &&  (actor==player) && ((noun == I365_red_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1032, 1032);
    ! [2: if the player is not in the time machine]
    if (((~~((I364_time_machine == ContainerOf(player))))))
    {! [3: say ~You can't reach that. You'd have to be in the time machine first.~]
        say__p=1;! [4: ~You can't reach that. You'd have to be in the time machine first.~]
        ParaContent(); print "You can't reach that. You'd have to be in the time machine first."; new_line; .L_Say196; .L_SayX196;! [5: stop the action]
        rtrue;
        }
    ! [6: if the coin slot's credits is 0]
    if ((((Global_Vars-->15) == 0)))
    {! [7: say ~You need to put a quarter in the coin slot first.~]
        say__p=1;! [8: ~You need to put a quarter in the coin slot first.~]
        ParaContent(); print "You need to put a quarter in the coin slot first."; new_line; .L_Say197; .L_SayX197;} else {
        ! [9: say ~You feel yourself pressed back into the seat, and the world swirls around you. The sun sets and rises again many times. And then, suddenly, the world is calm.~]
        say__p=1;! [10: ~You feel yourself pressed back into the seat, and the world swirls around you. The sun sets and rises again many times. And then, suddenly, the world is calm.~]
        ParaContent(); print "You feel yourself pressed back into the seat, and the world swirls around you. The sun sets and rises again many times. And then, suddenly, the world is calm."; new_line; .L_Say198; .L_SayX198;! [11: increase the time machine's use count by the coin slot's credits]
        (Global_Vars-->14) = (Global_Vars-->14) + (Global_Vars-->15);;
        ! [12: decrease the poster weeks by the coin slot's credits]
        (Global_Vars-->13) = (Global_Vars-->13) - (Global_Vars-->15);;
        ! [13: decrease the poster weeks by the coin slot's credits]
        (Global_Vars-->13) = (Global_Vars-->13) - (Global_Vars-->15);;
        ! [14: now the coin slot's credits is 0]
        (Global_Vars-->15) = 0;
        ! [15: now the wasps' nest is nowhere]
        RemoveFromPlay(I337_wasps__nest);;
        ! [16: now the nest is found]
        (Adj_113_t2_v10(I337_wasps__nest));
        ! [17: if the pie is guarded]
        if (((PHR_1028_r6 ())))
        {! [18: if the pie is not in the refrigerator]
            if (((~~((I207_refrigerator == ContainerOf(I219_pie))))))
            {! [19: now the pie is aged]
                (Adj_120_t2_v10(I219_pie));
                }
                } else {
            ! [20: if the pie is not enclosed by the time machine]
            if (((~~((IndirectlyContains(I364_time_machine,I219_pie))))))
            {! [21: let x be the location of the pie]

                		tmp_0 = LocationOf(I219_pie);
                ! [22: now the pie is nowhere]
                RemoveFromPlay(I219_pie);;
                ! [23: move the pie crumbs to x]
                MoveObject(I370_pie_crumbs, tmp_0, 0, false);
                }
                }
                }
                RulebookFails(); rtrue;
                } else if (debug_rules > 1) DB_Rule(R_1032, 1032, 'action');
                rfalse;
];
! No specific request
! Instead of touching the wire:
[ R_1035 ;
    if ((((action ==##Touch) &&  (actor==player) && ((noun == I373_wire) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1035, 1035);
    ! [2: say ~The instant you touch the wire, ten thousand volts course through your body.~]
    say__p=1;! [3: ~The instant you touch the wire, ten thousand volts course through your body.~]
    ParaContent(); print "The instant you touch the wire, ten thousand volts course through your body."; new_line; .L_Say199; .L_SayX199;! [4: conclude with 23]
    (PHR_827_r2 (23));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1035, 1035, 'action');
    rfalse;
];
! No specific request
! Instead of attacking the black car:
[ R_1036 ;
    if ((((action ==##Attack) &&  (actor==player) && ((noun == I375_black_car) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1036, 1036);
    ! [2: say ~The next sensation you have is somebody behind you throwing you into a bag, then a giant impact, then nothing.~]
    say__p=1;! [3: ~The next sensation you have is somebody behind you throwing you into a bag, then a giant impact, then nothing.~]
    ParaContent(); print "The next sensation you have is somebody behind you throwing you into a bag, then a giant impact, then nothing."; new_line; .L_Say200; .L_SayX200;! [4: conclude with 31]
    (PHR_827_r2 (31));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1036, 1036, 'action');
    rfalse;
];
! No specific request
! Instead of entering the clothes dryer:
[ R_1037 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I377_clothes_dryer) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1037, 1037);
    ! [2: say ~You get into the dryer, feeling the rough bumps of the surface, and then settle in for a bit. After a few moments, you find the dryer interior, and yourself, spinning. It goes faster, and faster, and faster, and faster...~]
    say__p=1;! [3: ~You get into the dryer, feeling the rough bumps of the surface, and then settle in for a bit. After a few moments, you find the dryer interior, and yourself, spinning. It goes faster, and faster, and faster, and faster...~]
    ParaContent(); print "You get into the dryer, feeling the rough bumps of the surface, and then settle in for a bit. After a few moments, you find the dryer interior, and yourself, spinning. It goes faster, and faster, and faster, and faster..."; new_line; .L_Say201; .L_SayX201;! [4: conclude with 30]
    (PHR_827_r2 (30));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1037, 1037, 'action');
    rfalse;
];
! No specific request
! Instead of opening the front door:
[ R_1038 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I378_front_door) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1038, 1038);
    ! [2: say ~You open the door. Somebody wearing a weird mask comes in.~]
    say__p=1;! [3: ~You open the door. Somebody wearing a weird mask comes in.~]
    ParaContent(); print "You open the door. Somebody wearing a weird mask comes in."; new_line; .L_Say202; .L_SayX202;! [4: conclude with 25]
    (PHR_827_r2 (25));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1038, 1038, 'action');
    rfalse;
];
! No specific request
! Instead of opening something portable:
[ R_1016 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun ofclass K2_thing) && ((Adj_58_t1_v10(noun))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1016, 1016);
    ! [2: if the player does not have the noun]
    if (((~~((player == OwnerOf(noun))))))
    {! [3: say ~You need to pick up [the noun] before you can open it.~]
        say__p=1;! [4: ~You need to pick up ~]
        ParaContent(); print "You need to pick up ";! [5: the noun]
        ParaContent(); print (the) noun;! [6: ~ before you can open it.~]
        ParaContent(); print " before you can open it."; new_line; .L_Say203; .L_SayX203;} else {
        ! [7: continue the action]
        rfalse;
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1016, 1016, 'action');
        rfalse;
];
! No specific request
! Instead of taking a liquid:
[ R_845 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun ofclass K16_liquid))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_845, 845);
    ! [2: say ~You try to pick up [the noun] but it slips through your fingers.~]
    say__p=1;! [3: ~You try to pick up ~]
    ParaContent(); print "You try to pick up ";! [4: the noun]
    ParaContent(); print (the) noun;! [5: ~ but it slips through your fingers.~]
    ParaContent(); print " but it slips through your fingers."; new_line; .L_Say204; .L_SayX204;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_845, 845, 'action');
    rfalse;
];
! No specific request
! Instead of shaking a tree:
[ R_993 ;
    if ((((action ==##A93_shaking) &&  (actor==player) && ((noun ofclass K23_tree))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_993, 993);
    ! [2: say ~You shake the tree vigorously.~]
    say__p=1;! [3: ~You shake the tree vigorously.~]
    ParaContent(); print "You shake the tree vigorously."; new_line; .L_Say205; .L_SayX205;! [4: if the player is in top of ash tree and the wasps' nest is in top of ash tree]
    if ((((I338_top_of_ash_tree == ContainerOf(player)))) && (((I338_top_of_ash_tree == ContainerOf(I337_wasps__nest)))))
    {! [5: say ~The wasps[apostrophe] nest is dislodged. You watch it fall to the top of the elm tree.~]
        say__p=1;! [6: ~The wasps~]
        ParaContent(); print "The wasps";! [7: apostrophe]
        ParaContent(); print "'";! [8: ~ nest is dislodged. You watch it fall to the top of the elm tree.~]
        ParaContent(); print " nest is dislodged. You watch it fall to the top of the elm tree."; new_line; .L_Say206; .L_SayX206;! [9: now the wasps' nest is in top of elm tree]
        MoveObject(I337_wasps__nest,I344_top_of_elm_tree);
        } else {
        ! [10: if the player is in top of elm tree and the wasps' nest is in top of elm tree]
        if ((((I344_top_of_elm_tree == ContainerOf(player)))) && (((I344_top_of_elm_tree == ContainerOf(I337_wasps__nest)))))
        {! [11: say ~The wasps[apostrophe] nest is dislodged. You watch it fall to the top of the pine tree.~]
            say__p=1;! [12: ~The wasps~]
            ParaContent(); print "The wasps";! [13: apostrophe]
            ParaContent(); print "'";! [14: ~ nest is dislodged. You watch it fall to the top of the pine tree.~]
            ParaContent(); print " nest is dislodged. You watch it fall to the top of the pine tree."; new_line; .L_Say207; .L_SayX207;! [15: now the wasps' nest is in top of pine tree]
            MoveObject(I337_wasps__nest,I340_top_of_pine_tree);
            } else {
            ! [16: if the player is in top of pine tree and the wasps' nest is in top of pine tree]
            if ((((I340_top_of_pine_tree == ContainerOf(player)))) && (((I340_top_of_pine_tree == ContainerOf(I337_wasps__nest)))))
            {! [17: say ~The wasps[apostrophe] nest is dislodged. You watch it fall to the forest floor.~]
                say__p=1;! [18: ~The wasps~]
                ParaContent(); print "The wasps";! [19: apostrophe]
                ParaContent(); print "'";! [20: ~ nest is dislodged. You watch it fall to the forest floor.~]
                ParaContent(); print " nest is dislodged. You watch it fall to the forest floor."; new_line; .L_Say208; .L_SayX208;! [21: now the wasps' nest is in woods]
                MoveObject(I337_wasps__nest,I332_woods);
                ! [22: now the nest is found]
                (Adj_113_t2_v10(I337_wasps__nest));
                }
                }
                }
                RulebookFails(); rtrue;
                } else if (debug_rules > 1) DB_Rule(R_993, 993, 'action');
                rfalse;
];
! No specific request
! Instead of climbing a tree ( called the apparatus ):
[ R_995 
    tmp_0 ! Let/loop value, e.g., 'apparatus': tree
    ;
    if ((((action ==##Climb) &&  (actor==player) && (tmp_0 = noun, (((noun ofclass K23_tree) && (tmp_0=(noun), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_995, 995);
    ! [2: if the player is in the car]
    if (((I302_blue_car == ContainerOf(player))))
    {! [3: say ~You'll have to get out of the car to do that.~]
        say__p=1;! [4: ~You'll have to get out of the car to do that.~]
        ParaContent(); print "You'll have to get out of the car to do that."; new_line; .L_Say209; .L_SayX209;} else {
        ! [5: if the player is enclosed by the woods]
        if (((IndirectlyContains(I332_woods,player))))
        {! [6: move the player to the branches of the apparatus]
            MoveObject(player, GProperty(10, tmp_0,p19_branches), 0, false);
            } else {
            ! [7: try going up]
            TryAction(0, player, ##Go, I59_up, 0);
            }
            }
            RulebookFails(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_995, 995, 'action');
            rfalse;
];
! No specific request
! Instead of listening when the player is in the woods and the nest is not found:
[ R_874 ;
    if ((((action ==##Listen) &&  (actor==player) && (self=actor,true) && ((((I332_woods == ContainerOf(player)))) && (((~~(((Adj_113_t1_v10(I337_wasps__nest))))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_874, 874);
    ! [2: say ~You can hear the buzzing of wasps. They seem to be coming from [the wasp tree].~]
    say__p=1;! [3: ~You can hear the buzzing of wasps. They seem to be coming from ~]
    ParaContent(); print "You can hear the buzzing of wasps. They seem to be coming from ";! [4: the wasp tree]
    ParaContent(); (PHR_872_r7 ());! [5: ~.~]
    ParaContent(); print "."; new_line; .L_Say210; .L_SayX210;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_874, 874, 'action');
    rfalse;
];
! No specific request
! Instead of listening when the iPod is playing:
[ R_873 ;
    if ((((action ==##Listen) &&  (actor==player) && (self=actor,true) && ((((Adj_87_t1_v10(I200_ipod)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_873, 873);
    ! [2: if the player is wearing the earbuds]
    if (((player == WearerOf(I239_earbuds))))
    {! [3: say ~Your favorite song! It's a cute and silly song that went viral a few years ago, some kind of campaign or something - you can't quite remember, but you know most of the lyrics by heart, because they're important.~]
        say__p=1;! [4: ~Your favorite song! It's a cute and silly song that went viral a few years ago, some kind of campaign or something - you can't quite remember, but you know most of the lyrics by heart, because they're important.~]
        ParaContent(); print "Your favorite song! It's a cute and silly song that went viral a few years ago, some kind of campaign or something - you can't quite remember, but you know most of the lyrics by heart, because they're important."; new_line; .L_Say211; .L_SayX211;} else {
        ! [5: if the player has the earbuds]
        if (((player == OwnerOf(I239_earbuds))))
        {! [6: say ~You can hear a song coming from the earbuds. Maybe if you put them on you could hear it better.~]
            say__p=1;! [7: ~You can hear a song coming from the earbuds. Maybe if you put them on you could hear it better.~]
            ParaContent(); print "You can hear a song coming from the earbuds. Maybe if you put them on you could hear it better."; new_line; .L_Say212; .L_SayX212;}
            }
            RulebookFails(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_873, 873, 'action');
            rfalse;
];
! No specific request
! Instead of going when the player is wearing the pair of running shoes:
[ R_968 ;
    if ((((action ==##Go) &&  (actor==player) && (self=actor,true) && (((player == WearerOf(I229_pair_of_running_shoes))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_968, 968);
    ! [2: say ~You're wearing running shoes. These are for running, not just exploring.~]
    say__p=1;! [3: ~You're wearing running shoes. These are for running, not just exploring.~]
    ParaContent(); print "You're wearing running shoes. These are for running, not just exploring."; new_line; .L_Say213; .L_SayX213;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_968, 968, 'action');
    rfalse;
];
! No specific request
! Instead of suiting-up:
[ R_939 ;
    if ((((action ==##A86_suiting_up) &&  (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_939, 939);
    ! [2: if the computer is visible]
    if ((((Adj_3_t1_v10(I291_computer)))))
    {! [3: try answering the computer that ~SUIT UP~]
        TryAction(32, player, ##Answer, I291_computer, TX_L_321);
        } else {
        ! [4: say ~That doesn't make sense here.~]
        say__p=1;! [5: ~That doesn't make sense here.~]
        ParaContent(); print "That doesn't make sense here."; new_line; .L_Say214; .L_SayX214;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_939, 939, 'action');
        rfalse;
];
! No specific request
! Instead of confirming:
[ R_940 ;
    if ((((action ==##A87_confirming) &&  (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_940, 940);
    ! [2: if the computer is visible]
    if ((((Adj_3_t1_v10(I291_computer)))))
    {! [3: try answering the computer that ~CONFIRM~]
        TryAction(32, player, ##Answer, I291_computer, TX_L_322);
        } else {
        ! [4: say ~That doesn't make sense here.~]
        say__p=1;! [5: ~That doesn't make sense here.~]
        ParaContent(); print "That doesn't make sense here."; new_line; .L_Say215; .L_SayX215;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_940, 940, 'action');
        rfalse;
];
! No specific request
! Instead of canceling:
[ R_941 ;
    if ((((action ==##A88_canceling) &&  (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_941, 941);
    ! [2: if the computer is visible]
    if ((((Adj_3_t1_v10(I291_computer)))))
    {! [3: try answering the computer that ~CANCEL~]
        TryAction(32, player, ##Answer, I291_computer, TX_L_323);
        } else {
        ! [4: say ~That doesn't make sense here.~]
        say__p=1;! [5: ~That doesn't make sense here.~]
        ParaContent(); print "That doesn't make sense here."; new_line; .L_Say216; .L_SayX216;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_941, 941, 'action');
        rfalse;
];
! No specific request
! Instead of going-up:
[ R_996 ;
    if ((((action ==##A94_going_up) &&  (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_996, 996);
    ! [2: try going up]
    TryAction(0, player, ##Go, I59_up, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_996, 996, 'action');
    rfalse;
];
! No specific request
! Instead of going-down:
[ R_997 ;
    if ((((action ==##A95_going_down) &&  (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_997, 997);
    ! [2: try going down]
    TryAction(0, player, ##Go, I60_down, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_997, 997, 'action');
    rfalse;
];
! No specific request
! Instead of going nowhere from the Woods ( this is the too many trees rule ):
[ R_988 ;
    if ((((action ==##Go) &&  (actor==player) && (((MStack-->MstVON(20007,0)) == I332_woods) && ((MStack-->MstVON(20007,0)) ofclass K1_room)) && ((MStack-->MstVON(20007,1)) == nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_988, 988);
    ! [2: say ~Too many trees. You'd get lost.~]
    say__p=1;! [3: ~Too many trees. You'd get lost.~]
    ParaContent(); print "Too many trees. You'd get lost."; new_line; .L_Say217; .L_SayX217;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_988, 988, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: After (B23_after)
! ----------------------------------------------------------------------------------------------------
! Rule 1/8 ! After inserting something into the inner safe:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 2/8 ! After taking the muddy brown key:
!   === equally specific with ===
! Rule 3/8 ! After entering the blue car:
!   === equally specific with ===
! Rule 4/8 ! After examining the map:
!   === equally specific with ===
! Rule 5/8 ! After examining the CALL TRAIN button:
!   === equally specific with ===
! Rule 6/8 ! After taking off the pair of running shoes:
!   === equally specific with ===
! Rule 7/8 ! After eating the soylent:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 8/8 ! After dropping a mouse:
! ----------------------------------------------------------------------------------------------------
! No specific request
! After inserting something into the inner safe:
[ R_1027 ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second == I369_inner_safe) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1027, 1027);
    ! [2: say ~After you put [the noun] into the inner safe, it closes with a whoosh.~]
    say__p=1;! [3: ~After you put ~]
    ParaContent(); print "After you put ";! [4: the noun]
    ParaContent(); print (the) noun;! [5: ~ into the inner safe, it closes with a whoosh.~]
    ParaContent(); print " into the inner safe, it closes with a whoosh."; new_line; .L_Say218; .L_SayX218;! [6: now the inner safe is closed]
    (Adj_73_t2_v10(I369_inner_safe));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1027, 1027, 'action');
    rfalse;
];
! No specific request
! After taking the muddy brown key:
[ R_878 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I202_muddy_brown_key) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_878, 878);
    ! [2: now the muddy brown key is described]
    (Adj_63_t2_v10(I202_muddy_brown_key));
    ! [3: say ~Taken.~]
    say__p=1;! [4: ~Taken.~]
    ParaContent(); print "Taken."; new_line; .L_Say219; .L_SayX219;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_878, 878, 'action');
    rfalse;
];
! No specific request
! After entering the blue car:
[ R_956 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I302_blue_car) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_956, 956);
    ! [2: say ~You get into and start the car. It's ready to roll!~]
    say__p=1;! [3: ~You get into and start the car. It's ready to roll!~]
    ParaContent(); print "You get into and start the car. It's ready to roll!"; new_line; .L_Say220; .L_SayX220;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_956, 956, 'action');
    rfalse;
];
! No specific request
! After examining the map:
[ R_961 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I304_map) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_961, 961);
    ! [2: now the map is examined]
    (Adj_109_t2_v10(I304_map));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_961, 961, 'action');
    rfalse;
];
! No specific request
! After examining the CALL TRAIN button:
[ R_965 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I307_call_train_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_965, 965);
    ! [2: now the noun is examined]
    (Adj_109_t2_v10(noun));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_965, 965, 'action');
    rfalse;
];
! No specific request
! After taking off the pair of running shoes:
[ R_972 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun == I229_pair_of_running_shoes) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_972, 972);
    ! [2: now the pair of running shoes is not laced]
    (Adj_111_t3_v10(I229_pair_of_running_shoes));
    ! [3: say ~You take off the running shoes.~]
    say__p=1;! [4: ~You take off the running shoes.~]
    ParaContent(); print "You take off the running shoes."; new_line; .L_Say221; .L_SayX221;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_972, 972, 'action');
    rfalse;
];
! No specific request
! After eating the soylent:
[ R_1013 ;
    if ((((action ==##Eat) &&  (actor==player) && ((noun == I361_bottle_of_soylent) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1013, 1013);
    ! [2: say ~You could get used to this mad scientist lifestyle - that soylent is truly delectable.~]
    say__p=1;! [3: ~You could get used to this mad scientist lifestyle - that soylent is truly delectable.~]
    ParaContent(); print "You could get used to this mad scientist lifestyle - that soylent is truly delectable."; new_line; .L_Say222; .L_SayX222;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1013, 1013, 'action');
    rfalse;
];
! No specific request
! After dropping a mouse:
[ R_976 ;
    if ((((action ==##Drop) &&  (actor==player) && ((noun ofclass K21_mouse))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_976, 976);
    ! [2: if the noun is not in the cage]
    if (((~~((I285_cage == ContainerOf(noun))))))
    {! [3: say ~The mouse sees an opportunity and scurries off before it can be [if the player is in the lair]eaten by a snake or [end if]put back in the canister.~]
        say__p=1;! [4: ~The mouse sees an opportunity and scurries off before it can be ~]
        ParaContent(); print "The mouse sees an opportunity and scurries off before it can be ";! [5: if the player is in the lair]
        ParaContent(); 
        	if (~~((((I311_a_spooky_lair == ContainerOf(player)))))) jump L_Say223;! [6: ~eaten by a snake or ~]
        ParaContent(); print "eaten by a snake or ";! [7: end if]

        	.L_Say223; .L_SayX223;! [8: ~put back in the canister.~]
        ParaContent(); print "put back in the canister."; new_line; .L_Say224; .L_SayX224;! [9: now the noun is nowhere]
        RemoveFromPlay(noun);;
        } else {
        ! [10: say ~You put the mouse in the cage.~]
        say__p=1;! [11: ~You put the mouse in the cage.~]
        ParaContent(); print "You put the mouse in the cage."; new_line; .L_Say225; .L_SayX225;}
        RulebookSucceeds(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_976, 976, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: does the player mean (B25_does_the_player_mean)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Does the player mean taking something which is carried by the player ( this is the very unlikely to mean taking what's already carried rule ):
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 2/2 ! Does the player mean taking off something worn:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Does the player mean taking something which is carried by the player ( this is the very unlikely to mean taking what's already carried rule ):
[ R_38 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun ofclass K2_thing) && (player == CarrierOf(noun)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_38, 38);
    ! [2: it is very unlikely]
    RulebookSucceeds(22, RBNO_10); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_38, 38, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Does the player mean taking off something worn:
[ R_242 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun ofclass K2_thing) && ((Adj_0_t1_v10(noun))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_242, 242);
    ! [2: it is very likely]
    RulebookSucceeds(22, RBNO_6); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_242, 242, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: before Printing the name (B29_before_printing_the_name)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Before printing the name of a thing ( called the item being printed ) ( this is the make named things mentioned rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Before printing the name of a thing ( called the item being printed ) ( this is the make named things mentioned rule ):
[ R_66 
    tmp_0 ! Let/loop value, e.g., 'item being printed': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_66, 66);
    ! [2: if expanding text for comparison purposes]
    if ((say__comp))
    {! [3: continue the activity]
        rfalse;
        }
    ! [4: now the item being printed is mentioned]
    (Adj_67_t2_v10(tmp_0));
    } else if (debug_rules > 1) DB_Rule(R_66, 66, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing the name (B30_for_printing_the_name)
! ----------------------------------------------------------------------------------------------------
! Rule 1/5 ! Rule for printing the name of the shelf when the player is not on the stool:
!   >>> I - Number of aspects constrained >>>
! Rule 2/5 ! Rule for printing the name of the bathtub:
!   === equally specific with ===
! Rule 3/5 ! Rule for printing the name of the spaceship:
!   === equally specific with ===
! Rule 4/5 ! Rule for printing the name of the time machine:
! --- now the last-placed rules ---
! Rule 5/5: STANDARD_NAME_PRINTING_R
! ----------------------------------------------------------------------------------------------------
! No specific request
! Rule for printing the name of the shelf when the player is not on the stool:
[ R_1015 ;
    if (((((parameter_value == I357_tool_shelf) && (true))))) { ! Runs only when pattern matches
    if ((((((~~((I208_stool == SupporterOf(player))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1015, 1015);
    ! [2: say ~high-up shelf~]
    say__p=1;! [3: ~high-up shelf~]
    ParaContent(); print "high-up shelf"; .L_Say226; .L_SayX226;! [4: omit contents in listing]
    c_style = c_style &~ (RECURSE_BIT+FULLINV_BIT+PARTINV_BIT);
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1015, 1015, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1015, 1015, 'action');
    rfalse;
];
! No specific request
! Rule for printing the name of the bathtub:
[ R_920 ;
    if (((((parameter_value == I259_bathtub) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_920, 920);
    ! [2: say ~bathtub~]
    say__p=1;! [3: ~bathtub~]
    ParaContent(); print "bathtub"; .L_Say227; .L_SayX227;! [4: if the water level is 0]
    if ((((Global_Vars-->11) == 0)))
    {! [5: say ~ (empty)~]
        say__p=1;! [6: ~ (empty)~]
        ParaContent(); print " (empty)"; .L_Say228; .L_SayX228;} else {
        ! [7: if the water level is 10]
        if ((((Global_Vars-->11) == 10)))
        {! [8: say ~ (overflowing)~]
            say__p=1;! [9: ~ (overflowing)~]
            ParaContent(); print " (overflowing)"; .L_Say229; .L_SayX229;}
            }
    ! [10: omit contents in listing]
    c_style = c_style &~ (RECURSE_BIT+FULLINV_BIT+PARTINV_BIT);
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_920, 920, 'action');
    rfalse;
];
! No specific request
! Rule for printing the name of the spaceship:
[ R_931 ;
    if (((((parameter_value == I288_spaceship) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_931, 931);
    ! [2: say ~spaceship~]
    say__p=1;! [3: ~spaceship~]
    ParaContent(); print "spaceship"; .L_Say230; .L_SayX230;! [4: omit contents in listing]
    c_style = c_style &~ (RECURSE_BIT+FULLINV_BIT+PARTINV_BIT);
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_931, 931, 'action');
    rfalse;
];
! No specific request
! Rule for printing the name of the time machine:
[ R_1022 ;
    if (((((parameter_value == I364_time_machine) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1022, 1022);
    ! [2: say ~time machine~]
    say__p=1;! [3: ~time machine~]
    ParaContent(); print "time machine"; .L_Say231; .L_SayX231;! [4: omit contents in listing]
    c_style = c_style &~ (RECURSE_BIT+FULLINV_BIT+PARTINV_BIT);
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1022, 1022, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing the plural name (B33_for_printing_the_plural_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Rule for printing the plural name of something ( called the item ) ( this is the standard printing the plural name rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Rule for printing the plural name of something ( called the item ) ( this is the standard printing the plural name rule ):
[ R_67 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_67, 67);
    ! [2: say the printed plural name of the item]
    say__p=1;! [3: the printed plural name of the item]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=tmp_0,plural);@pull self;  .L_Say232; .L_SayX232;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_67, 67, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing a number (B36_for_printing_a_number)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Rule for printing a number of something ( called the item ) ( this is the standard printing a number of something rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Rule for printing a number of something ( called the item ) ( this is the standard printing a number of something rule ):
[ R_68 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_68, 68);
    ! [2: say ~[listing group size in words] ~]
    say__p=1;! [3: listing group size in words]
    ParaContent(); print (number) say__n=(listing_size);! [4: ~ ~]
    ParaContent(); print " "; .L_Say233; .L_SayX233;! [5: carry out the printing the plural name activity with the item]
    CarryOutActivity(V1_printing_the_plural_name, tmp_0);
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_68, 68, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing the announcement of light (B66_for_printing_the_announc)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! This is the look around once light available rule:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! This is the look around once light available rule:
[ R_69 ;
    if (debug_rules) DB_Rule(R_69, 69);
    ! [2: try looking]
    TryAction(0, player, ##Look, 0, 0);
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing the banner text (B75_for_printing_the_banner_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Rule for printing the banner text:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Rule for printing the banner text:
[ R_799 ;
    if (debug_rules) DB_Rule(R_799, 799);
    ! [2: do nothing]
    ;
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Deciding whether all includes (B87_for_deciding_whether_all)
! ----------------------------------------------------------------------------------------------------
! Rule 1/5 ! Rule for deciding whether all includes a person while dropping or throwing or inserting or putting ( this is the exclude people from drop all rule ):
!   >>> III - When/while requirement >>>
! Rule 2/5 ! Rule for deciding whether all includes scenery while taking or taking off or removing ( this is the exclude scenery from take all rule ):
!   >>> III.1 - Object To Which Rule Applies >>>
! Rule 3/5 ! Rule for deciding whether all includes things enclosed by the person reaching while taking or taking off or removing ( this is the exclude indirect possessions from take all rule ):
!   >>> III.1 - Object To Which Rule Applies >>>
! Rule 4/5 ! Rule for deciding whether all includes fixed in place things while taking or taking off or removing ( this is the exclude fixed in place things from take all rule ):
!   >>> III.1 - Object To Which Rule Applies >>>
! Rule 5/5 ! Rule for deciding whether all includes people while taking or taking off or removing ( this is the exclude people from take all rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Rule for deciding whether all includes a person while dropping or throwing or inserting or putting ( this is the exclude people from drop all rule ):
[ R_74 ;
    if (((((parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if (((((((action ==##Drop) &&  (actor==player))))) || (((((action ==##ThrowAt) &&  (actor==player))))) || (((((action ==##Insert) &&  (actor==player))))) || (((((action ==##PutOn) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_74, 74);
    ! [2: it does not]
    RulebookFails(22, RBNO_11); rtrue;

    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_74, 74, 'context');
    } else if (debug_rules > 1) DB_Rule(R_74, 74, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for deciding whether all includes scenery while taking or taking off or removing ( this is the exclude scenery from take all rule ):
[ R_70 ;
    if ((((((Adj_59_t1_v10(parameter_value))) && (true))))) { ! Runs only when pattern matches
    if (((((((action ==##Take) &&  (actor==player))))) || (((((action ==##Disrobe) &&  (actor==player))))) || (((((action ==##Remove) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_70, 70);
    ! [2: it does not]
    RulebookFails(22, RBNO_11); rtrue;

    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_70, 70, 'context');
    } else if (debug_rules > 1) DB_Rule(R_70, 70, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for deciding whether all includes things enclosed by the person reaching while taking or taking off or removing ( this is the exclude indirect possessions from take all rule ):
[ R_73 ;
    if (((((parameter_value ofclass K2_thing) && (IndirectlyContains(actor,parameter_value)))))) { ! Runs only when pattern matches
    if (((((((action ==##Take) &&  (actor==player))))) || (((((action ==##Disrobe) &&  (actor==player))))) || (((((action ==##Remove) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_73, 73);
    ! [2: it does not]
    RulebookFails(22, RBNO_11); rtrue;

    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_73, 73, 'context');
    } else if (debug_rules > 1) DB_Rule(R_73, 73, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for deciding whether all includes fixed in place things while taking or taking off or removing ( this is the exclude fixed in place things from take all rule ):
[ R_72 ;
    if (((((parameter_value ofclass K2_thing) && ((Adj_57_t1_v10(parameter_value))))))) { ! Runs only when pattern matches
    if (((((((action ==##Take) &&  (actor==player))))) || (((((action ==##Disrobe) &&  (actor==player))))) || (((((action ==##Remove) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_72, 72);
    ! [2: it does not]
    RulebookFails(22, RBNO_11); rtrue;

    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_72, 72, 'context');
    } else if (debug_rules > 1) DB_Rule(R_72, 72, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for deciding whether all includes people while taking or taking off or removing ( this is the exclude people from take all rule ):
[ R_71 ;
    if (((((parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if (((((((action ==##Take) &&  (actor==player))))) || (((((action ==##Disrobe) &&  (actor==player))))) || (((((action ==##Remove) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_71, 71);
    ! [2: it does not]
    RulebookFails(22, RBNO_11); rtrue;

    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_71, 71, 'context');
    } else if (debug_rules > 1) DB_Rule(R_71, 71, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing a parser error (B96_for_printing_a_parser_er)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Rule for printing a parser error when the latest parser error is the noun did not make sense in that context error and action-to-be is the help-invoking action:
! ----------------------------------------------------------------------------------------------------
! From "Basic IF Help" by Andrew Plotkin
! No specific request
! Rule for printing a parser error when the latest parser error is the noun did not make sense in that context error and action-to-be is the help-invoking action:
[ R_868 ;
    if (((((((etype == I97_noun_did_not_make_sense_))) && (((action_to_be == ##A81_help_invoking))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_868, 868);
    ! [2: say ~There is no help information on that subject. Type [help-style]help[/help-style] for subjects you can learn about.~]
    say__p=1;! [3: ~There is no help information on that subject. Type ~]
    ParaContent(); print "There is no help information on that subject. Type ";! [4: help-style]
    ParaContent(); print "~"; style bold;! [5: ~help~]
    ParaContent(); print "help";! [6: /help-style]
    ParaContent(); style roman; print "~";! [7: ~ for subjects you can learn about.~]
    ParaContent(); print " for subjects you can learn about."; new_line; .L_Say234; .L_SayX234;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_868, 868, 'context');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Supplying a missing noun (B99_for_supplying_a_missing_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Rule for supplying a missing noun while an actor smelling ( this is the ambient odour rule ):
!   === equally specific with ===
! Rule 2/4 ! Rule for supplying a missing noun while an actor listening ( this is the ambient sound rule ):
!   === equally specific with ===
! Rule 3/4 ! Rule for supplying a missing noun while an actor going ( this is the block vaguely going rule ):
! --- now the last-placed rules ---
! Rule 4/4 ! Rule for supplying a missing noun while entering ( this is the find what to enter rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Rule for supplying a missing noun while an actor smelling ( this is the ambient odour rule ):
[ R_75 ;
    if (((((((action ==##Smell) && (act_requester==nothing))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_75, 75);
    ! [2: now the noun is the touchability ceiling of the player]
    noun = TouchabilityCeiling(player);
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_75, 75, 'context');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for supplying a missing noun while an actor listening ( this is the ambient sound rule ):
[ R_76 ;
    if (((((((action ==##Listen) && (act_requester==nothing))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_76, 76);
    ! [2: now the noun is the touchability ceiling of the player]
    noun = TouchabilityCeiling(player);
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_76, 76, 'context');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for supplying a missing noun while an actor going ( this is the block vaguely going rule ):
[ R_77 ;
    if (((((((action ==##Go) && (act_requester==nothing))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_77, 77);
    ! [2: say ~You'll have to say which compass direction to go in.~ ( a )]
    say__p=1;! [3: ~You'll have to say which compass direction to go in.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_135); new_line; .L_Say235; .L_SayX235;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_77, 77, 'context');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for supplying a missing noun while entering ( this is the find what to enter rule ):
[ R_162 
    tmp_0 ! Let/loop value, e.g., 'box': thing
    ;
    if (((((((action ==##Enter) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_162, 162);
    ! [2: if something enterable ( called the box ) is in the location]
    if ((((Prop_3() && (tmp_0=deferred_calling_list-->0, true)) || (tmp_0 = 0,false))))
    {! [3: now the noun is the box]
        noun = tmp_0;
        } else {
        ! [4: continue the activity]
        rfalse;
        }
        RulebookSucceeds(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_162, 162, 'context');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: before Starting the virtual machine (B107_before_starting_the_vir)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Before starting the virtual machine ( this is the sort the Table of User Styles rule ):
! --- now the last-placed rules ---
! Rule 2/2 ! Last before starting the virtual machine ( this is the set text styles rule ):
! ----------------------------------------------------------------------------------------------------
! From "Glulx Text Effects" by Emily Short
! No specific request
! Before starting the virtual machine ( this is the sort the Table of User Styles rule ):
[ R_801 
    tmp_0 ! Let/loop value, e.g., 'row1': number
    tmp_1 ! Let/loop value, e.g., 'row2': number
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_801, 801);
    ! [2: repeat through the table of user styles]
    @push ct_0; @push ct_1;
    		for (tmp_0=T2_user_styles, tmp_1=1, ct_0=tmp_0, ct_1=tmp_1:
    			tmp_1<=TableRows(tmp_0):
    			tmp_1++, ct_0=tmp_0, ct_1=tmp_1)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [3: if there is no style name entry]
        if (((ExistsTableLookUpEntry(ct_0,107,ct_1) == false)))
        {! [4: now the style name entry is all-styles]
            TableLookUpEntry(ct_0,107,ct_1,1,I126_all_styles);
            }
            }
            @pull ct_1; @pull ct_0;! [5: sort the table of user styles in style name order]
    TableSort(T2_user_styles, 107, 1);
    ! [6: let row1 be 1]

    		tmp_0 = 1;
    ! [7: let row2 be 2]

    		tmp_1 = 2;
    ! [8: while row2 <= the number of rows in the table of user styles]
    while (((tmp_1 <= TableRows(T2_user_styles))))
    {! [9: choose row row2 in the table of user styles]
        ct_0 = T2_user_styles; ct_1 = tmp_1;
        ! [10: if there is a style name entry]
        if (((ExistsTableLookUpEntry(ct_0,107,ct_1))))
        {! [11: if ( the style name in row row1 of the table of user styles ) is the style name entry]
            if (((TableLookUpEntry(T2_user_styles,107,tmp_0) == TableLookUpEntry(ct_0,107,ct_1))))
            {! [12: if there is a background color entry]
                if (((ExistsTableLookUpEntry(ct_0,108,ct_1))))
                {! [13: now the background color in row row1 of the table of user styles is the background color entry]
                    BlkValueCopy(TableLookUpEntry(T2_user_styles,108,tmp_0,5), TableLookUpEntry(ct_0,108,ct_1));
                    }
                ! [14: if there is a color entry]
                if (((ExistsTableLookUpEntry(ct_0,109,ct_1))))
                {! [15: now the color in row row1 of the table of user styles is the color entry]
                    BlkValueCopy(TableLookUpEntry(T2_user_styles,109,tmp_0,5), TableLookUpEntry(ct_0,109,ct_1));
                    }
                ! [16: if there is a first line indentation entry]
                if (((ExistsTableLookUpEntry(ct_0,110,ct_1))))
                {! [17: now the first line indentation in row row1 of the table of user styles is the first line indentation entry]
                    TableLookUpEntry(T2_user_styles,110,tmp_0,1,TableLookUpEntry(ct_0,110,ct_1));
                    }
                ! [18: if there is a fixed width entry]
                if (((ExistsTableLookUpEntry(ct_0,111,ct_1))))
                {! [19: now the fixed width in row row1 of the table of user styles is the fixed width entry]
                    TableLookUpEntry(T2_user_styles,111,tmp_0,1,TableLookUpEntry(ct_0,111,ct_1));
                    }
                ! [20: if there is a font weight entry]
                if (((ExistsTableLookUpEntry(ct_0,112,ct_1))))
                {! [21: now the font weight in row row1 of the table of user styles is the font weight entry]
                    TableLookUpEntry(T2_user_styles,112,tmp_0,1,TableLookUpEntry(ct_0,112,ct_1));
                    }
                ! [22: if there is a indentation entry]
                if (((ExistsTableLookUpEntry(ct_0,113,ct_1))))
                {! [23: now the indentation in row row1 of the table of user styles is the indentation entry]
                    TableLookUpEntry(T2_user_styles,113,tmp_0,1,TableLookUpEntry(ct_0,113,ct_1));
                    }
                ! [24: if there is a italic entry]
                if (((ExistsTableLookUpEntry(ct_0,114,ct_1))))
                {! [25: now the italic in row row1 of the table of user styles is the italic entry]
                    TableLookUpEntry(T2_user_styles,114,tmp_0,1,TableLookUpEntry(ct_0,114,ct_1));
                    }
                ! [26: if there is a justification entry]
                if (((ExistsTableLookUpEntry(ct_0,115,ct_1))))
                {! [27: now the justification in row row1 of the table of user styles is the justification entry]
                    TableLookUpEntry(T2_user_styles,115,tmp_0,1,TableLookUpEntry(ct_0,115,ct_1));
                    }
                ! [28: if there is a relative size entry]
                if (((ExistsTableLookUpEntry(ct_0,116,ct_1))))
                {! [29: now the relative size in row row1 of the table of user styles is the relative size entry]
                    TableLookUpEntry(T2_user_styles,116,tmp_0,1,TableLookUpEntry(ct_0,116,ct_1));
                    }
                ! [30: if there is a reversed entry]
                if (((ExistsTableLookUpEntry(ct_0,117,ct_1))))
                {! [31: now the reversed in row row1 of the table of user styles is the reversed entry]
                    TableLookUpEntry(T2_user_styles,117,tmp_0,1,TableLookUpEntry(ct_0,117,ct_1));
                    }
                ! [32: blank out the whole row]
                TableBlankOutRow(ct_0, ct_1);
                } else {
                ! [33: now row1 is row2]
                tmp_0 = tmp_1;
                }
                }
        ! [34: increment row2]
        tmp_1 = tmp_1 + 1;;
        }
        rfalse;
];
! From "Glulx Text Effects" by Emily Short
! No specific request
! Last before starting the virtual machine ( this is the set text styles rule ):
[ R_802 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_3();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_3 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_802, 802);
    ! [2: repeat through the table of user styles]
    @push ct_0; @push ct_1;
    		for (tmp_0=T2_user_styles, tmp_1=1, ct_0=tmp_0, ct_1=tmp_1:
    			tmp_1<=TableRows(tmp_0):
    			tmp_1++, ct_0=tmp_0, ct_1=tmp_1)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [3: if there is a background color entry]
        if (((ExistsTableLookUpEntry(ct_0,108,ct_1))))
        {! [4: set the background color for the style name entry to the background color entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,107,ct_1), stylehint_BackColor, GTE_ConvertColour( BlkValueCopy(I7SFRAME, TableLookUpEntry(ct_0,108,ct_1)) ) );
            }
        ! [5: if there is a color entry]
        if (((ExistsTableLookUpEntry(ct_0,109,ct_1))))
        {! [6: set the color for the style name entry to the color entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,107,ct_1), stylehint_TextColor, GTE_ConvertColour( BlkValueCopy((I7SFRAME+WORDSIZE*2), TableLookUpEntry(ct_0,109,ct_1)) ) );
            }
        ! [7: if there is a first line indentation entry]
        if (((ExistsTableLookUpEntry(ct_0,110,ct_1))))
        {! [8: set the first line indentation for the style name entry to the first line indentation entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,107,ct_1), stylehint_ParaIndentation, TableLookUpEntry(ct_0,110,ct_1) );
            }
        ! [9: if there is a fixed width entry]
        if (((ExistsTableLookUpEntry(ct_0,111,ct_1))))
        {! [10: set fixed width for the style name entry to the fixed width entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,107,ct_1), stylehint_Proportional, ( TableLookUpEntry(ct_0,111,ct_1) + 1 ) % 2 );
            }
        ! [11: if there is a font weight entry]
        if (((ExistsTableLookUpEntry(ct_0,112,ct_1))))
        {! [12: set the font weight for the style name entry to the font weight entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,107,ct_1), stylehint_Weight, TableLookUpEntry(ct_0,112,ct_1) - 2 );
            }
        ! [13: if there is a indentation entry]
        if (((ExistsTableLookUpEntry(ct_0,113,ct_1))))
        {! [14: set the indentation for the style name entry to the indentation entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,107,ct_1), stylehint_Indentation, TableLookUpEntry(ct_0,113,ct_1) );
            }
        ! [15: if there is a italic entry]
        if (((ExistsTableLookUpEntry(ct_0,114,ct_1))))
        {! [16: set italic for the style name entry to the italic entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,107,ct_1), stylehint_Oblique, TableLookUpEntry(ct_0,114,ct_1) );
            }
        ! [17: if there is a justification entry]
        if (((ExistsTableLookUpEntry(ct_0,115,ct_1))))
        {! [18: set the justification for the style name entry to the justification entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,107,ct_1), stylehint_Justification, TableLookUpEntry(ct_0,115,ct_1) - 1 );
            }
        ! [19: if there is a relative size entry]
        if (((ExistsTableLookUpEntry(ct_0,116,ct_1))))
        {! [20: set the relative size for the style name entry to the relative size entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,107,ct_1), stylehint_Size, TableLookUpEntry(ct_0,116,ct_1) );
            }
        ! [21: if there is a reversed entry]
        if (((ExistsTableLookUpEntry(ct_0,117,ct_1))))
        {! [22: set reversed for the style name entry to the reversed entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,107,ct_1), stylehint_ReverseColor, TableLookUpEntry(ct_0,117,ct_1) );
            }
            }
            @pull ct_1; @pull ct_0;rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: before Handling the final question (B116_before_handling_the_fin)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! This is the print the final question rule:
!   === equally specific with ===
! Rule 2/3 ! This is the print the final prompt rule:
! --- now the last-placed rules ---
! Rule 3/3: READ_FINAL_ANSWER_R
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! This is the print the final question rule:
[ R_79 
    tmp_0 ! Let/loop value, e.g., 'named options count': number
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_79, 79);
    ! [2: let named options count be 0]

    		tmp_0 = 0;
    ! [3: repeat through the table of final question options]
    @push ct_0; @push ct_1;
    		for (tmp_1=T0_final_question_options, tmp_2=1, ct_0=tmp_1, ct_1=tmp_2:
    			tmp_2<=TableRows(tmp_1):
    			tmp_2++, ct_0=tmp_1, ct_1=tmp_2)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [4: if the only if victorious entry is false or the story has ended finally]
        if (((((TableLookUpEntry(ct_0,101,ct_1) && true) == (0 && true)))) || (((story_complete))))
        {! [5: if there is a final response rule entry or the final response activity entry is not empty]
            if ((((ExistsTableLookUpEntry(ct_0,103,ct_1)))) || (((~~(((Adj_17_t1_v33(TableLookUpEntry(ct_0,104,ct_1)))))))))
            {! [6: if there is a final question wording entry]
                if (((ExistsTableLookUpEntry(ct_0,100,ct_1))))
                {! [7: increase named options count by 1]
                    tmp_0 = tmp_0 + 1;;
                    }
                    }
                    }
                    }
                    @pull ct_1; @pull ct_0;! [8: if the named options count is less than 1]
    if (((tmp_0 < 1)))
    {! [9: abide by the immediately quit rule]
        if (FollowRulebook(IMMEDIATELY_QUIT_R)) rtrue;
        }
    ! [10: say ~Would you like to ~ ( a )]
    say__p=1;! [11: ~Would you like to ~ ( a )]
    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=ct_0),(LocalParking-->2=ct_1),(LocalParking-->3=tmp_1),(LocalParking-->4=tmp_2),TX_R_136); .L_Say236; .L_SayX236;! [12: repeat through the table of final question options]
    @push ct_0; @push ct_1;
    		for (tmp_1=T0_final_question_options, tmp_2=1, ct_0=tmp_1, ct_1=tmp_2:
    			tmp_2<=TableRows(tmp_1):
    			tmp_2++, ct_0=tmp_1, ct_1=tmp_2)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [13: if the only if victorious entry is false or the story has ended finally]
        if (((((TableLookUpEntry(ct_0,101,ct_1) && true) == (0 && true)))) || (((story_complete))))
        {! [14: if there is a final response rule entry or the final response activity entry is not empty]
            if ((((ExistsTableLookUpEntry(ct_0,103,ct_1)))) || (((~~(((Adj_17_t1_v33(TableLookUpEntry(ct_0,104,ct_1)))))))))
            {! [15: if there is a final question wording entry]
                if (((ExistsTableLookUpEntry(ct_0,100,ct_1))))
                {! [16: say final question wording entry]
                    say__p=1;! [17: final question wording entry]
                    ParaContent(); print (TEXT_TY_Say) TableLookUpEntry(ct_0,100,ct_1); .L_Say237; .L_SayX237;! [18: decrease named options count by 1]
                    tmp_0 = tmp_0 - 1;;
                    ! [19: if the named options count is 1]
                    if (((tmp_0 == 1)))
                    {! [20: if the serial comma option is active]
                        if ((((Adj_25_t1_v16(6)))))
                        {! [21: say ~,~]
                            say__p=1;! [22: ~,~]
                            ParaContent(); print ","; .L_Say238; .L_SayX238;}
                        ! [23: say ~ or ~ ( b )]
                        say__p=1;! [24: ~ or ~ ( b )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=ct_0),(LocalParking-->2=ct_1),(LocalParking-->3=tmp_1),(LocalParking-->4=tmp_2),TX_R_137); .L_Say239; .L_SayX239;} else {
                        ! [25: if the named options count is 0]
                        if (((tmp_0 == 0)))
                        {! [26: say ~?[line break]~]
                            say__p=1;! [27: ~?~]
                            ParaContent(); print "?";! [28: line break]
                            ParaContent(); new_line; .L_Say240; .L_SayX240;} else {
                            ! [29: say ~, ~]
                            say__p=1;! [30: ~, ~]
                            ParaContent(); print ", "; .L_Say241; .L_SayX241;}
                            }
                            }
                            }
                            }
                            }
                            @pull ct_1; @pull ct_0;rfalse;
];
! From the Standard Rules
! No specific request
! This is the print the final prompt rule:
[ R_78 ;
    if (debug_rules) DB_Rule(R_78, 78);
    ! [2: say ~> [run paragraph on]~ ( a )]
    say__p=1;! [3: ~> [run paragraph on]~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_138); .L_Say242; .L_SayX242;rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Handling the final question (B117_for_handling_the_final_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! This is the standard respond to final question rule:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! This is the standard respond to final question rule:
[ R_80 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_80, 80);
    ! [2: repeat through the table of final question options]
    @push ct_0; @push ct_1;
    		for (tmp_0=T0_final_question_options, tmp_1=1, ct_0=tmp_0, ct_1=tmp_1:
    			tmp_1<=TableRows(tmp_0):
    			tmp_1++, ct_0=tmp_0, ct_1=tmp_1)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [3: if the only if victorious entry is false or the story has ended finally]
        if (((((TableLookUpEntry(ct_0,101,ct_1) && true) == (0 && true)))) || (((story_complete))))
        {! [4: if there is a final response rule entry or the final response activity entry is not empty]
            if ((((ExistsTableLookUpEntry(ct_0,103,ct_1)))) || (((~~(((Adj_17_t1_v33(TableLookUpEntry(ct_0,104,ct_1)))))))))
            {! [5: if the player's command matches the topic entry]
                if (((SnippetMatches(players_command, TableLookUpEntry(ct_0,102,ct_1)))))
                {! [6: if there is a final response rule entry]
                    if (((ExistsTableLookUpEntry(ct_0,103,ct_1))))
                    {! [7: abide by final response rule entry]
                        if (FollowRulebook(TableLookUpEntry(ct_0,103,ct_1))) rtrue;
                        } else {
                        ! [8: carry out the final response activity entry activity]
                        CarryOutActivity(TableLookUpEntry(ct_0,104,ct_1));
                        }
                    ! [9: rule succeeds]
                    RulebookSucceeds(); rtrue;
                    }
                    }
                    }
                    }
                    @pull ct_1; @pull ct_0;! [10: say ~Please give one of the answers above.~ ( a )]
    say__p=1;! [11: ~Please give one of the answers above.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=ct_0),(LocalParking-->1=ct_1),(LocalParking-->2=tmp_0),(LocalParking-->3=tmp_1),TX_R_139); new_line; .L_Say243; .L_SayX243;rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: before Printing the locale description (B119_before_printing_the_loc)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Before printing the locale description ( this is the initialise locale description rule ):
!   === equally specific with ===
! Rule 2/2 ! Before printing the locale description ( this is the find notable locale objects rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Before printing the locale description ( this is the initialise locale description rule ):
[ R_83 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    if (debug_rules) DB_Rule(R_83, 83);
    ! [2: now the locale paragraph count is 0]
    (Global_Vars-->9) = 0;
    ! [3: repeat through the table of locale priorities]
    @push ct_0; @push ct_1;
    		for (tmp_0=T1_locale_priorities, tmp_1=1, ct_0=tmp_0, ct_1=tmp_1:
    			tmp_1<=TableRows(tmp_0):
    			tmp_1++, ct_0=tmp_0, ct_1=tmp_1)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [4: blank out the whole row]
        TableBlankOutRow(ct_0, ct_1);
        }
        @pull ct_1; @pull ct_0;rfalse;
];
! From the Standard Rules
! No specific request
! Before printing the locale description ( this is the find notable locale objects rule ):
[ R_84 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    ;
    if (debug_rules) DB_Rule(R_84, 84);
    ! [2: let the domain be the parameter-object]

    		tmp_0 = parameter_value;
    ! [3: carry out the choosing notable locale objects activity with the domain]
    CarryOutActivity(V31_choosing_notable_locale_, tmp_0);
    ! [4: continue the activity]
    rfalse;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing the locale description (B120_for_printing_the_locale)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! For printing the locale description ( this is the interesting locale paragraphs rule ):
!   === equally specific with ===
! Rule 2/2 ! For printing the locale description ( this is the you-can-also-see rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! For printing the locale description ( this is the interesting locale paragraphs rule ):
[ R_85 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_85, 85);
    ! [2: let the domain be the parameter-object]

    		tmp_0 = parameter_value;
    ! [3: sort the table of locale priorities in locale description priority order]
    TableSort(T1_locale_priorities, 106, 1);
    ! [4: repeat through the table of locale priorities]
    @push ct_0; @push ct_1;
    		for (tmp_1=T1_locale_priorities, tmp_2=1, ct_0=tmp_1, ct_1=tmp_2:
    			tmp_2<=TableRows(tmp_1):
    			tmp_2++, ct_0=tmp_1, ct_1=tmp_2)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [5: carry out the printing a locale paragraph about activity with the notable-object entry]
        CarryOutActivity(V32_printing_a_locale_paragr, TableLookUpEntry(ct_0,105,ct_1));
        }
        @pull ct_1; @pull ct_0;! [6: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing the locale description ( this is the you-can-also-see rule ):
[ R_86 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    tmp_3 ! Let/loop value (deallocated by end of phrase)
    tmp_4 ! Let/loop value (deallocated by end of phrase)
    tmp_5 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_86, 86);
    ! [2: let the domain be the parameter-object]

    		tmp_0 = parameter_value;
    ! [3: let the mentionable count be 0]

    		tmp_1 = 0;
    ! [4: repeat with item running through things]
    for (tmp_2=Prop_4(0), tmp_3=Prop_4(tmp_2): tmp_2: tmp_2=tmp_3, tmp_3=Prop_4(tmp_3))
    {! [5: now the item is not marked for listing]
        (Adj_65_t3_v10(tmp_2));
        }
    ! [6: repeat through the table of locale priorities]
    @push ct_0; @push ct_1;
    		for (tmp_2=T1_locale_priorities, tmp_3=1, ct_0=tmp_2, ct_1=tmp_3:
    			tmp_3<=TableRows(tmp_2):
    			tmp_3++, ct_0=tmp_2, ct_1=tmp_3)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [7: if the locale description priority entry is greater than 0]
        if (((TableLookUpEntry(ct_0,106,ct_1) > 0)))
        {! [8: now the notable-object entry is marked for listing]
            (Adj_65_t2_v10(TableLookUpEntry(ct_0,105,ct_1)));
            }
        ! [9: increase the mentionable count by 1]
        tmp_1 = tmp_1 + 1;;
        }
        @pull ct_1; @pull ct_0;! [10: if the mentionable count is greater than 0]
    if (((tmp_1 > 0)))
    {! [11: repeat with item running through things]
        for (tmp_2=Prop_5(0), tmp_3=Prop_5(tmp_2): tmp_2: tmp_2=tmp_3, tmp_3=Prop_5(tmp_3))
        {! [12: if the item is mentioned]
            if ((((Adj_67_t1_v10(tmp_2)))))
            {! [13: now the item is not marked for listing]
                (Adj_65_t3_v10(tmp_2));
                }
                }
        ! [14: begin the listing nondescript items activity with the domain]
        BeginActivity(V8_listing_nondescript_items, tmp_0);
        ! [15: if the number of marked for listing things is 0]
        if ((((Prop_6()) == 0)))
        {! [16: abandon the listing nondescript items activity with the domain]
            AbandonActivity(V8_listing_nondescript_items, tmp_0);
            } else {
            ! [17: if handling the listing nondescript items activity with the domain]
            if (((~~(ForActivity(V8_listing_nondescript_items, tmp_0)))))
            {! [18: if the domain is the location]
                if (((tmp_0 == real_location)))
                {! [19: say ~[We] ~ ( a )]
                    say__p=1;! [20: ~[We] ~ ( a )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),(LocalParking-->4=ct_0),(LocalParking-->5=ct_1),TX_R_140); .L_Say244; .L_SayX244;} else {
                    ! [21: if the domain is a supporter or the domain is an animal]
                    if ((((tmp_0 ofclass K6_supporter))) || (((tmp_0 ofclass K12_animal))))
                    {! [22: say ~On [the domain] [we] ~ ( b )]
                        say__p=1;! [23: ~On [the domain] [we] ~ ( b )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),(LocalParking-->4=ct_0),(LocalParking-->5=ct_1),TX_R_141); .L_Say245; .L_SayX245;} else {
                        ! [24: say ~In [the domain] [we] ~ ( c )]
                        say__p=1;! [25: ~In [the domain] [we] ~ ( c )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),(LocalParking-->4=ct_0),(LocalParking-->5=ct_1),TX_R_142); .L_Say246; .L_SayX246;}
                        }
                ! [26: if the locale paragraph count is greater than 0]
                if ((((Global_Vars-->9) > 0)))
                {! [27: say ~[regarding the player][can] also see ~ ( d )]
                    say__p=1;! [28: ~[regarding the player][can] also see ~ ( d )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),(LocalParking-->4=ct_0),(LocalParking-->5=ct_1),TX_R_143); .L_Say247; .L_SayX247;} else {
                    ! [29: say ~[regarding the player][can] see ~ ( e )]
                    say__p=1;! [30: ~[regarding the player][can] see ~ ( e )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),(LocalParking-->4=ct_0),(LocalParking-->5=ct_1),TX_R_144); .L_Say248; .L_SayX248;}
                ! [31: let the common holder be nothing]

                		tmp_2 = nothing;
                ! [32: let contents form of list be true]

                		tmp_3 = 1;
                ! [33: repeat with list item running through marked for listing things]
                for (tmp_4=Prop_7(0), tmp_5=Prop_7(tmp_4): tmp_4: tmp_4=tmp_5, tmp_5=Prop_7(tmp_5))
                {! [34: if the holder of the list item is not the common holder]
                    if (((~~(((HolderOf(tmp_4)) == tmp_2)))))
                    {! [35: if the common holder is nothing]
                        if (((tmp_2 == nothing)))
                        {! [36: now the common holder is the holder of the list item]
                            tmp_2 = (HolderOf(tmp_4));
                            } else {
                            ! [37: now contents form of list is false]
                            tmp_3 = 0;
                            }
                            }
                    ! [38: if the list item is mentioned]
                    if ((((Adj_67_t1_v10(tmp_4)))))
                    {! [39: now the list item is not marked for listing]
                        (Adj_65_t3_v10(tmp_4));
                        }
                        }
                ! [40: filter list recursion to unmentioned things]
                list_filter_routine = Prop_8;
                ! [41: if contents form of list is true and the common holder is not nothing]
                if (((((tmp_3 && true) == (1 && true)))) && (((~~((tmp_2 == nothing))))))
                {! [42: list the contents of the common holder , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , listing marked items only]
                    WriteListFrom(child(tmp_2), 2776);
                    } else {
                    ! [43: say ~[a list of marked for listing things including contents]~]
                    say__p=1;! [44: a list of marked for listing things including contents]
                    ParaContent(); objectloop(tmp_4 ofclass Object)
                    			if (((tmp_4 ofclass K2_thing) && ((Adj_65_t1_v10(tmp_4)))))
                    				give tmp_4 workflag2;
                    			else
                    				give tmp_4 ~workflag2;
                    		WriteListOfMarkedObjects(ENGLISH_BIT+RECURSE_BIT+PARTINV_BIT+
                    			TERSE_BIT+CONCEAL_BIT); .L_Say249; .L_SayX249;}
                ! [45: if the domain is the location]
                if (((tmp_0 == real_location)))
                {! [46: say ~ here~ ( f )]
                    say__p=1;! [47: ~ here~ ( f )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),(LocalParking-->4=ct_0),(LocalParking-->5=ct_1),(LocalParking-->6=tmp_4),(LocalParking-->7=tmp_5),TX_R_145); .L_Say250; .L_SayX250;}
                ! [48: say ~.[paragraph break]~]
                say__p=1;! [49: ~.~]
                ParaContent(); print ".";! [50: paragraph break]
                ParaContent(); DivideParagraphPoint(); new_line; .L_Say251; .L_SayX251;! [51: unfilter list recursion]
                list_filter_routine = 0;
                }
            ! [52: end the listing nondescript items activity with the domain]
            EndActivity(V8_listing_nondescript_items, tmp_0);
            }
            }
    ! [53: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Choosing notable locale objects (B123_for_choosing_notable_lo)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! For choosing notable locale objects ( this is the standard notable locale objects rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! For choosing notable locale objects ( this is the standard notable locale objects rule ):
[ R_87 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'held item': object
    ;
    if (debug_rules) DB_Rule(R_87, 87);
    ! [2: let the domain be the parameter-object]

    		tmp_0 = parameter_value;
    ! [3: let the held item be the first thing held by the domain]

    		tmp_1 = (child(tmp_0));
    ! [4: while the held item is a thing]
    while (((tmp_1 ofclass K2_thing)))
    {! [5: set the locale priority of the held item to 5]
        (PHR_82_r8 (tmp_1,5));
        ! [6: now the held item is the next thing held after the held item]
        tmp_1 = (sibling(tmp_1));
        }
    ! [7: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing a locale paragraph about (B126_for_printing_a_locale_p)
! ----------------------------------------------------------------------------------------------------
! Rule 1/9 ! For printing a locale paragraph about a supporter ( called the tabletop ) ( this is the initial appearance on supporters rule ):
!   >>> III.1 - Object To Which Rule Applies >>>
! Rule 2/9 ! For printing a locale paragraph about a thing ( called the item ) ( this is the don't mention player's supporter in room descriptions rule ):
!   === equally specific with ===
! Rule 3/9 ! For printing a locale paragraph about a thing ( called the item ) ( this is the don't mention scenery in room descriptions rule ):
!   === equally specific with ===
! Rule 4/9 ! For printing a locale paragraph about a thing ( called the item ) ( this is the don't mention undescribed items in room descriptions rule ):
!   === equally specific with ===
! Rule 5/9 ! For printing a locale paragraph about a thing ( called the item ) ( this is the set pronouns from items in room descriptions rule ):
!   === equally specific with ===
! Rule 6/9 ! For printing a locale paragraph about a thing ( called the item ) ( this is the offer items to writing a paragraph about rule ):
!   === equally specific with ===
! Rule 7/9 ! For printing a locale paragraph about a thing ( called the item ) ( this is the use initial appearance in room descriptions rule ):
!   === equally specific with ===
! Rule 8/9 ! For printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on scenery supporters in room descriptions rule ):
!   === equally specific with ===
! Rule 9/9 ! For printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on mentioned supporters in room descriptions rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a supporter ( called the tabletop ) ( this is the initial appearance on supporters rule ):
[ R_94 
    tmp_0 ! Let/loop value, e.g., 'tabletop': supporter
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K6_supporter) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_94, 94);
    ! [2: repeat with item running through not handled things on the tabletop which provide the property initial appearance]
    for (tmp_1=Prop_9(tmp_0,tmp_0,tmp_0,0), tmp_2=Prop_9(tmp_0,tmp_0,tmp_0,tmp_1): tmp_1: tmp_1=tmp_2, tmp_2=Prop_9(tmp_0,tmp_0,tmp_0,tmp_2))
    {! [3: if the item is not a person and the initial appearance of the item is not ~~ and the item is not undescribed]
        if ((((~~((tmp_1 ofclass K8_person))))) && ((((~~(( BlkValueCompare(GProperty(10, tmp_1,initial), EMPTY_TEXT_VALUE) == 0))))) && (((~~(((Adj_64_t1_v10(tmp_1)))))))))
        {! [4: now the item is mentioned]
            (Adj_67_t2_v10(tmp_1));
            ! [5: say initial appearance of the item]
            say__p=1;! [6: initial appearance of the item]
            ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=tmp_1,initial);@pull self;  .L_Say252; .L_SayX252;! [7: say paragraph break]
            say__p=1;! [8: paragraph break]
            ParaContent(); DivideParagraphPoint(); new_line; .L_Say253; .L_SayX253;}
            }
    ! [9: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_94, 94, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the don't mention player's supporter in room descriptions rule ):
[ R_88 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_88, 88);
    ! [2: if the item encloses the player]
    if (((IndirectlyContains(tmp_0,player))))
    {! [3: set the locale priority of the item to 0]
        (PHR_82_r8 (tmp_0,0));
        }
    ! [4: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_88, 88, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the don't mention scenery in room descriptions rule ):
[ R_89 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_89, 89);
    ! [2: if the item is scenery]
    if ((((Adj_59_t1_v10(tmp_0)))))
    {! [3: set the locale priority of the item to 0]
        (PHR_82_r8 (tmp_0,0));
        }
    ! [4: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_89, 89, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the don't mention undescribed items in room descriptions rule ):
[ R_90 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_90, 90);
    ! [2: if the item is undescribed]
    if ((((Adj_64_t1_v10(tmp_0)))))
    {! [3: set the locale priority of the item to 0]
        (PHR_82_r8 (tmp_0,0));
        }
    ! [4: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_90, 90, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the set pronouns from items in room descriptions rule ):
[ R_91 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_91, 91);
    ! [2: if the item is not mentioned]
    if (((~~(((Adj_67_t1_v10(tmp_0)))))))
    {! [3: set pronouns from the item]
        PronounNotice(tmp_0);
        }
    ! [4: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_91, 91, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the offer items to writing a paragraph about rule ):
[ R_92 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_92, 92);
    ! [2: if the item is not mentioned]
    if (((~~(((Adj_67_t1_v10(tmp_0)))))))
    {! [3: if a paragraph break is pending]
        if (((say__p)))
        {! [4: say ~[conditional paragraph break]~]
            say__p=1;! [5: conditional paragraph break]
            ParaContent(); DivideParagraphPoint(); .L_Say254; .L_SayX254;}
        ! [6: carry out the writing a paragraph about activity with the item]
        CarryOutActivity(V7_writing_a_paragraph_about, tmp_0);
        ! [7: if a paragraph break is pending]
        if (((say__p)))
        {! [8: increase the locale paragraph count by 1]
            (Global_Vars-->9) = (Global_Vars-->9) + 1;;
            ! [9: now the item is mentioned]
            (Adj_67_t2_v10(tmp_0));
            ! [10: say ~[conditional paragraph break]~]
            say__p=1;! [11: conditional paragraph break]
            ParaContent(); DivideParagraphPoint(); .L_Say255; .L_SayX255;}
            }
    ! [12: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_92, 92, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the use initial appearance in room descriptions rule ):
[ R_93 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_93, 93);
    ! [2: if the item is not mentioned]
    if (((~~(((Adj_67_t1_v10(tmp_0)))))))
    {! [3: if the item provides the property initial appearance and the item is not handled and the initial appearance of the item is not ~~]
        if ((((WhetherProvides(tmp_0, false, initial)))) && ((((~~(((Adj_62_t1_v10(tmp_0))))))) && (((~~(( BlkValueCompare(GProperty(10, tmp_0,initial), EMPTY_TEXT_VALUE) == 0)))))))
        {! [4: increase the locale paragraph count by 1]
            (Global_Vars-->9) = (Global_Vars-->9) + 1;;
            ! [5: say ~[initial appearance of the item]~]
            say__p=1;! [6: initial appearance of the item]
            ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=tmp_0,initial);@pull self;  .L_Say256; .L_SayX256;! [7: say ~[paragraph break]~]
            say__p=1;! [8: paragraph break]
            ParaContent(); DivideParagraphPoint(); new_line; .L_Say257; .L_SayX257;! [9: if a locale-supportable thing is on the item]
            if ((((Prop_10(tmp_0)))))
            {! [10: repeat with possibility running through things on the item]
                for (tmp_1=Prop_11(tmp_0,0), tmp_2=Prop_11(tmp_0,tmp_1): tmp_1: tmp_1=tmp_2, tmp_2=Prop_11(tmp_0,tmp_2))
                {! [11: now the possibility is marked for listing]
                    (Adj_65_t2_v10(tmp_1));
                    ! [12: if the possibility is mentioned]
                    if ((((Adj_67_t1_v10(tmp_1)))))
                    {! [13: now the possibility is not marked for listing]
                        (Adj_65_t3_v10(tmp_1));
                        }
                        }
                ! [14: say ~On [the item] ~ ( a )]
                say__p=1;! [15: ~On [the item] ~ ( a )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_146); .L_Say258; .L_SayX258;! [16: list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only]
                WriteListFrom(child(tmp_0), 3800);
                ! [17: say ~.[paragraph break]~]
                say__p=1;! [18: ~.~]
                ParaContent(); print ".";! [19: paragraph break]
                ParaContent(); DivideParagraphPoint(); new_line; .L_Say259; .L_SayX259;}
            ! [20: now the item is mentioned]
            (Adj_67_t2_v10(tmp_0));
            }
            }
    ! [21: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_93, 93, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on scenery supporters in room descriptions rule ):
[ R_96 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_96, 96);
    ! [2: if the item is scenery and the item does not enclose the player]
    if (((((Adj_59_t1_v10(tmp_0))))) && (((~~((IndirectlyContains(tmp_0,player)))))))
    {! [3: if a locale-supportable thing is on the item]
        if ((((Prop_12(tmp_0)))))
        {! [4: set pronouns from the item]
            PronounNotice(tmp_0);
            ! [5: repeat with possibility running through things on the item]
            for (tmp_1=Prop_13(tmp_0,0), tmp_2=Prop_13(tmp_0,tmp_1): tmp_1: tmp_1=tmp_2, tmp_2=Prop_13(tmp_0,tmp_2))
            {! [6: now the possibility is marked for listing]
                (Adj_65_t2_v10(tmp_1));
                ! [7: if the possibility is mentioned]
                if ((((Adj_67_t1_v10(tmp_1)))))
                {! [8: now the possibility is not marked for listing]
                    (Adj_65_t3_v10(tmp_1));
                    }
                    }
            ! [9: increase the locale paragraph count by 1]
            (Global_Vars-->9) = (Global_Vars-->9) + 1;;
            ! [10: say ~On [the item] ~ ( a )]
            say__p=1;! [11: ~On [the item] ~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_147); .L_Say260; .L_SayX260;! [12: list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only]
            WriteListFrom(child(tmp_0), 3800);
            ! [13: say ~.[paragraph break]~]
            say__p=1;! [14: ~.~]
            ParaContent(); print ".";! [15: paragraph break]
            ParaContent(); DivideParagraphPoint(); new_line; .L_Say261; .L_SayX261;}
            }
    ! [16: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_96, 96, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on mentioned supporters in room descriptions rule ):
[ R_97 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_97, 97);
    ! [2: if the item is mentioned and the item is not undescribed and the item is not scenery and the item does not enclose the player]
    if (((((Adj_67_t1_v10(tmp_0))))) && ((((~~(((Adj_64_t1_v10(tmp_0))))))) && ((((~~(((Adj_59_t1_v10(tmp_0))))))) && (((~~((IndirectlyContains(tmp_0,player)))))))))
    {! [3: if a locale-supportable thing is on the item]
        if ((((Prop_14(tmp_0)))))
        {! [4: set pronouns from the item]
            PronounNotice(tmp_0);
            ! [5: repeat with possibility running through things on the item]
            for (tmp_1=Prop_15(tmp_0,0), tmp_2=Prop_15(tmp_0,tmp_1): tmp_1: tmp_1=tmp_2, tmp_2=Prop_15(tmp_0,tmp_2))
            {! [6: now the possibility is marked for listing]
                (Adj_65_t2_v10(tmp_1));
                ! [7: if the possibility is mentioned]
                if ((((Adj_67_t1_v10(tmp_1)))))
                {! [8: now the possibility is not marked for listing]
                    (Adj_65_t3_v10(tmp_1));
                    }
                    }
            ! [9: increase the locale paragraph count by 1]
            (Global_Vars-->9) = (Global_Vars-->9) + 1;;
            ! [10: say ~On [the item] ~ ( a )]
            say__p=1;! [11: ~On [the item] ~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_148); .L_Say262; .L_SayX262;! [12: list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only]
            WriteListFrom(child(tmp_0), 3800);
            ! [13: say ~.[paragraph break]~]
            say__p=1;! [14: ~.~]
            ParaContent(); print ".";! [15: paragraph break]
            ParaContent(); DivideParagraphPoint(); new_line; .L_Say263; .L_SayX263;}
            }
    ! [16: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_97, 97, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Taking inventory (B132_carry_out_taking_invent)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Carry out taking inventory ( this is the print empty inventory rule ):
!   === equally specific with ===
! Rule 2/2 ! Carry out taking inventory ( this is the print standard inventory rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out taking inventory ( this is the print empty inventory rule ):
[ R_98 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_98, 98);
    ! [2: if the first thing held by the player is nothing]
    if ((((child(player)) == nothing)))
    {! [3: say ~[We] [are] carrying nothing.~ ( a )]
        say__p=1;! [4: ~[We] [are] carrying nothing.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_149); new_line; .L_Say264; .L_SayX264;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_98, 98, 'actor');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out taking inventory ( this is the print standard inventory rule ):
[ R_99 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_99, 99);
    ! [2: say ~[We] [are] carrying:[line break]~ ( a )]
    say__p=1;! [3: ~[We] [are] carrying:[line break]~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_150); .L_Say265; .L_SayX265;! [4: list the contents of the player , with newlines , indented , including contents , giving inventory information , with extra indentation]
    WriteListFrom(child(player), 8215);
    } else if (debug_rules > 1) DB_Rule(R_99, 99, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Taking inventory (B133_report_taking_inventory)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor taking inventory ( this is the report other people taking inventory rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor taking inventory ( this is the report other people taking inventory rule ):
[ R_100 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_100, 100);
    ! [2: if the actor is not the player and the action is not silent]
    if ((((~~((actor == player))))) && (((keep_silent == false))))
    {! [3: say ~[The actor] [look] through [their] possessions.~ ( a )]
        say__p=1;! [4: ~[The actor] [look] through [their] possessions.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_151); new_line; .L_Say266; .L_SayX266;}
        } else if (debug_rules > 1) DB_Rule(R_100, 100, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Taking (B134_check_taking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/12 ! Check an actor taking ( this is the can't take yourself rule ):
!   === equally specific with ===
! Rule 2/12 ! Check an actor taking ( this is the can't take other people rule ):
!   === equally specific with ===
! Rule 3/12 ! Check an actor taking ( this is the can't take component parts rule ):
!   === equally specific with ===
! Rule 4/12 ! Check an actor taking ( this is the can't take people's possessions rule ):
!   === equally specific with ===
! Rule 5/12 ! Check an actor taking ( this is the can't take items out of play rule ):
!   === equally specific with ===
! Rule 6/12 ! Check an actor taking ( this is the can't take what you're inside rule ):
!   === equally specific with ===
! Rule 7/12 ! Check an actor taking ( this is the can't take what's already taken rule ):
!   === equally specific with ===
! Rule 8/12 ! Check an actor taking ( this is the can't take scenery rule ):
!   === equally specific with ===
! Rule 9/12 ! Check an actor taking ( this is the can only take things rule ):
!   === equally specific with ===
! Rule 10/12 ! Check an actor taking ( this is the can't take what's fixed in place rule ):
!   === equally specific with ===
! Rule 11/12 ! Check an actor taking ( this is the use player's holdall to avoid exceeding carrying capacity rule ):
!   === equally specific with ===
! Rule 12/12 ! Check an actor taking ( this is the can't exceed carrying capacity rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take yourself rule ):
[ R_101 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_101, 101);
    ! [2: if the actor is the noun]
    if (((actor == noun)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [are] always self-possessed.~ ( a )]
            say__p=1;! [5: ~[We] [are] always self-possessed.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_152); new_line; .L_Say267; .L_SayX267;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_101, 101, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take other people rule ):
[ R_102 ;
    if (((((action ==##Take) &&  (actor==player) && ((noun ofclass K21_mouse)))))) rfalse;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_102, 102);
    ! [2: if the noun is a person]
    if (((noun ofclass K8_person)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~I don't suppose [the noun] [would care] for that.~ ( a )]
            say__p=1;! [5: ~I don't suppose [the noun] [would care] for that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_153); new_line; .L_Say268; .L_SayX268;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_102, 102, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take component parts rule ):
[ R_103 
    tmp_0 ! Let/loop value, e.g., 'whole': thing
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_103, 103);
    ! [2: if the noun is part of something ( called the whole )]
    if ((((noun.component_parent) ofclass K2_thing) && (tmp_0=((noun.component_parent)), true)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][Those] [seem] to be a part of [the whole].~ ( a )]
            say__p=1;! [5: ~[regarding the noun][Those] [seem] to be a part of [the whole].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_154); new_line; .L_Say269; .L_SayX269;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_103, 103, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take people's possessions rule ):
[ R_104 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'owner': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_104, 104);
    ! [2: let the local ceiling be the common ancestor of the actor with the noun]

    		tmp_0 = (CommonAncestor(actor, noun));
    ! [3: let the owner be the not-counting-parts holder of the noun]

    		tmp_1 = (CoreOfParentOfCoreOf(noun));
    ! [4: while the owner is not nothing and the owner is not the local ceiling]
    while ((((~~((tmp_1 == nothing))))) && (((~~((tmp_1 == tmp_0))))))
    {! [5: if the owner is a person]
        if (((tmp_1 ofclass K8_person)))
        {! [6: if the actor is the player]
            if (((actor == player)))
            {! [7: say ~[regarding the noun][Those] [seem] to belong to [the owner].~ ( a )]
                say__p=1;! [8: ~[regarding the noun][Those] [seem] to belong to [the owner].~ ( a )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_155); new_line; .L_Say270; .L_SayX270;}
            ! [9: stop the action]
            rtrue;
            }
        ! [10: let the owner be the not-counting-parts holder of the owner]
        tmp_1 = (CoreOfParentOfCoreOf(tmp_1));
        }
        } else if (debug_rules > 1) DB_Rule(R_104, 104, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take items out of play rule ):
[ R_105 
    tmp_0 ! Let/loop value, e.g., 'H': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_105, 105);
    ! [2: let h be the noun]

    		tmp_0 = noun;
    ! [3: while h is not nothing and h is not a room]
    while ((((~~((tmp_0 == nothing))))) && (((~~((tmp_0 ofclass K1_room))))))
    {! [4: let h be the not-counting-parts holder of h]
        tmp_0 = (CoreOfParentOfCoreOf(tmp_0));
        }
    ! [5: if h is nothing]
    if (((tmp_0 == nothing)))
    {! [6: if the actor is the player]
        if (((actor == player)))
        {! [7: say ~[regarding the noun][Those] [aren't] available.~ ( a )]
            say__p=1;! [8: ~[regarding the noun][Those] [aren't] available.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_156); new_line; .L_Say271; .L_SayX271;}
        ! [9: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_105, 105, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take what you're inside rule ):
[ R_106 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_106, 106);
    ! [2: let the local ceiling be the common ancestor of the actor with the noun]

    		tmp_0 = (CommonAncestor(actor, noun));
    ! [3: if the local ceiling is the noun]
    if (((tmp_0 == noun)))
    {! [4: if the actor is the player]
        if (((actor == player)))
        {! [5: say ~[We] [would have] to get [if noun is a supporter]off[otherwise]out of[end if] [the noun] first.~ ( a )]
            say__p=1;! [6: ~[We] [would have] to get [if noun is a supporter]off[otherwise]out of[end if] [the noun] first.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_157); new_line; .L_Say272; .L_SayX272;}
        ! [7: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_106, 106, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take what's already taken rule ):
[ R_107 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_107, 107);
    ! [2: if the actor is carrying the noun or the actor is wearing the noun]
    if ((((actor == CarrierOf(noun)))) || (((actor == WearerOf(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] already [have] [regarding the noun][those].~ ( a )]
            say__p=1;! [5: ~[We] already [have] [regarding the noun][those].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_158); new_line; .L_Say273; .L_SayX273;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_107, 107, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take scenery rule ):
[ R_108 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_108, 108);
    ! [2: if the noun is scenery]
    if ((((Adj_59_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] hardly portable.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] hardly portable.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_159); new_line; .L_Say274; .L_SayX274;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_108, 108, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can only take things rule ):
[ R_109 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_109, 109);
    ! [2: if the noun is not a thing]
    if (((~~((noun ofclass K2_thing)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [cannot] carry [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [cannot] carry [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_160); new_line; .L_Say275; .L_SayX275;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_109, 109, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take what's fixed in place rule ):
[ R_110 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_110, 110);
    ! [2: if the noun is fixed in place]
    if ((((Adj_57_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] fixed in place.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] fixed in place.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_161); new_line; .L_Say276; .L_SayX276;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_110, 110, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the use player's holdall to avoid exceeding carrying capacity rule ):
[ R_111 
    tmp_0 ! Let/loop value, e.g., 'current working sack': player's holdall
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    tmp_3 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_111, 111);
    ! [2: if the number of things carried by the actor is at least the carrying capacity of the actor]
    if ((((Prop_16()) >= GProperty(10, actor,capacity))))
    {! [3: if the actor is holding a player's holdall ( called the current working sack )]
        if ((((Prop_17() && (tmp_0=deferred_calling_list-->0, true)) || (tmp_0 = 0,false))))
        {! [4: let the transferred item be nothing]

            		tmp_1 = nothing;
            ! [5: repeat with the possible item running through things carried by the actor]
            for (tmp_2=Prop_18(0), tmp_3=Prop_18(tmp_2): tmp_2: tmp_2=tmp_3, tmp_3=Prop_18(tmp_3))
            {! [6: if the possible item is not lit and the possible item is not the current working sack]
                if ((((~~(((Adj_53_t1_v10(tmp_2))))))) && (((~~((tmp_2 == tmp_0))))))
                {! [7: let the transferred item be the possible item]
                    tmp_1 = tmp_2;
                    }
                    }
            ! [8: if the transferred item is not nothing]
            if (((~~((tmp_1 == nothing)))))
            {! [9: if the actor is the player]
                if (((actor == player)))
                {! [10: say ~(putting [the transferred item] into [the current working sack] to make room)[command clarification break]~ ( a )]
                    say__p=1;! [11: ~(putting [the transferred item] into [the current working sack] to make room)[command clarification break]~ ( a )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),TX_R_162); .L_Say277; .L_SayX277;}
                ! [12: silently try the actor trying inserting the transferred item into the current working sack]
                @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
                ClearParagraphing(1);
                TryAction(0, actor, ##Insert, tmp_1, tmp_0);
                DivideParagraphPoint();
                @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

                ! [13: if the transferred item is not in the current working sack]
                if (((~~((tmp_0 == ContainerOf(tmp_1))))))
                {! [14: stop the action]
                    rtrue;
                    }
                    }
                    }
                    }
                    } else if (debug_rules > 1) DB_Rule(R_111, 111, 'action');
                    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't exceed carrying capacity rule ):
[ R_112 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_112, 112);
    ! [2: if the number of things carried by the actor is at least the carrying capacity of the actor]
    if ((((Prop_19()) >= GProperty(10, actor,capacity))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We]['re] carrying too many things already.~ ( a )]
            say__p=1;! [5: ~[We]['re] carrying too many things already.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_163); new_line; .L_Say278; .L_SayX278;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_112, 112, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Taking (B135_carry_out_taking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor taking ( this is the standard taking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor taking ( this is the standard taking rule ):
[ R_113 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_113, 113);
    ! [2: now the actor carries the noun]
    MoveObject(noun,actor);
    ! [3: if the actor is the player]
    if (((actor == player)))
    {! [4: now the noun is handled]
        (Adj_62_t2_v10(noun));
        }
        } else if (debug_rules > 1) DB_Rule(R_113, 113, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Taking (B136_report_taking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor taking ( this is the standard report taking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor taking ( this is the standard report taking rule ):
[ R_114 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_114, 114);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~Taken.~ ( a )]
            say__p=1;! [5: ~Taken.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_164); new_line; .L_Say279; .L_SayX279;} else {
            ! [6: say ~[The actor] [pick] up [the noun].~ ( b )]
            say__p=1;! [7: ~[The actor] [pick] up [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_165); new_line; .L_Say280; .L_SayX280;}
            }
            } else if (debug_rules > 1) DB_Rule(R_114, 114, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Removing it from (B137_check_removing_it_from)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Check an actor taking ( this is the can't take component parts rule ):
!   <<< I - Number of aspects constrained <<<
! Rule 2/4 ! Check an actor removing something from ( this is the can't remove what's not inside rule ):
!   === equally specific with ===
! Rule 3/4 ! Check an actor removing something from ( this is the can't remove from people rule ):
!   === equally specific with ===
! Rule 4/4 ! Check an actor removing something from ( this is the convert remove to take rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor removing something from ( this is the can't remove what's not inside rule ):
[ R_115 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_115, 115);
    ! [2: if the holder of the noun is not the second noun]
    if (((~~(((HolderOf(noun)) == second)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~But [regarding the noun][they] [aren't] there now.~ ( a )]
            say__p=1;! [5: ~But [regarding the noun][they] [aren't] there now.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_166); new_line; .L_Say281; .L_SayX281;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_115, 115, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor removing something from ( this is the can't remove from people rule ):
[ R_116 
    tmp_0 ! Let/loop value, e.g., 'owner': object
    ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_116, 116);
    ! [2: let the owner be the holder of the noun]

    		tmp_0 = (HolderOf(noun));
    ! [3: if the owner is a person]
    if (((tmp_0 ofclass K8_person)))
    {! [4: if the owner is the actor]
        if (((tmp_0 == actor)))
        {! [5: convert to the taking off action on the noun]
            return GVS_Convert(##Disrobe,noun,0);
            }
        ! [6: if the actor is the player]
        if (((actor == player)))
        {! [7: say ~[regarding the noun][Those] [seem] to belong to [the owner].~ ( a )]
            say__p=1;! [8: ~[regarding the noun][Those] [seem] to belong to [the owner].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_167); new_line; .L_Say282; .L_SayX282;}
        ! [9: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_116, 116, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor removing something from ( this is the convert remove to take rule ):
[ R_117 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_117, 117);
    ! [2: convert to the taking action on the noun]
    return GVS_Convert(##Take,noun,0);
    } else if (debug_rules > 1) DB_Rule(R_117, 117, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Dropping (B140_check_dropping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Check an actor dropping something which is part of the actor ( this is the can't drop body parts rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 2/6 ! Check an actor dropping ( this is the can't drop yourself rule ):
!   === equally specific with ===
! Rule 3/6 ! Check an actor dropping ( this is the can't drop what's already dropped rule ):
!   === equally specific with ===
! Rule 4/6 ! Check an actor dropping ( this is the can't drop what's not held rule ):
!   === equally specific with ===
! Rule 5/6 ! Check an actor dropping ( this is the can't drop clothes being worn rule ):
!   === equally specific with ===
! Rule 6/6 ! Check an actor dropping ( this is the can't drop if this exceeds carrying capacity rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor dropping something which is part of the actor ( this is the can't drop body parts rule ):
[ R_119 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing) && (actor == (noun.component_parent)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_119, 119);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[We] [can't drop] part of [ourselves].~ ( a )]
        say__p=1;! [4: ~[We] [can't drop] part of [ourselves].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_168); new_line; .L_Say283; .L_SayX283;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_119, 119, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor dropping ( this is the can't drop yourself rule ):
[ R_118 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_118, 118);
    ! [2: if the noun is the actor]
    if (((noun == actor)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [lack] the dexterity.~ ( a )]
            say__p=1;! [5: ~[We] [lack] the dexterity.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_169); new_line; .L_Say284; .L_SayX284;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_118, 118, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor dropping ( this is the can't drop what's already dropped rule ):
[ R_120 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_120, 120);
    ! [2: if the noun is in the holder of the actor]
    if ((((HolderOf(actor)) == ContainerOf(noun))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [are] already here.~ ( a )]
            say__p=1;! [5: ~[The noun] [are] already here.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_170); new_line; .L_Say285; .L_SayX285;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_120, 120, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor dropping ( this is the can't drop what's not held rule ):
[ R_121 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_121, 121);
    ! [2: if the actor is carrying the noun]
    if (((actor == CarrierOf(noun))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [5: continue the action]
        rfalse;
        }
    ! [6: if the actor is the player]
    if (((actor == player)))
    {! [7: say ~[We] [haven't] got [regarding the noun][those].~ ( a )]
        say__p=1;! [8: ~[We] [haven't] got [regarding the noun][those].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_171); new_line; .L_Say286; .L_SayX286;}
    ! [9: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_121, 121, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor dropping ( this is the can't drop clothes being worn rule ):
[ R_122 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_122, 122);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~(first taking [the noun] off)[command clarification break]~ ( a )]
            say__p=1;! [5: ~(first taking [the noun] off)[command clarification break]~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_172); .L_Say287; .L_SayX287;}
        ! [6: silently try the actor trying taking off the noun]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Disrobe, noun, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [7: if the actor is wearing the noun]
        if (((actor == WearerOf(noun))))
        {! [8: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_122, 122, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor dropping ( this is the can't drop if this exceeds carrying capacity rule ):
[ R_123 
    tmp_0 ! Let/loop value, e.g., 'receptacle': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_123, 123);
    ! [2: let the receptacle be the holder of the actor]

    		tmp_0 = (HolderOf(actor));
    ! [3: if the receptacle is a room]
    if (((tmp_0 ofclass K1_room)))
    {! [4: continue the action]
        rfalse;
        }
    ! [5: if the receptacle provides the property carrying capacity]
    if (((WhetherProvides(tmp_0, false, capacity))))
    {! [6: if the receptacle is a supporter]
        if (((tmp_0 ofclass K6_supporter)))
        {! [7: if the number of things on the receptacle is at least the carrying capacity of the receptacle]
            if ((((Prop_20(tmp_0)) >= GProperty(OBJECT_TY, tmp_0,capacity))))
            {! [8: if the actor is the player]
                if (((actor == player)))
                {! [9: now the prior named object is nothing]
                    prior_named_noun = nothing;
                    ! [10: say ~[There] [are] no more room on [the receptacle].~ ( a )]
                    say__p=1;! [11: ~[There] [are] no more room on [the receptacle].~ ( a )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_173); new_line; .L_Say288; .L_SayX288;}
                ! [12: stop the action]
                rtrue;
                }
                } else {
            ! [13: if the receptacle is a container]
            if (((tmp_0 ofclass K5_container)))
            {! [14: if the number of things in the receptacle is at least the carrying capacity of the receptacle]
                if ((((Prop_21(tmp_0)) >= GProperty(OBJECT_TY, tmp_0,capacity))))
                {! [15: if the actor is the player]
                    if (((actor == player)))
                    {! [16: now the prior named object is nothing]
                        prior_named_noun = nothing;
                        ! [17: say ~[There] [are] no more room in [the receptacle].~ ( b )]
                        say__p=1;! [18: ~[There] [are] no more room in [the receptacle].~ ( b )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_174); new_line; .L_Say289; .L_SayX289;}
                    ! [19: stop the action]
                    rtrue;
                    }
                    }
                    }
                    }
                    } else if (debug_rules > 1) DB_Rule(R_123, 123, 'action');
                    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Dropping (B141_carry_out_dropping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor dropping ( this is the standard dropping rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor dropping ( this is the standard dropping rule ):
[ R_124 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_124, 124);
    ! [2: now the noun is in the holder of the actor]
    MoveObject(noun,(HolderOf(actor)));
    } else if (debug_rules > 1) DB_Rule(R_124, 124, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Dropping (B142_report_dropping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor dropping ( this is the standard report dropping rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor dropping ( this is the standard report dropping rule ):
[ R_125 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_125, 125);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~Dropped.~ ( a )]
            say__p=1;! [5: ~Dropped.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_175); new_line; .L_Say290; .L_SayX290;} else {
            ! [6: say ~[The actor] [put] down [the noun].~ ( b )]
            say__p=1;! [7: ~[The actor] [put] down [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_176); new_line; .L_Say291; .L_SayX291;}
            }
            } else if (debug_rules > 1) DB_Rule(R_125, 125, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Putting it on (B143_check_putting_it_on)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Check an actor putting something on ( this is the convert put to drop where possible rule ):
!   === equally specific with ===
! Rule 2/6 ! Check an actor putting something on ( this is the can't put what's not held rule ):
!   === equally specific with ===
! Rule 3/6 ! Check an actor putting something on ( this is the can't put something on itself rule ):
!   === equally specific with ===
! Rule 4/6 ! Check an actor putting something on ( this is the can't put onto what's not a supporter rule ):
!   === equally specific with ===
! Rule 5/6 ! Check an actor putting something on ( this is the can't put clothes being worn rule ):
!   === equally specific with ===
! Rule 6/6 ! Check an actor putting something on ( this is the can't put if this exceeds carrying capacity rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor putting something on ( this is the convert put to drop where possible rule ):
[ R_126 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_126, 126);
    ! [2: if the second noun is down or the actor is on the second noun]
    if ((((second == I60_down))) || (((second == SupporterOf(actor)))))
    {! [3: convert to the dropping action on the noun]
        return GVS_Convert(##Drop,noun,0);
        }
        } else if (debug_rules > 1) DB_Rule(R_126, 126, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor putting something on ( this is the can't put what's not held rule ):
[ R_127 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_127, 127);
    ! [2: if the actor is carrying the noun]
    if (((actor == CarrierOf(noun))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [5: continue the action]
        rfalse;
        }
    ! [6: carry out the implicitly taking activity with the noun]
    CarryOutActivity(V25_implicitly_taking, noun);
    ! [7: if the actor is carrying the noun]
    if (((actor == CarrierOf(noun))))
    {! [8: continue the action]
        rfalse;
        }
    ! [9: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_127, 127, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor putting something on ( this is the can't put something on itself rule ):
[ R_128 
    tmp_0 ! Let/loop value, e.g., 'noun-CPC': object
    tmp_1 ! Let/loop value, e.g., 'second-CPC': object
    tmp_2 ! Let/loop value, e.g., 'transfer ceiling': object
    ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_128, 128);
    ! [2: let the noun-cpc be the component parts core of the noun]

    		tmp_0 = CoreOf(noun);
    ! [3: let the second-cpc be the component parts core of the second noun]

    		tmp_1 = CoreOf(second);
    ! [4: let the transfer ceiling be the common ancestor of the noun-cpc with the second-cpc]

    		tmp_2 = (CommonAncestor(tmp_0, tmp_1));
    ! [5: if the transfer ceiling is the noun-cpc]
    if (((tmp_2 == tmp_0)))
    {! [6: if the actor is the player]
        if (((actor == player)))
        {! [7: say ~[We] [can't put] something on top of itself.~ ( a )]
            say__p=1;! [8: ~[We] [can't put] something on top of itself.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_177); new_line; .L_Say292; .L_SayX292;}
        ! [9: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_128, 128, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor putting something on ( this is the can't put onto what's not a supporter rule ):
[ R_129 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_129, 129);
    ! [2: if the second noun is not a supporter]
    if (((~~((second ofclass K6_supporter)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~Putting things on [the second noun] [would achieve] nothing.~ ( a )]
            say__p=1;! [5: ~Putting things on [the second noun] [would achieve] nothing.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_178); new_line; .L_Say293; .L_SayX293;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_129, 129, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor putting something on ( this is the can't put clothes being worn rule ):
[ R_130 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_130, 130);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~(first taking [regarding the noun][them] off)[command clarification break]~ ( a )]
            say__p=1;! [5: ~(first taking [regarding the noun][them] off)[command clarification break]~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_179); .L_Say294; .L_SayX294;}
        ! [6: silently try the actor trying taking off the noun]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Disrobe, noun, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [7: if the actor is wearing the noun]
        if (((actor == WearerOf(noun))))
        {! [8: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_130, 130, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor putting something on ( this is the can't put if this exceeds carrying capacity rule ):
[ R_131 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_131, 131);
    ! [2: if the second noun provides the property carrying capacity]
    if (((WhetherProvides(second, false, capacity))))
    {! [3: if the number of things on the second noun is at least the carrying capacity of the second noun]
        if ((((Prop_22()) >= GProperty(OBJECT_TY, second,capacity))))
        {! [4: if the actor is the player]
            if (((actor == player)))
            {! [5: say ~[There] [are] no more room on [the second noun].~ ( a )]
                say__p=1;! [6: ~[There] [are] no more room on [the second noun].~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_180); new_line; .L_Say295; .L_SayX295;}
            ! [7: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_131, 131, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Putting it on (B144_carry_out_putting_it_on)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor putting something on ( this is the standard putting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor putting something on ( this is the standard putting rule ):
[ R_132 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_132, 132);
    ! [2: now the noun is on the second noun]
    MoveObject(noun,second);
    } else if (debug_rules > 1) DB_Rule(R_132, 132, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Putting it on (B145_report_putting_it_on)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report an actor putting something on ( this is the concise report putting rule ):
!   === equally specific with ===
! Rule 2/2 ! Report an actor putting something on ( this is the standard report putting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor putting something on ( this is the concise report putting rule ):
[ R_133 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_133, 133);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is the player and the i6 parser is running multiple actions]
        if ((((actor == player))) && (((multiflag==1))))
        {! [4: say ~Done.~ ( a )]
            say__p=1;! [5: ~Done.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_181); new_line; .L_Say296; .L_SayX296;! [6: stop the action]
            rtrue;
            }
            }
    ! [7: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_133, 133, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor putting something on ( this is the standard report putting rule ):
[ R_134 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_134, 134);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: say ~[The actor] [put] [the noun] on [the second noun].~ ( a )]
        say__p=1;! [4: ~[The actor] [put] [the noun] on [the second noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_182); new_line; .L_Say297; .L_SayX297;}
        } else if (debug_rules > 1) DB_Rule(R_134, 134, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Inserting it into (B146_check_inserting_it_into)
! ----------------------------------------------------------------------------------------------------
! Rule 1/7 ! Check an actor inserting something into ( this is the convert insert to drop where possible rule ):
!   === equally specific with ===
! Rule 2/7 ! Check an actor inserting something into ( this is the can't insert what's not held rule ):
!   === equally specific with ===
! Rule 3/7 ! Check an actor inserting something into ( this is the can't insert something into itself rule ):
!   === equally specific with ===
! Rule 4/7 ! Check an actor inserting something into ( this is the can't insert into closed containers rule ):
!   === equally specific with ===
! Rule 5/7 ! Check an actor inserting something into ( this is the can't insert into what's not a container rule ):
!   === equally specific with ===
! Rule 6/7 ! Check an actor inserting something into ( this is the can't insert clothes being worn rule ):
!   === equally specific with ===
! Rule 7/7 ! Check an actor inserting something into ( this is the can't insert if this exceeds carrying capacity rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the convert insert to drop where possible rule ):
[ R_135 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_135, 135);
    ! [2: if the second noun is down or the actor is in the second noun]
    if ((((second == I60_down))) || (((second == ContainerOf(actor)))))
    {! [3: convert to the dropping action on the noun]
        return GVS_Convert(##Drop,noun,0);
        }
        } else if (debug_rules > 1) DB_Rule(R_135, 135, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the can't insert what's not held rule ):
[ R_136 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_136, 136);
    ! [2: if the actor is carrying the noun]
    if (((actor == CarrierOf(noun))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [5: continue the action]
        rfalse;
        }
    ! [6: carry out the implicitly taking activity with the noun]
    CarryOutActivity(V25_implicitly_taking, noun);
    ! [7: if the actor is carrying the noun]
    if (((actor == CarrierOf(noun))))
    {! [8: continue the action]
        rfalse;
        }
    ! [9: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_136, 136, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the can't insert something into itself rule ):
[ R_137 
    tmp_0 ! Let/loop value, e.g., 'noun-CPC': object
    tmp_1 ! Let/loop value, e.g., 'second-CPC': object
    tmp_2 ! Let/loop value, e.g., 'transfer ceiling': object
    ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_137, 137);
    ! [2: let the noun-cpc be the component parts core of the noun]

    		tmp_0 = CoreOf(noun);
    ! [3: let the second-cpc be the component parts core of the second noun]

    		tmp_1 = CoreOf(second);
    ! [4: let the transfer ceiling be the common ancestor of the noun-cpc with the second-cpc]

    		tmp_2 = (CommonAncestor(tmp_0, tmp_1));
    ! [5: if the transfer ceiling is the noun-cpc]
    if (((tmp_2 == tmp_0)))
    {! [6: if the actor is the player]
        if (((actor == player)))
        {! [7: say ~[We] [can't put] something inside itself.~ ( a )]
            say__p=1;! [8: ~[We] [can't put] something inside itself.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_183); new_line; .L_Say298; .L_SayX298;}
        ! [9: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_137, 137, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the can't insert into closed containers rule ):
[ R_138 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_138, 138);
    ! [2: if the second noun is a closed container]
    if (((second ofclass K5_container) && ((Adj_73_t1_v10(second)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The second noun] [are] closed.~ ( a )]
            say__p=1;! [5: ~[The second noun] [are] closed.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_184); new_line; .L_Say299; .L_SayX299;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_138, 138, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the can't insert into what's not a container rule ):
[ R_139 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_139, 139);
    ! [2: if the second noun is not a container]
    if (((~~((second ofclass K5_container)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the second noun][Those] [can't contain] things.~ ( a )]
            say__p=1;! [5: ~[regarding the second noun][Those] [can't contain] things.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_185); new_line; .L_Say300; .L_SayX300;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_139, 139, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the can't insert clothes being worn rule ):
[ R_140 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_140, 140);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~(first taking [regarding the noun][them] off)[command clarification break]~ ( a )]
            say__p=1;! [5: ~(first taking [regarding the noun][them] off)[command clarification break]~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_186); .L_Say301; .L_SayX301;}
        ! [6: silently try the actor trying taking off the noun]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Disrobe, noun, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [7: if the actor is wearing the noun]
        if (((actor == WearerOf(noun))))
        {! [8: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_140, 140, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the can't insert if this exceeds carrying capacity rule ):
[ R_141 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_141, 141);
    ! [2: if the second noun provides the property carrying capacity]
    if (((WhetherProvides(second, false, capacity))))
    {! [3: if the number of things in the second noun is at least the carrying capacity of the second noun]
        if ((((Prop_23()) >= GProperty(OBJECT_TY, second,capacity))))
        {! [4: if the actor is the player]
            if (((actor == player)))
            {! [5: now the prior named object is nothing]
                prior_named_noun = nothing;
                ! [6: say ~[There] [are] no more room in [the second noun].~ ( a )]
                say__p=1;! [7: ~[There] [are] no more room in [the second noun].~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_187); new_line; .L_Say302; .L_SayX302;}
            ! [8: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_141, 141, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Inserting it into (B147_carry_out_inserting_it_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor inserting something into ( this is the standard inserting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor inserting something into ( this is the standard inserting rule ):
[ R_142 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_142, 142);
    ! [2: now the noun is in the second noun]
    MoveObject(noun,second);
    } else if (debug_rules > 1) DB_Rule(R_142, 142, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Inserting it into (B148_report_inserting_it_int)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report an actor inserting something into ( this is the concise report inserting rule ):
!   === equally specific with ===
! Rule 2/2 ! Report an actor inserting something into ( this is the standard report inserting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor inserting something into ( this is the concise report inserting rule ):
[ R_143 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_143, 143);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is the player and the i6 parser is running multiple actions]
        if ((((actor == player))) && (((multiflag==1))))
        {! [4: say ~Done.~ ( a )]
            say__p=1;! [5: ~Done.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_188); new_line; .L_Say303; .L_SayX303;! [6: stop the action]
            rtrue;
            }
            }
    ! [7: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_143, 143, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor inserting something into ( this is the standard report inserting rule ):
[ R_144 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_144, 144);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: say ~[The actor] [put] [the noun] into [the second noun].~ ( a )]
        say__p=1;! [4: ~[The actor] [put] [the noun] into [the second noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_189); new_line; .L_Say304; .L_SayX304;}
        } else if (debug_rules > 1) DB_Rule(R_144, 144, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Eating (B149_check_eating)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Check an actor eating ( this is the can't eat unless edible rule ):
!   === equally specific with ===
! Rule 2/4 ! Check an actor eating ( this is the can't eat clothing without removing it first rule ):
!   === equally specific with ===
! Rule 3/4 ! Check an actor eating ( this is the can't eat other people's food rule ):
!   === equally specific with ===
! Rule 4/4 ! Check an actor eating ( this is the can't eat portable food without carrying it rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor eating ( this is the can't eat unless edible rule ):
[ R_145 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_145, 145);
    ! [2: if the noun is not a thing or the noun is not edible]
    if ((((~~((noun ofclass K2_thing))))) || (((~~(((Adj_55_t1_v10(noun))))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] plainly inedible.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] plainly inedible.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_190); new_line; .L_Say305; .L_SayX305;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_145, 145, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor eating ( this is the can't eat clothing without removing it first rule ):
[ R_146 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_146, 146);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~(first taking [the noun] off)[command clarification break]~ ( a )]
            say__p=1;! [5: ~(first taking [the noun] off)[command clarification break]~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_191); .L_Say306; .L_SayX306;}
        ! [6: try the actor trying taking off the noun]
        TryAction(0, actor, ##Disrobe, noun, 0);
        ! [7: if the actor is wearing the noun]
        if (((actor == WearerOf(noun))))
        {! [8: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_146, 146, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor eating ( this is the can't eat other people's food rule ):
[ R_147 
    tmp_0 ! Let/loop value, e.g., 'owner': person
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_147, 147);
    ! [2: if the noun is enclosed by a person ( called the owner ) who is not the actor]
    if ((((Prop_24() && (tmp_0=deferred_calling_list-->0, true)) || (tmp_0 = 0,false))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The owner] [might not appreciate] that.~ ( a )]
            say__p=1;! [5: ~[The owner] [might not appreciate] that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_192); new_line; .L_Say307; .L_SayX307;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_147, 147, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor eating ( this is the can't eat portable food without carrying it rule ):
[ R_148 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_148, 148);
    ! [2: if the noun is portable and the actor is not carrying the noun]
    if (((((Adj_58_t1_v10(noun))))) && (((~~((actor == CarrierOf(noun)))))))
    {! [3: carry out the implicitly taking activity with the noun]
        CarryOutActivity(V25_implicitly_taking, noun);
        ! [4: if the actor is not carrying the noun]
        if (((~~((actor == CarrierOf(noun))))))
        {! [5: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_148, 148, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Eating (B150_carry_out_eating)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor eating ( this is the standard eating rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor eating ( this is the standard eating rule ):
[ R_149 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_149, 149);
    ! [2: now the noun is nowhere]
    RemoveFromPlay(noun);;
    } else if (debug_rules > 1) DB_Rule(R_149, 149, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Eating (B151_report_eating)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor eating ( this is the standard report eating rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor eating ( this is the standard report eating rule ):
[ R_150 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_150, 150);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [eat] [the noun]. Not bad.~ ( a )]
            say__p=1;! [5: ~[We] [eat] [the noun]. Not bad.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_193); new_line; .L_Say308; .L_SayX308;} else {
            ! [6: say ~[The actor] [eat] [the noun].~ ( b )]
            say__p=1;! [7: ~[The actor] [eat] [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_194); new_line; .L_Say309; .L_SayX309;}
            }
            } else if (debug_rules > 1) DB_Rule(R_150, 150, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Going (B152_check_going)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Check an actor going when the actor is on a supporter ( called the chaise ) ( this is the stand up before going rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 2/6 ! Check an actor going ( this is the can't travel in what's not a vehicle rule ):
!   === equally specific with ===
! Rule 3/6 ! Check an actor going ( this is the can't go through undescribed doors rule ):
!   === equally specific with ===
! Rule 4/6 ! Check an actor going ( this is the can't go through closed doors rule ):
!   === equally specific with ===
! Rule 5/6 ! Check an actor going ( this is the determine map connection rule ):
!   === equally specific with ===
! Rule 6/6 ! Check an actor going ( this is the can't go that way rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor going when the actor is on a supporter ( called the chaise ) ( this is the stand up before going rule ):
[ R_152 
    tmp_0 ! Let/loop value, e.g., 'chaise': supporter
    ;
    if ((((act_requester==nothing) && (self=actor,true) && (((SupporterOf(actor) ofclass K6_supporter) && (tmp_0=(SupporterOf(actor)), true)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_152, 152);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~(first getting off [the chaise])[command clarification break]~ ( a )]
        say__p=1;! [4: ~(first getting off [the chaise])[command clarification break]~ ( a )]
        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_195); .L_Say310; .L_SayX310;}
    ! [5: silently try the actor exiting]
    @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
    ClearParagraphing(1);
    TryAction(0, actor, ##Exit, 0, 0);
    DivideParagraphPoint();
    @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

    } else if (debug_rules > 1) DB_Rule(R_152, 152, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor going ( this is the can't travel in what's not a vehicle rule ):
[ R_153 
    tmp_0 ! Let/loop value, e.g., 'nonvehicle': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_153, 153);
    ! [2: let nonvehicle be the holder of the actor]

    		tmp_0 = (HolderOf(actor));
    ! [3: if nonvehicle is the room gone from]
    if (((tmp_0 == (MStack-->MstVO(20007,0)))))
    {! [4: continue the action]
        rfalse;
        }
    ! [5: if nonvehicle is the vehicle gone by]
    if (((tmp_0 == (MStack-->MstVO(20007,3)))))
    {! [6: continue the action]
        rfalse;
        }
    ! [7: if the actor is the player]
    if (((actor == player)))
    {! [8: if nonvehicle is a supporter]
        if (((tmp_0 ofclass K6_supporter)))
        {! [9: say ~[We] [would have] to get off [the nonvehicle] first.~ ( a )]
            say__p=1;! [10: ~[We] [would have] to get off [the nonvehicle] first.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_196); new_line; .L_Say311; .L_SayX311;} else {
            ! [11: say ~[We] [would have] to get out of [the nonvehicle] first.~ ( b )]
            say__p=1;! [12: ~[We] [would have] to get out of [the nonvehicle] first.~ ( b )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_197); new_line; .L_Say312; .L_SayX312;}
            }
    ! [13: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_153, 153, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor going ( this is the can't go through undescribed doors rule ):
[ R_154 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_154, 154);
    ! [2: if the door gone through is not nothing and the door gone through is undescribed]
    if ((((~~(((MStack-->MstVO(20007,2)) == nothing))))) && ((((Adj_64_t1_v10((MStack-->MstVO(20007,2))))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [can't go] that way.~ ( a )]
            say__p=1;! [5: ~[We] [can't go] that way.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_198); new_line; .L_Say313; .L_SayX313;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_154, 154, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor going ( this is the can't go through closed doors rule ):
[ R_155 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_155, 155);
    ! [2: if the door gone through is not nothing and the door gone through is closed]
    if ((((~~(((MStack-->MstVO(20007,2)) == nothing))))) && ((((Adj_73_t1_v10((MStack-->MstVO(20007,2))))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~(first opening [the door gone through])[command clarification break]~ ( a )]
            say__p=1;! [5: ~(first opening [the door gone through])[command clarification break]~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_199); .L_Say314; .L_SayX314;}
        ! [6: silently try the actor opening the door gone through]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Open, (MStack-->MstVO(20007,2)), 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [7: if the door gone through is open]
        if ((((Adj_72_t1_v10((MStack-->MstVO(20007,2)))))))
        {! [8: continue the action]
            rfalse;
            }
        ! [9: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_155, 155, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor going ( this is the determine map connection rule ):
[ R_156 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    @push formal_par1;
    I7RBLK = KERNEL_4();
    @pull formal_par1;
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_4 
    tmp_0 ! Let/loop value, e.g., 'target': object
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_156, 156);
    ! [2: let the target be nothing]

    		tmp_0 = nothing;
    ! [3: if the noun is a direction]
    if (((noun ofclass K3_direction)))
    {! [4: let direction d be the noun]

        		tmp_1 = noun;
        ! [5: let the target be the room-or-door direction d from the room gone from]
        tmp_0 = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par0 ofclass K3_direction) && (formal_par0 ofclass K3_direction))))) && ((
                        formal_rv = RoomOrDoorFrom(formal_par1,formal_par0)) | 1)
                        )|| (ArgumentTypeFailed(2330, 1))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = (MStack-->MstVO(20007,0))) +
                    (formal_par0 = tmp_1)
                    ))
            )

        ! Resolution complete
        ;
        } else {
        ! [6: if the noun is a door]
        if (((noun ofclass K4_door)))
        {! [7: let the target be the noun]
            tmp_0 = noun;
            }
            }
    ! [8: if the target is a door]
    if (((tmp_0 ofclass K4_door)))
    {! [9: now the target is the other side of the target from the room gone from]
        tmp_0 = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par0 ofclass K4_door) && (formal_par0 ofclass K4_door))))) && ((
                        formal_rv = OtherSideOfDoor(formal_par0,formal_par1)) | 1)
                        )|| (ArgumentTypeFailed(2334, 1))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = (MStack-->MstVO(20007,0))) +
                    (formal_par0 = tmp_0)
                    ))
            )

        ! Resolution complete
        ;
        }
    ! [10: now the room gone to is the target]
    (MStack-->MstVO(20007,1)) = tmp_0;
    } else if (debug_rules > 1) DB_Rule(R_156, 156, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor going ( this is the can't go that way rule ):
[ R_157 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_157, 157);
    ! [2: if the room gone to is nothing]
    if ((((MStack-->MstVO(20007,1)) == nothing)))
    {! [3: if the door gone through is nothing]
        if ((((MStack-->MstVO(20007,2)) == nothing)))
        {! [4: if the actor is the player]
            if (((actor == player)))
            {! [5: say ~[We] [can't go] that way.~ ( a )]
                say__p=1;! [6: ~[We] [can't go] that way.~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_200); new_line; .L_Say315; .L_SayX315;}
            ! [7: stop the action]
            rtrue;
            }
        ! [8: if the actor is the player]
        if (((actor == player)))
        {! [9: say ~[We] [can't], since [the door gone through] [lead] nowhere.~ ( b )]
            say__p=1;! [10: ~[We] [can't], since [the door gone through] [lead] nowhere.~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_201); new_line; .L_Say316; .L_SayX316;}
        ! [11: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_157, 157, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Going (B153_carry_out_going)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Carry out an actor going ( this is the move player and vehicle rule ):
!   === equally specific with ===
! Rule 2/3 ! Carry out an actor going ( this is the move floating objects rule ):
!   === equally specific with ===
! Rule 3/3 ! Carry out an actor going ( this is the check light in new location rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor going ( this is the move player and vehicle rule ):
[ R_158 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_158, 158);
    ! [2: if the vehicle gone by is nothing]
    if ((((MStack-->MstVO(20007,3)) == nothing)))
    {! [3: surreptitiously move the actor to the room gone to during going]
        MoveDuringGoing(actor, (MStack-->MstVO(20007,1)));
        } else {
        ! [4: surreptitiously move the vehicle gone by to the room gone to during going]
        MoveDuringGoing((MStack-->MstVO(20007,3)), (MStack-->MstVO(20007,1)));
        }
    ! [5: if the location is not the location of the player]
    if (((~~((real_location == LocationOf(player))))))
    {! [6: now the location is the location of the player]
        real_location = LocationOf(player);
        }
        } else if (debug_rules > 1) DB_Rule(R_158, 158, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out an actor going ( this is the move floating objects rule ):
[ R_159 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_159, 159);
    ! [2: if the actor is the player or the player is within the vehicle gone by or the player is within the thing gone with]
    if ((((actor == player))) || (((((MStack-->MstVO(20007,3)) == ContainerOf(player)))) || ((((MStack-->MstVO(20007,4)) == ContainerOf(player))))))
    {! [3: update backdrop positions]
        MoveFloatingObjects();
        }
        } else if (debug_rules > 1) DB_Rule(R_159, 159, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out an actor going ( this is the check light in new location rule ):
[ R_160 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_160, 160);
    ! [2: if the actor is the player or the player is within the vehicle gone by or the player is within the thing gone with]
    if ((((actor == player))) || (((((MStack-->MstVO(20007,3)) == ContainerOf(player)))) || ((((MStack-->MstVO(20007,4)) == ContainerOf(player))))))
    {! [3: surreptitiously reckon darkness]
        SilentlyConsiderLight();
        }
        } else if (debug_rules > 1) DB_Rule(R_160, 160, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Going (B154_report_going)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor going ( this is the describe room gone into rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor going ( this is the describe room gone into rule ):
[ R_161 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    @push formal_par1;
    I7RBLK = KERNEL_5();
    @pull formal_par1;
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_5 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_161, 161);
    ! [2: if the player is the actor]
    if (((player == actor)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: produce a room description with going spacing conventions]
            LookAfterGoing();
            }
            } else {
        ! [5: if the noun is a direction]
        if (((noun ofclass K3_direction)))
        {! [6: if the location is the room gone from or the player is within the vehicle gone by or the player is within the thing gone with]
            if ((((real_location == (MStack-->MstVO(20007,0))))) || (((((MStack-->MstVO(20007,3)) == ContainerOf(player)))) || ((((MStack-->MstVO(20007,4)) == ContainerOf(player))))))
            {! [7: if the room gone from is the room gone to]
                if ((((MStack-->MstVO(20007,0)) == (MStack-->MstVO(20007,1)))))
                {! [8: continue the action]
                    rfalse;
                    } else {
                    ! [9: if the noun is up]
                    if (((noun == I59_up)))
                    {! [10: say ~[The actor] [go] up~ ( a )]
                        say__p=1;! [11: ~[The actor] [go] up~ ( a )]
                        ParaContent(); print (TEXT_TY_Say) (TX_R_202); .L_Say317; .L_SayX317;} else {
                        ! [12: if the noun is down]
                        if (((noun == I60_down)))
                        {! [13: say ~[The actor] [go] down~ ( b )]
                            say__p=1;! [14: ~[The actor] [go] down~ ( b )]
                            ParaContent(); print (TEXT_TY_Say) (TX_R_203); .L_Say318; .L_SayX318;} else {
                            ! [15: say ~[The actor] [go] [noun]~ ( c )]
                            say__p=1;! [16: ~[The actor] [go] [noun]~ ( c )]
                            ParaContent(); print (TEXT_TY_Say) (TX_R_204); .L_Say319; .L_SayX319;}
                            }
                            }
                            } else {
                ! [17: let the back way be the opposite of the noun]

                		tmp_0 = GProperty(OBJECT_TY, noun,p10_opposite);
                ! [18: if the location is the room gone to]
                if (((real_location == (MStack-->MstVO(20007,1)))))
                {! [19: let the room back the other way be the room back way from the location]

                    		tmp_1 = 
                    ! Resolution of run-time phrase ambiguity (deciding a value):
                        (
                            ! This value evaluates third (i.e., last)
                            formal_rv
                        +
                            0*(
                                ! The following condition evaluates second
                                ((
                                    ((((((formal_par1 ofclass K1_room) && (formal_par1 ofclass K1_room))))) && ((
                                    formal_rv = MapConnection(formal_par1,formal_par0)) | 1)
                                    )|| (ArgumentTypeFailed(2385, 1))

                                ))
                            +
                                ! The following assignments evaluate first
                                ((formal_par1 = real_location) +
                                (formal_par0 = tmp_0)
                                ))
                        )

                    ! Resolution complete
                    ;
                    ! [20: let the room normally this way be the room noun from the room gone from]

                    		tmp_2 = 
                    ! Resolution of run-time phrase ambiguity (deciding a value):
                        (
                            ! This value evaluates third (i.e., last)
                            formal_rv
                        +
                            0*(
                                ! The following condition evaluates second
                                ((
                                    ((((((formal_par0 ofclass K3_direction) && (formal_par0 ofclass K3_direction))))) && ((
                                    formal_rv = MapConnection(formal_par1,formal_par0)) | 1)
                                    )|| (ArgumentTypeFailed(2387, 1))

                                ))
                            +
                                ! The following assignments evaluate first
                                ((formal_par1 = (MStack-->MstVO(20007,0))) +
                                (formal_par0 = noun)
                                ))
                        )

                    ! Resolution complete
                    ;
                    ! [21: if the room back the other way is the room gone from or the room back the other way is the room normally this way]
                    if ((((tmp_1 == (MStack-->MstVO(20007,0))))) || (((tmp_1 == tmp_2))))
                    {! [22: if the back way is up]
                        if (((tmp_0 == I59_up)))
                        {! [23: say ~[The actor] [arrive] from above~ ( d )]
                            say__p=1;! [24: ~[The actor] [arrive] from above~ ( d )]
                            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_205); .L_Say320; .L_SayX320;} else {
                            ! [25: if the back way is down]
                            if (((tmp_0 == I60_down)))
                            {! [26: say ~[The actor] [arrive] from below~ ( e )]
                                say__p=1;! [27: ~[The actor] [arrive] from below~ ( e )]
                                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_206); .L_Say321; .L_SayX321;} else {
                                ! [28: say ~[The actor] [arrive] from [the back way]~ ( f )]
                                say__p=1;! [29: ~[The actor] [arrive] from [the back way]~ ( f )]
                                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_207); .L_Say322; .L_SayX322;}
                                }
                                } else {
                        ! [30: say ~[The actor] [arrive]~ ( g )]
                        say__p=1;! [31: ~[The actor] [arrive]~ ( g )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_208); .L_Say323; .L_SayX323;}
                        } else {
                    ! [32: if the back way is up]
                    if (((tmp_0 == I59_up)))
                    {! [33: say ~[The actor] [arrive] at [the room gone to] from above~ ( h )]
                        say__p=1;! [34: ~[The actor] [arrive] at [the room gone to] from above~ ( h )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_209); .L_Say324; .L_SayX324;} else {
                        ! [35: if the back way is down]
                        if (((tmp_0 == I60_down)))
                        {! [36: say ~[The actor] [arrive] at [the room gone to] from below~ ( i )]
                            say__p=1;! [37: ~[The actor] [arrive] at [the room gone to] from below~ ( i )]
                            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_210); .L_Say325; .L_SayX325;} else {
                            ! [38: say ~[The actor] [arrive] at [the room gone to] from [the back way]~ ( j )]
                            say__p=1;! [39: ~[The actor] [arrive] at [the room gone to] from [the back way]~ ( j )]
                            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_211); .L_Say326; .L_SayX326;}
                            }
                            }
                            }
                            } else {
            ! [40: if the location is the room gone from]
            if (((real_location == (MStack-->MstVO(20007,0)))))
            {! [41: say ~[The actor] [go] through [the noun]~ ( k )]
                say__p=1;! [42: ~[The actor] [go] through [the noun]~ ( k )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_212); .L_Say327; .L_SayX327;} else {
                ! [43: say ~[The actor] [arrive] from [the noun]~ ( l )]
                say__p=1;! [44: ~[The actor] [arrive] from [the noun]~ ( l )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_213); .L_Say328; .L_SayX328;}
                }
        ! [45: if the vehicle gone by is not nothing]
        if (((~~(((MStack-->MstVO(20007,3)) == nothing)))))
        {! [46: say ~ ~]
            say__p=1;! [47: ~ ~]
            ParaContent(); print " "; .L_Say329; .L_SayX329;! [48: if the vehicle gone by is a supporter]
            if ((((MStack-->MstVO(20007,3)) ofclass K6_supporter)))
            {! [49: say ~on [the vehicle gone by]~ ( m )]
                say__p=1;! [50: ~on [the vehicle gone by]~ ( m )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_214); .L_Say330; .L_SayX330;} else {
                ! [51: say ~in [the vehicle gone by]~ ( n )]
                say__p=1;! [52: ~in [the vehicle gone by]~ ( n )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_215); .L_Say331; .L_SayX331;}
                }
        ! [53: if the thing gone with is not nothing]
        if (((~~(((MStack-->MstVO(20007,4)) == nothing)))))
        {! [54: if the player is within the thing gone with]
            if ((((MStack-->MstVO(20007,4)) == ContainerOf(player))))
            {! [55: say ~, pushing [the thing gone with] in front, and [us] along too~ ( o )]
                say__p=1;! [56: ~, pushing [the thing gone with] in front, and [us] along too~ ( o )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_216); .L_Say332; .L_SayX332;} else {
                ! [57: if the player is within the vehicle gone by]
                if ((((MStack-->MstVO(20007,3)) == ContainerOf(player))))
                {! [58: say ~, pushing [the thing gone with] in front~ ( p )]
                    say__p=1;! [59: ~, pushing [the thing gone with] in front~ ( p )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_217); .L_Say333; .L_SayX333;} else {
                    ! [60: if the location is the room gone from]
                    if (((real_location == (MStack-->MstVO(20007,0)))))
                    {! [61: say ~, pushing [the thing gone with] away~ ( q )]
                        say__p=1;! [62: ~, pushing [the thing gone with] away~ ( q )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_218); .L_Say334; .L_SayX334;} else {
                        ! [63: say ~, pushing [the thing gone with] in~ ( r )]
                        say__p=1;! [64: ~, pushing [the thing gone with] in~ ( r )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_219); .L_Say335; .L_SayX335;}
                        }
                        }
                        }
        ! [65: if the player is within the vehicle gone by and the player is not within the thing gone with]
        if (((((MStack-->MstVO(20007,3)) == ContainerOf(player)))) && (((~~(((MStack-->MstVO(20007,4)) == ContainerOf(player)))))))
        {! [66: say ~, taking [us] along~ ( s )]
            say__p=1;! [67: ~, taking [us] along~ ( s )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_220); .L_Say336; .L_SayX336;! [68: say ~.~]
            say__p=1;! [69: ~.~]
            ParaContent(); print "."; new_line; .L_Say337; .L_SayX337;! [70: try looking]
            TryAction(0, player, ##Look, 0, 0);
            ! [71: continue the action]
            rfalse;
            }
        ! [72: say ~.~]
        say__p=1;! [73: ~.~]
        ParaContent(); print "."; new_line; .L_Say338; .L_SayX338;}
        } else if (debug_rules > 1) DB_Rule(R_161, 161, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Entering (B155_check_entering)
! ----------------------------------------------------------------------------------------------------
! Rule 1/8 ! Check an actor entering ( this is the convert enter door into go rule ):
!   === equally specific with ===
! Rule 2/8 ! Check an actor entering ( this is the convert enter compass direction into go rule ):
!   === equally specific with ===
! Rule 3/8 ! Check an actor entering ( this is the can't enter what's already entered rule ):
!   === equally specific with ===
! Rule 4/8 ! Check an actor entering ( this is the can't enter what's not enterable rule ):
!   === equally specific with ===
! Rule 5/8 ! Check an actor entering ( this is the can't enter closed containers rule ):
!   === equally specific with ===
! Rule 6/8 ! Check an actor entering ( this is the can't enter if this exceeds carrying capacity rule ):
!   === equally specific with ===
! Rule 7/8 ! Check an actor entering ( this is the can't enter something carried rule ):
!   === equally specific with ===
! Rule 8/8 ! Check an actor entering ( this is the implicitly pass through other barriers rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the convert enter door into go rule ):
[ R_163 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_163, 163);
    ! [2: if the noun is a door]
    if (((noun ofclass K4_door)))
    {! [3: convert to the going action on the noun]
        return GVS_Convert(##Go,noun,0);
        }
        } else if (debug_rules > 1) DB_Rule(R_163, 163, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the convert enter compass direction into go rule ):
[ R_164 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_164, 164);
    ! [2: if the noun is a direction]
    if (((noun ofclass K3_direction)))
    {! [3: convert to the going action on the noun]
        return GVS_Convert(##Go,noun,0);
        }
        } else if (debug_rules > 1) DB_Rule(R_164, 164, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the can't enter what's already entered rule ):
[ R_165 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_165, 165);
    ! [2: if the actor is the noun]
    if (((actor == noun)))
    {! [3: make no decision]
        rfalse;
        }
    ! [4: let the local ceiling be the common ancestor of the actor with the noun]

    		tmp_0 = (CommonAncestor(actor, noun));
    ! [5: if the local ceiling is the noun]
    if (((tmp_0 == noun)))
    {! [6: if the player is the actor]
        if (((player == actor)))
        {! [7: if the noun is a supporter]
            if (((noun ofclass K6_supporter)))
            {! [8: say ~But [we]['re] already on [the noun].~ ( a )]
                say__p=1;! [9: ~But [we]['re] already on [the noun].~ ( a )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_221); new_line; .L_Say339; .L_SayX339;} else {
                ! [10: say ~But [we]['re] already in [the noun].~ ( b )]
                say__p=1;! [11: ~But [we]['re] already in [the noun].~ ( b )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_222); new_line; .L_Say340; .L_SayX340;}
                }
        ! [12: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_165, 165, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the can't enter what's not enterable rule ):
[ R_166 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_166, 166);
    ! [2: if the noun is not enterable]
    if (((~~(((Adj_69_t1_v10(noun)))))))
    {! [3: if the player is the actor]
        if (((player == actor)))
        {! [4: if the player's command includes ~stand~]
            if (((matched_text=SnippetIncludes(Consult_Grammar_186,players_command))))
            {! [5: say ~[regarding the noun][They're] not something [we] [can] stand on.~ ( a )]
                say__p=1;! [6: ~[regarding the noun][They're] not something [we] [can] stand on.~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_223); new_line; .L_Say341; .L_SayX341;} else {
                ! [7: if the player's command includes ~sit~]
                if (((matched_text=SnippetIncludes(Consult_Grammar_187,players_command))))
                {! [8: say ~[regarding the noun][They're] not something [we] [can] sit down on.~ ( b )]
                    say__p=1;! [9: ~[regarding the noun][They're] not something [we] [can] sit down on.~ ( b )]
                    ParaContent(); print (TEXT_TY_Say) (TX_R_224); new_line; .L_Say342; .L_SayX342;} else {
                    ! [10: if the player's command includes ~lie~]
                    if (((matched_text=SnippetIncludes(Consult_Grammar_188,players_command))))
                    {! [11: say ~[regarding the noun][They're] not something [we] [can] lie down on.~ ( c )]
                        say__p=1;! [12: ~[regarding the noun][They're] not something [we] [can] lie down on.~ ( c )]
                        ParaContent(); print (TEXT_TY_Say) (TX_R_225); new_line; .L_Say343; .L_SayX343;} else {
                        ! [13: say ~[regarding the noun][They're] not something [we] [can] enter.~ ( d )]
                        say__p=1;! [14: ~[regarding the noun][They're] not something [we] [can] enter.~ ( d )]
                        ParaContent(); print (TEXT_TY_Say) (TX_R_226); new_line; .L_Say344; .L_SayX344;}
                        }
                        }
                        }
        ! [15: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_166, 166, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the can't enter closed containers rule ):
[ R_167 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_167, 167);
    ! [2: if the noun is a closed container]
    if (((noun ofclass K5_container) && ((Adj_73_t1_v10(noun)))))
    {! [3: if the player is the actor]
        if (((player == actor)))
        {! [4: say ~[We] [can't get] into the closed [noun].~ ( a )]
            say__p=1;! [5: ~[We] [can't get] into the closed [noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_227); new_line; .L_Say345; .L_SayX345;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_167, 167, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the can't enter if this exceeds carrying capacity rule ):
[ R_168 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_168, 168);
    ! [2: if the noun provides the property carrying capacity]
    if (((WhetherProvides(noun, false, capacity))))
    {! [3: if the noun is a supporter]
        if (((noun ofclass K6_supporter)))
        {! [4: if the number of things on the noun is at least the carrying capacity of the noun]
            if ((((Prop_25()) >= GProperty(OBJECT_TY, noun,capacity))))
            {! [5: if the actor is the player]
                if (((actor == player)))
                {! [6: now the prior named object is nothing]
                    prior_named_noun = nothing;
                    ! [7: say ~[There] [are] no more room on [the noun].~ ( a )]
                    say__p=1;! [8: ~[There] [are] no more room on [the noun].~ ( a )]
                    ParaContent(); print (TEXT_TY_Say) (TX_R_228); new_line; .L_Say346; .L_SayX346;}
                ! [9: stop the action]
                rtrue;
                }
                } else {
            ! [10: if the noun is a container]
            if (((noun ofclass K5_container)))
            {! [11: if the number of things in the noun is at least the carrying capacity of the noun]
                if ((((Prop_26()) >= GProperty(OBJECT_TY, noun,capacity))))
                {! [12: if the actor is the player]
                    if (((actor == player)))
                    {! [13: now the prior named object is nothing]
                        prior_named_noun = nothing;
                        ! [14: say ~[There] [are] no more room in [the noun].~ ( b )]
                        say__p=1;! [15: ~[There] [are] no more room in [the noun].~ ( b )]
                        ParaContent(); print (TEXT_TY_Say) (TX_R_229); new_line; .L_Say347; .L_SayX347;}
                    ! [16: stop the action]
                    rtrue;
                    }
                    }
                    }
                    }
                    } else if (debug_rules > 1) DB_Rule(R_168, 168, 'action');
                    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the can't enter something carried rule ):
[ R_169 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_169, 169);
    ! [2: let the local ceiling be the common ancestor of the actor with the noun]

    		tmp_0 = (CommonAncestor(actor, noun));
    ! [3: if the local ceiling is the actor]
    if (((tmp_0 == actor)))
    {! [4: if the player is the actor]
        if (((player == actor)))
        {! [5: say ~[We] [can] only get into something free-standing.~ ( a )]
            say__p=1;! [6: ~[We] [can] only get into something free-standing.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_230); new_line; .L_Say348; .L_SayX348;}
        ! [7: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_169, 169, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the implicitly pass through other barriers rule ):
[ R_170 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'target': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_170, 170);
    ! [2: if the holder of the actor is the holder of the noun]
    if ((((HolderOf(actor)) == (HolderOf(noun)))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: let the local ceiling be the common ancestor of the actor with the noun]

    		tmp_0 = (CommonAncestor(actor, noun));
    ! [5: while the holder of the actor is not the local ceiling]
    while (((~~(((HolderOf(actor)) == tmp_0)))))
    {! [6: let the current home be the holder of the actor]

        		tmp_1 = (HolderOf(actor));
        ! [7: if the player is the actor]
        if (((player == actor)))
        {! [8: if the current home is a supporter or the current home is an animal]
            if ((((tmp_1 ofclass K6_supporter))) || (((tmp_1 ofclass K12_animal))))
            {! [9: say ~(getting off [the current home])[command clarification break]~ ( a )]
                say__p=1;! [10: ~(getting off [the current home])[command clarification break]~ ( a )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_231); .L_Say349; .L_SayX349;} else {
                ! [11: say ~(getting out of [the current home])[command clarification break]~ ( b )]
                say__p=1;! [12: ~(getting out of [the current home])[command clarification break]~ ( b )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_232); .L_Say350; .L_SayX350;}
                }
        ! [13: silently try the actor trying exiting]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Exit, 0, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [14: if the holder of the actor is the current home]
        if ((((HolderOf(actor)) == tmp_1)))
        {! [15: stop the action]
            rtrue;
            }
            }
    ! [16: if the holder of the actor is the noun]
    if ((((HolderOf(actor)) == noun)))
    {! [17: stop the action]
        rtrue;
        }
    ! [18: if the holder of the actor is the holder of the noun]
    if ((((HolderOf(actor)) == (HolderOf(noun)))))
    {! [19: continue the action]
        rfalse;
        }
    ! [20: let the target be the holder of the noun]

    		tmp_1 = (HolderOf(noun));
    ! [21: if the noun is part of the target]
    if (((tmp_1 == (noun.component_parent))))
    {! [22: let the target be the holder of the target]
        tmp_1 = (HolderOf(tmp_1));
        }
    ! [23: while the target is a thing]
    while (((tmp_1 ofclass K2_thing)))
    {! [24: if the holder of the target is the local ceiling]
        if ((((HolderOf(tmp_1)) == tmp_0)))
        {! [25: if the player is the actor]
            if (((player == actor)))
            {! [26: if the target is a supporter]
                if (((tmp_1 ofclass K6_supporter)))
                {! [27: say ~(getting onto [the target])[command clarification break]~ ( c )]
                    say__p=1;! [28: ~(getting onto [the target])[command clarification break]~ ( c )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_233); .L_Say351; .L_SayX351;} else {
                    ! [29: if the target is a container]
                    if (((tmp_1 ofclass K5_container)))
                    {! [30: say ~(getting into [the target])[command clarification break]~ ( d )]
                        say__p=1;! [31: ~(getting into [the target])[command clarification break]~ ( d )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_234); .L_Say352; .L_SayX352;} else {
                        ! [32: say ~(entering [the target])[command clarification break]~ ( e )]
                        say__p=1;! [33: ~(entering [the target])[command clarification break]~ ( e )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_235); .L_Say353; .L_SayX353;}
                        }
                        }
            ! [34: silently try the actor trying entering the target]
            @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
            ClearParagraphing(1);
            TryAction(0, actor, ##Enter, tmp_1, 0);
            DivideParagraphPoint();
            @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

            ! [35: if the holder of the actor is not the target]
            if (((~~(((HolderOf(actor)) == tmp_1)))))
            {! [36: stop the action]
                rtrue;
                }
            ! [37: convert to the entering action on the noun]
            return GVS_Convert(##Enter,noun,0);
            ! [38: continue the action]
            rfalse;
            }
        ! [39: let the target be the holder of the target]
        tmp_1 = (HolderOf(tmp_1));
        }
        } else if (debug_rules > 1) DB_Rule(R_170, 170, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Entering (B156_carry_out_entering)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor entering ( this is the standard entering rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor entering ( this is the standard entering rule ):
[ R_171 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_171, 171);
    ! [2: surreptitiously move the actor to the noun]
    move actor to noun;
    } else if (debug_rules > 1) DB_Rule(R_171, 171, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Entering (B157_report_entering)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report an actor entering ( this is the standard report entering rule ):
!   === equally specific with ===
! Rule 2/2 ! Report an actor entering ( this is the describe contents entered into rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor entering ( this is the standard report entering rule ):
[ R_172 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_172, 172);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: if the noun is a supporter]
            if (((noun ofclass K6_supporter)))
            {! [5: say ~[We] [get] onto [the noun].~ ( a )]
                say__p=1;! [6: ~[We] [get] onto [the noun].~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_236); new_line; .L_Say354; .L_SayX354;} else {
                ! [7: say ~[We] [get] into [the noun].~ ( b )]
                say__p=1;! [8: ~[We] [get] into [the noun].~ ( b )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_237); new_line; .L_Say355; .L_SayX355;}
                }
                } else {
        ! [9: if the noun is a container]
        if (((noun ofclass K5_container)))
        {! [10: say ~[The actor] [get] into [the noun].~ ( c )]
            say__p=1;! [11: ~[The actor] [get] into [the noun].~ ( c )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_238); new_line; .L_Say356; .L_SayX356;} else {
            ! [12: say ~[The actor] [get] onto [the noun].~ ( d )]
            say__p=1;! [13: ~[The actor] [get] onto [the noun].~ ( d )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_239); new_line; .L_Say357; .L_SayX357;}
            }
    ! [14: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_172, 172, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor entering ( this is the describe contents entered into rule ):
[ R_173 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_173, 173);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: describe locale for the noun]
        (PHR_81_r9 (noun));
        }
        } else if (debug_rules > 1) DB_Rule(R_173, 173, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Exiting (B158_check_exiting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Check an actor exiting ( this is the convert exit into go out rule ):
!   === equally specific with ===
! Rule 2/4 ! Check an actor exiting ( this is the can't exit when not inside anything rule ):
!   === equally specific with ===
! Rule 3/4 ! Check an actor exiting ( this is the can't exit closed containers rule ):
!   === equally specific with ===
! Rule 4/4 ! Check an actor exiting ( this is the convert exit into get off rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor exiting ( this is the convert exit into go out rule ):
[ R_175 
    tmp_0 ! Let/loop value, e.g., 'local room': room
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_175, 175);
    ! [2: let the local room be the location of the actor]

    		tmp_0 = LocationOf(actor);
    ! [3: if the container exited from is the local room]
    if ((((MStack-->MstVO(20009,0)) == tmp_0)))
    {! [4: if the room-or-door outside from the local room is not nothing]
        if (((~~((RoomOrDoorFrom(tmp_0,out_obj) == nothing)))))
        {! [5: convert to the going action on the outside]
            return GVS_Convert(##Go,out_obj,0);
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_175, 175, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor exiting ( this is the can't exit when not inside anything rule ):
[ R_176 
    tmp_0 ! Let/loop value, e.g., 'local room': room
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_176, 176);
    ! [2: let the local room be the location of the actor]

    		tmp_0 = LocationOf(actor);
    ! [3: if the container exited from is the local room]
    if ((((MStack-->MstVO(20009,0)) == tmp_0)))
    {! [4: if the player is the actor]
        if (((player == actor)))
        {! [5: say ~But [we] [aren't] in anything at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
            say__p=1;! [6: ~But [we] [aren't] in anything at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_240); new_line; .L_Say358; .L_SayX358;}
        ! [7: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_176, 176, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor exiting ( this is the can't exit closed containers rule ):
[ R_177 
    tmp_0 ! Let/loop value, e.g., 'cage': container
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_177, 177);
    ! [2: if the actor is in a closed container ( called the cage )]
    if (((ContainerOf(actor) ofclass K5_container) && ((Adj_73_t1_v10(ContainerOf(actor)))) && (tmp_0=(ContainerOf(actor)), true)))
    {! [3: if the player is the actor]
        if (((player == actor)))
        {! [4: say ~You can't get out of the closed [cage].~ ( a )]
            say__p=1;! [5: ~You can't get out of the closed [cage].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_241); new_line; .L_Say359; .L_SayX359;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_177, 177, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor exiting ( this is the convert exit into get off rule ):
[ R_178 
    tmp_0 ! Let/loop value, e.g., 'platform': supporter
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_178, 178);
    ! [2: if the actor is on a supporter ( called the platform )]
    if (((SupporterOf(actor) ofclass K6_supporter) && (tmp_0=(SupporterOf(actor)), true)))
    {! [3: convert to the getting off action on the platform]
        return GVS_Convert(##GetOff,tmp_0,0);
        }
        } else if (debug_rules > 1) DB_Rule(R_178, 178, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Exiting (B159_carry_out_exiting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor exiting ( this is the standard exiting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor exiting ( this is the standard exiting rule ):
[ R_179 
    tmp_0 ! Let/loop value, e.g., 'former exterior': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_179, 179);
    ! [2: let the former exterior be the not-counting-parts holder of the container exited from]

    		tmp_0 = (CoreOfParentOfCoreOf((MStack-->MstVO(20009,0))));
    ! [3: surreptitiously move the actor to the former exterior]
    move actor to tmp_0;
    } else if (debug_rules > 1) DB_Rule(R_179, 179, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Exiting (B160_report_exiting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report an actor exiting ( this is the standard report exiting rule ):
!   === equally specific with ===
! Rule 2/2 ! Report an actor exiting ( this is the describe room emerged into rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor exiting ( this is the standard report exiting rule ):
[ R_180 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_180, 180);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: if the container exited from is a supporter]
            if ((((MStack-->MstVO(20009,0)) ofclass K6_supporter)))
            {! [5: say ~[We] [get] off [the container exited from].~ ( a )]
                say__p=1;! [6: ~[We] [get] off [the container exited from].~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_242); new_line; .L_Say360; .L_SayX360;} else {
                ! [7: say ~[We] [get] out of [the container exited from].~ ( b )]
                say__p=1;! [8: ~[We] [get] out of [the container exited from].~ ( b )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_243); new_line; .L_Say361; .L_SayX361;}
                } else {
            ! [9: say ~[The actor] [get] out of [the container exited from].~ ( c )]
            say__p=1;! [10: ~[The actor] [get] out of [the container exited from].~ ( c )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_244); new_line; .L_Say362; .L_SayX362;}
            }
    ! [11: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_180, 180, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor exiting ( this is the describe room emerged into rule ):
[ R_181 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_181, 181);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: surreptitiously reckon darkness]
        SilentlyConsiderLight();
        ! [4: produce a room description with going spacing conventions]
        LookAfterGoing();
        }
        } else if (debug_rules > 1) DB_Rule(R_181, 181, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Getting off (B161_check_getting_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor getting off ( this is the can't get off things rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor getting off ( this is the can't get off things rule ):
[ R_182 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_182, 182);
    ! [2: if the actor is on the noun]
    if (((noun == SupporterOf(actor))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is carried by the noun]
    if (((noun == CarrierOf(actor))))
    {! [5: continue the action]
        rfalse;
        }
    ! [6: if the actor is the player]
    if (((actor == player)))
    {! [7: say ~But [we] [aren't] on [the noun] at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
        say__p=1;! [8: ~But [we] [aren't] on [the noun] at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_245); new_line; .L_Say363; .L_SayX363;}
    ! [9: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_182, 182, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Getting off (B162_carry_out_getting_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor getting off ( this is the standard getting off rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor getting off ( this is the standard getting off rule ):
[ R_183 
    tmp_0 ! Let/loop value, e.g., 'former exterior': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_183, 183);
    ! [2: let the former exterior be the not-counting-parts holder of the noun]

    		tmp_0 = (CoreOfParentOfCoreOf(noun));
    ! [3: surreptitiously move the actor to the former exterior]
    move actor to tmp_0;
    } else if (debug_rules > 1) DB_Rule(R_183, 183, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Getting off (B163_report_getting_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report an actor getting off ( this is the standard report getting off rule ):
!   === equally specific with ===
! Rule 2/2 ! Report an actor getting off ( this is the describe room stood up into rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor getting off ( this is the standard report getting off rule ):
[ R_184 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_184, 184);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: say ~[The actor] [get] off [the noun].~ ( a )]
        say__p=1;! [4: ~[The actor] [get] off [the noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_246); new_line; .L_Say364; .L_SayX364;}
    ! [5: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_184, 184, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor getting off ( this is the describe room stood up into rule ):
[ R_185 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_185, 185);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: produce a room description with going spacing conventions]
        LookAfterGoing();
        }
        } else if (debug_rules > 1) DB_Rule(R_185, 185, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Looking (B165_carry_out_looking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/5 ! Carry out looking ( this is the declare everything unmentioned rule ):
!   === equally specific with ===
! Rule 2/5 ! Carry out looking ( this is the room description heading rule ):
!   === equally specific with ===
! Rule 3/5 ! Carry out looking ( this is the room description body text rule ):
!   === equally specific with ===
! Rule 4/5 ! Carry out looking ( this is the room description paragraphs about objects rule ):
!   === equally specific with ===
! Rule 5/5 ! Carry out looking ( this is the check new arrival rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out looking ( this is the declare everything unmentioned rule ):
[ R_187 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_187, 187);
    ! [2: repeat with item running through things]
    for (tmp_0=Prop_27(0), tmp_1=Prop_27(tmp_0): tmp_0: tmp_0=tmp_1, tmp_1=Prop_27(tmp_1))
    {! [3: now the item is not mentioned]
        (Adj_67_t3_v10(tmp_0));
        }
        } else if (debug_rules > 1) DB_Rule(R_187, 187, 'actor');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out looking ( this is the room description heading rule ):
[ R_188 
    tmp_0 ! Let/loop value, e.g., 'intermediate level': object
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_188, 188);
    ! [2: say bold type]
    say__p=1;! [3: bold type]
    ParaContent(); style bold; .L_Say365; .L_SayX365;! [4: if the visibility level count is 0]
    if ((((MStack-->MstVO(20011,2)) == 0)))
    {! [5: begin the printing the name of a dark room activity]
        BeginActivity(V9_printing_the_name_of_a_da);
        ! [6: if handling the printing the name of a dark room activity]
        if (((~~(ForActivity(V9_printing_the_name_of_a_da)))))
        {! [7: say ~Darkness~ ( a )]
            say__p=1;! [8: ~Darkness~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_247); .L_Say366; .L_SayX366;}
        ! [9: end the printing the name of a dark room activity]
        EndActivity(V9_printing_the_name_of_a_da);
        } else {
        ! [10: if the visibility ceiling is the location]
        if ((((MStack-->MstVO(20011,3)) == real_location)))
        {! [11: say ~[visibility ceiling]~]
            say__p=1;! [12: visibility ceiling]
            ParaContent(); PrintShortName((MStack-->MstVO(20011,3))); .L_Say367; .L_SayX367;} else {
            ! [13: say ~[The visibility ceiling]~]
            say__p=1;! [14: the visibility ceiling]
            ParaContent(); print (The) (MStack-->MstVO(20011,3)); .L_Say368; .L_SayX368;}
            }
    ! [15: say roman type]
    say__p=1;! [16: roman type]
    ParaContent(); style roman; .L_Say369; .L_SayX369;! [17: let intermediate level be the visibility-holder of the actor]

    		tmp_0 = VisibilityParent(actor);
    ! [18: repeat with intermediate level count running from 2 to the visibility level count]
    for (tmp_1=2: tmp_1<=(MStack-->MstVO(20011,2)): tmp_1++)
    {! [19: if the intermediate level is a supporter or the intermediate level is an animal]
        if ((((tmp_0 ofclass K6_supporter))) || (((tmp_0 ofclass K12_animal))))
        {! [20: say ~ (on [the intermediate level])~ ( b )]
            say__p=1;! [21: ~ (on [the intermediate level])~ ( b )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_248); .L_Say370; .L_SayX370;} else {
            ! [22: say ~ (in [the intermediate level])~ ( c )]
            say__p=1;! [23: ~ (in [the intermediate level])~ ( c )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_249); .L_Say371; .L_SayX371;}
        ! [24: let the intermediate level be the visibility-holder of the intermediate level]
        tmp_0 = VisibilityParent(tmp_0);
        }
    ! [25: say line break]
    say__p=1;! [26: line break]
    ParaContent(); new_line; .L_Say372; .L_SayX372;! [27: say run paragraph on with special look spacing]
    say__p=1;! [28: run paragraph on with special look spacing]
    ParaContent(); SpecialLookSpacingBreak(); .L_Say373; .L_SayX373;} else if (debug_rules > 1) DB_Rule(R_188, 188, 'actor');
    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out looking ( this is the room description body text rule ):
[ R_189 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_189, 189);
    ! [2: if the visibility level count is 0]
    if ((((MStack-->MstVO(20011,2)) == 0)))
    {! [3: if set to abbreviated room descriptions]
        if (((lookmode == 3)))
        {! [4: continue the action]
            rfalse;
            }
        ! [5: if set to sometimes abbreviated room descriptions and abbreviated form allowed is true and darkness witnessed is true]
        if ((((lookmode == 1))) && ((((((MStack-->MstVO(20011,1)) && true) == (1 && true)))) && (((((Global_Vars-->0) && true) == (1 && true))))))
        {! [6: continue the action]
            rfalse;
            }
        ! [7: begin the printing the description of a dark room activity]
        BeginActivity(V10_printing_the_description);
        ! [8: if handling the printing the description of a dark room activity]
        if (((~~(ForActivity(V10_printing_the_description)))))
        {! [9: now the prior named object is nothing]
            prior_named_noun = nothing;
            ! [10: say ~[It] [are] pitch dark, and [we] [can't see] a thing.~ ( a )]
            say__p=1;! [11: ~[It] [are] pitch dark, and [we] [can't see] a thing.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_250); new_line; .L_Say374; .L_SayX374;}
        ! [12: end the printing the description of a dark room activity]
        EndActivity(V10_printing_the_description);
        } else {
        ! [13: if the visibility ceiling is the location]
        if ((((MStack-->MstVO(20011,3)) == real_location)))
        {! [14: if set to abbreviated room descriptions]
            if (((lookmode == 3)))
            {! [15: continue the action]
                rfalse;
                }
            ! [16: if set to sometimes abbreviated room descriptions and abbreviated form allowed is true and the location is visited]
            if ((((lookmode == 1))) && ((((((MStack-->MstVO(20011,1)) && true) == (1 && true)))) && ((((Adj_51_t1_v10(real_location)))))))
            {! [17: continue the action]
                rfalse;
                }
            ! [18: print the location's description]
            PrintOrRun(location, description);
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_189, 189, 'actor');
            rfalse;
];
! From the Standard Rules
! No specific request
! Carry out looking ( this is the room description paragraphs about objects rule ):
[ R_190 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_190, 190);
    ! [2: if the visibility level count is greater than 0]
    if ((((MStack-->MstVO(20011,2)) > 0)))
    {! [3: let the intermediate position be the actor]

        		tmp_0 = actor;
        ! [4: let the ip count be the visibility level count]

        		tmp_1 = (MStack-->MstVO(20011,2));
        ! [5: while the ip count is greater than 0]
        while (((tmp_1 > 0)))
        {! [6: now the intermediate position is marked for listing]
            (Adj_65_t2_v10(tmp_0));
            ! [7: let the intermediate position be the visibility-holder of the intermediate position]
            tmp_0 = VisibilityParent(tmp_0);
            ! [8: decrease the ip count by 1]
            tmp_1 = tmp_1 - 1;;
            }
        ! [9: let the top-down ip count be the visibility level count]

        		tmp_2 = (MStack-->MstVO(20011,2));
        ! [10: while the top-down ip count is greater than 0]
        while (((tmp_2 > 0)))
        {! [11: let the intermediate position be the actor]
            tmp_0 = actor;
            ! [12: let the ip count be 0]
            tmp_1 = 0;
            ! [13: while the ip count is less than the top-down ip count]
            while (((tmp_1 < tmp_2)))
            {! [14: let the intermediate position be the visibility-holder of the intermediate position]
                tmp_0 = VisibilityParent(tmp_0);
                ! [15: increase the ip count by 1]
                tmp_1 = tmp_1 + 1;;
                }
            ! [16: describe locale for the intermediate position]
            (PHR_81_r9 (tmp_0));
            ! [17: decrease the top-down ip count by 1]
            tmp_2 = tmp_2 - 1;;
            }
            }
    ! [18: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_190, 190, 'actor');
    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out looking ( this is the check new arrival rule ):
[ R_191 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_191, 191);
    ! [2: if in darkness]
    if (((location==thedark)))
    {! [3: now the darkness witnessed is true]
        (Global_Vars-->0) = 1;
        } else {
        ! [4: if the location is a room]
        if (((real_location ofclass K1_room)))
        {! [5: now the location is visited]
            (Adj_51_t2_v10(real_location));
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_191, 191, 'actor');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Looking (B166_report_looking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor looking ( this is the other people looking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor looking ( this is the other people looking rule ):
[ R_192 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_192, 192);
    ! [2: if the actor is not the player]
    if (((~~((actor == player)))))
    {! [3: say ~[The actor] [look] around.~ ( a )]
        say__p=1;! [4: ~[The actor] [look] around.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_251); new_line; .L_Say375; .L_SayX375;}
        } else if (debug_rules > 1) DB_Rule(R_192, 192, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Examining (B168_carry_out_examining)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Carry out examining ( this is the standard examining rule ):
!   === equally specific with ===
! Rule 2/6 ! Carry out examining ( this is the examine directions rule ):
!   === equally specific with ===
! Rule 3/6 ! Carry out examining ( this is the examine containers rule ):
!   === equally specific with ===
! Rule 4/6 ! Carry out examining ( this is the examine supporters rule ):
!   === equally specific with ===
! Rule 5/6 ! Carry out examining ( this is the examine devices rule ):
!   === equally specific with ===
! Rule 6/6 ! Carry out examining ( this is the examine undescribed things rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out examining ( this is the standard examining rule ):
[ R_193 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_193, 193);
    ! [2: if the noun provides the property description and the description of the noun is not ~~]
    if ((((WhetherProvides(noun, false, description)))) && (((~~(( BlkValueCompare(GProperty(OBJECT_TY, noun,description), EMPTY_TEXT_VALUE) == 0))))))
    {! [3: say ~[description of the noun][line break]~]
        say__p=1;! [4: description of the noun]
        ParaContent(); @push self; print (TEXT_TY_Say) GProperty(OBJECT_TY, self=noun,description);@pull self; ! [5: line break]
        ParaContent(); new_line; .L_Say376; .L_SayX376;! [6: now examine text printed is true]
        (MStack-->MstVO(20012,0)) = 1;
        }
        } else if (debug_rules > 1) DB_Rule(R_193, 193, 'actor');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out examining ( this is the examine directions rule ):
[ R_194 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_194, 194);
    ! [2: if the noun is a direction]
    if (((noun ofclass K3_direction)))
    {! [3: say ~[We] [see] nothing unexpected in that direction.~ ( a )]
        say__p=1;! [4: ~[We] [see] nothing unexpected in that direction.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_252); new_line; .L_Say377; .L_SayX377;! [5: now examine text printed is true]
        (MStack-->MstVO(20012,0)) = 1;
        }
        } else if (debug_rules > 1) DB_Rule(R_194, 194, 'actor');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out examining ( this is the examine containers rule ):
[ R_195 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_195, 195);
    ! [2: if the noun is a container]
    if (((noun ofclass K5_container)))
    {! [3: if the noun is open or the noun is transparent]
        if (((((Adj_72_t1_v10(noun))))) || ((((Adj_71_t1_v10(noun))))))
        {! [4: if something described which is not scenery is in the noun and something which is not the player is in the noun]
            if (((((Prop_28())))) && ((((Prop_29())))))
            {! [5: say ~In [the noun] ~ ( a )]
                say__p=1;! [6: ~In [the noun] ~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_253); .L_Say378; .L_SayX378;! [7: list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are]
                WriteListFrom(child(noun), 3144);
                ! [8: say ~.~]
                say__p=1;! [9: ~.~]
                ParaContent(); print "."; new_line; .L_Say379; .L_SayX379;! [10: now examine text printed is true]
                (MStack-->MstVO(20012,0)) = 1;
                } else {
                ! [11: if examine text printed is false]
                if (((((MStack-->MstVO(20012,0)) && true) == (0 && true))))
                {! [12: if the player is in the noun]
                    if (((noun == ContainerOf(player))))
                    {! [13: make no decision]
                        rfalse;
                        }
                    ! [14: say ~[The noun] [are] empty.~ ( b )]
                    say__p=1;! [15: ~[The noun] [are] empty.~ ( b )]
                    ParaContent(); print (TEXT_TY_Say) (TX_R_254); new_line; .L_Say380; .L_SayX380;! [16: now examine text printed is true]
                    (MStack-->MstVO(20012,0)) = 1;
                    }
                    }
                    }
                    }
                    } else if (debug_rules > 1) DB_Rule(R_195, 195, 'actor');
                    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out examining ( this is the examine supporters rule ):
[ R_196 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_196, 196);
    ! [2: if the noun is a supporter]
    if (((noun ofclass K6_supporter)))
    {! [3: if something described which is not scenery is on the noun and something which is not the player is on the noun]
        if (((((Prop_30())))) && ((((Prop_31())))))
        {! [4: say ~On [the noun] ~ ( a )]
            say__p=1;! [5: ~On [the noun] ~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_255); .L_Say381; .L_SayX381;! [6: list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are , including contents , giving brief inventory information]
            WriteListFrom(child(noun), 3288);
            ! [7: say ~.~]
            say__p=1;! [8: ~.~]
            ParaContent(); print "."; new_line; .L_Say382; .L_SayX382;! [9: now examine text printed is true]
            (MStack-->MstVO(20012,0)) = 1;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_196, 196, 'actor');
            rfalse;
];
! From the Standard Rules
! No specific request
! Carry out examining ( this is the examine devices rule ):
[ R_197 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_197, 197);
    ! [2: if the noun is a device]
    if (((noun ofclass K13_device)))
    {! [3: say ~[The noun] [are] [if story tense is present tense]currently [end if]switched [if the noun is switched on]on[otherwise]off[end if].~ ( a )]
        say__p=1;! [4: ~[The noun] [are] [if story tense is present tense]currently [end if]switched [if the noun is switched on]on[otherwise]off[end if].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_256); new_line; .L_Say383; .L_SayX383;! [5: now examine text printed is true]
        (MStack-->MstVO(20012,0)) = 1;
        }
        } else if (debug_rules > 1) DB_Rule(R_197, 197, 'actor');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out examining ( this is the examine undescribed things rule ):
[ R_198 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_198, 198);
    ! [2: if examine text printed is false]
    if (((((MStack-->MstVO(20012,0)) && true) == (0 && true))))
    {! [3: say ~[We] [see] nothing special about [the noun].~ ( a )]
        say__p=1;! [4: ~[We] [see] nothing special about [the noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_257); new_line; .L_Say384; .L_SayX384;}
        } else if (debug_rules > 1) DB_Rule(R_198, 198, 'actor');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Examining (B169_report_examining)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor examining ( this is the report other people examining rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor examining ( this is the report other people examining rule ):
[ R_199 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_199, 199);
    ! [2: if the actor is not the player]
    if (((~~((actor == player)))))
    {! [3: say ~[The actor] [look] closely at [the noun].~ ( a )]
        say__p=1;! [4: ~[The actor] [look] closely at [the noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_258); new_line; .L_Say385; .L_SayX385;}
        } else if (debug_rules > 1) DB_Rule(R_199, 199, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Looking under (B171_carry_out_looking_under)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor looking under ( this is the standard looking under rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor looking under ( this is the standard looking under rule ):
[ R_200 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_200, 200);
    ! [2: if the player is the actor]
    if (((player == actor)))
    {! [3: say ~[We] [find] nothing of interest.~ ( a )]
        say__p=1;! [4: ~[We] [find] nothing of interest.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_259); new_line; .L_Say386; .L_SayX386;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_200, 200, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Looking under (B172_report_looking_under)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor looking under ( this is the report other people looking under rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor looking under ( this is the report other people looking under rule ):
[ R_201 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_201, 201);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is not the player]
        if (((~~((actor == player)))))
        {! [4: say ~[The actor] [look] under [the noun].~ ( a )]
            say__p=1;! [5: ~[The actor] [look] under [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_260); new_line; .L_Say387; .L_SayX387;}
            }
            } else if (debug_rules > 1) DB_Rule(R_201, 201, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Searching (B173_check_searching)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check an actor searching ( this is the can't search unless container or supporter rule ):
!   === equally specific with ===
! Rule 2/2 ! Check an actor searching ( this is the can't search closed opaque containers rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor searching ( this is the can't search unless container or supporter rule ):
[ R_202 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_202, 202);
    ! [2: if the noun is not a container and the noun is not a supporter]
    if ((((~~((noun ofclass K5_container))))) && (((~~((noun ofclass K6_supporter))))))
    {! [3: if the player is the actor]
        if (((player == actor)))
        {! [4: say ~[We] [find] nothing of interest.~ ( a )]
            say__p=1;! [5: ~[We] [find] nothing of interest.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_261); new_line; .L_Say388; .L_SayX388;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_202, 202, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor searching ( this is the can't search closed opaque containers rule ):
[ R_203 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_203, 203);
    ! [2: if the noun is a closed opaque container]
    if (((noun ofclass K5_container) && ((Adj_73_t1_v10(noun))) && ((Adj_70_t1_v10(noun)))))
    {! [3: if the player is the actor]
        if (((player == actor)))
        {! [4: say ~[We] [can't see] inside, since [the noun] [are] closed.~ ( a )]
            say__p=1;! [5: ~[We] [can't see] inside, since [the noun] [are] closed.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_262); new_line; .L_Say389; .L_SayX389;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_203, 203, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Searching (B175_report_searching)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Report searching a container ( this is the standard search containers rule ):
!   === equally specific with ===
! Rule 2/3 ! Report searching a supporter ( this is the standard search supporters rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 3/3 ! Report an actor searching ( this is the report other people searching rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report searching a container ( this is the standard search containers rule ):
[ R_204 ;
    if ((( (actor==player) && ((noun ofclass K5_container))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_204, 204);
    ! [2: if the noun contains a described thing which is not scenery]
    if ((((Prop_32()))))
    {! [3: say ~In [the noun] ~ ( a )]
        say__p=1;! [4: ~In [the noun] ~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_263); .L_Say390; .L_SayX390;! [5: list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are]
        WriteListFrom(child(noun), 3144);
        ! [6: say ~.~]
        say__p=1;! [7: ~.~]
        ParaContent(); print "."; new_line; .L_Say391; .L_SayX391;} else {
        ! [8: say ~[The noun] [are] empty.~ ( b )]
        say__p=1;! [9: ~[The noun] [are] empty.~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_264); new_line; .L_Say392; .L_SayX392;}
        } else if (debug_rules > 1) DB_Rule(R_204, 204, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Report searching a supporter ( this is the standard search supporters rule ):
[ R_205 ;
    if ((( (actor==player) && ((noun ofclass K6_supporter))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_205, 205);
    ! [2: if the noun supports a described thing which is not scenery]
    if ((((Prop_33()))))
    {! [3: say ~On [the noun] ~ ( a )]
        say__p=1;! [4: ~On [the noun] ~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_265); .L_Say393; .L_SayX393;! [5: list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are]
        WriteListFrom(child(noun), 3144);
        ! [6: say ~.~]
        say__p=1;! [7: ~.~]
        ParaContent(); print "."; new_line; .L_Say394; .L_SayX394;} else {
        ! [8: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [9: say ~[There] [are] nothing on [the noun].~ ( b )]
        say__p=1;! [10: ~[There] [are] nothing on [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_266); new_line; .L_Say395; .L_SayX395;}
        } else if (debug_rules > 1) DB_Rule(R_205, 205, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor searching ( this is the report other people searching rule ):
[ R_206 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_206, 206);
    ! [2: if the actor is not the player]
    if (((~~((actor == player)))))
    {! [3: say ~[The actor] [search] [the noun].~ ( a )]
        say__p=1;! [4: ~[The actor] [search] [the noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_267); new_line; .L_Say396; .L_SayX396;}
        } else if (debug_rules > 1) DB_Rule(R_206, 206, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Consulting it about (B178_report_consulting_it_ab)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor consulting something about ( this is the block consulting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor consulting something about ( this is the block consulting rule ):
[ R_207 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_207, 207);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[We] [discover] nothing of interest in [the noun].~ ( a )]
        say__p=1;! [4: ~[We] [discover] nothing of interest in [the noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_268); new_line; .L_Say397; .L_SayX397;} else {
        ! [5: say ~[The actor] [look] at [the noun].~ ( b )]
        say__p=1;! [6: ~[The actor] [look] at [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_269); new_line; .L_Say398; .L_SayX398;}
        } else if (debug_rules > 1) DB_Rule(R_207, 207, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Locking it with (B179_check_locking_it_with)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Check an actor locking something with ( this is the can't lock without a lock rule ):
!   === equally specific with ===
! Rule 2/4 ! Check an actor locking something with ( this is the can't lock what's already locked rule ):
!   === equally specific with ===
! Rule 3/4 ! Check an actor locking something with ( this is the can't lock what's open rule ):
!   === equally specific with ===
! Rule 4/4 ! Check an actor locking something with ( this is the can't lock without the correct key rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor locking something with ( this is the can't lock without a lock rule ):
[ R_208 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_208, 208);
    ! [2: if the noun provides the property lockable and the noun is lockable]
    if ((((WhetherProvides(noun, true, lockable)))) && ((((Adj_76_t1_v10(noun))))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is the player]
    if (((actor == player)))
    {! [5: say ~[regarding the noun][Those] [don't] seem to be something [we] [can] lock.~ ( a )]
        say__p=1;! [6: ~[regarding the noun][Those] [don't] seem to be something [we] [can] lock.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_270); new_line; .L_Say399; .L_SayX399;}
    ! [7: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_208, 208, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor locking something with ( this is the can't lock what's already locked rule ):
[ R_209 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_209, 209);
    ! [2: if the noun is locked]
    if ((((Adj_77_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] locked at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] locked at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_271); new_line; .L_Say400; .L_SayX400;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_209, 209, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor locking something with ( this is the can't lock what's open rule ):
[ R_210 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_210, 210);
    ! [2: if the noun is open]
    if ((((Adj_72_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~First [we] [would have] to close [the noun].~ ( a )]
            say__p=1;! [5: ~First [we] [would have] to close [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_272); new_line; .L_Say401; .L_SayX401;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_210, 210, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor locking something with ( this is the can't lock without the correct key rule ):
[ R_211 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_211, 211);
    ! [2: if the holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun]
    if ((((~~(((HolderOf(second)) == actor))))) || ((((~~((WhetherProvides(noun, false, with_key)))))) || (((~~((GProperty(OBJECT_TY, noun,with_key) == second)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the second noun][Those] [don't] seem to fit the lock.~ ( a )]
            say__p=1;! [5: ~[regarding the second noun][Those] [don't] seem to fit the lock.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_273); new_line; .L_Say402; .L_SayX402;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_211, 211, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Locking it with (B180_carry_out_locking_it_wi)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor locking something with ( this is the standard locking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor locking something with ( this is the standard locking rule ):
[ R_212 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_212, 212);
    ! [2: now the noun is locked]
    (Adj_77_t2_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_212, 212, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Locking it with (B181_report_locking_it_with)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor locking something with ( this is the standard report locking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor locking something with ( this is the standard report locking rule ):
[ R_213 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_213, 213);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [lock] [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [lock] [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_274); new_line; .L_Say403; .L_SayX403;}
            } else {
        ! [6: if the actor is visible]
        if ((((Adj_3_t1_v10(actor)))))
        {! [7: say ~[The actor] [lock] [the noun].~ ( b )]
            say__p=1;! [8: ~[The actor] [lock] [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_275); new_line; .L_Say404; .L_SayX404;}
            }
            } else if (debug_rules > 1) DB_Rule(R_213, 213, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Unlocking it with (B182_check_unlocking_it_with)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check an actor unlocking something with ( this is the can't unlock without a lock rule ):
!   === equally specific with ===
! Rule 2/3 ! Check an actor unlocking something with ( this is the can't unlock what's already unlocked rule ):
!   === equally specific with ===
! Rule 3/3 ! Check an actor unlocking something with ( this is the can't unlock without the correct key rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor unlocking something with ( this is the can't unlock without a lock rule ):
[ R_214 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_214, 214);
    ! [2: if the noun provides the property lockable and the noun is lockable]
    if ((((WhetherProvides(noun, true, lockable)))) && ((((Adj_76_t1_v10(noun))))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is the player]
    if (((actor == player)))
    {! [5: say ~[regarding the noun][Those] [don't] seem to be something [we] [can] unlock.~ ( a )]
        say__p=1;! [6: ~[regarding the noun][Those] [don't] seem to be something [we] [can] unlock.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_276); new_line; .L_Say405; .L_SayX405;}
    ! [7: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_214, 214, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor unlocking something with ( this is the can't unlock what's already unlocked rule ):
[ R_215 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_215, 215);
    ! [2: if the noun is not locked]
    if (((~~(((Adj_77_t1_v10(noun)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] unlocked at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] unlocked at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_277); new_line; .L_Say406; .L_SayX406;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_215, 215, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor unlocking something with ( this is the can't unlock without the correct key rule ):
[ R_216 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_216, 216);
    ! [2: if the holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun]
    if ((((~~(((HolderOf(second)) == actor))))) || ((((~~((WhetherProvides(noun, false, with_key)))))) || (((~~((GProperty(OBJECT_TY, noun,with_key) == second)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the second noun][Those] [don't] seem to fit the lock.~ ( a )]
            say__p=1;! [5: ~[regarding the second noun][Those] [don't] seem to fit the lock.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_278); new_line; .L_Say407; .L_SayX407;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_216, 216, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Unlocking it with (B183_carry_out_unlocking_it_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor unlocking something with ( this is the standard unlocking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor unlocking something with ( this is the standard unlocking rule ):
[ R_217 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_217, 217);
    ! [2: now the noun is not locked]
    (Adj_77_t3_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_217, 217, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Unlocking it with (B184_report_unlocking_it_wit)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor unlocking something with ( this is the standard report unlocking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor unlocking something with ( this is the standard report unlocking rule ):
[ R_218 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_218, 218);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [unlock] [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [unlock] [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_279); new_line; .L_Say408; .L_SayX408;}
            } else {
        ! [6: if the actor is visible]
        if ((((Adj_3_t1_v10(actor)))))
        {! [7: say ~[The actor] [unlock] [the noun].~ ( b )]
            say__p=1;! [8: ~[The actor] [unlock] [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_280); new_line; .L_Say409; .L_SayX409;}
            }
            } else if (debug_rules > 1) DB_Rule(R_218, 218, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Switching on (B185_check_switching_on)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check an actor switching on ( this is the can't switch on unless switchable rule ):
!   === equally specific with ===
! Rule 2/2 ! Check an actor switching on ( this is the can't switch on what's already on rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor switching on ( this is the can't switch on unless switchable rule ):
[ R_219 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_219, 219);
    ! [2: if the noun provides the property switched on]
    if (((WhetherProvides(noun, true, on))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is the player]
    if (((actor == player)))
    {! [5: say ~[regarding the noun][They] [aren't] something [we] [can] switch.~ ( a )]
        say__p=1;! [6: ~[regarding the noun][They] [aren't] something [we] [can] switch.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_281); new_line; .L_Say410; .L_SayX410;}
    ! [7: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_219, 219, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor switching on ( this is the can't switch on what's already on rule ):
[ R_220 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_220, 220);
    ! [2: if the noun is switched on]
    if ((((Adj_82_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] already on.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] already on.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_282); new_line; .L_Say411; .L_SayX411;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_220, 220, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Switching on (B186_carry_out_switching_on)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor switching on ( this is the standard switching on rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor switching on ( this is the standard switching on rule ):
[ R_221 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_221, 221);
    ! [2: now the noun is switched on]
    (Adj_82_t2_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_221, 221, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Switching on (B187_report_switching_on)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor switching on ( this is the standard report switching on rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor switching on ( this is the standard report switching on rule ):
[ R_222 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_222, 222);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: say ~[The actor] [switch] [the noun] on.~ ( a )]
        say__p=1;! [4: ~[The actor] [switch] [the noun] on.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_283); new_line; .L_Say412; .L_SayX412;}
        } else if (debug_rules > 1) DB_Rule(R_222, 222, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Switching off (B188_check_switching_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check an actor switching off ( this is the can't switch off unless switchable rule ):
!   === equally specific with ===
! Rule 2/2 ! Check an actor switching off ( this is the can't switch off what's already off rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor switching off ( this is the can't switch off unless switchable rule ):
[ R_223 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_223, 223);
    ! [2: if the noun provides the property switched on]
    if (((WhetherProvides(noun, true, on))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is the player]
    if (((actor == player)))
    {! [5: say ~[regarding the noun][They] [aren't] something [we] [can] switch.~ ( a )]
        say__p=1;! [6: ~[regarding the noun][They] [aren't] something [we] [can] switch.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_284); new_line; .L_Say413; .L_SayX413;}
    ! [7: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_223, 223, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor switching off ( this is the can't switch off what's already off rule ):
[ R_224 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_224, 224);
    ! [2: if the noun is switched off]
    if ((((Adj_83_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] already off.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] already off.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_285); new_line; .L_Say414; .L_SayX414;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_224, 224, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Switching off (B189_carry_out_switching_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor switching off ( this is the standard switching off rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor switching off ( this is the standard switching off rule ):
[ R_225 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_225, 225);
    ! [2: now the noun is switched off]
    (Adj_83_t2_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_225, 225, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Switching off (B190_report_switching_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor switching off ( this is the standard report switching off rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor switching off ( this is the standard report switching off rule ):
[ R_226 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_226, 226);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: say ~[The actor] [switch] [the noun] off.~ ( a )]
        say__p=1;! [4: ~[The actor] [switch] [the noun] off.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_286); new_line; .L_Say415; .L_SayX415;}
        } else if (debug_rules > 1) DB_Rule(R_226, 226, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Opening (B191_check_opening)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check an actor opening ( this is the can't open unless openable rule ):
!   === equally specific with ===
! Rule 2/3 ! Check an actor opening ( this is the can't open what's locked rule ):
!   === equally specific with ===
! Rule 3/3 ! Check an actor opening ( this is the can't open what's already open rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor opening ( this is the can't open unless openable rule ):
[ R_227 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_227, 227);
    ! [2: if the noun provides the property openable and the noun is openable]
    if ((((WhetherProvides(noun, true, openable)))) && ((((Adj_74_t1_v10(noun))))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is the player]
    if (((actor == player)))
    {! [5: say ~[regarding the noun][They] [aren't] something [we] [can] open.~ ( a )]
        say__p=1;! [6: ~[regarding the noun][They] [aren't] something [we] [can] open.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_287); new_line; .L_Say416; .L_SayX416;}
    ! [7: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_227, 227, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor opening ( this is the can't open what's locked rule ):
[ R_228 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_228, 228);
    ! [2: if the noun provides the property lockable and the noun is locked]
    if ((((WhetherProvides(noun, true, lockable)))) && ((((Adj_77_t1_v10(noun))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They] [seem] to be locked.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They] [seem] to be locked.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_288); new_line; .L_Say417; .L_SayX417;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_228, 228, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor opening ( this is the can't open what's already open rule ):
[ R_229 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_229, 229);
    ! [2: if the noun is open]
    if ((((Adj_72_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] already open.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] already open.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_289); new_line; .L_Say418; .L_SayX418;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_229, 229, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Opening (B192_carry_out_opening)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor opening ( this is the standard opening rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor opening ( this is the standard opening rule ):
[ R_230 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_230, 230);
    ! [2: now the noun is open]
    (Adj_72_t2_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_230, 230, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Opening (B193_report_opening)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report an actor opening ( this is the reveal any newly visible interior rule ):
!   === equally specific with ===
! Rule 2/2 ! Report an actor opening ( this is the standard report opening rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor opening ( this is the reveal any newly visible interior rule ):
[ R_231 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_231, 231);
    ! [2: if the actor is the player and the noun is an opaque container and the first thing held by the noun is not nothing and the noun does not enclose the actor]
    if ((((actor == player))) && ((((noun ofclass K5_container) && ((Adj_70_t1_v10(noun))))) && ((((~~(((child(noun)) == nothing))))) && (((~~((IndirectlyContains(noun,actor)))))))))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: if the actor is the player]
            if (((actor == player)))
            {! [5: say ~[We] [open] [the noun], revealing ~ ( a )]
                say__p=1;! [6: ~[We] [open] [the noun], revealing ~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_290); .L_Say419; .L_SayX419;! [7: list the contents of the noun , as a sentence , tersely , not listing concealed items]
                WriteListFrom(child(noun), 2120);
                ! [8: say ~.~]
                say__p=1;! [9: ~.~]
                ParaContent(); print "."; new_line; .L_Say420; .L_SayX420;}
                }
        ! [10: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_231, 231, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor opening ( this is the standard report opening rule ):
[ R_232 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_232, 232);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [open] [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [open] [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_291); new_line; .L_Say421; .L_SayX421;}
            } else {
        ! [6: if the player can see the actor]
        if (((TestVisibility(player,actor))))
        {! [7: say ~[The actor] [open] [the noun].~ ( b )]
            say__p=1;! [8: ~[The actor] [open] [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_292); new_line; .L_Say422; .L_SayX422;} else {
            ! [9: say ~[The noun] [open].~ ( c )]
            say__p=1;! [10: ~[The noun] [open].~ ( c )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_293); new_line; .L_Say423; .L_SayX423;}
            }
            } else if (debug_rules > 1) DB_Rule(R_232, 232, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Closing (B194_check_closing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check an actor closing ( this is the can't close unless openable rule ):
!   === equally specific with ===
! Rule 2/2 ! Check an actor closing ( this is the can't close what's already closed rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor closing ( this is the can't close unless openable rule ):
[ R_233 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_233, 233);
    ! [2: if the noun provides the property openable and the noun is openable]
    if ((((WhetherProvides(noun, true, openable)))) && ((((Adj_74_t1_v10(noun))))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is the player]
    if (((actor == player)))
    {! [5: say ~[regarding the noun][They] [aren't] something [we] [can] close.~ ( a )]
        say__p=1;! [6: ~[regarding the noun][They] [aren't] something [we] [can] close.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_294); new_line; .L_Say424; .L_SayX424;}
    ! [7: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_233, 233, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor closing ( this is the can't close what's already closed rule ):
[ R_234 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_234, 234);
    ! [2: if the noun is closed]
    if ((((Adj_73_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] already closed.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] already closed.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_295); new_line; .L_Say425; .L_SayX425;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_234, 234, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Closing (B195_carry_out_closing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor closing ( this is the standard closing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor closing ( this is the standard closing rule ):
[ R_235 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_235, 235);
    ! [2: now the noun is closed]
    (Adj_73_t2_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_235, 235, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Closing (B196_report_closing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor closing ( this is the standard report closing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor closing ( this is the standard report closing rule ):
[ R_236 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_236, 236);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [close] [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [close] [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_296); new_line; .L_Say426; .L_SayX426;}
            } else {
        ! [6: if the player can see the actor]
        if (((TestVisibility(player,actor))))
        {! [7: say ~[The actor] [close] [the noun].~ ( b )]
            say__p=1;! [8: ~[The actor] [close] [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_297); new_line; .L_Say427; .L_SayX427;} else {
            ! [9: say ~[The noun] [close].~ ( c )]
            say__p=1;! [10: ~[The noun] [close].~ ( c )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_298); new_line; .L_Say428; .L_SayX428;}
            }
            } else if (debug_rules > 1) DB_Rule(R_236, 236, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Wearing (B197_check_wearing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check an actor wearing ( this is the can't wear what's not clothing rule ):
!   === equally specific with ===
! Rule 2/3 ! Check an actor wearing ( this is the can't wear what's not held rule ):
!   === equally specific with ===
! Rule 3/3 ! Check an actor wearing ( this is the can't wear what's already worn rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor wearing ( this is the can't wear what's not clothing rule ):
[ R_237 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_237, 237);
    ! [2: if the noun is not a thing or the noun is not wearable]
    if ((((~~((noun ofclass K2_thing))))) || (((~~(((Adj_60_t1_v10(noun))))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [can't wear] [regarding the noun][those]!~ ( a )]
            say__p=1;! [5: ~[We] [can't wear] [regarding the noun][those]!~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_299); new_line; .L_Say429; .L_SayX429;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_237, 237, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor wearing ( this is the can't wear what's not held rule ):
[ R_238 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_238, 238);
    ! [2: if the holder of the noun is not the actor]
    if (((~~(((HolderOf(noun)) == actor)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [aren't] holding [regarding the noun][those]!~ ( a )]
            say__p=1;! [5: ~[We] [aren't] holding [regarding the noun][those]!~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_300); new_line; .L_Say430; .L_SayX430;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_238, 238, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor wearing ( this is the can't wear what's already worn rule ):
[ R_239 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_239, 239);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We]['re] already wearing [regarding the noun][those]!~ ( a )]
            say__p=1;! [5: ~[We]['re] already wearing [regarding the noun][those]!~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_301); new_line; .L_Say431; .L_SayX431;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_239, 239, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Wearing (B198_carry_out_wearing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor wearing ( this is the standard wearing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor wearing ( this is the standard wearing rule ):
[ R_240 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_240, 240);
    ! [2: now the actor wears the noun]
    WearObject(noun,actor);
    } else if (debug_rules > 1) DB_Rule(R_240, 240, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Wearing (B199_report_wearing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor wearing ( this is the standard report wearing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor wearing ( this is the standard report wearing rule ):
[ R_241 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_241, 241);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [put] on [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [put] on [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_302); new_line; .L_Say432; .L_SayX432;}
            } else {
        ! [6: say ~[The actor] [put] on [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [put] on [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_303); new_line; .L_Say433; .L_SayX433;}
        } else if (debug_rules > 1) DB_Rule(R_241, 241, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Taking off (B200_check_taking_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check an actor taking off ( this is the can't take off what's not worn rule ):
!   === equally specific with ===
! Rule 2/2 ! Check an actor taking off ( this is the can't exceed carrying capacity when taking off rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor taking off ( this is the can't take off what's not worn rule ):
[ R_243 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_243, 243);
    ! [2: if the actor is not wearing the noun]
    if (((~~((actor == WearerOf(noun))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [aren't] wearing [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [aren't] wearing [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_304); new_line; .L_Say434; .L_SayX434;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_243, 243, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking off ( this is the can't exceed carrying capacity when taking off rule ):
[ R_244 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_244, 244);
    ! [2: if the number of things carried by the actor is at least the carrying capacity of the actor]
    if ((((Prop_34()) >= GProperty(10, actor,capacity))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We]['re] carrying too many things already.~ ( a )]
            say__p=1;! [5: ~[We]['re] carrying too many things already.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_305); new_line; .L_Say435; .L_SayX435;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_244, 244, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Taking off (B201_carry_out_taking_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor taking off ( this is the standard taking off rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor taking off ( this is the standard taking off rule ):
[ R_245 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_245, 245);
    ! [2: now the actor carries the noun]
    MoveObject(noun,actor);
    } else if (debug_rules > 1) DB_Rule(R_245, 245, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Taking off (B202_report_taking_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor taking off ( this is the standard report taking off rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor taking off ( this is the standard report taking off rule ):
[ R_246 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_246, 246);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [take] off [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [take] off [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_306); new_line; .L_Say436; .L_SayX436;}
            } else {
        ! [6: say ~[The actor] [take] off [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [take] off [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_307); new_line; .L_Say437; .L_SayX437;}
        } else if (debug_rules > 1) DB_Rule(R_246, 246, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Giving it to (B203_check_giving_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Check an actor giving something to ( this is the can't give what you haven't got rule ):
!   === equally specific with ===
! Rule 2/6 ! Check an actor giving something to ( this is the can't give to yourself rule ):
!   === equally specific with ===
! Rule 3/6 ! Check an actor giving something to ( this is the can't give to a non-person rule ):
!   === equally specific with ===
! Rule 4/6 ! Check an actor giving something to ( this is the can't give clothes being worn rule ):
!   === equally specific with ===
! Rule 5/6 ! Check an actor giving something to ( this is the block giving rule ):
!   === equally specific with ===
! Rule 6/6 ! Check an actor giving something to ( this is the can't exceed carrying capacity when giving rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor giving something to ( this is the can't give what you haven't got rule ):
[ R_247 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_247, 247);
    ! [2: if the actor is not the holder of the noun]
    if (((~~((actor == (HolderOf(noun)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [aren't] holding [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [aren't] holding [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_308); new_line; .L_Say438; .L_SayX438;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_247, 247, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor giving something to ( this is the can't give to yourself rule ):
[ R_248 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_248, 248);
    ! [2: if the actor is the second noun]
    if (((actor == second)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [can't give] [the noun] to [ourselves].~ ( a )]
            say__p=1;! [5: ~[We] [can't give] [the noun] to [ourselves].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_309); new_line; .L_Say439; .L_SayX439;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_248, 248, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor giving something to ( this is the can't give to a non-person rule ):
[ R_249 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_249, 249);
    ! [2: if the second noun is not a person]
    if (((~~((second ofclass K8_person)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The second noun] [aren't] able to receive things.~ ( a )]
            say__p=1;! [5: ~[The second noun] [aren't] able to receive things.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_310); new_line; .L_Say440; .L_SayX440;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_249, 249, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor giving something to ( this is the can't give clothes being worn rule ):
[ R_250 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_250, 250);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: say ~(first taking [the noun] off)[command clarification break]~ ( a )]
        say__p=1;! [4: ~(first taking [the noun] off)[command clarification break]~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_311); .L_Say441; .L_SayX441;! [5: silently try the actor trying taking off the noun]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Disrobe, noun, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [6: if the actor is wearing the noun]
        if (((actor == WearerOf(noun))))
        {! [7: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_250, 250, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor giving something to ( this is the block giving rule ):
[ R_251 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_251, 251);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[The second noun] [don't] seem interested.~ ( a )]
        say__p=1;! [4: ~[The second noun] [don't] seem interested.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_312); new_line; .L_Say442; .L_SayX442;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_251, 251, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor giving something to ( this is the can't exceed carrying capacity when giving rule ):
[ R_252 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_252, 252);
    ! [2: if the number of things carried by the second noun is at least the carrying capacity of the second noun]
    if ((((Prop_35()) >= GProperty(OBJECT_TY, second,capacity))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The second noun] [are] carrying too many things already.~ ( a )]
            say__p=1;! [5: ~[The second noun] [are] carrying too many things already.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_313); new_line; .L_Say443; .L_SayX443;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_252, 252, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Giving it to (B204_carry_out_giving_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor giving something to ( this is the standard giving rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor giving something to ( this is the standard giving rule ):
[ R_253 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_253, 253);
    ! [2: move the noun to the second noun]
    MoveObject(noun, second, 0, false);
    } else if (debug_rules > 1) DB_Rule(R_253, 253, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Giving it to (B205_report_giving_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor giving something to ( this is the standard report giving rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor giving something to ( this is the standard report giving rule ):
[ R_254 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_254, 254);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[We] [give] [the noun] to [the second noun].~ ( a )]
        say__p=1;! [4: ~[We] [give] [the noun] to [the second noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_314); new_line; .L_Say444; .L_SayX444;} else {
        ! [5: if the second noun is the player]
        if (((second == player)))
        {! [6: say ~[The actor] [give] [the noun] to [us].~ ( b )]
            say__p=1;! [7: ~[The actor] [give] [the noun] to [us].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_315); new_line; .L_Say445; .L_SayX445;} else {
            ! [8: say ~[The actor] [give] [the noun] to [the second noun].~ ( c )]
            say__p=1;! [9: ~[The actor] [give] [the noun] to [the second noun].~ ( c )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_316); new_line; .L_Say446; .L_SayX446;}
            }
            } else if (debug_rules > 1) DB_Rule(R_254, 254, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Showing it to (B206_check_showing_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check an actor showing something to ( this is the can't show what you haven't got rule ):
!   === equally specific with ===
! Rule 2/3 ! Check an actor showing something to ( this is the convert show to yourself to examine rule ):
!   === equally specific with ===
! Rule 3/3 ! Check an actor showing something to ( this is the block showing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor showing something to ( this is the can't show what you haven't got rule ):
[ R_255 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_255, 255);
    ! [2: if the actor is not the holder of the noun]
    if (((~~((actor == (HolderOf(noun)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [aren't] holding [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [aren't] holding [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_317); new_line; .L_Say447; .L_SayX447;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_255, 255, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor showing something to ( this is the convert show to yourself to examine rule ):
[ R_256 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_256, 256);
    ! [2: if the actor is the second noun]
    if (((actor == second)))
    {! [3: convert to the examining action on the noun]
        return GVS_Convert(##Examine,noun,0);
        }
        } else if (debug_rules > 1) DB_Rule(R_256, 256, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor showing something to ( this is the block showing rule ):
[ R_257 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_257, 257);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[The second noun] [are] unimpressed.~ ( a )]
        say__p=1;! [4: ~[The second noun] [are] unimpressed.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_318); new_line; .L_Say448; .L_SayX448;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_257, 257, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Waking (B209_check_waking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor waking ( this is the block waking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor waking ( this is the block waking rule ):
[ R_258 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_258, 258);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~That [seem] unnecessary.~ ( a )]
        say__p=1;! [5: ~That [seem] unnecessary.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_319); new_line; .L_Say449; .L_SayX449;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_258, 258, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Throwing it at (B212_check_throwing_it_at)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check an actor throwing something at ( this is the implicitly remove thrown clothing rule ):
!   === equally specific with ===
! Rule 2/3 ! Check an actor throwing something at ( this is the futile to throw things at inanimate objects rule ):
!   === equally specific with ===
! Rule 3/3 ! Check an actor throwing something at ( this is the block throwing at rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor throwing something at ( this is the implicitly remove thrown clothing rule ):
[ R_259 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_259, 259);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: say ~(first taking [the noun] off)[command clarification break]~ ( a )]
        say__p=1;! [4: ~(first taking [the noun] off)[command clarification break]~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_320); .L_Say450; .L_SayX450;! [5: silently try the actor trying taking off the noun]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Disrobe, noun, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [6: if the actor is wearing the noun]
        if (((actor == WearerOf(noun))))
        {! [7: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_259, 259, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor throwing something at ( this is the futile to throw things at inanimate objects rule ):
[ R_260 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_260, 260);
    ! [2: if the second noun is not a person]
    if (((~~((second ofclass K8_person)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~Futile.~ ( a )]
            say__p=1;! [5: ~Futile.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_321); new_line; .L_Say451; .L_SayX451;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_260, 260, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor throwing something at ( this is the block throwing at rule ):
[ R_261 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_261, 261);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[We] [lack] the nerve when it [if story tense is the past tense]came[otherwise]comes[end if] to the crucial moment.~ ( a )]
        say__p=1;! [4: ~[We] [lack] the nerve when it [if story tense is the past tense]came[otherwise]comes[end if] to the crucial moment.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_322); new_line; .L_Say452; .L_SayX452;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_261, 261, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Attacking (B215_check_attacking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor attacking ( this is the block attacking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor attacking ( this is the block attacking rule ):
[ R_262 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_262, 262);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~Violence [aren't] the answer to this one.~ ( a )]
        say__p=1;! [5: ~Violence [aren't] the answer to this one.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_323); new_line; .L_Say453; .L_SayX453;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_262, 262, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Kissing (B218_check_kissing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check an actor kissing ( this is the kissing yourself rule ):
!   === equally specific with ===
! Rule 2/2 ! Check an actor kissing ( this is the block kissing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor kissing ( this is the kissing yourself rule ):
[ R_263 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_263, 263);
    ! [2: if the noun is the actor]
    if (((noun == actor)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [don't] get much from that.~ ( a )]
            say__p=1;! [5: ~[We] [don't] get much from that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_324); new_line; .L_Say454; .L_SayX454;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_263, 263, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor kissing ( this is the block kissing rule ):
[ R_264 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_264, 264);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[The noun] [might not] like that.~ ( a )]
        say__p=1;! [4: ~[The noun] [might not] like that.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_325); new_line; .L_Say455; .L_SayX455;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_264, 264, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Answering it that (B223_report_answering_it_tha)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor answering something that ( this is the block answering rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor answering something that ( this is the block answering rule ):
[ R_265 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_265, 265);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~[There] [are] no reply.~ ( a )]
        say__p=1;! [5: ~[There] [are] no reply.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_326); new_line; .L_Say456; .L_SayX456;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_265, 265, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Telling it about (B224_check_telling_it_about)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor telling something about ( this is the telling yourself rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor telling something about ( this is the telling yourself rule ):
[ R_266 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_266, 266);
    ! [2: if the actor is the noun]
    if (((actor == noun)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [talk] to [ourselves] a while.~ ( a )]
            say__p=1;! [5: ~[We] [talk] to [ourselves] a while.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_327); new_line; .L_Say457; .L_SayX457;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_266, 266, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Telling it about (B226_report_telling_it_about)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor telling something about ( this is the block telling rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor telling something about ( this is the block telling rule ):
[ R_267 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_267, 267);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~This [provoke] no reaction.~ ( a )]
        say__p=1;! [5: ~This [provoke] no reaction.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_328); new_line; .L_Say458; .L_SayX458;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_267, 267, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Asking it about (B229_report_asking_it_about)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor asking something about ( this is the block asking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor asking something about ( this is the block asking rule ):
[ R_268 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_268, 268);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~[There] [are] no reply.~ ( a )]
        say__p=1;! [5: ~[There] [are] no reply.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_329); new_line; .L_Say459; .L_SayX459;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_268, 268, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Asking it for (B230_check_asking_it_for)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check an actor asking something for ( this is the asking yourself for something rule ):
!   === equally specific with ===
! Rule 2/2 ! Check an actor asking something for ( this is the translate asking for to giving rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor asking something for ( this is the asking yourself for something rule ):
[ R_269 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_269, 269);
    ! [2: if the actor is the noun and the actor is the player]
    if ((((actor == noun))) && (((actor == player))))
    {! [3: try taking inventory]
        TryAction(0, player, ##Inv, 0, 0);
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_269, 269, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor asking something for ( this is the translate asking for to giving rule ):
[ R_270 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_270, 270);
    ! [2: convert to request of the noun to perform giving it to action with the second noun and the actor]
    return ConvertToRequest(noun, ##Give, second, actor);
    } else if (debug_rules > 1) DB_Rule(R_270, 270, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Waiting (B235_report_waiting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor waiting ( this is the standard report waiting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor waiting ( this is the standard report waiting rule ):
[ R_271 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_271, 271);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: now the prior named object is nothing]
            prior_named_noun = nothing;
            ! [5: say ~Time [pass].~ ( a )]
            say__p=1;! [6: ~Time [pass].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_330); new_line; .L_Say460; .L_SayX460;}
            } else {
        ! [7: say ~[The actor] [wait].~ ( b )]
        say__p=1;! [8: ~[The actor] [wait].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_331); new_line; .L_Say461; .L_SayX461;}
        } else if (debug_rules > 1) DB_Rule(R_271, 271, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Touching (B238_report_touching)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Report an actor touching ( this is the report touching yourself rule ):
!   === equally specific with ===
! Rule 2/3 ! Report an actor touching ( this is the report touching other people rule ):
!   === equally specific with ===
! Rule 3/3 ! Report an actor touching ( this is the report touching things rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor touching ( this is the report touching yourself rule ):
[ R_272 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_272, 272);
    ! [2: if the noun is the actor]
    if (((noun == actor)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: if the action is not silent]
            if (((keep_silent == false)))
            {! [5: say ~[We] [achieve] nothing by this.~ ( a )]
                say__p=1;! [6: ~[We] [achieve] nothing by this.~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_332); new_line; .L_Say462; .L_SayX462;}
                } else {
            ! [7: say ~[The actor] [touch] [themselves].~ ( b )]
            say__p=1;! [8: ~[The actor] [touch] [themselves].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_333); new_line; .L_Say463; .L_SayX463;}
        ! [9: stop the action]
        rtrue;
        }
    ! [10: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_272, 272, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor touching ( this is the report touching other people rule ):
[ R_273 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_273, 273);
    ! [2: if the noun is a person]
    if (((noun ofclass K8_person)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: if the action is not silent]
            if (((keep_silent == false)))
            {! [5: say ~[The noun] [might not like] that.~ ( a )]
                say__p=1;! [6: ~[The noun] [might not like] that.~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_334); new_line; .L_Say464; .L_SayX464;}
                } else {
            ! [7: if the noun is the player]
            if (((noun == player)))
            {! [8: say ~[The actor] [touch] [us].~ ( b )]
                say__p=1;! [9: ~[The actor] [touch] [us].~ ( b )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_335); new_line; .L_Say465; .L_SayX465;} else {
                ! [10: say ~[The actor] [touch] [the noun].~ ( c )]
                say__p=1;! [11: ~[The actor] [touch] [the noun].~ ( c )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_336); new_line; .L_Say466; .L_SayX466;}
                }
        ! [12: stop the action]
        rtrue;
        }
    ! [13: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_273, 273, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor touching ( this is the report touching things rule ):
[ R_274 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_274, 274);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [feel] nothing unexpected.~ ( a )]
            say__p=1;! [5: ~[We] [feel] nothing unexpected.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_337); new_line; .L_Say467; .L_SayX467;}
            } else {
        ! [6: say ~[The actor] [touch] [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [touch] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_338); new_line; .L_Say468; .L_SayX468;}
        } else if (debug_rules > 1) DB_Rule(R_274, 274, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Waving (B239_check_waving)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor waving ( this is the can't wave what's not held rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor waving ( this is the can't wave what's not held rule ):
[ R_275 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_275, 275);
    ! [2: if the actor is not the holder of the noun]
    if (((~~((actor == (HolderOf(noun)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~But [we] [aren't] holding [regarding the noun][those].~ ( a )]
            say__p=1;! [5: ~But [we] [aren't] holding [regarding the noun][those].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_339); new_line; .L_Say469; .L_SayX469;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_275, 275, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Waving (B241_report_waving)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor waving ( this is the report waving things rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor waving ( this is the report waving things rule ):
[ R_276 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_276, 276);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [wave] [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [wave] [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_340); new_line; .L_Say470; .L_SayX470;}
            } else {
        ! [6: say ~[The actor] [wave] [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [wave] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_341); new_line; .L_Say471; .L_SayX471;}
        } else if (debug_rules > 1) DB_Rule(R_276, 276, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Pulling (B242_check_pulling)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check an actor pulling ( this is the can't pull what's fixed in place rule ):
!   === equally specific with ===
! Rule 2/3 ! Check an actor pulling ( this is the can't pull scenery rule ):
!   === equally specific with ===
! Rule 3/3 ! Check an actor pulling ( this is the can't pull people rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor pulling ( this is the can't pull what's fixed in place rule ):
[ R_277 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_277, 277);
    ! [2: if the noun is fixed in place]
    if ((((Adj_57_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They] [are] fixed in place.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They] [are] fixed in place.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_342); new_line; .L_Say472; .L_SayX472;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_277, 277, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pulling ( this is the can't pull scenery rule ):
[ R_278 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_278, 278);
    ! [2: if the noun is scenery]
    if ((((Adj_59_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [are] unable to.~ ( a )]
            say__p=1;! [5: ~[We] [are] unable to.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_343); new_line; .L_Say473; .L_SayX473;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_278, 278, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pulling ( this is the can't pull people rule ):
[ R_279 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_279, 279);
    ! [2: if the noun is a person]
    if (((noun ofclass K8_person)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [might not like] that.~ ( a )]
            say__p=1;! [5: ~[The noun] [might not like] that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_344); new_line; .L_Say474; .L_SayX474;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_279, 279, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Pulling (B244_report_pulling)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor pulling ( this is the report pulling rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor pulling ( this is the report pulling rule ):
[ R_280 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_280, 280);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: now the prior named object is nothing]
            prior_named_noun = nothing;
            ! [5: say ~Nothing obvious [happen].~ ( a )]
            say__p=1;! [6: ~Nothing obvious [happen].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_345); new_line; .L_Say475; .L_SayX475;}
            } else {
        ! [7: say ~[The actor] [pull] [the noun].~ ( b )]
        say__p=1;! [8: ~[The actor] [pull] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_346); new_line; .L_Say476; .L_SayX476;}
        } else if (debug_rules > 1) DB_Rule(R_280, 280, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Pushing (B245_check_pushing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check an actor pushing something ( this is the can't push what's fixed in place rule ):
!   === equally specific with ===
! Rule 2/3 ! Check an actor pushing something ( this is the can't push scenery rule ):
!   === equally specific with ===
! Rule 3/3 ! Check an actor pushing something ( this is the can't push people rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor pushing something ( this is the can't push what's fixed in place rule ):
[ R_281 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_281, 281);
    ! [2: if the noun is fixed in place]
    if ((((Adj_57_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They] [are] fixed in place.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They] [are] fixed in place.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_347); new_line; .L_Say477; .L_SayX477;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_281, 281, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something ( this is the can't push scenery rule ):
[ R_282 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_282, 282);
    ! [2: if the noun is scenery]
    if ((((Adj_59_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [are] unable to.~ ( a )]
            say__p=1;! [5: ~[We] [are] unable to.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_348); new_line; .L_Say478; .L_SayX478;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_282, 282, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something ( this is the can't push people rule ):
[ R_283 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_283, 283);
    ! [2: if the noun is a person]
    if (((noun ofclass K8_person)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [might not like] that.~ ( a )]
            say__p=1;! [5: ~[The noun] [might not like] that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_349); new_line; .L_Say479; .L_SayX479;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_283, 283, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Pushing (B247_report_pushing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor pushing something ( this is the report pushing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor pushing something ( this is the report pushing rule ):
[ R_284 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_284, 284);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: now the prior named object is nothing]
            prior_named_noun = nothing;
            ! [5: say ~Nothing obvious [happen].~ ( a )]
            say__p=1;! [6: ~Nothing obvious [happen].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_350); new_line; .L_Say480; .L_SayX480;}
            } else {
        ! [7: say ~[The actor] [push] [the noun].~ ( b )]
        say__p=1;! [8: ~[The actor] [push] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_351); new_line; .L_Say481; .L_SayX481;}
        } else if (debug_rules > 1) DB_Rule(R_284, 284, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Turning (B248_check_turning)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check an actor turning ( this is the can't turn what's fixed in place rule ):
!   === equally specific with ===
! Rule 2/3 ! Check an actor turning ( this is the can't turn scenery rule ):
!   === equally specific with ===
! Rule 3/3 ! Check an actor turning ( this is the can't turn people rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor turning ( this is the can't turn what's fixed in place rule ):
[ R_285 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_285, 285);
    ! [2: if the noun is fixed in place]
    if ((((Adj_57_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They] [are] fixed in place.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They] [are] fixed in place.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_352); new_line; .L_Say482; .L_SayX482;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_285, 285, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor turning ( this is the can't turn scenery rule ):
[ R_286 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_286, 286);
    ! [2: if the noun is scenery]
    if ((((Adj_59_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [are] unable to.~ ( a )]
            say__p=1;! [5: ~[We] [are] unable to.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_353); new_line; .L_Say483; .L_SayX483;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_286, 286, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor turning ( this is the can't turn people rule ):
[ R_287 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_287, 287);
    ! [2: if the noun is a person]
    if (((noun ofclass K8_person)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [might not like] that.~ ( a )]
            say__p=1;! [5: ~[The noun] [might not like] that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_354); new_line; .L_Say484; .L_SayX484;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_287, 287, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Turning (B250_report_turning)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor turning ( this is the report turning rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor turning ( this is the report turning rule ):
[ R_288 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_288, 288);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: now the prior named object is nothing]
            prior_named_noun = nothing;
            ! [5: say ~Nothing obvious [happen].~ ( a )]
            say__p=1;! [6: ~Nothing obvious [happen].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_355); new_line; .L_Say485; .L_SayX485;}
            } else {
        ! [7: say ~[The actor] [turn] [the noun].~ ( b )]
        say__p=1;! [8: ~[The actor] [turn] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_356); new_line; .L_Say486; .L_SayX486;}
        } else if (debug_rules > 1) DB_Rule(R_288, 288, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Pushing it to (B251_check_pushing_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Check an actor pushing something to ( this is the can't push unpushable things rule ):
!   === equally specific with ===
! Rule 2/6 ! Check an actor pushing something to ( this is the can't push to non-directions rule ):
!   === equally specific with ===
! Rule 3/6 ! Check an actor pushing something to ( this is the can't push vertically rule ):
!   === equally specific with ===
! Rule 4/6 ! Check an actor pushing something to ( this is the can't push from within rule ):
!   === equally specific with ===
! Rule 5/6 ! Check an actor pushing something to ( this is the standard pushing in directions rule ):
!   === equally specific with ===
! Rule 6/6 ! Check an actor pushing something to ( this is the block pushing in directions rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor pushing something to ( this is the can't push unpushable things rule ):
[ R_289 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_289, 289);
    ! [2: if the noun is not pushable between rooms]
    if (((~~(((Adj_61_t1_v10(noun)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [cannot] be pushed from place to place.~ ( a )]
            say__p=1;! [5: ~[The noun] [cannot] be pushed from place to place.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_357); new_line; .L_Say487; .L_SayX487;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_289, 289, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something to ( this is the can't push to non-directions rule ):
[ R_290 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_290, 290);
    ! [2: if the second noun is not a direction]
    if (((~~((second ofclass K3_direction)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They] [aren't] a direction.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They] [aren't] a direction.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_358); new_line; .L_Say488; .L_SayX488;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_290, 290, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something to ( this is the can't push vertically rule ):
[ R_291 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_291, 291);
    ! [2: if the second noun is up or the second noun is down]
    if ((((second == I59_up))) || (((second == I60_down))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [cannot] be pushed up or down.~ ( a )]
            say__p=1;! [5: ~[The noun] [cannot] be pushed up or down.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_359); new_line; .L_Say489; .L_SayX489;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_291, 291, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something to ( this is the can't push from within rule ):
[ R_292 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_292, 292);
    ! [2: if the noun encloses the actor]
    if (((IndirectlyContains(noun,actor))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [cannot] be pushed from here.~ ( a )]
            say__p=1;! [5: ~[The noun] [cannot] be pushed from here.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_360); new_line; .L_Say490; .L_SayX490;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_292, 292, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something to ( this is the standard pushing in directions rule ):
[ R_293 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_293, 293);
    ! [2: convert to special going-with-push action]
    return ConvertToGoingWithPush();
    } else if (debug_rules > 1) DB_Rule(R_293, 293, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something to ( this is the block pushing in directions rule ):
[ R_294 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_294, 294);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[The noun] [cannot] be pushed from place to place.~ ( a )]
        say__p=1;! [4: ~[The noun] [cannot] be pushed from place to place.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_361); new_line; .L_Say491; .L_SayX491;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_294, 294, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Squeezing (B254_check_squeezing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor squeezing ( this is the innuendo about squeezing people rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor squeezing ( this is the innuendo about squeezing people rule ):
[ R_295 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_295, 295);
    ! [2: if the noun is a person]
    if (((noun ofclass K8_person)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [might not like] that.~ ( a )]
            say__p=1;! [5: ~[The noun] [might not like] that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_362); new_line; .L_Say492; .L_SayX492;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_295, 295, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Squeezing (B256_report_squeezing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor squeezing ( this is the report squeezing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor squeezing ( this is the report squeezing rule ):
[ R_296 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_296, 296);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [achieve] nothing by this.~ ( a )]
            say__p=1;! [5: ~[We] [achieve] nothing by this.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_363); new_line; .L_Say493; .L_SayX493;}
            } else {
        ! [6: say ~[The actor] [squeeze] [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [squeeze] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_364); new_line; .L_Say494; .L_SayX494;}
        } else if (debug_rules > 1) DB_Rule(R_296, 296, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Saying yes (B257_check_saying_yes)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor saying yes ( this is the block saying yes rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor saying yes ( this is the block saying yes rule ):
[ R_297 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_297, 297);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~That was a rhetorical question.~ ( a )]
        say__p=1;! [4: ~That was a rhetorical question.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_365); new_line; .L_Say495; .L_SayX495;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_297, 297, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Saying no (B260_check_saying_no)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor saying no ( this is the block saying no rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor saying no ( this is the block saying no rule ):
[ R_298 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_298, 298);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~That was a rhetorical question.~ ( a )]
        say__p=1;! [4: ~That was a rhetorical question.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_366); new_line; .L_Say496; .L_SayX496;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_298, 298, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Burning (B263_check_burning)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor burning ( this is the block burning rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor burning ( this is the block burning rule ):
[ R_299 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_299, 299);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~This dangerous act [would achieve] little.~ ( a )]
        say__p=1;! [4: ~This dangerous act [would achieve] little.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_367); new_line; .L_Say497; .L_SayX497;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_299, 299, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Waking up (B266_check_waking_up)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor waking up ( this is the block waking up rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor waking up ( this is the block waking up rule ):
[ R_300 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_300, 300);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~The dreadful truth [are], this [are not] a dream.~ ( a )]
        say__p=1;! [5: ~The dreadful truth [are], this [are not] a dream.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_368); new_line; .L_Say498; .L_SayX498;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_300, 300, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Thinking (B269_check_thinking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor thinking ( this is the block thinking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor thinking ( this is the block thinking rule ):
[ R_301 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_301, 301);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~What a good idea.~ ( a )]
        say__p=1;! [4: ~What a good idea.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_369); new_line; .L_Say499; .L_SayX499;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_301, 301, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Smelling (B274_report_smelling)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor smelling ( this is the report smelling rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor smelling ( this is the report smelling rule ):
[ R_302 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_302, 302);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [smell] nothing unexpected.~ ( a )]
            say__p=1;! [5: ~[We] [smell] nothing unexpected.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_370); new_line; .L_Say500; .L_SayX500;}
            } else {
        ! [6: say ~[The actor] [sniff].~ ( b )]
        say__p=1;! [7: ~[The actor] [sniff].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_371); new_line; .L_Say501; .L_SayX501;}
        } else if (debug_rules > 1) DB_Rule(R_302, 302, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Listening to (B277_report_listening_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor listening to ( this is the report listening rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor listening to ( this is the report listening rule ):
[ R_303 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_303, 303);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [hear] nothing unexpected.~ ( a )]
            say__p=1;! [5: ~[We] [hear] nothing unexpected.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_372); new_line; .L_Say502; .L_SayX502;}
            } else {
        ! [6: say ~[The actor] [listen].~ ( b )]
        say__p=1;! [7: ~[The actor] [listen].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_373); new_line; .L_Say503; .L_SayX503;}
        } else if (debug_rules > 1) DB_Rule(R_303, 303, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Tasting (B280_report_tasting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor tasting ( this is the report tasting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor tasting ( this is the report tasting rule ):
[ R_304 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_304, 304);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [taste] nothing unexpected.~ ( a )]
            say__p=1;! [5: ~[We] [taste] nothing unexpected.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_374); new_line; .L_Say504; .L_SayX504;}
            } else {
        ! [6: say ~[The actor] [taste] [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [taste] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_375); new_line; .L_Say505; .L_SayX505;}
        } else if (debug_rules > 1) DB_Rule(R_304, 304, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Cutting (B281_check_cutting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor cutting ( this is the block cutting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor cutting ( this is the block cutting rule ):
[ R_305 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_305, 305);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~Cutting [regarding the noun][them] up [would achieve] little.~ ( a )]
        say__p=1;! [4: ~Cutting [regarding the noun][them] up [would achieve] little.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_376); new_line; .L_Say506; .L_SayX506;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_305, 305, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Jumping (B286_report_jumping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor jumping ( this is the report jumping rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor jumping ( this is the report jumping rule ):
[ R_306 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_306, 306);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [jump] on the spot.~ ( a )]
            say__p=1;! [5: ~[We] [jump] on the spot.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_377); new_line; .L_Say507; .L_SayX507;}
            } else {
        ! [6: say ~[The actor] [jump] on the spot.~ ( b )]
        say__p=1;! [7: ~[The actor] [jump] on the spot.~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_378); new_line; .L_Say508; .L_SayX508;}
        } else if (debug_rules > 1) DB_Rule(R_306, 306, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Tying it to (B287_check_tying_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor tying something to ( this is the block tying rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor tying something to ( this is the block tying rule ):
[ R_307 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_307, 307);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[We] [would achieve] nothing by this.~ ( a )]
        say__p=1;! [4: ~[We] [would achieve] nothing by this.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_379); new_line; .L_Say509; .L_SayX509;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_307, 307, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Drinking (B290_check_drinking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor drinking ( this is the block drinking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor drinking ( this is the block drinking rule ):
[ R_308 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_308, 308);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~[There's] nothing suitable to drink here.~ ( a )]
        say__p=1;! [5: ~[There's] nothing suitable to drink here.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_380); new_line; .L_Say510; .L_SayX510;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_308, 308, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Saying sorry (B293_check_saying_sorry)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor saying sorry ( this is the block saying sorry rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor saying sorry ( this is the block saying sorry rule ):
[ R_309 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_309, 309);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~Oh, don't [if American dialect option is active]apologize[otherwise]apologise[end if].~ ( a )]
        say__p=1;! [4: ~Oh, don't [if American dialect option is active]apologize[otherwise]apologise[end if].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_381); new_line; .L_Say511; .L_SayX511;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_309, 309, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Swinging (B296_check_swinging)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor swinging ( this is the block swinging rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor swinging ( this is the block swinging rule ):
[ R_310 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_310, 310);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~[There's] nothing sensible to swing here.~ ( a )]
        say__p=1;! [5: ~[There's] nothing sensible to swing here.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_382); new_line; .L_Say512; .L_SayX512;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_310, 310, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Rubbing (B299_check_rubbing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor rubbing ( this is the can't rub another person rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor rubbing ( this is the can't rub another person rule ):
[ R_311 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_311, 311);
    ! [2: if the noun is a person who is not the actor]
    if (((noun ofclass K8_person) && (~~((noun == actor)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [might not like] that.~ ( a )]
            say__p=1;! [5: ~[The noun] [might not like] that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_383); new_line; .L_Say513; .L_SayX513;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_311, 311, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Rubbing (B301_report_rubbing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor rubbing ( this is the report rubbing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor rubbing ( this is the report rubbing rule ):
[ R_312 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_312, 312);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [rub] [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [rub] [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_384); new_line; .L_Say514; .L_SayX514;}
            } else {
        ! [6: say ~[The actor] [rub] [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [rub] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_385); new_line; .L_Say515; .L_SayX515;}
        } else if (debug_rules > 1) DB_Rule(R_312, 312, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Setting it to (B302_check_setting_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor setting something to ( this is the block setting it to rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor setting something to ( this is the block setting it to rule ):
[ R_313 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_313, 313);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~No, [we] [can't set] [regarding the noun][those] to anything.~ ( a )]
        say__p=1;! [4: ~No, [we] [can't set] [regarding the noun][those] to anything.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_386); new_line; .L_Say516; .L_SayX516;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_313, 313, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Waving hands (B307_report_waving_hands)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor waving hands ( this is the report waving hands rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor waving hands ( this is the report waving hands rule ):
[ R_314 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_314, 314);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [wave].~ ( a )]
            say__p=1;! [5: ~[We] [wave].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_387); new_line; .L_Say517; .L_SayX517;}
            } else {
        ! [6: say ~[The actor] [wave].~ ( b )]
        say__p=1;! [7: ~[The actor] [wave].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_388); new_line; .L_Say518; .L_SayX518;}
        } else if (debug_rules > 1) DB_Rule(R_314, 314, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Buying (B308_check_buying)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor buying ( this is the block buying rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor buying ( this is the block buying rule ):
[ R_315 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_315, 315);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~Nothing [are] on sale.~ ( a )]
        say__p=1;! [5: ~Nothing [are] on sale.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_389); new_line; .L_Say519; .L_SayX519;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_315, 315, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Climbing (B311_check_climbing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor climbing ( this is the block climbing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor climbing ( this is the block climbing rule ):
[ R_316 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_316, 316);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~Little [are] to be achieved by that.~ ( a )]
        say__p=1;! [4: ~Little [are] to be achieved by that.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_390); new_line; .L_Say520; .L_SayX520;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_316, 316, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Sleeping (B314_check_sleeping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor sleeping ( this is the block sleeping rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor sleeping ( this is the block sleeping rule ):
[ R_317 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_317, 317);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[We] [aren't] feeling especially drowsy.~ ( a )]
        say__p=1;! [4: ~[We] [aren't] feeling especially drowsy.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_391); new_line; .L_Say521; .L_SayX521;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_317, 317, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Dumping (B363_carry_out_dumping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out dumping:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out dumping:
[ R_846 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_846, 846);
    ! [2: say ~That doesn't make sense.~]
    say__p=1;! [3: ~That doesn't make sense.~]
    ParaContent(); print "That doesn't make sense."; new_line; .L_Say522; .L_SayX522;} else if (debug_rules > 1) DB_Rule(R_846, 846, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out using (B366_carry_out_using)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! carry out using:
! ----------------------------------------------------------------------------------------------------
! No specific request
! carry out using:
[ R_848 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_848, 848);
    ! [2: say ~You'll have to be more specific.~]
    say__p=1;! [3: ~You'll have to be more specific.~]
    ParaContent(); print "You'll have to be more specific."; new_line; .L_Say523; .L_SayX523;} else if (debug_rules > 1) DB_Rule(R_848, 848, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Bare-help-invoking (B368_check_bare_help_invokin)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check bare-help-invoking:
! ----------------------------------------------------------------------------------------------------
! From "Basic IF Help" by Andrew Plotkin
! No specific request
! Check bare-help-invoking:
[ R_869 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_869, 869);
    ! [2: try help-invoking bare-help]
    TryAction(0, player, ##A81_help_invoking, I157_bare_help, 0);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_869, 869, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Move-help-invoking (B371_check_move_help_invokin)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check move-help-invoking:
! ----------------------------------------------------------------------------------------------------
! From "Basic IF Help" by Andrew Plotkin
! No specific request
! Check move-help-invoking:
[ R_870 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_870, 870);
    ! [2: try help-invoking help-movement]
    TryAction(0, player, ##A81_help_invoking, I159_help_movement, 0);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_870, 870, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Help-invoking (B375_carry_out_help_invoking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out help-invoking a help-topic:
! ----------------------------------------------------------------------------------------------------
! From "Basic IF Help" by Andrew Plotkin
! No specific request
! Carry out help-invoking a help-topic:
[ R_871 ;
    if ((( (actor==player) && ((noun ofclass K17_help_topic))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_871, 871);
    ! [2: say line break]
    say__p=1;! [3: line break]
    ParaContent(); new_line; .L_Say524; .L_SayX524;! [4: say the description of the noun]
    say__p=1;! [5: the description of the noun]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(OBJECT_TY, self=noun,description);@pull self;  .L_Say525; .L_SayX525;! [6: say line break]
    say__p=1;! [7: line break]
    ParaContent(); new_line; .L_Say526; .L_SayX526;! [8: now the noun is visited]
    (Adj_51_t2_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_871, 871, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Plugging (B378_carry_out_plugging)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out plugging:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out plugging:
[ R_889 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_889, 889);
    ! [2: if the noun is the drain or the noun is the bathtub]
    if ((((noun == I260_drain))) || (((noun == I259_bathtub))))
    {! [3: say ~You plug the drain.~]
        say__p=1;! [4: ~You plug the drain.~]
        ParaContent(); print "You plug the drain."; new_line; .L_Say527; .L_SayX527;! [5: now the drain is plugged]
        (Adj_96_t2_v10(I260_drain));
        } else {
        ! [6: if the noun is the toaster]
        if (((noun == I205_toaster)))
        {! [7: say ~You plug in the toaster.~]
            say__p=1;! [8: ~You plug in the toaster.~]
            ParaContent(); print "You plug in the toaster."; new_line; .L_Say528; .L_SayX528;! [9: now the toaster is plugged in]
            (Adj_91_t2_v10(I205_toaster));
            } else {
            ! [10: if the noun is the earbuds]
            if (((noun == I239_earbuds)))
            {! [11: if the earbuds are connected]
                if ((((Adj_95_t1_v10(I239_earbuds)))))
                {! [12: say ~Those are already plugged in.~]
                    say__p=1;! [13: ~Those are already plugged in.~]
                    ParaContent(); print "Those are already plugged in."; new_line; .L_Say529; .L_SayX529;} else {
                    ! [14: if the player has the ipod]
                    if (((player == OwnerOf(I200_ipod))))
                    {! [15: now the ipod is playing]
                        (Adj_87_t2_v10(I200_ipod));
                        ! [16: now the earbuds are connected]
                        (Adj_95_t2_v10(I239_earbuds));
                        ! [17: say ~You plug the earbuds into the iPod. Your favorite song starts to play through them!~]
                        say__p=1;! [18: ~You plug the earbuds into the iPod. Your favorite song starts to play through them!~]
                        ParaContent(); print "You plug the earbuds into the iPod. Your favorite song starts to play through them!"; new_line; .L_Say530; .L_SayX530;! [19: the song ends in five turns from now]
                        SetTimedEvent(R_890, 5+1, 0);
                        } else {
                        ! [20: say ~You can't plug the earbuds in unless you have something to plug them into.~]
                        say__p=1;! [21: ~You can't plug the earbuds in unless you have something to plug them into.~]
                        ParaContent(); print "You can't plug the earbuds in unless you have something to plug them into."; new_line; .L_Say531; .L_SayX531;}
                        }
                        } else {
                ! [22: say ~You can't plug in [a noun].~]
                say__p=1;! [23: ~You can't plug in ~]
                ParaContent(); print "You can't plug in ";! [24: a noun]
                ParaContent(); print (a) noun;! [25: ~.~]
                ParaContent(); print "."; new_line; .L_Say532; .L_SayX532;}
                }
                }
                } else if (debug_rules > 1) DB_Rule(R_889, 889, 'actor');
                rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Unplugging (B381_carry_out_unplugging)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out unplugging:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out unplugging:
[ R_891 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_891, 891);
    ! [2: if the noun is the drain or the noun is the bathtub]
    if ((((noun == I260_drain))) || (((noun == I259_bathtub))))
    {! [3: say ~You unplug the drain.~]
        say__p=1;! [4: ~You unplug the drain.~]
        ParaContent(); print "You unplug the drain."; new_line; .L_Say533; .L_SayX533;! [5: now the drain is not plugged]
        (Adj_96_t3_v10(I260_drain));
        ! [6: if the water level is not 0]
        if (((~~(((Global_Vars-->11) == 0)))))
        {! [7: say ~All the water in the bathtub drains out through the drain. That was faster than it should be. Gotta call the plumber eventually..~]
            say__p=1;! [8: ~All the water in the bathtub drains out through the drain. That was faster than it should be. Gotta call the plumber eventually..~]
            ParaContent(); print "All the water in the bathtub drains out through the drain. That was faster than it should be. Gotta call the plumber eventually.."; new_line; .L_Say534; .L_SayX534;! [9: now the water level is 0]
            (Global_Vars-->11) = 0;
            }
        ! [10: if the swimming piranhas are in the bathtub]
        if (((I259_bathtub == ContainerOf(I328_swimming_piranhas))))
        {! [11: now the swimming piranhas are nowhere]
            RemoveFromPlay(I328_swimming_piranhas);;
            }
            } else {
        ! [12: if the noun is the refrigerator]
        if (((noun == I207_refrigerator)))
        {! [13: say ~You can't reach the outlet behind the refrigerator.~]
            say__p=1;! [14: ~You can't reach the outlet behind the refrigerator.~]
            ParaContent(); print "You can't reach the outlet behind the refrigerator."; new_line; .L_Say535; .L_SayX535;} else {
            ! [15: if the noun is the earbuds and the player has the ipod]
            if ((((noun == I239_earbuds))) && (((player == OwnerOf(I200_ipod)))))
            {! [16: if the ipod is playing]
                if ((((Adj_87_t1_v10(I200_ipod)))))
                {! [17: say ~You can't bring yourself to unplug the earbuds. Superstition or something.~]
                    say__p=1;! [18: ~You can't bring yourself to unplug the earbuds. Superstition or something.~]
                    ParaContent(); print "You can't bring yourself to unplug the earbuds. Superstition or something."; new_line; .L_Say536; .L_SayX536;} else {
                    ! [19: say ~You unplug the earbuds from the iPod.~]
                    say__p=1;! [20: ~You unplug the earbuds from the iPod.~]
                    ParaContent(); print "You unplug the earbuds from the iPod."; new_line; .L_Say537; .L_SayX537;! [21: now the earbuds are not connected]
                    (Adj_95_t3_v10(I239_earbuds));
                    }
                    } else {
                ! [22: if the noun is not the toaster]
                if (((~~((noun == I205_toaster)))))
                {! [23: say ~You can't unplug [a noun].~]
                    say__p=1;! [24: ~You can't unplug ~]
                    ParaContent(); print "You can't unplug ";! [25: a noun]
                    ParaContent(); print (a) noun;! [26: ~.~]
                    ParaContent(); print "."; new_line; .L_Say538; .L_SayX538;} else {
                    ! [27: if the toaster is done]
                    if ((((Adj_93_t1_v10(I205_toaster)))))
                    {! [28: say ~You try to unplug the toaster but it seems to be stuck plugged in.~]
                        say__p=1;! [29: ~You try to unplug the toaster but it seems to be stuck plugged in.~]
                        ParaContent(); print "You try to unplug the toaster but it seems to be stuck plugged in."; new_line; .L_Say539; .L_SayX539;} else {
                        ! [30: if the button is active]
                        if ((((Adj_25_t1_v10(I216_play_button)))))
                        {! [31: say ~The toaster is hard at work, don't bother it.~]
                            say__p=1;! [32: ~The toaster is hard at work, don't bother it.~]
                            ParaContent(); print "The toaster is hard at work, don't bother it."; new_line; .L_Say540; .L_SayX540;} else {
                            ! [33: say ~You unplug the toaster.~]
                            say__p=1;! [34: ~You unplug the toaster.~]
                            ParaContent(); print "You unplug the toaster."; new_line; .L_Say541; .L_SayX541;! [35: now the toaster is unplugged]
                            (Adj_92_t2_v10(I205_toaster));
                            }
                            }
                            }
                            }
                            }
                            }
                            } else if (debug_rules > 1) DB_Rule(R_891, 891, 'actor');
                            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Untieing (B384_carry_out_untieing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out untieing:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out untieing:
[ R_897 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_897, 897);
    ! [2: say ~That doesn't make any sense.~]
    say__p=1;! [3: ~That doesn't make any sense.~]
    ParaContent(); print "That doesn't make any sense."; new_line; .L_Say542; .L_SayX542;} else if (debug_rules > 1) DB_Rule(R_897, 897, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Flying (B387_carry_out_flying)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out flying:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out flying:
[ R_932 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_932, 932);
    ! [2: say ~That doesn't make sense.~]
    say__p=1;! [3: ~That doesn't make sense.~]
    ParaContent(); print "That doesn't make sense."; new_line; .L_Say543; .L_SayX543;} else if (debug_rules > 1) DB_Rule(R_932, 932, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out running-across (B399_carry_out_running_acros)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out running-across:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out running-across:
[ R_969 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_969, 969);
    ! [2: if the player is not in the train station]
    if (((~~((I303_abandoned_train_station == ContainerOf(player))))))
    {! [3: say ~You don't see any tracks.~]
        say__p=1;! [4: ~You don't see any tracks.~]
        ParaContent(); print "You don't see any tracks."; new_line; .L_Say544; .L_SayX544;} else {
        ! [5: if the player is not wearing the pair of running shoes]
        if (((~~((player == WearerOf(I229_pair_of_running_shoes))))))
        {! [6: if the player is wearing work shoes]
            if (((player == WearerOf(I151_work_shoes))))
            {! [7: say ~You're gonna run wearing these shoes???? You'd break your back.~]
                say__p=1;! [8: ~You're gonna run wearing these shoes???? You'd break your back.~]
                ParaContent(); print "You're gonna run wearing these shoes???? You'd break your back."; new_line; .L_Say545; .L_SayX545;} else {
                ! [9: say ~You'd hurt your feet! Better put on shoes first.~]
                say__p=1;! [10: ~You'd hurt your feet! Better put on shoes first.~]
                ParaContent(); print "You'd hurt your feet! Better put on shoes first."; new_line; .L_Say546; .L_SayX546;}
                } else {
            ! [11: if the pair of running shoes is not laced]
            if (((~~(((Adj_111_t1_v10(I229_pair_of_running_shoes)))))))
            {! [12: say ~You start to run but you trip on the loose laces.~]
                say__p=1;! [13: ~You start to run but you trip on the loose laces.~]
                ParaContent(); print "You start to run but you trip on the loose laces."; new_line; .L_Say547; .L_SayX547;} else {
                ! [14: if the train is not ready]
                if (((~~(((Adj_108_t1_v10(I303_abandoned_train_station)))))))
                {! [15: say ~You run across the tracks to the other platform and back to this one. That was exhilarating!~]
                    say__p=1;! [16: ~You run across the tracks to the other platform and back to this one. That was exhilarating!~]
                    ParaContent(); print "You run across the tracks to the other platform and back to this one. That was exhilarating!"; new_line; .L_Say548; .L_SayX548;} else {
                    ! [17: say ~Well that was dumb. You get distracted as you run across the tracks and don't notice the train coming until it's too late.~]
                    say__p=1;! [18: ~Well that was dumb. You get distracted as you run across the tracks and don't notice the train coming until it's too late.~]
                    ParaContent(); print "Well that was dumb. You get distracted as you run across the tracks and don't notice the train coming until it's too late."; new_line; .L_Say549; .L_SayX549;! [19: conclude with 37]
                    (PHR_827_r2 (37));
                    }
                    }
                    }
                    }
                    } else if (debug_rules > 1) DB_Rule(R_969, 969, 'actor');
                    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Running (B402_carry_out_running)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out running:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out running:
[ R_967 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_967, 967);
    ! [2: if the player is in the train station]
    if (((I303_abandoned_train_station == ContainerOf(player))))
    {! [3: say ~Where do you want to run?~]
        say__p=1;! [4: ~Where do you want to run?~]
        ParaContent(); print "Where do you want to run?"; new_line; .L_Say550; .L_SayX550;} else {
        ! [5: say ~This isn't the place for that~]
        say__p=1;! [6: ~This isn't the place for that~]
        ParaContent(); print "This isn't the place for that"; .L_Say551; .L_SayX551;}
        } else if (debug_rules > 1) DB_Rule(R_967, 967, 'actor');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Lacing (B405_carry_out_lacing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out lacing:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out lacing:
[ R_970 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_970, 970);
    ! [2: say ~That doesn't make sense.~]
    say__p=1;! [3: ~That doesn't make sense.~]
    ParaContent(); print "That doesn't make sense."; new_line; .L_Say552; .L_SayX552;} else if (debug_rules > 1) DB_Rule(R_970, 970, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Blowing out (B408_carry_out_blowing_out)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out blowing out:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out blowing out:
[ R_979 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_979, 979);
    ! [2: say ~That doesn't make sense.~]
    say__p=1;! [3: ~That doesn't make sense.~]
    ParaContent(); print "That doesn't make sense."; new_line; .L_Say553; .L_SayX553;} else if (debug_rules > 1) DB_Rule(R_979, 979, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Shaking (B411_carry_out_shaking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out shaking:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out shaking:
[ R_992 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_992, 992);
    ! [2: say ~That would achieve nothing.~]
    say__p=1;! [3: ~That would achieve nothing.~]
    ParaContent(); print "That would achieve nothing."; new_line; .L_Say554; .L_SayX554;} else if (debug_rules > 1) DB_Rule(R_992, 992, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Xyzzying (B420_carry_out_xyzzying)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out xyzzying:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out xyzzying:
[ R_1033 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1033, 1033);
    ! [2: say ~A hollow voice says, 'Insert red herring here.'~]
    say__p=1;! [3: ~A hollow voice says, 'Insert red herring here.'~]
    ParaContent(); print "A hollow voice says, ~Insert red herring here.~"; new_line; .L_Say555; .L_SayX555;} else if (debug_rules > 1) DB_Rule(R_1033, 1033, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Plughing (B423_carry_out_plughing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out plughing:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out plughing:
[ R_1034 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1034, 1034);
    ! [2: say ~A hollow voice says, 'This puzzle was brought to you by plugh (pronounced [unicode 9992][unicode 9992][unicode 9992] Galactic Trendsetters [unicode 9992][unicode 9992][unicode 9992]).'~]
    say__p=1;! [3: ~A hollow voice says, 'This puzzle was brought to you by plugh (pronounced ~]
    ParaContent(); print "A hollow voice says, ~This puzzle was brought to you by plugh (pronounced ";! [4: unicode 9992]
    ParaContent(); unicode_temp = 9992; #ifdef TARGET_ZCODE; @print_unicode unicode_temp; #ifnot; @streamunichar unicode_temp; #endif;! [5: unicode 9992]
    ParaContent(); unicode_temp = 9992; #ifdef TARGET_ZCODE; @print_unicode unicode_temp; #ifnot; @streamunichar unicode_temp; #endif;! [6: unicode 9992]
    ParaContent(); unicode_temp = 9992; #ifdef TARGET_ZCODE; @print_unicode unicode_temp; #ifnot; @streamunichar unicode_temp; #endif;! [7: ~ Galactic Trendsetters ~]
    ParaContent(); print " Galactic Trendsetters ";! [8: unicode 9992]
    ParaContent(); unicode_temp = 9992; #ifdef TARGET_ZCODE; @print_unicode unicode_temp; #ifnot; @streamunichar unicode_temp; #endif;! [9: unicode 9992]
    ParaContent(); unicode_temp = 9992; #ifdef TARGET_ZCODE; @print_unicode unicode_temp; #ifnot; @streamunichar unicode_temp; #endif;! [10: unicode 9992]
    ParaContent(); unicode_temp = 9992; #ifdef TARGET_ZCODE; @print_unicode unicode_temp; #ifnot; @streamunichar unicode_temp; #endif;! [11: ~).'~]
    ParaContent(); print ").~"; new_line; .L_Say556; .L_SayX556;} else if (debug_rules > 1) DB_Rule(R_1034, 1034, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------
! Definitions of displaced and unbooked rules

! No specific request
! At the time when the song ends:
[ R_890 ;
    if (debug_rules) DB_Rule(R_890, 890);
    ! [2: if the player has the ipod]
    if (((player == OwnerOf(I200_ipod))))
    {! [3: say ~The iPod has stopped playing its song. Maybe it ran out of battery.~]
        say__p=1;! [4: ~The iPod has stopped playing its song. Maybe it ran out of battery.~]
        ParaContent(); print "The iPod has stopped playing its song. Maybe it ran out of battery."; new_line; .L_Say557; .L_SayX557;! [5: now the ipod is not playing]
        (Adj_87_t3_v10(I200_ipod));
        }
        rfalse;
];
! No specific request
! At the time when the toaster beeps:
[ R_893 ;
    if (debug_rules) DB_Rule(R_893, 893);
    ! [2: say ~DING! The toast is ready. The toaster pops it out but malfunctions and the toast becomes stuck in the toaster.~]
    say__p=1;! [3: ~DING! The toast is ready. The toaster pops it out but malfunctions and the toast becomes stuck in the toaster.~]
    ParaContent(); print "DING! The toast is ready. The toaster pops it out but malfunctions and the toast becomes stuck in the toaster."; new_line; .L_Say558; .L_SayX558;! [4: now the toaster is done]
    (Adj_93_t2_v10(I205_toaster));
    ! [5: now the button is not active]
    (Adj_25_t3_v10(I216_play_button));
    rfalse;
];
! No specific request
! At the time when autopilot engages:
[ R_945 ;
    if (debug_rules) DB_Rule(R_945, 945);
    ! [2: if the spaceship is low on fuel]
    if ((((Adj_101_t1_v10(I288_spaceship)))))
    {! [3: say ~The computer announces: 'Auto pilot has engaged. Say CANCEL to fly the ship yourself. Auto pilot has detected that the fuel level is low and will land the ship momentarily.'~]
        say__p=1;! [4: ~The computer announces: 'Auto pilot has engaged. Say CANCEL to fly the ship yourself. Auto pilot has detected that the fuel level is low and will land the ship momentarily.'~]
        ParaContent(); print "The computer announces: ~Auto pilot has engaged. Say CANCEL to fly the ship yourself. Auto pilot has detected that the fuel level is low and will land the ship momentarily.~"; new_line; .L_Say559; .L_SayX559;! [5: the autopilot takes over in one turns from now]
        SetTimedEvent(R_946, 1+1, 0);
        } else {
        ! [6: say ~The spaceship has reached space. It's full of stars! It's the most beautiful thing you've ever seen! Now what?~]
        say__p=1;! [7: ~The spaceship has reached space. It's full of stars! It's the most beautiful thing you've ever seen! Now what?~]
        ParaContent(); print "The spaceship has reached space. It's full of stars! It's the most beautiful thing you've ever seen! Now what?"; new_line; .L_Say560; .L_SayX560;! [8: now the spaceship is in outer space]
        MoveObject(I288_spaceship,I295_outer_space);
        }
        rfalse;
];
! No specific request
! At the time when the autopilot takes over:
[ R_946 ;
    if (debug_rules) DB_Rule(R_946, 946);
    ! [2: if the computer is not disabled]
    if (((~~(((Adj_104_t1_v10(I291_computer)))))))
    {! [3: say ~The ship stops ascending as the auto pilot takes over. You start to fall toward earth.~]
        say__p=1;! [4: ~The ship stops ascending as the auto pilot takes over. You start to fall toward earth.~]
        ParaContent(); print "The ship stops ascending as the auto pilot takes over. You start to fall toward earth."; new_line; .L_Say561; .L_SayX561;! [5: the autopilot lands the ship in one turn from now]
        SetTimedEvent(R_950, 1+1, 0);
        } else {
        ! [6: say ~The VERY LOW FUEL light blinks on in the corner of the dashboard.~]
        say__p=1;! [7: ~The VERY LOW FUEL light blinks on in the corner of the dashboard.~]
        ParaContent(); print "The VERY LOW FUEL light blinks on in the corner of the dashboard."; new_line; .L_Say562; .L_SayX562;! [8: the ship runs out of fuel in zero turns from now]
        SetTimedEvent(R_947, 0+1, 0);
        }
        rfalse;
];
! No specific request
! At the time when the ship runs out of fuel:
[ R_947 ;
    if (debug_rules) DB_Rule(R_947, 947);
    ! [2: say ~With a putter then a WHOOSH, the ship runs out of fuel. You don't have much choice but to grip the controls and try to fly it like a plane.~]
    say__p=1;! [3: ~With a putter then a WHOOSH, the ship runs out of fuel. You don't have much choice but to grip the controls and try to fly it like a plane.~]
    ParaContent(); print "With a putter then a WHOOSH, the ship runs out of fuel. You don't have much choice but to grip the controls and try to fly it like a plane."; new_line; .L_Say563; .L_SayX563;! [4: now the spaceship is out of control]
    (Adj_105_t2_v10(I288_spaceship));
    ! [5: the ship crash lands in five turns from now]
    SetTimedEvent(R_949, 5+1, 0);
    rfalse;
];
! No specific request
! At the time when the ship crash lands:
[ R_949 ;
    if (debug_rules) DB_Rule(R_949, 949);
    ! [2: now the player is in the ruins of the tunnel]
    MoveObject(player,I297_ruins_of_the_tunnel_of_);
    ! [3: say ~With a CRASH and a BOOM the ship crash lands into the ground. It breaks through the ground and as you die on impact you vaguely recognize your surroundings: this was formerly part of the Tunnel of Extraction.~]
    say__p=1;! [4: ~With a CRASH and a BOOM the ship crash lands into the ground. It breaks through the ground and as you die on impact you vaguely recognize your surroundings: this was formerly part of the Tunnel of Extraction.~]
    ParaContent(); print "With a CRASH and a BOOM the ship crash lands into the ground. It breaks through the ground and as you die on impact you vaguely recognize your surroundings: this was formerly part of the Tunnel of Extraction."; new_line; .L_Say564; .L_SayX564;! [5: now the spaceship is in the ruins of the tunnel]
    MoveObject(I288_spaceship,I297_ruins_of_the_tunnel_of_);
    ! [6: conclude with 21]
    (PHR_827_r2 (21));
    rfalse;
];
! No specific request
! At the time when the autopilot lands the ship:
[ R_950 ;
    if (debug_rules) DB_Rule(R_950, 950);
    ! [2: say ~The spaceship lands in a near-crash. Your back hurts, but otherwise you feel okay. The ship looks in a rough shape though. All the lights turn off except for a few emergency lights. You should probably get out sooner rather than later.~]
    say__p=1;! [3: ~The spaceship lands in a near-crash. Your back hurts, but otherwise you feel okay. The ship looks in a rough shape though. All the lights turn off except for a few emergency lights. You should probably get out sooner rather than later.~]
    ParaContent(); print "The spaceship lands in a near-crash. Your back hurts, but otherwise you feel okay. The ship looks in a rough shape though. All the lights turn off except for a few emergency lights. You should probably get out sooner rather than later."; new_line; .L_Say565; .L_SayX565;! [4: now the spaceship is off]
    (Adj_98_t2_v10(I288_spaceship));
    ! [5: now the spaceship is broken]
    (Adj_103_t2_v10(I288_spaceship));
    ! [6: now the spaceship is open]
    (Adj_72_t2_v10(I288_spaceship));
    ! [7: now the spaceship is in the launch pad]
    MoveObject(I288_spaceship,I287_launch_pad);
    rfalse;
];
! No specific request
! At the time when the train comes:
[ R_966 ;
    if (debug_rules) DB_Rule(R_966, 966);
    ! [2: if the player is in the train station]
    if (((I303_abandoned_train_station == ContainerOf(player))))
    {! [3: say ~A train whooshes by at dangerously high speed. Must be the one you called. It doesn't stop though, so if you really needed a train you might need to call another.~]
        say__p=1;! [4: ~A train whooshes by at dangerously high speed. Must be the one you called. It doesn't stop though, so if you really needed a train you might need to call another.~]
        ParaContent(); print "A train whooshes by at dangerously high speed. Must be the one you called. It doesn't stop though, so if you really needed a train you might need to call another."; new_line; .L_Say566; .L_SayX566;}
    ! [5: now the train is not ready]
    (Adj_108_t3_v10(I303_abandoned_train_station));
    rfalse;
];
! No specific request
! At the time when the snake leaves the cage:
[ R_982 ;
    if (debug_rules) DB_Rule(R_982, 982);
    ! [2: if the cage is closed and the cage is locked]
    if (((((Adj_73_t1_v10(I285_cage))))) && ((((Adj_77_t1_v10(I285_cage))))))
    {! [3: say ~Angry at being locked up and not wanting to be a pet, the snake breaks through the cage and attaches itself to your eye. You feel the effects of the venom almost immediately.~]
        say__p=1;! [4: ~Angry at being locked up and not wanting to be a pet, the snake breaks through the cage and attaches itself to your eye. You feel the effects of the venom almost immediately.~]
        ParaContent(); print "Angry at being locked up and not wanting to be a pet, the snake breaks through the cage and attaches itself to your eye. You feel the effects of the venom almost immediately."; new_line; .L_Say567; .L_SayX567;! [5: conclude with 22]
        (PHR_827_r2 (22));
        } else {
        ! [6: if the location of the player is the location of the cage]
        if (((LocationOf(player) == LocationOf(I285_cage))))
        {! [7: say ~The snake slithers out of the cage with remarkable speed[if the cage is closed], slamming the door open as it goes. Maybe you should lock it next time[end if].~]
            say__p=1;! [8: ~The snake slithers out of the cage with remarkable speed~]
            ParaContent(); print "The snake slithers out of the cage with remarkable speed";! [9: if the cage is closed]

            	if (~~(((((Adj_73_t1_v10(I285_cage))))))) jump L_Say568;! [10: ~, slamming the door open as it goes. Maybe you should lock it next time~]
            ParaContent(); print ", slamming the door open as it goes. Maybe you should lock it next time";! [11: end if]

            	.L_Say568; .L_SayX568;! [12: ~.~]
            ParaContent(); print "."; new_line; .L_Say569; .L_SayX569;}
            }
    ! [13: move the snake to the lair]
    MoveObject(I315_snake, I311_a_spooky_lair, 0, false);
    rfalse;
];
! No specific request
! At the time when the bear eats the fish:
[ R_1009 ;
    if (debug_rules) DB_Rule(R_1009, 1009);
    ! [2: if the player is in the edge of the woods]
    if (((I331_edge_of_the_woods == ContainerOf(player))))
    {! [3: say ~The bear finally decides to eat the fish, in a big gulp.~]
        say__p=1;! [4: ~The bear finally decides to eat the fish, in a big gulp.~]
        ParaContent(); print "The bear finally decides to eat the fish, in a big gulp."; new_line; .L_Say570; .L_SayX570;}
    ! [5: the bear rubs its belly in zero turns from now]
    SetTimedEvent(R_1010, 0+1, 0);
    rfalse;
];
! No specific request
! At the time when the bear rubs its belly:
[ R_1010 ;
    if (debug_rules) DB_Rule(R_1010, 1010);
    ! [2: if the player is in the edge of the woods]
    if (((I331_edge_of_the_woods == ContainerOf(player))))
    {! [3: say ~The bear rubs its belly sleepily. Maybe it'll fall asleep soon.~]
        say__p=1;! [4: ~The bear rubs its belly sleepily. Maybe it'll fall asleep soon.~]
        ParaContent(); print "The bear rubs its belly sleepily. Maybe it'll fall asleep soon."; new_line; .L_Say571; .L_SayX571;}
    ! [5: the bear falls asleep in zero turns from now]
    SetTimedEvent(R_1011, 0+1, 0);
    rfalse;
];
! No specific request
! At the time when the bear falls asleep:
[ R_1011 ;
    if (debug_rules) DB_Rule(R_1011, 1011);
    ! [2: if the player is in the edge of the woods]
    if (((I331_edge_of_the_woods == ContainerOf(player))))
    {! [3: say ~The bear flops onto its full stomach and starts snoring.~]
        say__p=1;! [4: ~The bear flops onto its full stomach and starts snoring.~]
        ParaContent(); print "The bear flops onto its full stomach and starts snoring."; new_line; .L_Say572; .L_SayX572;}
    ! [5: now the bear is asleep]
    (Adj_115_t2_v10(I353_grizzly_bear));
    rfalse;
];
! No specific request
! At the time when the glue recongeals:
[ R_1018 ;
    if (debug_rules) DB_Rule(R_1018, 1018);
    ! [2: now the glue is whole]
    (Adj_118_t2_v10(I362_super_glue));
    ! [3: if the player has the glue]
    if (((player == OwnerOf(I362_super_glue))))
    {! [4: say ~The tube of super glue appears to have dried enough glue to glue itself back together.~]
        say__p=1;! [5: ~The tube of super glue appears to have dried enough glue to glue itself back together.~]
        ParaContent(); print "The tube of super glue appears to have dried enough glue to glue itself back together."; new_line; .L_Say573; .L_SayX573;}
        rfalse;
];
! Definitions of adjectives

! From the Standard Rules
! No specific request
! Definition:
[ R_0 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_1 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_2 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_3 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_4 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_5 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_6 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_7 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_8 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_39 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_40 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_41 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_42 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_43 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_44 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_45 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_46 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_47 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_48 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_49 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_50 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_51 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_52 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_53 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_54 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_55 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_56 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_57 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_58 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_59 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_60 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_61 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_62 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_63 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_64 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_95 
    t_0 ! Call parameter: object
    ;
    return false;
];
[ Adj_0_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "worn"
      if (t_0 ofclass K2_thing) return ((((player == WearerOf(t_0)))));
    rfalse;
];
[ Adj_1_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "carried"
      if (t_0 ofclass K2_thing) return ((((player == CarrierOf(t_0)))));
    rfalse;
];
[ Adj_2_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "held"
      if (t_0 ofclass K2_thing) return ((((player == HolderOf(t_0)))));
    rfalse;
];
[ Adj_3_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "visible"
      if (t_0 ofclass K2_thing) return ((((TestVisibility(player,t_0)))));
    rfalse;
];
[ Adj_4_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "invisible"
      if (t_0 ofclass K2_thing) return (~~(((((TestVisibility(player,t_0)))))));
    rfalse;
];
[ Adj_5_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "touchable"
      if (t_0 ofclass K2_thing) return ((((TestTouchability(player,t_0)))));
    rfalse;
];
[ Adj_6_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "untouchable"
      if (t_0 ofclass K2_thing) return (~~(((((TestTouchability(player,t_0)))))));
    rfalse;
];
[ Adj_7_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "concealed"
      if (t_0 ofclass K2_thing) return ((((TestConcealment((HolderOf(t_0)),t_0)))));
    rfalse;
];
[ Adj_8_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "unconcealed"
      if (t_0 ofclass K2_thing) return (~~(((((TestConcealment((HolderOf(t_0)),t_0)))))));
    rfalse;
];
[ Adj_9_t1_v10 
    t_0 ! Call parameter: number
    ;
    ! meaning of "on-stage"
      if (t_0 ofclass K2_thing) return ((OnStage(t_0, -1)));
    rfalse;
];
[ Adj_10_t1_v10 
    t_0 ! Call parameter: number
    ;
    ! meaning of "off-stage"
      if (t_0 ofclass K2_thing) return (~~(((OnStage(t_0, -1)))));
    rfalse;
];
[ Adj_11_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "offstage"
      if (t_0 ofclass K2_thing) return (((((~~Adj_9_t1_v10(t_0))))));
    rfalse;
];
[ Adj_12_t1_v10 
    t_0 ! Call parameter: room
    ;
    ! meaning of "adjacent"
      if (t_0 ofclass K1_room) return ((((TestAdjacency(real_location,t_0)))));
    rfalse;
];
[ Adj_13_t1_v11 
    t_0 ! Call parameter: number
    ;
    ! meaning of "even"
    return (((((IntegerRemainder(t_0, 2)) == 0))));
    rfalse;
];
[ Adj_14_t1_v11 
    t_0 ! Call parameter: number
    ;
    ! meaning of "odd"
    return (~~((((((IntegerRemainder(t_0, 2)) == 0))))));
    rfalse;
];
[ Adj_15_t1_v11 
    t_0 ! Call parameter: number
    ;
    ! meaning of "positive"
    return ((((t_0 > 0))));
    rfalse;
];
[ Adj_15_t1_v12 
    t_0 ! Call parameter: real number
    ;
    ! meaning of "positive"
    return ((((REAL_NUMBER_TY_Compare(t_0, NUMBER_TY_to_REAL_NUMBER_TY(0)) > 0))));
    rfalse;
];
[ Adj_16_t1_v11 
    t_0 ! Call parameter: number
    ;
    ! meaning of "negative"
    return ((((t_0 < 0))));
    rfalse;
];
[ Adj_16_t1_v12 
    t_0 ! Call parameter: real number
    ;
    ! meaning of "negative"
    return ((((REAL_NUMBER_TY_Compare(t_0, NUMBER_TY_to_REAL_NUMBER_TY(0)) < 0))));
    rfalse;
];
[ Adj_17_t1_v14 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((TEXT_TY_Empty(t_0)));
    rfalse;
];
[ Adj_17_t1_v20 
    t_0 ! Call parameter: table name
    ;
    ! meaning of "empty"
    return ((((TableFilledRows(t_0) == 0))));
    rfalse;
];
[ Adj_17_t1_v32 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((RulebookEmpty(t_0)));
    rfalse;
];
[ Adj_17_t1_v33 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((ActivityEmpty(t_0)));
    rfalse;
];
[ Adj_17_t1_v34 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((LIST_OF_TY_Empty(t_0)));
    rfalse;
];
[ Adj_17_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((RELATION_TY_Empty(t_0, -1)));
    rfalse;
];
[ Adj_18_t1_v14 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return (~~(((TEXT_TY_Empty(t_0)))));
    rfalse;
];
[ Adj_18_t1_v20 
    t_0 ! Call parameter: table name
    ;
    ! meaning of "non-empty"
    return (~~(((((TableFilledRows(t_0) == 0))))));
    rfalse;
];
[ Adj_18_t1_v32 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return (~~(((RulebookEmpty(t_0)))));
    rfalse;
];
[ Adj_18_t1_v33 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return (~~(((ActivityEmpty(t_0)))));
    rfalse;
];
[ Adj_18_t1_v34 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return (~~(((LIST_OF_TY_Empty(t_0)))));
    rfalse;
];
[ Adj_18_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return (~~(((RELATION_TY_Empty(t_0, -1)))));
    rfalse;
];
[ Adj_19_t1_v14 
    t_0 ! Call parameter: number
    ;
    ! meaning of "substituted"
    return ((TEXT_TY_IsSubstituted(t_0)));
    rfalse;
];
[ Adj_20_t1_v14 
    t_0 ! Call parameter: number
    ;
    ! meaning of "unsubstituted"
    return (~~(((TEXT_TY_IsSubstituted(t_0)))));
    rfalse;
];
[ Adj_21_t1_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "happening"
    return ((scene_status-->(t_0-1)==1));
    rfalse;
];
[ Adj_22_t1_v20 
    t_0 ! Call parameter: table name
    ;
    ! meaning of "full"
    return ((((TableBlankRows(t_0) == 0))));
    rfalse;
];
[ Adj_23_t1_v20 
    t_0 ! Call parameter: table name
    ;
    ! meaning of "non-full"
    return (~~(((((TableBlankRows(t_0) == 0))))));
    rfalse;
];
[ Adj_24_t1_v33 
    t_0 ! Call parameter: number
    ;
    ! meaning of "going on"
    return ((TestActivity(t_0)));
    rfalse;
];
[ Adj_25_t1_v16 
    t_0 ! Call parameter: number
    ;
    ! meaning of "active"
    return ((TestUseOption(t_0)));
    rfalse;
];
[ Adj_25_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "active"
      if (t_0) return (GetEitherOrProperty(t_0, p74_active));
    rfalse;
];
[ Adj_26_t1_v16 
    t_0 ! Call parameter: number
    ;
    ! meaning of "inactive"
    return (~~(((TestUseOption(t_0)))));
    rfalse;
];
[ Adj_27_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "equivalence"
    return ((RELATION_TY_EquivalenceAdjective(t_0, -1)));
    rfalse;
];
[ Adj_28_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "symmetric"
    return ((RELATION_TY_SymmetricAdjective(t_0, -1)));
    rfalse;
];
[ Adj_29_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "one-to-one"
    return ((RELATION_TY_OToOAdjective(t_0, -1)));
    rfalse;
];
[ Adj_30_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "one-to-various"
    return ((RELATION_TY_OToVAdjective(t_0, -1)));
    rfalse;
];
[ Adj_31_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "various-to-one"
    return ((RELATION_TY_VToOAdjective(t_0, -1)));
    rfalse;
];
[ Adj_32_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "various-to-various"
    return ((RELATION_TY_VToVAdjective(t_0, -1)));
    rfalse;
];
[ Adj_33_t1_v18 
    t_0 ! Call parameter: number
    ;
    ! meaning of "modal"
    return ((VerbIsModal(t_0)));
    rfalse;
];
[ Adj_34_t1_v18 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-modal"
    return (~~(((VerbIsModal(t_0)))));
    rfalse;
];
[ Adj_35_t1_v18 
    t_0 ! Call parameter: number
    ;
    ! meaning of "meaningful"
    return ((VerbIsMeaningful(t_0)));
    rfalse;
];
[ Adj_36_t1_v18 
    t_0 ! Call parameter: number
    ;
    ! meaning of "meaningless"
    return (~~(((VerbIsMeaningful(t_0)))));
    rfalse;
];
[ Adj_37_t1_v12 
    t_0 ! Call parameter: real number
    ;
    ! meaning of "infinite"
    return ((((( REAL_NUMBER_TY_Compare(t_0, 2139095040) == 0))) || ((( REAL_NUMBER_TY_Compare(t_0, -8388608) == 0)))));
    rfalse;
];
[ Adj_38_t1_v12 
    t_0 ! Call parameter: real number
    ;
    ! meaning of "finite"
    return (~~(((((( REAL_NUMBER_TY_Compare(t_0, 2139095040) == 0))) || ((( REAL_NUMBER_TY_Compare(t_0, -8388608) == 0)))))));
    rfalse;
];
[ Adj_39_t1_v12 
    t_0 ! Call parameter: number
    ;
    ! meaning of "nonexistent"
    return ((REAL_NUMBER_TY_Nan(t_0)));
    rfalse;
];
[ Adj_40_t1_v12 
    t_0 ! Call parameter: number
    ;
    ! meaning of "existent"
    return (~~(((REAL_NUMBER_TY_Nan(t_0)))));
    rfalse;
];
[ Adj_41_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "locale-supportable"
      if (t_0 ofclass K2_thing) return (((((~~(((Adj_59_t1_v10(t_0))))))) && ((((~~(((Adj_67_t1_v10(t_0))))))) && (((~~(((Adj_64_t1_v10(t_0))))))))));
    rfalse;
];
[ Adj_42_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "plural-named"
      if (t_0) return (GetEitherOrProperty(t_0, pluralname));
    rfalse;
];
[ Adj_43_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "singular-named"
      if (t_0) return (GetEitherOrProperty(t_0, pluralname) == false);
    rfalse;
];
[ Adj_44_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "proper-named"
      if (t_0) return (GetEitherOrProperty(t_0, proper));
    rfalse;
];
[ Adj_45_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "improper-named"
      if (t_0) return (GetEitherOrProperty(t_0, proper) == false);
    rfalse;
];
[ Adj_46_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "ambiguously plural"
      if (t_0) return (GetEitherOrProperty(t_0, ambigpluralname));
    rfalse;
];
[ Adj_47_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "privately-named"
      if (t_0) return (GetEitherOrProperty(t_0, privately_named));
    rfalse;
];
[ Adj_48_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "publicly-named"
      if (t_0) return (GetEitherOrProperty(t_0, privately_named) == false);
    rfalse;
];
[ Adj_49_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lighted"
      if (t_0) return (GetEitherOrProperty(t_0, light));
    rfalse;
];
[ Adj_50_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "dark"
      if (t_0) return (GetEitherOrProperty(t_0, light) == false);
    rfalse;
];
[ Adj_51_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "visited"
      if (t_0) return (GetEitherOrProperty(t_0, visited));
    rfalse;
];
[ Adj_52_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unvisited"
      if (t_0) return (GetEitherOrProperty(t_0, visited) == false);
    rfalse;
];
[ Adj_53_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lit"
      if (t_0) return (GetEitherOrProperty(t_0, light));
    rfalse;
];
[ Adj_54_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unlit"
      if (t_0) return (GetEitherOrProperty(t_0, light) == false);
    rfalse;
];
[ Adj_55_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "edible"
      if (t_0) return (GetEitherOrProperty(t_0, edible));
    rfalse;
];
[ Adj_56_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "inedible"
      if (t_0) return (GetEitherOrProperty(t_0, edible) == false);
    rfalse;
];
[ Adj_57_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "fixed in place"
      if (t_0) return (GetEitherOrProperty(t_0, static));
    rfalse;
];
[ Adj_58_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "portable"
      if (t_0) return (GetEitherOrProperty(t_0, static) == false);
    rfalse;
];
[ Adj_59_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "scenery"
      if (t_0) return (GetEitherOrProperty(t_0, scenery));
    rfalse;
];
[ Adj_60_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "wearable"
      if (t_0) return (GetEitherOrProperty(t_0, clothing));
    rfalse;
];
[ Adj_61_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "pushable between rooms"
      if (t_0) return (GetEitherOrProperty(t_0, pushable));
    rfalse;
];
[ Adj_62_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "handled"
      if (t_0) return (GetEitherOrProperty(t_0, moved));
    rfalse;
];
[ Adj_63_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "described"
      if (t_0) return (GetEitherOrProperty(t_0, concealed) == false);
    rfalse;
];
[ Adj_64_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "undescribed"
      if (t_0) return (GetEitherOrProperty(t_0, concealed));
    rfalse;
];
[ Adj_65_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "marked for listing"
      if (t_0) return (GetEitherOrProperty(t_0, workflag));
    rfalse;
];
[ Adj_66_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unmarked for listing"
      if (t_0) return (GetEitherOrProperty(t_0, workflag) == false);
    rfalse;
];
[ Adj_67_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "mentioned"
      if (t_0) return (GetEitherOrProperty(t_0, mentioned));
    rfalse;
];
[ Adj_68_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unmentioned"
      if (t_0) return (GetEitherOrProperty(t_0, mentioned) == false);
    rfalse;
];
[ Adj_69_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "enterable"
      if (t_0) return (GetEitherOrProperty(t_0, enterable));
    rfalse;
];
[ Adj_70_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "opaque"
      if (t_0) return (GetEitherOrProperty(t_0, transparent) == false);
    rfalse;
];
[ Adj_71_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "transparent"
      if (t_0) return (GetEitherOrProperty(t_0, transparent));
    rfalse;
];
[ Adj_72_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "open"
      if (t_0) return (GetEitherOrProperty(t_0, open));
    rfalse;
];
[ Adj_73_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "closed"
      if (t_0) return (GetEitherOrProperty(t_0, open) == false);
    rfalse;
];
[ Adj_74_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "openable"
      if (t_0) return (GetEitherOrProperty(t_0, openable));
    rfalse;
];
[ Adj_75_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unopenable"
      if (t_0) return (GetEitherOrProperty(t_0, openable) == false);
    rfalse;
];
[ Adj_76_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lockable"
      if (t_0) return (GetEitherOrProperty(t_0, lockable));
    rfalse;
];
[ Adj_77_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "locked"
      if (t_0) return (GetEitherOrProperty(t_0, locked));
    rfalse;
];
[ Adj_78_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unlocked"
      if (t_0) return (GetEitherOrProperty(t_0, locked) == false);
    rfalse;
];
[ Adj_79_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "female"
      if (t_0) return (GetEitherOrProperty(t_0, female));
    rfalse;
];
[ Adj_80_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "male"
      if (t_0) return (GetEitherOrProperty(t_0, female) == false);
    rfalse;
];
[ Adj_81_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "neuter"
      if (t_0) return (GetEitherOrProperty(t_0, neuter));
    rfalse;
];
[ Adj_82_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "switched on"
      if (t_0) return (GetEitherOrProperty(t_0, on));
    rfalse;
];
[ Adj_83_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "switched off"
      if (t_0) return (GetEitherOrProperty(t_0, on) == false);
    rfalse;
];
[ Adj_84_t1_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "recurring"
    return (GProperty(SCENE_TY, t_0, p64_recurring));
    rfalse;
];
[ Adj_85_t1_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "non-recurring"
    return (GProperty(SCENE_TY, t_0, p64_recurring) == false);
    rfalse;
];
[ Adj_86_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "game-available"
      if (t_0) return (GetEitherOrProperty(t_0, p66_game_available));
    rfalse;
];
[ Adj_87_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "playing"
      if (t_0) return (GetEitherOrProperty(t_0, p67_playing));
    rfalse;
];
[ Adj_88_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "wrapped"
      if (t_0) return (GetEitherOrProperty(t_0, p68_wrapped));
    rfalse;
];
[ Adj_89_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unwrapped"
      if (t_0) return (GetEitherOrProperty(t_0, p68_wrapped) == false);
    rfalse;
];
[ Adj_90_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "toasted"
      if (t_0) return (GetEitherOrProperty(t_0, p70_toasted));
    rfalse;
];
[ Adj_91_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "plugged in"
      if (t_0) return (GetEitherOrProperty(t_0, p71_plugged_in));
    rfalse;
];
[ Adj_92_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unplugged"
      if (t_0) return (GetEitherOrProperty(t_0, p71_plugged_in) == false);
    rfalse;
];
[ Adj_93_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "done"
      if (t_0) return (GetEitherOrProperty(t_0, p73_done));
    rfalse;
];
[ Adj_94_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "tied"
      if (t_0) return (GetEitherOrProperty(t_0, p75_tied));
    rfalse;
];
[ Adj_95_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "connected"
      if (t_0) return (GetEitherOrProperty(t_0, p76_connected));
    rfalse;
];
[ Adj_96_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "plugged"
      if (t_0) return (GetEitherOrProperty(t_0, p77_plugged));
    rfalse;
];
[ Adj_97_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "on"
      if (t_0) return (GetEitherOrProperty(t_0, p78_on));
    rfalse;
];
[ Adj_98_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "off"
      if (t_0) return (GetEitherOrProperty(t_0, p78_on) == false);
    rfalse;
];
[ Adj_99_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "tub-relevant"
      if (t_0) return (GetEitherOrProperty(t_0, p80_tub_relevant));
    rfalse;
];
[ Adj_100_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "hidden"
      if (t_0) return (GetEitherOrProperty(t_0, p81_hidden));
    rfalse;
];
[ Adj_101_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "low on fuel"
      if (t_0) return (GetEitherOrProperty(t_0, p82_low_on_fuel));
    rfalse;
];
[ Adj_102_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "waiting for confirmation"
      if (t_0) return (GetEitherOrProperty(t_0, p83_waiting_for_confirmation));
    rfalse;
];
[ Adj_103_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "broken"
      if (t_0) return (GetEitherOrProperty(t_0, p84_broken));
    rfalse;
];
[ Adj_104_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "disabled"
      if (t_0) return (GetEitherOrProperty(t_0, p85_disabled));
    rfalse;
];
[ Adj_105_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "out of control"
      if (t_0) return (GetEitherOrProperty(t_0, p86_out_of_control));
    rfalse;
];
[ Adj_106_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "stuck"
      if (t_0) return (GetEitherOrProperty(t_0, p87_stuck));
    rfalse;
];
[ Adj_107_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "started"
      if (t_0) return (GetEitherOrProperty(t_0, p88_started));
    rfalse;
];
[ Adj_108_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "ready"
      if (t_0) return (GetEitherOrProperty(t_0, p89_ready));
    rfalse;
];
[ Adj_109_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "examined"
      if (t_0) return (GetEitherOrProperty(t_0, p90_examined));
    rfalse;
];
[ Adj_110_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unexamined"
      if (t_0) return (GetEitherOrProperty(t_0, p90_examined) == false);
    rfalse;
];
[ Adj_111_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "laced"
      if (t_0) return (GetEitherOrProperty(t_0, p92_laced));
    rfalse;
];
[ Adj_112_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "urge passed"
      if (t_0) return (GetEitherOrProperty(t_0, p93_urge_passed));
    rfalse;
];
[ Adj_113_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "found"
      if (t_0) return (GetEitherOrProperty(t_0, p94_found));
    rfalse;
];
[ Adj_114_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "accustomed"
      if (t_0) return (GetEitherOrProperty(t_0, p95_accustomed));
    rfalse;
];
[ Adj_115_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "asleep"
      if (t_0) return (GetEitherOrProperty(t_0, p96_asleep));
    rfalse;
];
[ Adj_116_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "awake"
      if (t_0) return (GetEitherOrProperty(t_0, p96_asleep) == false);
    rfalse;
];
[ Adj_117_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "cut"
      if (t_0) return (GetEitherOrProperty(t_0, p98_cut));
    rfalse;
];
[ Adj_118_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "whole"
      if (t_0) return (GetEitherOrProperty(t_0, p98_cut) == false);
    rfalse;
];
[ Adj_119_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "available"
      if (t_0) return (GetEitherOrProperty(t_0, p100_available));
    rfalse;
];
[ Adj_120_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "aged"
      if (t_0) return (GetEitherOrProperty(t_0, p101_aged));
    rfalse;
];
[ Adj_121_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (GetEitherOrProperty(t_0, worn));
    rfalse;
];
[ Adj_122_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (GetEitherOrProperty(t_0, absent));
    rfalse;
];
[ Adj_123_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (GetEitherOrProperty(t_0, mark_as_room));
    rfalse;
];
[ Adj_124_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (GetEitherOrProperty(t_0, mark_as_thing));
    rfalse;
];
[ Adj_9_t2_v10 
    t_0 ! Call parameter: number
    ;
    ! meaning of "on-stage"
      if (t_0 ofclass K2_thing) return ((OnStage(t_0, true)));
    rfalse;
];
[ Adj_10_t2_v10 
    t_0 ! Call parameter: number
    ;
    ! meaning of "off-stage"
      if (t_0 ofclass K2_thing) return ((OnStage(t_0, false)));
    rfalse;
];
[ Adj_17_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((RELATION_TY_Empty(t_0, true)));
    rfalse;
];
[ Adj_18_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return ((RELATION_TY_Empty(t_0, false)));
    rfalse;
];
[ Adj_25_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "active"
      if (t_0) return (SetEitherOrProperty(t_0, p74_active));
    rfalse;
];
[ Adj_27_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "equivalence"
    return ((RELATION_TY_EquivalenceAdjective(t_0, true)));
    rfalse;
];
[ Adj_28_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "symmetric"
    return ((RELATION_TY_SymmetricAdjective(t_0, true)));
    rfalse;
];
[ Adj_29_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "one-to-one"
    return ((RELATION_TY_OToOAdjective(t_0, true)));
    rfalse;
];
[ Adj_30_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "one-to-various"
    return ((RELATION_TY_OToVAdjective(t_0, true)));
    rfalse;
];
[ Adj_31_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "various-to-one"
    return ((RELATION_TY_VToOAdjective(t_0, true)));
    rfalse;
];
[ Adj_32_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "various-to-various"
    return ((RELATION_TY_VToVAdjective(t_0, true)));
    rfalse;
];
[ Adj_42_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "plural-named"
      if (t_0) return (SetEitherOrProperty(t_0, pluralname));
    rfalse;
];
[ Adj_43_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "singular-named"
      if (t_0) return (SetEitherOrProperty(t_0, pluralname, true));
    rfalse;
];
[ Adj_44_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "proper-named"
      if (t_0) return (SetEitherOrProperty(t_0, proper));
    rfalse;
];
[ Adj_45_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "improper-named"
      if (t_0) return (SetEitherOrProperty(t_0, proper, true));
    rfalse;
];
[ Adj_46_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "ambiguously plural"
      if (t_0) return (SetEitherOrProperty(t_0, ambigpluralname));
    rfalse;
];
[ Adj_47_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "privately-named"
      if (t_0) return (SetEitherOrProperty(t_0, privately_named));
    rfalse;
];
[ Adj_48_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "publicly-named"
      if (t_0) return (SetEitherOrProperty(t_0, privately_named, true));
    rfalse;
];
[ Adj_49_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lighted"
      if (t_0) return (SetEitherOrProperty(t_0, light));
    rfalse;
];
[ Adj_50_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "dark"
      if (t_0) return (SetEitherOrProperty(t_0, light, true));
    rfalse;
];
[ Adj_51_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "visited"
      if (t_0) return (SetEitherOrProperty(t_0, visited));
    rfalse;
];
[ Adj_52_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unvisited"
      if (t_0) return (SetEitherOrProperty(t_0, visited, true));
    rfalse;
];
[ Adj_53_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lit"
      if (t_0) return (SetEitherOrProperty(t_0, light));
    rfalse;
];
[ Adj_54_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unlit"
      if (t_0) return (SetEitherOrProperty(t_0, light, true));
    rfalse;
];
[ Adj_55_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "edible"
      if (t_0) return (SetEitherOrProperty(t_0, edible));
    rfalse;
];
[ Adj_56_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "inedible"
      if (t_0) return (SetEitherOrProperty(t_0, edible, true));
    rfalse;
];
[ Adj_57_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "fixed in place"
      if (t_0) return (SetEitherOrProperty(t_0, static));
    rfalse;
];
[ Adj_58_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "portable"
      if (t_0) return (SetEitherOrProperty(t_0, static, true));
    rfalse;
];
[ Adj_59_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "scenery"
      if (t_0) return (SetEitherOrProperty(t_0, scenery));
    rfalse;
];
[ Adj_60_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "wearable"
      if (t_0) return (SetEitherOrProperty(t_0, clothing));
    rfalse;
];
[ Adj_61_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "pushable between rooms"
      if (t_0) return (SetEitherOrProperty(t_0, pushable));
    rfalse;
];
[ Adj_62_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "handled"
      if (t_0) return (SetEitherOrProperty(t_0, moved));
    rfalse;
];
[ Adj_63_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "described"
      if (t_0) return (SetEitherOrProperty(t_0, concealed, true));
    rfalse;
];
[ Adj_64_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "undescribed"
      if (t_0) return (SetEitherOrProperty(t_0, concealed));
    rfalse;
];
[ Adj_65_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "marked for listing"
      if (t_0) return (SetEitherOrProperty(t_0, workflag));
    rfalse;
];
[ Adj_66_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unmarked for listing"
      if (t_0) return (SetEitherOrProperty(t_0, workflag, true));
    rfalse;
];
[ Adj_67_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "mentioned"
      if (t_0) return (SetEitherOrProperty(t_0, mentioned));
    rfalse;
];
[ Adj_68_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unmentioned"
      if (t_0) return (SetEitherOrProperty(t_0, mentioned, true));
    rfalse;
];
[ Adj_69_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "enterable"
      if (t_0) return (SetEitherOrProperty(t_0, enterable));
    rfalse;
];
[ Adj_70_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "opaque"
      if (t_0) return (SetEitherOrProperty(t_0, transparent, true));
    rfalse;
];
[ Adj_71_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "transparent"
      if (t_0) return (SetEitherOrProperty(t_0, transparent));
    rfalse;
];
[ Adj_72_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "open"
      if (t_0) return (SetEitherOrProperty(t_0, open));
    rfalse;
];
[ Adj_73_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "closed"
      if (t_0) return (SetEitherOrProperty(t_0, open, true));
    rfalse;
];
[ Adj_74_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "openable"
      if (t_0) return (SetEitherOrProperty(t_0, openable));
    rfalse;
];
[ Adj_75_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unopenable"
      if (t_0) return (SetEitherOrProperty(t_0, openable, true));
    rfalse;
];
[ Adj_76_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lockable"
      if (t_0) return (SetEitherOrProperty(t_0, lockable));
    rfalse;
];
[ Adj_77_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "locked"
      if (t_0) return (SetEitherOrProperty(t_0, locked));
    rfalse;
];
[ Adj_78_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unlocked"
      if (t_0) return (SetEitherOrProperty(t_0, locked, true));
    rfalse;
];
[ Adj_79_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "female"
      if (t_0) return (SetEitherOrProperty(t_0, female));
    rfalse;
];
[ Adj_80_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "male"
      if (t_0) return (SetEitherOrProperty(t_0, female, true));
    rfalse;
];
[ Adj_81_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "neuter"
      if (t_0) return (SetEitherOrProperty(t_0, neuter));
    rfalse;
];
[ Adj_82_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "switched on"
      if (t_0) return (SetEitherOrProperty(t_0, on));
    rfalse;
];
[ Adj_83_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "switched off"
      if (t_0) return (SetEitherOrProperty(t_0, on, true));
    rfalse;
];
[ Adj_84_t2_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "recurring"
    return (WriteGProperty(SCENE_TY, t_0, p64_recurring, true));
    rfalse;
];
[ Adj_85_t2_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "non-recurring"
    return (WriteGProperty(SCENE_TY, t_0, p64_recurring));
    rfalse;
];
[ Adj_86_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "game-available"
      if (t_0) return (SetEitherOrProperty(t_0, p66_game_available));
    rfalse;
];
[ Adj_87_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "playing"
      if (t_0) return (SetEitherOrProperty(t_0, p67_playing));
    rfalse;
];
[ Adj_88_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "wrapped"
      if (t_0) return (SetEitherOrProperty(t_0, p68_wrapped));
    rfalse;
];
[ Adj_89_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unwrapped"
      if (t_0) return (SetEitherOrProperty(t_0, p68_wrapped, true));
    rfalse;
];
[ Adj_90_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "toasted"
      if (t_0) return (SetEitherOrProperty(t_0, p70_toasted));
    rfalse;
];
[ Adj_91_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "plugged in"
      if (t_0) return (SetEitherOrProperty(t_0, p71_plugged_in));
    rfalse;
];
[ Adj_92_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unplugged"
      if (t_0) return (SetEitherOrProperty(t_0, p71_plugged_in, true));
    rfalse;
];
[ Adj_93_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "done"
      if (t_0) return (SetEitherOrProperty(t_0, p73_done));
    rfalse;
];
[ Adj_94_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "tied"
      if (t_0) return (SetEitherOrProperty(t_0, p75_tied));
    rfalse;
];
[ Adj_95_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "connected"
      if (t_0) return (SetEitherOrProperty(t_0, p76_connected));
    rfalse;
];
[ Adj_96_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "plugged"
      if (t_0) return (SetEitherOrProperty(t_0, p77_plugged));
    rfalse;
];
[ Adj_97_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "on"
      if (t_0) return (SetEitherOrProperty(t_0, p78_on));
    rfalse;
];
[ Adj_98_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "off"
      if (t_0) return (SetEitherOrProperty(t_0, p78_on, true));
    rfalse;
];
[ Adj_99_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "tub-relevant"
      if (t_0) return (SetEitherOrProperty(t_0, p80_tub_relevant));
    rfalse;
];
[ Adj_100_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "hidden"
      if (t_0) return (SetEitherOrProperty(t_0, p81_hidden));
    rfalse;
];
[ Adj_101_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "low on fuel"
      if (t_0) return (SetEitherOrProperty(t_0, p82_low_on_fuel));
    rfalse;
];
[ Adj_102_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "waiting for confirmation"
      if (t_0) return (SetEitherOrProperty(t_0, p83_waiting_for_confirmation));
    rfalse;
];
[ Adj_103_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "broken"
      if (t_0) return (SetEitherOrProperty(t_0, p84_broken));
    rfalse;
];
[ Adj_104_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "disabled"
      if (t_0) return (SetEitherOrProperty(t_0, p85_disabled));
    rfalse;
];
[ Adj_105_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "out of control"
      if (t_0) return (SetEitherOrProperty(t_0, p86_out_of_control));
    rfalse;
];
[ Adj_106_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "stuck"
      if (t_0) return (SetEitherOrProperty(t_0, p87_stuck));
    rfalse;
];
[ Adj_107_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "started"
      if (t_0) return (SetEitherOrProperty(t_0, p88_started));
    rfalse;
];
[ Adj_108_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "ready"
      if (t_0) return (SetEitherOrProperty(t_0, p89_ready));
    rfalse;
];
[ Adj_109_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "examined"
      if (t_0) return (SetEitherOrProperty(t_0, p90_examined));
    rfalse;
];
[ Adj_110_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unexamined"
      if (t_0) return (SetEitherOrProperty(t_0, p90_examined, true));
    rfalse;
];
[ Adj_111_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "laced"
      if (t_0) return (SetEitherOrProperty(t_0, p92_laced));
    rfalse;
];
[ Adj_112_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "urge passed"
      if (t_0) return (SetEitherOrProperty(t_0, p93_urge_passed));
    rfalse;
];
[ Adj_113_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "found"
      if (t_0) return (SetEitherOrProperty(t_0, p94_found));
    rfalse;
];
[ Adj_114_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "accustomed"
      if (t_0) return (SetEitherOrProperty(t_0, p95_accustomed));
    rfalse;
];
[ Adj_115_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "asleep"
      if (t_0) return (SetEitherOrProperty(t_0, p96_asleep));
    rfalse;
];
[ Adj_116_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "awake"
      if (t_0) return (SetEitherOrProperty(t_0, p96_asleep, true));
    rfalse;
];
[ Adj_117_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "cut"
      if (t_0) return (SetEitherOrProperty(t_0, p98_cut));
    rfalse;
];
[ Adj_118_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "whole"
      if (t_0) return (SetEitherOrProperty(t_0, p98_cut, true));
    rfalse;
];
[ Adj_119_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "available"
      if (t_0) return (SetEitherOrProperty(t_0, p100_available));
    rfalse;
];
[ Adj_120_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "aged"
      if (t_0) return (SetEitherOrProperty(t_0, p101_aged));
    rfalse;
];
[ Adj_121_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, worn));
    rfalse;
];
[ Adj_122_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, absent));
    rfalse;
];
[ Adj_123_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, mark_as_room));
    rfalse;
];
[ Adj_124_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, mark_as_thing));
    rfalse;
];
[ Adj_9_t3_v10 
    t_0 ! Call parameter: number
    ;
    ! meaning of "on-stage"
      if (t_0 ofclass K2_thing) return ((OnStage(t_0, false)));
    rfalse;
];
[ Adj_10_t3_v10 
    t_0 ! Call parameter: number
    ;
    ! meaning of "off-stage"
      if (t_0 ofclass K2_thing) return ((OnStage(t_0, true)));
    rfalse;
];
[ Adj_17_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((RELATION_TY_Empty(t_0, false)));
    rfalse;
];
[ Adj_18_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return ((RELATION_TY_Empty(t_0, true)));
    rfalse;
];
[ Adj_25_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "active"
      if (t_0) return (SetEitherOrProperty(t_0, p74_active, true));
    rfalse;
];
[ Adj_27_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "equivalence"
    return ((RELATION_TY_EquivalenceAdjective(t_0, false)));
    rfalse;
];
[ Adj_28_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "symmetric"
    return ((RELATION_TY_SymmetricAdjective(t_0, false)));
    rfalse;
];
[ Adj_29_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "one-to-one"
    return ((RELATION_TY_OToOAdjective(t_0, false)));
    rfalse;
];
[ Adj_30_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "one-to-various"
    return ((RELATION_TY_OToVAdjective(t_0, false)));
    rfalse;
];
[ Adj_31_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "various-to-one"
    return ((RELATION_TY_VToOAdjective(t_0, false)));
    rfalse;
];
[ Adj_32_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "various-to-various"
    return ((RELATION_TY_VToVAdjective(t_0, false)));
    rfalse;
];
[ Adj_42_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "plural-named"
      if (t_0) return (SetEitherOrProperty(t_0, pluralname, true));
    rfalse;
];
[ Adj_43_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "singular-named"
      if (t_0) return (SetEitherOrProperty(t_0, pluralname));
    rfalse;
];
[ Adj_44_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "proper-named"
      if (t_0) return (SetEitherOrProperty(t_0, proper, true));
    rfalse;
];
[ Adj_45_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "improper-named"
      if (t_0) return (SetEitherOrProperty(t_0, proper));
    rfalse;
];
[ Adj_46_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "ambiguously plural"
      if (t_0) return (SetEitherOrProperty(t_0, ambigpluralname, true));
    rfalse;
];
[ Adj_47_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "privately-named"
      if (t_0) return (SetEitherOrProperty(t_0, privately_named, true));
    rfalse;
];
[ Adj_48_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "publicly-named"
      if (t_0) return (SetEitherOrProperty(t_0, privately_named));
    rfalse;
];
[ Adj_49_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lighted"
      if (t_0) return (SetEitherOrProperty(t_0, light, true));
    rfalse;
];
[ Adj_50_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "dark"
      if (t_0) return (SetEitherOrProperty(t_0, light));
    rfalse;
];
[ Adj_51_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "visited"
      if (t_0) return (SetEitherOrProperty(t_0, visited, true));
    rfalse;
];
[ Adj_52_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unvisited"
      if (t_0) return (SetEitherOrProperty(t_0, visited));
    rfalse;
];
[ Adj_53_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lit"
      if (t_0) return (SetEitherOrProperty(t_0, light, true));
    rfalse;
];
[ Adj_54_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unlit"
      if (t_0) return (SetEitherOrProperty(t_0, light));
    rfalse;
];
[ Adj_55_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "edible"
      if (t_0) return (SetEitherOrProperty(t_0, edible, true));
    rfalse;
];
[ Adj_56_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "inedible"
      if (t_0) return (SetEitherOrProperty(t_0, edible));
    rfalse;
];
[ Adj_57_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "fixed in place"
      if (t_0) return (SetEitherOrProperty(t_0, static, true));
    rfalse;
];
[ Adj_58_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "portable"
      if (t_0) return (SetEitherOrProperty(t_0, static));
    rfalse;
];
[ Adj_59_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "scenery"
      if (t_0) return (SetEitherOrProperty(t_0, scenery, true));
    rfalse;
];
[ Adj_60_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "wearable"
      if (t_0) return (SetEitherOrProperty(t_0, clothing, true));
    rfalse;
];
[ Adj_61_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "pushable between rooms"
      if (t_0) return (SetEitherOrProperty(t_0, pushable, true));
    rfalse;
];
[ Adj_62_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "handled"
      if (t_0) return (SetEitherOrProperty(t_0, moved, true));
    rfalse;
];
[ Adj_63_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "described"
      if (t_0) return (SetEitherOrProperty(t_0, concealed));
    rfalse;
];
[ Adj_64_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "undescribed"
      if (t_0) return (SetEitherOrProperty(t_0, concealed, true));
    rfalse;
];
[ Adj_65_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "marked for listing"
      if (t_0) return (SetEitherOrProperty(t_0, workflag, true));
    rfalse;
];
[ Adj_66_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unmarked for listing"
      if (t_0) return (SetEitherOrProperty(t_0, workflag));
    rfalse;
];
[ Adj_67_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "mentioned"
      if (t_0) return (SetEitherOrProperty(t_0, mentioned, true));
    rfalse;
];
[ Adj_68_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unmentioned"
      if (t_0) return (SetEitherOrProperty(t_0, mentioned));
    rfalse;
];
[ Adj_69_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "enterable"
      if (t_0) return (SetEitherOrProperty(t_0, enterable, true));
    rfalse;
];
[ Adj_70_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "opaque"
      if (t_0) return (SetEitherOrProperty(t_0, transparent));
    rfalse;
];
[ Adj_71_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "transparent"
      if (t_0) return (SetEitherOrProperty(t_0, transparent, true));
    rfalse;
];
[ Adj_72_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "open"
      if (t_0) return (SetEitherOrProperty(t_0, open, true));
    rfalse;
];
[ Adj_73_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "closed"
      if (t_0) return (SetEitherOrProperty(t_0, open));
    rfalse;
];
[ Adj_74_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "openable"
      if (t_0) return (SetEitherOrProperty(t_0, openable, true));
    rfalse;
];
[ Adj_75_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unopenable"
      if (t_0) return (SetEitherOrProperty(t_0, openable));
    rfalse;
];
[ Adj_76_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lockable"
      if (t_0) return (SetEitherOrProperty(t_0, lockable, true));
    rfalse;
];
[ Adj_77_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "locked"
      if (t_0) return (SetEitherOrProperty(t_0, locked, true));
    rfalse;
];
[ Adj_78_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unlocked"
      if (t_0) return (SetEitherOrProperty(t_0, locked));
    rfalse;
];
[ Adj_79_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "female"
      if (t_0) return (SetEitherOrProperty(t_0, female, true));
    rfalse;
];
[ Adj_80_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "male"
      if (t_0) return (SetEitherOrProperty(t_0, female));
    rfalse;
];
[ Adj_81_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "neuter"
      if (t_0) return (SetEitherOrProperty(t_0, neuter, true));
    rfalse;
];
[ Adj_82_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "switched on"
      if (t_0) return (SetEitherOrProperty(t_0, on, true));
    rfalse;
];
[ Adj_83_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "switched off"
      if (t_0) return (SetEitherOrProperty(t_0, on));
    rfalse;
];
[ Adj_84_t3_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "recurring"
    return (WriteGProperty(SCENE_TY, t_0, p64_recurring));
    rfalse;
];
[ Adj_85_t3_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "non-recurring"
    return (WriteGProperty(SCENE_TY, t_0, p64_recurring, true));
    rfalse;
];
[ Adj_86_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "game-available"
      if (t_0) return (SetEitherOrProperty(t_0, p66_game_available, true));
    rfalse;
];
[ Adj_87_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "playing"
      if (t_0) return (SetEitherOrProperty(t_0, p67_playing, true));
    rfalse;
];
[ Adj_88_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "wrapped"
      if (t_0) return (SetEitherOrProperty(t_0, p68_wrapped, true));
    rfalse;
];
[ Adj_89_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unwrapped"
      if (t_0) return (SetEitherOrProperty(t_0, p68_wrapped));
    rfalse;
];
[ Adj_90_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "toasted"
      if (t_0) return (SetEitherOrProperty(t_0, p70_toasted, true));
    rfalse;
];
[ Adj_91_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "plugged in"
      if (t_0) return (SetEitherOrProperty(t_0, p71_plugged_in, true));
    rfalse;
];
[ Adj_92_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unplugged"
      if (t_0) return (SetEitherOrProperty(t_0, p71_plugged_in));
    rfalse;
];
[ Adj_93_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "done"
      if (t_0) return (SetEitherOrProperty(t_0, p73_done, true));
    rfalse;
];
[ Adj_94_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "tied"
      if (t_0) return (SetEitherOrProperty(t_0, p75_tied, true));
    rfalse;
];
[ Adj_95_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "connected"
      if (t_0) return (SetEitherOrProperty(t_0, p76_connected, true));
    rfalse;
];
[ Adj_96_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "plugged"
      if (t_0) return (SetEitherOrProperty(t_0, p77_plugged, true));
    rfalse;
];
[ Adj_97_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "on"
      if (t_0) return (SetEitherOrProperty(t_0, p78_on, true));
    rfalse;
];
[ Adj_98_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "off"
      if (t_0) return (SetEitherOrProperty(t_0, p78_on));
    rfalse;
];
[ Adj_99_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "tub-relevant"
      if (t_0) return (SetEitherOrProperty(t_0, p80_tub_relevant, true));
    rfalse;
];
[ Adj_100_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "hidden"
      if (t_0) return (SetEitherOrProperty(t_0, p81_hidden, true));
    rfalse;
];
[ Adj_101_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "low on fuel"
      if (t_0) return (SetEitherOrProperty(t_0, p82_low_on_fuel, true));
    rfalse;
];
[ Adj_102_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "waiting for confirmation"
      if (t_0) return (SetEitherOrProperty(t_0, p83_waiting_for_confirmation, true));
    rfalse;
];
[ Adj_103_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "broken"
      if (t_0) return (SetEitherOrProperty(t_0, p84_broken, true));
    rfalse;
];
[ Adj_104_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "disabled"
      if (t_0) return (SetEitherOrProperty(t_0, p85_disabled, true));
    rfalse;
];
[ Adj_105_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "out of control"
      if (t_0) return (SetEitherOrProperty(t_0, p86_out_of_control, true));
    rfalse;
];
[ Adj_106_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "stuck"
      if (t_0) return (SetEitherOrProperty(t_0, p87_stuck, true));
    rfalse;
];
[ Adj_107_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "started"
      if (t_0) return (SetEitherOrProperty(t_0, p88_started, true));
    rfalse;
];
[ Adj_108_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "ready"
      if (t_0) return (SetEitherOrProperty(t_0, p89_ready, true));
    rfalse;
];
[ Adj_109_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "examined"
      if (t_0) return (SetEitherOrProperty(t_0, p90_examined, true));
    rfalse;
];
[ Adj_110_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unexamined"
      if (t_0) return (SetEitherOrProperty(t_0, p90_examined));
    rfalse;
];
[ Adj_111_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "laced"
      if (t_0) return (SetEitherOrProperty(t_0, p92_laced, true));
    rfalse;
];
[ Adj_112_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "urge passed"
      if (t_0) return (SetEitherOrProperty(t_0, p93_urge_passed, true));
    rfalse;
];
[ Adj_113_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "found"
      if (t_0) return (SetEitherOrProperty(t_0, p94_found, true));
    rfalse;
];
[ Adj_114_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "accustomed"
      if (t_0) return (SetEitherOrProperty(t_0, p95_accustomed, true));
    rfalse;
];
[ Adj_115_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "asleep"
      if (t_0) return (SetEitherOrProperty(t_0, p96_asleep, true));
    rfalse;
];
[ Adj_116_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "awake"
      if (t_0) return (SetEitherOrProperty(t_0, p96_asleep));
    rfalse;
];
[ Adj_117_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "cut"
      if (t_0) return (SetEitherOrProperty(t_0, p98_cut, true));
    rfalse;
];
[ Adj_118_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "whole"
      if (t_0) return (SetEitherOrProperty(t_0, p98_cut));
    rfalse;
];
[ Adj_119_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "available"
      if (t_0) return (SetEitherOrProperty(t_0, p100_available, true));
    rfalse;
];
[ Adj_120_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "aged"
      if (t_0) return (SetEitherOrProperty(t_0, p101_aged, true));
    rfalse;
];
[ Adj_121_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, worn, true));
    rfalse;
];
[ Adj_122_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, absent, true));
    rfalse;
];
[ Adj_123_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, mark_as_room, true));
    rfalse;
];
[ Adj_124_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, mark_as_thing, true));
    rfalse;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Timed Events
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array TimedEventsTable table 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;

Array TimedEventTimesTable table 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Rulebooks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


Array rulebooks_array --> B0_startup B1_turn_sequence B2_shutdown B3_scene_changing B4_when_play_begins B5_when_play_ends B6_when_scene_begins B7_when_scene_ends B8_every_turn B9_action_processing B10_setting_action_variables B11_specific_action_processi B12_player_s_action_awarenes B13_accessibility B14_reaching_inside B15_reaching_outside B16_visibility B17_persuasion B18_unsuccessful_attempt_by B19_before B20_instead B21_check B22_carry_out B23_after B24_report B25_does_the_player_mean B26_multiple_action_processi B27_when_entire_game_begins B28_when_entire_game_ends B29_before_printing_the_name B30_for_printing_the_name B31_after_printing_the_name B32_before_printing_the_plur B33_for_printing_the_plural_ B34_after_printing_the_plura B35_before_printing_a_number B36_for_printing_a_number B37_after_printing_a_number B38_before_printing_room_des B39_for_printing_room_descri B40_after_printing_room_desc B41_before_printing_inventor B42_for_printing_inventory_d B43_after_printing_inventory B44_before_listing_contents B45_for_listing_contents B46_after_listing_contents B47_before_grouping_together B48_for_grouping_together B49_after_grouping_together B50_before_writing_a_paragra B51_for_writing_a_paragraph_ B52_after_writing_a_paragrap B53_before_listing_nondescri B54_for_listing_nondescript_ B55_after_listing_nondescrip B56_before_printing_the_name B57_for_printing_the_name_of B58_after_printing_the_name_ B59_before_printing_the_desc B60_for_printing_the_descrip B61_after_printing_the_descr B62_before_printing_the_anno B63_for_printing_the_announc B64_after_printing_the_annou B65_before_printing_the_anno B66_for_printing_the_announc B67_after_printing_the_annou B68_before_printing_a_refusa B69_for_printing_a_refusal_t B70_after_printing_a_refusal B71_before_constructing_the_ B72_for_constructing_the_sta B73_after_constructing_the_s B74_before_printing_the_bann B75_for_printing_the_banner_ B76_after_printing_the_banne B77_before_reading_a_command B78_for_reading_a_command B79_after_reading_a_command B80_before_deciding_the_scop B81_for_deciding_the_scope B82_after_deciding_the_scope B83_before_deciding_the_conc B84_for_deciding_the_conceal B85_after_deciding_the_conce B86_before_deciding_whether_ B87_for_deciding_whether_all B88_after_deciding_whether_a B89_before_clarifying_the_pa B90_for_clarifying_the_parse B91_after_clarifying_the_par B92_before_asking_which_do_y B93_for_asking_which_do_you_ B94_after_asking_which_do_yo B95_before_printing_a_parser B96_for_printing_a_parser_er B97_after_printing_a_parser_ B98_before_supplying_a_missi B99_for_supplying_a_missing_ B100_after_supplying_a_missi B101_before_supplying_a_miss B102_for_supplying_a_missing B103_after_supplying_a_missi B104_before_implicitly_takin B105_for_implicitly_taking B106_after_implicitly_taking B107_before_starting_the_vir B108_for_starting_the_virtua B109_after_starting_the_virt B110_before_amusing_a_victor B111_for_amusing_a_victoriou B112_after_amusing_a_victori B113_before_printing_the_pla B114_for_printing_the_player B115_after_printing_the_play B116_before_handling_the_fin B117_for_handling_the_final_ B118_after_handling_the_fina B119_before_printing_the_loc B120_for_printing_the_locale B121_after_printing_the_loca B122_before_choosing_notable B123_for_choosing_notable_lo B124_after_choosing_notable_ B125_before_printing_a_local B126_for_printing_a_locale_p B127_after_printing_a_locale B128_before_issuing_the_resp B129_for_issuing_the_respons B130_after_issuing_the_respo B131_check_taking_inventory B132_carry_out_taking_invent B133_report_taking_inventory B134_check_taking B135_carry_out_taking B136_report_taking B137_check_removing_it_from B138_carry_out_removing_it_f B139_report_removing_it_from B140_check_dropping B141_carry_out_dropping B142_report_dropping B143_check_putting_it_on B144_carry_out_putting_it_on B145_report_putting_it_on B146_check_inserting_it_into B147_carry_out_inserting_it_ B148_report_inserting_it_int B149_check_eating B150_carry_out_eating B151_report_eating B152_check_going B153_carry_out_going B154_report_going B155_check_entering B156_carry_out_entering B157_report_entering B158_check_exiting B159_carry_out_exiting B160_report_exiting B161_check_getting_off B162_carry_out_getting_off B163_report_getting_off B164_check_looking B165_carry_out_looking B166_report_looking B167_check_examining B168_carry_out_examining B169_report_examining B170_check_looking_under B171_carry_out_looking_under B172_report_looking_under B173_check_searching B174_carry_out_searching B175_report_searching B176_check_consulting_it_abo B177_carry_out_consulting_it B178_report_consulting_it_ab B179_check_locking_it_with B180_carry_out_locking_it_wi B181_report_locking_it_with B182_check_unlocking_it_with B183_carry_out_unlocking_it_ B184_report_unlocking_it_wit B185_check_switching_on B186_carry_out_switching_on B187_report_switching_on B188_check_switching_off B189_carry_out_switching_off B190_report_switching_off B191_check_opening B192_carry_out_opening B193_report_opening B194_check_closing B195_carry_out_closing B196_report_closing B197_check_wearing B198_carry_out_wearing B199_report_wearing B200_check_taking_off B201_carry_out_taking_off B202_report_taking_off B203_check_giving_it_to B204_carry_out_giving_it_to B205_report_giving_it_to B206_check_showing_it_to B207_carry_out_showing_it_to B208_report_showing_it_to B209_check_waking B210_carry_out_waking B211_report_waking B212_check_throwing_it_at B213_carry_out_throwing_it_a B214_report_throwing_it_at B215_check_attacking B216_carry_out_attacking B217_report_attacking B218_check_kissing B219_carry_out_kissing B220_report_kissing B221_check_answering_it_that B222_carry_out_answering_it_ B223_report_answering_it_tha B224_check_telling_it_about B225_carry_out_telling_it_ab B226_report_telling_it_about B227_check_asking_it_about B228_carry_out_asking_it_abo B229_report_asking_it_about B230_check_asking_it_for B231_carry_out_asking_it_for B232_report_asking_it_for B233_check_waiting B234_carry_out_waiting B235_report_waiting B236_check_touching B237_carry_out_touching B238_report_touching B239_check_waving B240_carry_out_waving B241_report_waving B242_check_pulling B243_carry_out_pulling B244_report_pulling B245_check_pushing B246_carry_out_pushing B247_report_pushing B248_check_turning B249_carry_out_turning B250_report_turning B251_check_pushing_it_to B252_carry_out_pushing_it_to B253_report_pushing_it_to B254_check_squeezing B255_carry_out_squeezing B256_report_squeezing B257_check_saying_yes B258_carry_out_saying_yes B259_report_saying_yes B260_check_saying_no B261_carry_out_saying_no B262_report_saying_no B263_check_burning B264_carry_out_burning B265_report_burning B266_check_waking_up B267_carry_out_waking_up B268_report_waking_up B269_check_thinking B270_carry_out_thinking B271_report_thinking B272_check_smelling B273_carry_out_smelling B274_report_smelling B275_check_listening_to B276_carry_out_listening_to B277_report_listening_to B278_check_tasting B279_carry_out_tasting B280_report_tasting B281_check_cutting B282_carry_out_cutting B283_report_cutting B284_check_jumping B285_carry_out_jumping B286_report_jumping B287_check_tying_it_to B288_carry_out_tying_it_to B289_report_tying_it_to B290_check_drinking B291_carry_out_drinking B292_report_drinking B293_check_saying_sorry B294_carry_out_saying_sorry B295_report_saying_sorry B296_check_swinging B297_carry_out_swinging B298_report_swinging B299_check_rubbing B300_carry_out_rubbing B301_report_rubbing B302_check_setting_it_to B303_carry_out_setting_it_to B304_report_setting_it_to B305_check_waving_hands B306_carry_out_waving_hands B307_report_waving_hands B308_check_buying B309_carry_out_buying B310_report_buying B311_check_climbing B312_carry_out_climbing B313_report_climbing B314_check_sleeping B315_carry_out_sleeping B316_report_sleeping B317_check_quitting_the_game B318_carry_out_quitting_the_ B319_report_quitting_the_gam B320_check_saving_the_game B321_carry_out_saving_the_ga B322_report_saving_the_game B323_check_restoring_the_gam B324_carry_out_restoring_the B325_report_restoring_the_ga B326_check_restarting_the_ga B327_carry_out_restarting_th B328_report_restarting_the_g B329_check_verifying_the_sto B330_carry_out_verifying_the B331_report_verifying_the_st B332_check_switching_the_sto B333_carry_out_switching_the B334_report_switching_the_st B335_check_switching_the_sto B336_carry_out_switching_the B337_report_switching_the_st B338_check_requesting_the_st B339_carry_out_requesting_th B340_report_requesting_the_s B341_check_requesting_the_sc B342_carry_out_requesting_th B343_report_requesting_the_s B344_check_preferring_abbrev B345_carry_out_preferring_ab B346_report_preferring_abbre B347_check_preferring_unabbr B348_carry_out_preferring_un B349_report_preferring_unabb B350_check_preferring_someti B351_carry_out_preferring_so B352_report_preferring_somet B353_check_switching_score_n B354_carry_out_switching_sco B355_report_switching_score_ B356_check_switching_score_n B357_carry_out_switching_sco B358_report_switching_score_ B359_check_requesting_the_pr B360_carry_out_requesting_th B361_report_requesting_the_p B362_check_dumping B363_carry_out_dumping B364_report_dumping B365_check_using B366_carry_out_using B367_report_using B368_check_bare_help_invokin B369_carry_out_bare_help_inv B370_report_bare_help_invoki B371_check_move_help_invokin B372_carry_out_move_help_inv B373_report_move_help_invoki B374_check_help_invoking B375_carry_out_help_invoking B376_report_help_invoking B377_check_plugging B378_carry_out_plugging B379_report_plugging B380_check_unplugging B381_carry_out_unplugging B382_report_unplugging B383_check_untieing B384_carry_out_untieing B385_report_untieing B386_check_flying B387_carry_out_flying B388_report_flying B389_check_suiting_up B390_carry_out_suiting_up B391_report_suiting_up B392_check_confirming B393_carry_out_confirming B394_report_confirming B395_check_canceling B396_carry_out_canceling B397_report_canceling B398_check_running_across B399_carry_out_running_acros B400_report_running_across B401_check_running B402_carry_out_running B403_report_running B404_check_lacing B405_carry_out_lacing B406_report_lacing B407_check_blowing_out B408_carry_out_blowing_out B409_report_blowing_out B410_check_shaking B411_carry_out_shaking B412_report_shaking B413_check_going_up B414_carry_out_going_up B415_report_going_up B416_check_going_down B417_carry_out_going_down B418_report_going_down B419_check_xyzzying B420_carry_out_xyzzying B421_report_xyzzying B422_check_plughing B423_carry_out_plughing B424_report_plughing 0;

[ EMPTY_RULEBOOK 
    forbid_breaks ! Implied call parameter
    ;
    rfalse;
];
[ B0_startup 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = INITIALISE_MEMORY_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return INITIALISE_MEMORY_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = VIRTUAL_MACHINE_STARTUP_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return VIRTUAL_MACHINE_STARTUP_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = SEED_RANDOM_NUMBER_GENERATOR_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return SEED_RANDOM_NUMBER_GENERATOR_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = UPDATE_CHRONOLOGICAL_RECORDS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return UPDATE_CHRONOLOGICAL_RECORDS_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_9();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_9;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = POSITION_PLAYER_IN_MODEL_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return POSITION_PLAYER_IN_MODEL_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_10();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_10;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_11();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_11;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_12();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_12;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_13();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_13;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_14();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_14;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 11 rule(s)
];
[ B1_turn_sequence 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = PARSE_COMMAND_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return PARSE_COMMAND_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_9();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_9;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = GENERATE_ACTION_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return GENERATE_ACTION_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_16();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_16;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_15();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_15;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = TIMED_EVENTS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return TIMED_EVENTS_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = ADVANCE_TIME_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ADVANCE_TIME_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = UPDATE_CHRONOLOGICAL_RECORDS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return UPDATE_CHRONOLOGICAL_RECORDS_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_17();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_17;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = ADJUST_LIGHT_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ADJUST_LIGHT_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = NOTE_OBJECT_ACQUISITIONS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return NOTE_OBJECT_ACQUISITIONS_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_18();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_18;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 12 rule(s)
];
[ B2_shutdown 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_19();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_19;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = RESURRECT_PLAYER_IF_ASKED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return RESURRECT_PLAYER_IF_ASKED_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_20();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_20;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = ASK_FINAL_QUESTION_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ASK_FINAL_QUESTION_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
[ B3_scene_changing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = DetectSceneChange();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return DetectSceneChange;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B4_when_play_begins 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_826();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_826;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B5_when_play_ends = EMPTY_RULEBOOK;
[ B6_when_scene_begins 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_65();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_65;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B7_when_scene_ends = EMPTY_RULEBOOK;
[ B8_every_turn 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_906();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_906;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_914();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_914;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_915();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_915;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1004();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1004;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_948();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_948;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_963();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_963;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_974();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_974;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1023();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1023;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 8 rule(s)
];
[ B9_action_processing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_22();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_22;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_21();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_21;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_23();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_23;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = BASIC_VISIBILITY_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return BASIC_VISIBILITY_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = BASIC_ACCESSIBILITY_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return BASIC_ACCESSIBILITY_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = CARRYING_REQUIREMENTS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return CARRYING_REQUIREMENTS_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_24();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_24;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = REQUESTED_ACTIONS_REQUIRE_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return REQUESTED_ACTIONS_REQUIRE_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = CARRY_OUT_REQUESTED_ACTIONS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return CARRY_OUT_REQUESTED_ACTIONS_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = DESCEND_TO_SPECIFIC_ACTION_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return DESCEND_TO_SPECIFIC_ACTION_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_25();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_25;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 11 rule(s)
];
[ B10_setting_action_variables 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    if (action == ##Go) {
        rv = R_151();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_151;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Exit) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_174();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_174;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Look) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_186();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_186;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    return 0; ! 3 rule(s)
];
[ B11_specific_action_processi 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = WORK_OUT_DETAILS_OF_SPECIFIC_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return WORK_OUT_DETAILS_OF_SPECIFIC_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_26();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_26;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_27();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_27;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_28();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_28;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_29();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_29;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_30();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_30;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_31();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_31;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_32();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_32;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 8 rule(s)
];
[ B12_player_s_action_awarenes 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_33();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_33;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_34();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_34;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_35();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_35;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_36();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_36;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
[ B13_accessibility 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = ACCESS_THROUGH_BARRIERS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ACCESS_THROUGH_BARRIERS_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B14_reaching_inside 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_930();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_930;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1020();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1020;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = CANT_REACH_INSIDE_ROOMS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return CANT_REACH_INSIDE_ROOMS_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = CANT_REACH_INSIDE_CLOSED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return CANT_REACH_INSIDE_CLOSED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
[ B15_reaching_outside 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = CANT_REACH_OUTSIDE_CLOSED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return CANT_REACH_OUTSIDE_CLOSED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B16_visibility 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_37();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_37;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B17_persuasion = EMPTY_RULEBOOK;
Constant B18_unsuccessful_attempt_by = EMPTY_RULEBOOK;
[ B19_before 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    if (action == ##Go) {
        rv = R_973();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_973;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Unlock) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_896();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_896;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_903();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_903;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_929();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_929;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_955();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_955;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Wear) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1012();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1012;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Go) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_958();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_958;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    return 0; ! 7 rule(s)
];
[ B20_instead 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    if (action == ##Go) {
        rv = R_829();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_829;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_831();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_831;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_833();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_833;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_943();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_943;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_944();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_944;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Disrobe) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_952();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_952;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_953();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_953;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Go) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_986();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_986;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_987();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_987;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_994();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_994;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_998();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_998;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_885();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_885;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1002();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1002;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_960();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_960;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1005();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1005;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_957();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_957;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##PutOn) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_843();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_843;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_841();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_841;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_842();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_842;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_844();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_844;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_840();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_840;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_921();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_921;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Disrobe) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_830();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_830;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_832();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_832;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_834();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_834;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_935();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_935;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Drop) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_989();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_989;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_990();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_990;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Disrobe) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_836();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_836;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_837();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_837;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_838();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_838;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_839();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_839;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_894();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_894;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Wear) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_898();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_898;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_899();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_899;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_916();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_916;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_922();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_922;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_984();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_984;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Drop) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1008();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1008;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1029();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1029;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Eat) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1030();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1030;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1031();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1031;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Disrobe) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_835();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_835;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_911();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_911;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_954();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_954;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_977();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_977;
    }
    latest_rule_result-->0 = 0;
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_828();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_828;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Go) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1001();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1001;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_800();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_800;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Insert) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_877();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_877;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_913();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_913;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_924();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_924;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_925();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_925;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_951();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_951;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_985();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_985;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_884();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_884;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_926();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_926;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_981();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_981;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1024();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1024;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1025();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1025;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1026();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1026;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Answer) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_936();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_936;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_937();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_937;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_938();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_938;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Unlock) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_959();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_959;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Turn) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_928();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_928;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A77_dumping) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_847();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_847;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A78_using) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_849();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_849;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_850();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_850;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_851();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_851;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_852();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_852;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_853();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_853;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_875();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_875;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Wear) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_876();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_876;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Climb) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_879();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_879;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_880();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_880;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_881();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_881;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_882();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_882;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Eat) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_883();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_883;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_886();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_886;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##SwitchOn) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_887();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_887;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Push) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_892();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_892;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Climb) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_895();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_895;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A84_untieing) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_900();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_900;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_901();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_901;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_902();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_902;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Wear) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_904();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_904;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_905();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_905;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Examine) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_907();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_907;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_908();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_908;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Disrobe) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_909();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_909;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Wear) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_910();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_910;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##SwitchOn) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_917();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_917;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##SwitchOff) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_918();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_918;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Turn) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_919();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_919;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_923();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_923;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_927();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_927;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A85_flying) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_933();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_933;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Push) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_934();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_934;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_942();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_942;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_962();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_962;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Push) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_964();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_964;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A91_lacing) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_971();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_971;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_975();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_975;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_978();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_978;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A92_blowing_out) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_980();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_980;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_983();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_983;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Drop) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_991();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_991;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Wear) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1000();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1000;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Attack) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1006();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1006;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Drink) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1014();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1014;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Cut) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1017();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1017;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Eat) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1019();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1019;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Climb) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1021();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1021;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Push) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1032();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1032;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Touch) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1035();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1035;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Attack) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1036();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1036;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1037();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1037;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1038();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1038;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1016();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1016;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_845();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_845;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A93_shaking) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_993();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_993;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Climb) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_995();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_995;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Listen) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_874();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_874;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_873();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_873;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Go) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_968();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_968;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A86_suiting_up) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_939();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_939;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A87_confirming) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_940();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_940;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A88_canceling) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_941();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_941;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A94_going_up) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_996();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_996;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A95_going_down) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_997();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_997;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Go) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_988();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_988;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    return 0; ! 132 rule(s)
];
Constant B21_check = EMPTY_RULEBOOK;
Constant B22_carry_out = EMPTY_RULEBOOK;
[ B23_after 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    if (action == ##Insert) {
        rv = R_1027();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1027;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_878();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_878;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_956();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_956;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Examine) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_961();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_961;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_965();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_965;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Disrobe) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_972();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_972;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Eat) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1013();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1013;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Drop) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_976();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_976;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    return 0; ! 8 rule(s)
];
Constant B24_report = EMPTY_RULEBOOK;
[ B25_does_the_player_mean 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    if (action == ##Take) {
        rv = R_38();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_38;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Disrobe) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_242();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_242;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    return 0; ! 2 rule(s)
];
Constant B26_multiple_action_processi = EMPTY_RULEBOOK;
Constant B27_when_entire_game_begins = EMPTY_RULEBOOK;
Constant B28_when_entire_game_ends = EMPTY_RULEBOOK;
[ B29_before_printing_the_name 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_66();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_66;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B30_for_printing_the_name 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1015();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1015;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_920();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_920;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_931();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_931;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1022();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1022;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = STANDARD_NAME_PRINTING_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return STANDARD_NAME_PRINTING_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 5 rule(s)
];
Constant B31_after_printing_the_name = EMPTY_RULEBOOK;
Constant B32_before_printing_the_plur = EMPTY_RULEBOOK;
[ B33_for_printing_the_plural_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_67();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_67;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B34_after_printing_the_plura = EMPTY_RULEBOOK;
Constant B35_before_printing_a_number = EMPTY_RULEBOOK;
[ B36_for_printing_a_number 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_68();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_68;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B37_after_printing_a_number = EMPTY_RULEBOOK;
Constant B38_before_printing_room_des = EMPTY_RULEBOOK;
Constant B39_for_printing_room_descri = EMPTY_RULEBOOK;
Constant B40_after_printing_room_desc = EMPTY_RULEBOOK;
Constant B41_before_printing_inventor = EMPTY_RULEBOOK;
Constant B42_for_printing_inventory_d = EMPTY_RULEBOOK;
Constant B43_after_printing_inventory = EMPTY_RULEBOOK;
Constant B44_before_listing_contents = EMPTY_RULEBOOK;
[ B45_for_listing_contents 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = STANDARD_CONTENTS_LISTING_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return STANDARD_CONTENTS_LISTING_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B46_after_listing_contents = EMPTY_RULEBOOK;
Constant B47_before_grouping_together = EMPTY_RULEBOOK;
Constant B48_for_grouping_together = EMPTY_RULEBOOK;
Constant B49_after_grouping_together = EMPTY_RULEBOOK;
Constant B50_before_writing_a_paragra = EMPTY_RULEBOOK;
Constant B51_for_writing_a_paragraph_ = EMPTY_RULEBOOK;
Constant B52_after_writing_a_paragrap = EMPTY_RULEBOOK;
Constant B53_before_listing_nondescri = EMPTY_RULEBOOK;
Constant B54_for_listing_nondescript_ = EMPTY_RULEBOOK;
Constant B55_after_listing_nondescrip = EMPTY_RULEBOOK;
Constant B56_before_printing_the_name = EMPTY_RULEBOOK;
Constant B57_for_printing_the_name_of = EMPTY_RULEBOOK;
Constant B58_after_printing_the_name_ = EMPTY_RULEBOOK;
Constant B59_before_printing_the_desc = EMPTY_RULEBOOK;
Constant B60_for_printing_the_descrip = EMPTY_RULEBOOK;
Constant B61_after_printing_the_descr = EMPTY_RULEBOOK;
Constant B62_before_printing_the_anno = EMPTY_RULEBOOK;
Constant B63_for_printing_the_announc = EMPTY_RULEBOOK;
Constant B64_after_printing_the_annou = EMPTY_RULEBOOK;
Constant B65_before_printing_the_anno = EMPTY_RULEBOOK;
[ B66_for_printing_the_announc 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_69();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_69;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B67_after_printing_the_annou = EMPTY_RULEBOOK;
Constant B68_before_printing_a_refusa = EMPTY_RULEBOOK;
Constant B69_for_printing_a_refusal_t = EMPTY_RULEBOOK;
Constant B70_after_printing_a_refusal = EMPTY_RULEBOOK;
Constant B71_before_constructing_the_ = EMPTY_RULEBOOK;
Constant B72_for_constructing_the_sta = EMPTY_RULEBOOK;
Constant B73_after_constructing_the_s = EMPTY_RULEBOOK;
Constant B74_before_printing_the_bann = EMPTY_RULEBOOK;
[ B75_for_printing_the_banner_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_799();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_799;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B76_after_printing_the_banne = EMPTY_RULEBOOK;
Constant B77_before_reading_a_command = EMPTY_RULEBOOK;
Constant B78_for_reading_a_command = EMPTY_RULEBOOK;
Constant B79_after_reading_a_command = EMPTY_RULEBOOK;
Constant B80_before_deciding_the_scop = EMPTY_RULEBOOK;
Constant B81_for_deciding_the_scope = EMPTY_RULEBOOK;
Constant B82_after_deciding_the_scope = EMPTY_RULEBOOK;
Constant B83_before_deciding_the_conc = EMPTY_RULEBOOK;
Constant B84_for_deciding_the_conceal = EMPTY_RULEBOOK;
Constant B85_after_deciding_the_conce = EMPTY_RULEBOOK;
Constant B86_before_deciding_whether_ = EMPTY_RULEBOOK;
[ B87_for_deciding_whether_all 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_74();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_74;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_70();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_70;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_73();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_73;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_72();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_72;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_71();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_71;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 5 rule(s)
];
Constant B88_after_deciding_whether_a = EMPTY_RULEBOOK;
Constant B89_before_clarifying_the_pa = EMPTY_RULEBOOK;
Constant B90_for_clarifying_the_parse = EMPTY_RULEBOOK;
Constant B91_after_clarifying_the_par = EMPTY_RULEBOOK;
Constant B92_before_asking_which_do_y = EMPTY_RULEBOOK;
Constant B93_for_asking_which_do_you_ = EMPTY_RULEBOOK;
Constant B94_after_asking_which_do_yo = EMPTY_RULEBOOK;
Constant B95_before_printing_a_parser = EMPTY_RULEBOOK;
[ B96_for_printing_a_parser_er 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_868();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_868;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B97_after_printing_a_parser_ = EMPTY_RULEBOOK;
Constant B98_before_supplying_a_missi = EMPTY_RULEBOOK;
[ B99_for_supplying_a_missing_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_75();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_75;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_76();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_76;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_77();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_77;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_162();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_162;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
Constant B100_after_supplying_a_missi = EMPTY_RULEBOOK;
Constant B101_before_supplying_a_miss = EMPTY_RULEBOOK;
Constant B102_for_supplying_a_missing = EMPTY_RULEBOOK;
Constant B103_after_supplying_a_missi = EMPTY_RULEBOOK;
Constant B104_before_implicitly_takin = EMPTY_RULEBOOK;
[ B105_for_implicitly_taking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = STANDARD_IMPLICIT_TAKING_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return STANDARD_IMPLICIT_TAKING_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B106_after_implicitly_taking = EMPTY_RULEBOOK;
[ B107_before_starting_the_vir 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_801();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_801;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_802();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_802;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B108_for_starting_the_virtua 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = ENABLE_GLULX_ACCEL_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ENABLE_GLULX_ACCEL_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B109_after_starting_the_virt = EMPTY_RULEBOOK;
Constant B110_before_amusing_a_victor = EMPTY_RULEBOOK;
Constant B111_for_amusing_a_victoriou = EMPTY_RULEBOOK;
Constant B112_after_amusing_a_victori = EMPTY_RULEBOOK;
Constant B113_before_printing_the_pla = EMPTY_RULEBOOK;
[ B114_for_printing_the_player 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = PRINT_OBITUARY_HEADLINE_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return PRINT_OBITUARY_HEADLINE_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = PRINT_FINAL_SCORE_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return PRINT_FINAL_SCORE_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = DISPLAY_FINAL_STATUS_LINE_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return DISPLAY_FINAL_STATUS_LINE_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B115_after_printing_the_play = EMPTY_RULEBOOK;
[ B116_before_handling_the_fin 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_79();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_79;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_78();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_78;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = READ_FINAL_ANSWER_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return READ_FINAL_ANSWER_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B117_for_handling_the_final_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_80();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_80;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B118_after_handling_the_fina = EMPTY_RULEBOOK;
[ B119_before_printing_the_loc 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_83();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_83;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_84();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_84;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B120_for_printing_the_locale 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_85();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_85;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_86();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_86;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B121_after_printing_the_loca = EMPTY_RULEBOOK;
Constant B122_before_choosing_notable = EMPTY_RULEBOOK;
[ B123_for_choosing_notable_lo 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_87();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_87;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B124_after_choosing_notable_ = EMPTY_RULEBOOK;
Constant B125_before_printing_a_local = EMPTY_RULEBOOK;
[ B126_for_printing_a_locale_p 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_94();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_94;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_88();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_88;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_89();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_89;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_90();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_90;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_91();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_91;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_92();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_92;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_93();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_93;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_96();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_96;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_97();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_97;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 9 rule(s)
];
Constant B127_after_printing_a_locale = EMPTY_RULEBOOK;
Constant B128_before_issuing_the_resp = EMPTY_RULEBOOK;
[ B129_for_issuing_the_respons 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = STANDARD_RESPONSE_ISSUING_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return STANDARD_RESPONSE_ISSUING_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B130_after_issuing_the_respo = EMPTY_RULEBOOK;
Constant B131_check_taking_inventory = EMPTY_RULEBOOK;
[ B132_carry_out_taking_invent 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_98();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_98;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_99();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_99;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B133_report_taking_inventory 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_100();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_100;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B134_check_taking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_101();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_101;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_102();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_102;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_103();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_103;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_104();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_104;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_105();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_105;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_106();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_106;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_107();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_107;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_108();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_108;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_109();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_109;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_110();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_110;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_111();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_111;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_112();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_112;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 12 rule(s)
];
[ B135_carry_out_taking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_113();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_113;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B136_report_taking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_114();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_114;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B137_check_removing_it_from 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_103();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_103;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_115();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_115;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_116();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_116;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_117();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_117;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
Constant B138_carry_out_removing_it_f = EMPTY_RULEBOOK;
Constant B139_report_removing_it_from = EMPTY_RULEBOOK;
[ B140_check_dropping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_119();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_119;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_118();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_118;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_120();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_120;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_121();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_121;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_122();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_122;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_123();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_123;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
[ B141_carry_out_dropping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_124();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_124;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B142_report_dropping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_125();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_125;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B143_check_putting_it_on 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_126();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_126;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_127();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_127;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_128();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_128;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_129();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_129;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_130();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_130;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_131();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_131;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
[ B144_carry_out_putting_it_on 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_132();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_132;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B145_report_putting_it_on 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_133();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_133;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_134();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_134;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B146_check_inserting_it_into 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_135();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_135;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_136();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_136;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_137();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_137;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_138();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_138;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_139();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_139;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_140();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_140;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_141();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_141;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 7 rule(s)
];
[ B147_carry_out_inserting_it_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_142();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_142;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B148_report_inserting_it_int 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_143();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_143;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_144();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_144;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B149_check_eating 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_145();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_145;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_146();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_146;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_147();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_147;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_148();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_148;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
[ B150_carry_out_eating 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_149();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_149;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B151_report_eating 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_150();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_150;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B152_check_going 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_152();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_152;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_153();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_153;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_154();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_154;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_155();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_155;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_156();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_156;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_157();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_157;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
[ B153_carry_out_going 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_158();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_158;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_159();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_159;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_160();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_160;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B154_report_going 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_161();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_161;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B155_check_entering 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_163();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_163;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_164();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_164;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_165();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_165;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_166();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_166;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_167();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_167;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_168();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_168;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_169();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_169;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_170();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_170;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 8 rule(s)
];
[ B156_carry_out_entering 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_171();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_171;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B157_report_entering 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_172();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_172;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_173();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_173;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B158_check_exiting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_175();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_175;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_176();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_176;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_177();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_177;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_178();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_178;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
[ B159_carry_out_exiting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_179();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_179;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B160_report_exiting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_180();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_180;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_181();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_181;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B161_check_getting_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_182();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_182;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B162_carry_out_getting_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_183();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_183;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B163_report_getting_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_184();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_184;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_185();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_185;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B164_check_looking = EMPTY_RULEBOOK;
[ B165_carry_out_looking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_187();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_187;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_188();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_188;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_189();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_189;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_190();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_190;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_191();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_191;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 5 rule(s)
];
[ B166_report_looking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_192();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_192;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B167_check_examining = EMPTY_RULEBOOK;
[ B168_carry_out_examining 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_193();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_193;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_194();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_194;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_195();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_195;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_196();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_196;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_197();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_197;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_198();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_198;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
[ B169_report_examining 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_199();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_199;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B170_check_looking_under = EMPTY_RULEBOOK;
[ B171_carry_out_looking_under 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_200();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_200;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B172_report_looking_under 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_201();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_201;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B173_check_searching 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_202();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_202;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_203();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_203;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B174_carry_out_searching = EMPTY_RULEBOOK;
[ B175_report_searching 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_204();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_204;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_205();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_205;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_206();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_206;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B176_check_consulting_it_abo = EMPTY_RULEBOOK;
Constant B177_carry_out_consulting_it = EMPTY_RULEBOOK;
[ B178_report_consulting_it_ab 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_207();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_207;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B179_check_locking_it_with 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_208();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_208;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_209();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_209;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_210();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_210;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_211();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_211;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
[ B180_carry_out_locking_it_wi 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_212();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_212;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B181_report_locking_it_with 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_213();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_213;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B182_check_unlocking_it_with 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_214();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_214;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_215();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_215;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_216();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_216;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B183_carry_out_unlocking_it_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_217();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_217;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B184_report_unlocking_it_wit 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_218();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_218;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B185_check_switching_on 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_219();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_219;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_220();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_220;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B186_carry_out_switching_on 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_221();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_221;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B187_report_switching_on 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_222();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_222;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B188_check_switching_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_223();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_223;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_224();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_224;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B189_carry_out_switching_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_225();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_225;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B190_report_switching_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_226();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_226;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B191_check_opening 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_227();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_227;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_228();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_228;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_229();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_229;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B192_carry_out_opening 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_230();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_230;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B193_report_opening 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_231();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_231;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_232();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_232;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B194_check_closing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_233();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_233;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_234();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_234;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B195_carry_out_closing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_235();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_235;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B196_report_closing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_236();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_236;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B197_check_wearing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_237();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_237;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_238();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_238;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_239();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_239;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B198_carry_out_wearing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_240();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_240;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B199_report_wearing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_241();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_241;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B200_check_taking_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_243();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_243;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_244();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_244;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B201_carry_out_taking_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_245();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_245;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B202_report_taking_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_246();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_246;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B203_check_giving_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_247();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_247;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_248();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_248;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_249();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_249;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_250();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_250;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_251();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_251;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_252();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_252;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
[ B204_carry_out_giving_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_253();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_253;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B205_report_giving_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_254();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_254;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B206_check_showing_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_255();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_255;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_256();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_256;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_257();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_257;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B207_carry_out_showing_it_to = EMPTY_RULEBOOK;
Constant B208_report_showing_it_to = EMPTY_RULEBOOK;
[ B209_check_waking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_258();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_258;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B210_carry_out_waking = EMPTY_RULEBOOK;
Constant B211_report_waking = EMPTY_RULEBOOK;
[ B212_check_throwing_it_at 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_259();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_259;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_260();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_260;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_261();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_261;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B213_carry_out_throwing_it_a = EMPTY_RULEBOOK;
Constant B214_report_throwing_it_at = EMPTY_RULEBOOK;
[ B215_check_attacking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_262();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_262;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B216_carry_out_attacking = EMPTY_RULEBOOK;
Constant B217_report_attacking = EMPTY_RULEBOOK;
[ B218_check_kissing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_263();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_263;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_264();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_264;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B219_carry_out_kissing = EMPTY_RULEBOOK;
Constant B220_report_kissing = EMPTY_RULEBOOK;
Constant B221_check_answering_it_that = EMPTY_RULEBOOK;
Constant B222_carry_out_answering_it_ = EMPTY_RULEBOOK;
[ B223_report_answering_it_tha 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_265();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_265;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B224_check_telling_it_about 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_266();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_266;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B225_carry_out_telling_it_ab = EMPTY_RULEBOOK;
[ B226_report_telling_it_about 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_267();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_267;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B227_check_asking_it_about = EMPTY_RULEBOOK;
Constant B228_carry_out_asking_it_abo = EMPTY_RULEBOOK;
[ B229_report_asking_it_about 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_268();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_268;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B230_check_asking_it_for 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_269();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_269;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_270();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_270;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B231_carry_out_asking_it_for = EMPTY_RULEBOOK;
Constant B232_report_asking_it_for = EMPTY_RULEBOOK;
Constant B233_check_waiting = EMPTY_RULEBOOK;
Constant B234_carry_out_waiting = EMPTY_RULEBOOK;
[ B235_report_waiting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_271();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_271;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B236_check_touching = EMPTY_RULEBOOK;
Constant B237_carry_out_touching = EMPTY_RULEBOOK;
[ B238_report_touching 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_272();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_272;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_273();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_273;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_274();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_274;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B239_check_waving 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_275();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_275;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B240_carry_out_waving = EMPTY_RULEBOOK;
[ B241_report_waving 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_276();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_276;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B242_check_pulling 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_277();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_277;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_278();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_278;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_279();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_279;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B243_carry_out_pulling = EMPTY_RULEBOOK;
[ B244_report_pulling 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_280();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_280;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B245_check_pushing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_281();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_281;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_282();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_282;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_283();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_283;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B246_carry_out_pushing = EMPTY_RULEBOOK;
[ B247_report_pushing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_284();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_284;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B248_check_turning 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_285();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_285;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_286();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_286;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_287();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_287;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B249_carry_out_turning = EMPTY_RULEBOOK;
[ B250_report_turning 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_288();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_288;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B251_check_pushing_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_289();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_289;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_290();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_290;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_291();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_291;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_292();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_292;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_293();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_293;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_294();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_294;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
Constant B252_carry_out_pushing_it_to = EMPTY_RULEBOOK;
Constant B253_report_pushing_it_to = EMPTY_RULEBOOK;
[ B254_check_squeezing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_295();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_295;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B255_carry_out_squeezing = EMPTY_RULEBOOK;
[ B256_report_squeezing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_296();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_296;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B257_check_saying_yes 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_297();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_297;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B258_carry_out_saying_yes = EMPTY_RULEBOOK;
Constant B259_report_saying_yes = EMPTY_RULEBOOK;
[ B260_check_saying_no 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_298();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_298;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B261_carry_out_saying_no = EMPTY_RULEBOOK;
Constant B262_report_saying_no = EMPTY_RULEBOOK;
[ B263_check_burning 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_299();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_299;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B264_carry_out_burning = EMPTY_RULEBOOK;
Constant B265_report_burning = EMPTY_RULEBOOK;
[ B266_check_waking_up 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_300();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_300;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B267_carry_out_waking_up = EMPTY_RULEBOOK;
Constant B268_report_waking_up = EMPTY_RULEBOOK;
[ B269_check_thinking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_301();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_301;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B270_carry_out_thinking = EMPTY_RULEBOOK;
Constant B271_report_thinking = EMPTY_RULEBOOK;
Constant B272_check_smelling = EMPTY_RULEBOOK;
Constant B273_carry_out_smelling = EMPTY_RULEBOOK;
[ B274_report_smelling 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_302();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_302;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B275_check_listening_to = EMPTY_RULEBOOK;
Constant B276_carry_out_listening_to = EMPTY_RULEBOOK;
[ B277_report_listening_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_303();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_303;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B278_check_tasting = EMPTY_RULEBOOK;
Constant B279_carry_out_tasting = EMPTY_RULEBOOK;
[ B280_report_tasting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_304();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_304;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B281_check_cutting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_305();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_305;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B282_carry_out_cutting = EMPTY_RULEBOOK;
Constant B283_report_cutting = EMPTY_RULEBOOK;
Constant B284_check_jumping = EMPTY_RULEBOOK;
Constant B285_carry_out_jumping = EMPTY_RULEBOOK;
[ B286_report_jumping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_306();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_306;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B287_check_tying_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_307();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_307;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B288_carry_out_tying_it_to = EMPTY_RULEBOOK;
Constant B289_report_tying_it_to = EMPTY_RULEBOOK;
[ B290_check_drinking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_308();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_308;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B291_carry_out_drinking = EMPTY_RULEBOOK;
Constant B292_report_drinking = EMPTY_RULEBOOK;
[ B293_check_saying_sorry 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_309();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_309;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B294_carry_out_saying_sorry = EMPTY_RULEBOOK;
Constant B295_report_saying_sorry = EMPTY_RULEBOOK;
[ B296_check_swinging 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_310();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_310;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B297_carry_out_swinging = EMPTY_RULEBOOK;
Constant B298_report_swinging = EMPTY_RULEBOOK;
[ B299_check_rubbing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_311();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_311;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B300_carry_out_rubbing = EMPTY_RULEBOOK;
[ B301_report_rubbing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_312();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_312;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B302_check_setting_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_313();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_313;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B303_carry_out_setting_it_to = EMPTY_RULEBOOK;
Constant B304_report_setting_it_to = EMPTY_RULEBOOK;
Constant B305_check_waving_hands = EMPTY_RULEBOOK;
Constant B306_carry_out_waving_hands = EMPTY_RULEBOOK;
[ B307_report_waving_hands 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_314();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_314;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B308_check_buying 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_315();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_315;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B309_carry_out_buying = EMPTY_RULEBOOK;
Constant B310_report_buying = EMPTY_RULEBOOK;
[ B311_check_climbing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_316();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_316;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B312_carry_out_climbing = EMPTY_RULEBOOK;
Constant B313_report_climbing = EMPTY_RULEBOOK;
[ B314_check_sleeping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_317();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_317;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B315_carry_out_sleeping = EMPTY_RULEBOOK;
Constant B316_report_sleeping = EMPTY_RULEBOOK;
Constant B317_check_quitting_the_game = EMPTY_RULEBOOK;
[ B318_carry_out_quitting_the_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = QUIT_THE_GAME_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return QUIT_THE_GAME_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B319_report_quitting_the_gam = EMPTY_RULEBOOK;
Constant B320_check_saving_the_game = EMPTY_RULEBOOK;
[ B321_carry_out_saving_the_ga 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = SAVE_THE_GAME_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return SAVE_THE_GAME_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B322_report_saving_the_game = EMPTY_RULEBOOK;
Constant B323_check_restoring_the_gam = EMPTY_RULEBOOK;
[ B324_carry_out_restoring_the 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = RESTORE_THE_GAME_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return RESTORE_THE_GAME_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B325_report_restoring_the_ga = EMPTY_RULEBOOK;
Constant B326_check_restarting_the_ga = EMPTY_RULEBOOK;
[ B327_carry_out_restarting_th 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = RESTART_THE_GAME_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return RESTART_THE_GAME_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B328_report_restarting_the_g = EMPTY_RULEBOOK;
Constant B329_check_verifying_the_sto = EMPTY_RULEBOOK;
[ B330_carry_out_verifying_the 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = VERIFY_THE_STORY_FILE_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return VERIFY_THE_STORY_FILE_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B331_report_verifying_the_st = EMPTY_RULEBOOK;
Constant B332_check_switching_the_sto = EMPTY_RULEBOOK;
[ B333_carry_out_switching_the 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = SWITCH_TRANSCRIPT_ON_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return SWITCH_TRANSCRIPT_ON_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B334_report_switching_the_st = EMPTY_RULEBOOK;
Constant B335_check_switching_the_sto = EMPTY_RULEBOOK;
[ B336_carry_out_switching_the 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = SWITCH_TRANSCRIPT_OFF_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return SWITCH_TRANSCRIPT_OFF_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B337_report_switching_the_st = EMPTY_RULEBOOK;
Constant B338_check_requesting_the_st = EMPTY_RULEBOOK;
[ B339_carry_out_requesting_th 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = ANNOUNCE_STORY_FILE_VERSION_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ANNOUNCE_STORY_FILE_VERSION_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B340_report_requesting_the_s = EMPTY_RULEBOOK;
Constant B341_check_requesting_the_sc = EMPTY_RULEBOOK;
[ B342_carry_out_requesting_th 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = ANNOUNCE_SCORE_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ANNOUNCE_SCORE_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B343_report_requesting_the_s = EMPTY_RULEBOOK;
Constant B344_check_preferring_abbrev = EMPTY_RULEBOOK;
[ B345_carry_out_preferring_ab 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = PREFER_ABBREVIATED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return PREFER_ABBREVIATED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B346_report_preferring_abbre 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = REP_PREFER_ABBREVIATED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return REP_PREFER_ABBREVIATED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B347_check_preferring_unabbr = EMPTY_RULEBOOK;
[ B348_carry_out_preferring_un 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = PREFER_UNABBREVIATED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return PREFER_UNABBREVIATED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B349_report_preferring_unabb 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = REP_PREFER_UNABBREVIATED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return REP_PREFER_UNABBREVIATED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B350_check_preferring_someti = EMPTY_RULEBOOK;
[ B351_carry_out_preferring_so 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = PREFER_SOMETIMES_ABBREVIATED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return PREFER_SOMETIMES_ABBREVIATED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B352_report_preferring_somet 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = REP_PREFER_SOMETIMES_ABBR_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return REP_PREFER_SOMETIMES_ABBR_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B353_check_switching_score_n = EMPTY_RULEBOOK;
[ B354_carry_out_switching_sco 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = SWITCH_SCORE_NOTIFY_ON_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return SWITCH_SCORE_NOTIFY_ON_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B355_report_switching_score_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = REP_SWITCH_NOTIFY_ON_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return REP_SWITCH_NOTIFY_ON_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B356_check_switching_score_n = EMPTY_RULEBOOK;
[ B357_carry_out_switching_sco 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = SWITCH_SCORE_NOTIFY_OFF_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return SWITCH_SCORE_NOTIFY_OFF_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B358_report_switching_score_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = REP_SWITCH_NOTIFY_OFF_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return REP_SWITCH_NOTIFY_OFF_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B359_check_requesting_the_pr = EMPTY_RULEBOOK;
[ B360_carry_out_requesting_th 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = ANNOUNCE_PRONOUN_MEANINGS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ANNOUNCE_PRONOUN_MEANINGS_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B361_report_requesting_the_p = EMPTY_RULEBOOK;
Constant B362_check_dumping = EMPTY_RULEBOOK;
[ B363_carry_out_dumping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_846();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_846;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B364_report_dumping = EMPTY_RULEBOOK;
Constant B365_check_using = EMPTY_RULEBOOK;
[ B366_carry_out_using 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_848();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_848;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B367_report_using = EMPTY_RULEBOOK;
[ B368_check_bare_help_invokin 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_869();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_869;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B369_carry_out_bare_help_inv = EMPTY_RULEBOOK;
Constant B370_report_bare_help_invoki = EMPTY_RULEBOOK;
[ B371_check_move_help_invokin 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_870();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_870;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B372_carry_out_move_help_inv = EMPTY_RULEBOOK;
Constant B373_report_move_help_invoki = EMPTY_RULEBOOK;
Constant B374_check_help_invoking = EMPTY_RULEBOOK;
[ B375_carry_out_help_invoking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_871();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_871;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B376_report_help_invoking = EMPTY_RULEBOOK;
Constant B377_check_plugging = EMPTY_RULEBOOK;
[ B378_carry_out_plugging 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_889();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_889;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B379_report_plugging = EMPTY_RULEBOOK;
Constant B380_check_unplugging = EMPTY_RULEBOOK;
[ B381_carry_out_unplugging 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_891();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_891;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B382_report_unplugging = EMPTY_RULEBOOK;
Constant B383_check_untieing = EMPTY_RULEBOOK;
[ B384_carry_out_untieing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_897();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_897;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B385_report_untieing = EMPTY_RULEBOOK;
Constant B386_check_flying = EMPTY_RULEBOOK;
[ B387_carry_out_flying 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_932();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_932;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B388_report_flying = EMPTY_RULEBOOK;
Constant B389_check_suiting_up = EMPTY_RULEBOOK;
Constant B390_carry_out_suiting_up = EMPTY_RULEBOOK;
Constant B391_report_suiting_up = EMPTY_RULEBOOK;
Constant B392_check_confirming = EMPTY_RULEBOOK;
Constant B393_carry_out_confirming = EMPTY_RULEBOOK;
Constant B394_report_confirming = EMPTY_RULEBOOK;
Constant B395_check_canceling = EMPTY_RULEBOOK;
Constant B396_carry_out_canceling = EMPTY_RULEBOOK;
Constant B397_report_canceling = EMPTY_RULEBOOK;
Constant B398_check_running_across = EMPTY_RULEBOOK;
[ B399_carry_out_running_acros 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_969();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_969;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B400_report_running_across = EMPTY_RULEBOOK;
Constant B401_check_running = EMPTY_RULEBOOK;
[ B402_carry_out_running 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_967();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_967;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B403_report_running = EMPTY_RULEBOOK;
Constant B404_check_lacing = EMPTY_RULEBOOK;
[ B405_carry_out_lacing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_970();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_970;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B406_report_lacing = EMPTY_RULEBOOK;
Constant B407_check_blowing_out = EMPTY_RULEBOOK;
[ B408_carry_out_blowing_out 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_979();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_979;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B409_report_blowing_out = EMPTY_RULEBOOK;
Constant B410_check_shaking = EMPTY_RULEBOOK;
[ B411_carry_out_shaking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_992();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_992;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B412_report_shaking = EMPTY_RULEBOOK;
Constant B413_check_going_up = EMPTY_RULEBOOK;
Constant B414_carry_out_going_up = EMPTY_RULEBOOK;
Constant B415_report_going_up = EMPTY_RULEBOOK;
Constant B416_check_going_down = EMPTY_RULEBOOK;
Constant B417_carry_out_going_down = EMPTY_RULEBOOK;
Constant B418_report_going_down = EMPTY_RULEBOOK;
Constant B419_check_xyzzying = EMPTY_RULEBOOK;
[ B420_carry_out_xyzzying 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1033();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1033;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B421_report_xyzzying = EMPTY_RULEBOOK;
Constant B422_check_plughing = EMPTY_RULEBOOK;
[ B423_carry_out_plughing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1034();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1034;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B424_report_plughing = EMPTY_RULEBOOK;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Scenes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


[ DetectSceneChange 
    chs ! count of changes made
    ch ! flag: change made
    ;
    if (scene_status-->0 == 1) {
        if ((((deadflag~=0)))) {
            ch = true;
            if (debug_scenes) print "[Scene 'Entire Game' ends]^";
            if (GProperty(43, 1, p64_recurring)) scene_status-->0 = 0; else scene_status-->0 = 2; FollowRulebook(28);
            FollowRulebook(WHEN_SCENE_ENDS_RB, 1);
            scene_ended-->0 = the_time;
            scene_endings-->0 = (scene_endings-->0)|2;
            scene_latest_ending-->0 = 1;
            jump CScene;
        }
    }
    if (scene_status-->0 == 0) {
        if ((((deadflag==0)))) {
            ch = true;
            if (debug_scenes) print "[Scene 'Entire Game' begins]^";
            scene_status-->0 = 1; FollowRulebook(WHEN_SCENE_BEGINS_RB, 1);
            FollowRulebook(27);
            scene_started-->0 = the_time;
            scene_endings-->0 = (scene_endings-->0)|1;
            scene_latest_ending-->0 = 0;
            jump CScene;
        }
    }
    .CScene;
    if (chs>20) ">--> The scene change machinery is stuck.";

    if (ch>0) DetectSceneChange(++chs);

    rfalse;
];

#IFDEF DEBUG;
[ ShowSceneStatus 
    chs ! internal use only
    sc ! internal use only
    ch ! internal use only
    ;
    if (scene_status-->0 == 1) {
        print "Scene 'Entire Game' playing (for ", the_time-(scene_started-->0), " mins now)^";
    } else {
        if (scene_latest_ending-->0 > 0) {
            print "Scene 'Entire Game' ended";
            print "^";
        }
    }
];

#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: The New Library
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====




! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Summary
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Action Data
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant AD_ACTION = 0; ! The I6 action number (0 to 4095)
Constant AD_REQUIREMENTS = 1; ! Such as requiring light; a bitmap, see below
Constant AD_NOUN_KOV = 2; ! Kind of value of the first noun
Constant AD_SECOND_KOV = 3; ! Kind of value of the second noun
Constant AD_VARIABLES_CREATOR = 4; ! Routine to initialise variables owned
Constant AD_VARIABLES_ID = 5; ! Frame ID for variables owned by action

Constant AD_RECORD_SIZE = 6;

[ FindAction fa t;
	if (fa == -1) fa = action;
	t = 1;
	while (t <= ActionData-->0) {
		if (fa == ActionData-->t) return t;
		t = t + AD_RECORD_SIZE;
	}
	rfalse;
];

[ ActionNumberIndexed i;
	if ((i>=0) && (i < AD_RECORDS)) return ActionData-->(i*AD_RECORD_SIZE + AD_ACTION + 1);
	return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Requirements Bitmap
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant TOUCH_NOUN_ABIT   = $$00000001;
Constant TOUCH_SECOND_ABIT = $$00000010;
Constant LIGHT_ABIT        = $$00000100;
Constant NEED_NOUN_ABIT    = $$00001000;
Constant NEED_SECOND_ABIT  = $$00010000;
Constant OUT_OF_WORLD_ABIT = $$00100000;
Constant CARRY_NOUN_ABIT   = $$01000000;
Constant CARRY_SECOND_ABIT = $$10000000;

[ NeedToCarryNoun;       return TestActionMask(CARRY_NOUN_ABIT); ];
[ NeedToCarrySecondNoun; return TestActionMask(CARRY_SECOND_ABIT); ];
[ NeedToTouchNoun;       return TestActionMask(TOUCH_NOUN_ABIT); ];
[ NeedToTouchSecondNoun; return TestActionMask(TOUCH_SECOND_ABIT); ];
[ NeedLightForAction;    return TestActionMask(LIGHT_ABIT); ];

[ TestActionMask match mask at; 
	at = FindAction(-1); 
	if (at == 0) rfalse; 
	mask = ActionData-->(at+AD_REQUIREMENTS); 
	if (mask & match) rtrue; 
	rfalse; 
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Try Action
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TryAction req by ac n s stora smeta tbits saved_command text_of_command;
	if (stora) return STORED_ACTION_TY_New(ac, n, s, by, req, stora);
	tbits = req & (16+32);
	req = req & 1;
	@push actor; @push act_requester; @push inp1; @push inp2;
	@push parsed_number; smeta = meta;
	actor = by; if (req) act_requester = player; else act_requester = 0;

	by = FindAction(ac);
	if (by) {
		if (ActionData-->(by+AD_NOUN_KOV) == OBJECT_TY) inp1 = n;
		else { inp1 = 1; parsed_number = n; }
		if (ActionData-->(by+AD_SECOND_KOV) == OBJECT_TY) inp2 = s;
		else { inp2 = 1; parsed_number = s; }
		if (((ActionData-->(by+AD_NOUN_KOV) == UNDERSTANDING_TY) ||
			(ActionData-->(by+AD_SECOND_KOV) == UNDERSTANDING_TY)) && (tbits)) {
			saved_command = BlkValueCreate(TEXT_TY);
			BlkValueCast(saved_command, SNIPPET_TY, players_command);
			text_of_command = BlkValueCreate(TEXT_TY);
			BlkValueCopy(text_of_command, parsed_number);
			SetPlayersCommand(text_of_command);
			if (tbits == 16) {
				n = players_command; inp1 = 1; parsed_number = players_command;
			} else {
				s = players_command; inp2 = 1; parsed_number = players_command;
			}
			BlkValueFree(text_of_command);
			@push consult_from; @push consult_words;
			consult_from = 1; consult_words = parsed_number - 100;
		}
	}

	BeginAction(ac, n, s, 0, true);

	if (saved_command) {
		@pull consult_words; @pull consult_from;
		SetPlayersCommand(saved_command);
		BlkValueFree(saved_command);
	}

	meta = smeta; @pull parsed_number;
	@pull inp2; @pull inp1; @pull act_requester; @pull actor;
	TrackActions(true, smeta);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: I6 Angle Brackets
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ R_Process a i j;
	@push inp1; @push inp2;
    inp1 = i; inp2 = j; BeginAction(a, i, j);
    @pull inp2; @pull inp1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Conversion
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global converted_action_outcome = -1;
[ GVS_Convert ac n s;
	converted_action_outcome = BeginAction(ac, n, s);
	if (converted_action_outcome == true) FollowRulebook( 23, nothing, true );
	rtrue;
];

[ ConvertToRequest X AN Y Z;
	WORK_OUT_DETAILS_OF_SPECIFIC_R();
	if (X == player) TryAction(false, X, AN, Y, Z);
	else TryAction(true, X, AN, Y, Z);
	rtrue;
];

[ ConvertToGoingWithPush i oldrm newrm infl;
	i=noun;
	if (IndirectlyContains(noun, actor) == false) { move i to actor; infl = true; }
	move_pushing = i;
	oldrm = LocationOf(noun);
	BeginAction(##Go, second);
	newrm = LocationOf(actor);
	move_pushing = nothing; move i to newrm;
	if (newrm ~= oldrm) {
		if (IndirectlyContains(i, player)) TryAction(0, player, ##Look, 0, 0);
		RulebookSucceeds();
	} else RulebookFails();
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Implicit Take
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ImplicitTake obj ks;
	if (actor == player) { STANDARD_IMPLICIT_TAKING_RM('A', obj); }
	else {
		if (TestVisibility(player, actor))
			STANDARD_IMPLICIT_TAKING_RM('B', obj, actor);
	}
	ClearParagraphing(3);
	@push keep_silent; keep_silent = true;
	@push say__p; @push say__pc; ClearParagraphing(4);
	if (act_requester) TryAction(true, actor, ##Take, obj, nothing);
	else TryAction(false, actor, ##Take, obj, nothing);
	DivideParagraphPoint(); @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;
	if (obj in actor) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Look After Going
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LookAfterGoing;
	GoingLookBreak();
	AbbreviatedRoomDescription();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Abbreviated Room Description
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ AbbreviatedRoomDescription  prior_action pos frame_id;
	prior_action = action; 

	action = ##Look;
	pos = FindAction(##Look);
	if ((pos) && (ActionData-->(pos+AD_VARIABLES_CREATOR))) {
		frame_id = ActionData-->(pos+AD_VARIABLES_ID);
		Mstack_Create_Frame(ActionData-->(pos+AD_VARIABLES_CREATOR), frame_id);
		FollowRulebook(SETTING_ACTION_VARIABLES_RB);
		(MStack-->MstVO(frame_id, 0)) = prior_action; ! "room-describing action"
		(MStack-->MstVO(frame_id, 1)) = true; ! "abbreviated form allowed"
	}
	LookSub(); ! The I6 verb routine for "looking"
	if (frame_id) Mstack_Destroy_Frame(ActionData-->(pos+AD_VARIABLES_CREATOR), frame_id);

	action = prior_action;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Begin Action
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BeginAction a n s moi notrack  rv;
	ChronologyPoint();

	@push action; @push noun; @push second; @push self; @push multiple_object_item;

	action = a; noun = n; second = s; self = noun; multiple_object_item = moi;
	if (action < 4096) rv = ActionPrimitive();

	@pull multiple_object_item; @pull self; @pull second; @pull noun; @pull action;
	
	if (notrack == false) TrackActions(true, meta);
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Action Primitive
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ActionPrimitive  rv p1 p2 p3 p4 p5 frame_id;
	MStack_CreateRBVars(ACTION_PROCESSING_RB);

	if ((keep_silent == false) && (multiflag == false)) DivideParagraphPoint();
	reason_the_action_failed = 0;

	frame_id = -1;
	p1 = FindAction(action);
	if ((p1) && (ActionData-->(p1+AD_VARIABLES_CREATOR))) {
		frame_id = ActionData-->(p1+AD_VARIABLES_ID);
		Mstack_Create_Frame(ActionData-->(p1+AD_VARIABLES_CREATOR), frame_id);
	}
	if (ActionVariablesNotTypeSafe()) {
		if (actor ~= player) { ACTION_PROCESSING_INTERNAL_RM('K'); new_line; }
		if (frame_id ~= -1)
			Mstack_Destroy_Frame(ActionData-->(p1+AD_VARIABLES_CREATOR), frame_id);
		MStack_DestroyRBVars(ACTION_PROCESSING_RB);
		return;
	}

	FollowRulebook(SETTING_ACTION_VARIABLES_RB);

	#IFDEF DEBUG;
	if ((trace_actions) && (FindAction(-1))) {
		print "["; p1=actor; p2=act_requester; p3=action; p4=noun; p5=second;
		DB_Action(p1,p2,p3,p4,p5);
		print "]^"; ClearParagraphing(5);
	}
	++debug_rule_nesting;
	#ENDIF;
	TrackActions(false, meta);
	if ((meta) && (actor ~= player)) {
		ACTION_PROCESSING_INTERNAL_RM('A', actor); new_line; rv = RS_FAILS; }
	else if (meta) { DESCEND_TO_SPECIFIC_ACTION_R(); rv = RulebookOutcome(); }
	else { FollowRulebook(ACTION_PROCESSING_RB); rv = RulebookOutcome(); }
	#IFDEF DEBUG;
	--debug_rule_nesting;
	if ((trace_actions) && (FindAction(-1))) {
		print "["; DB_Action(p1,p2,p3,p4,p5); print " - ";
		switch (rv) {
			RS_SUCCEEDS: print "succeeded";
			RS_FAILS: print "failed";
				#IFNDEF MEMORY_ECONOMY;
				if (reason_the_action_failed)
					print " the ",
						(RulePrintingRule) reason_the_action_failed;
			    #ENDIF;
			default: print "ended without result";
		}
		print "]^"; say__p = 1;
		SetRulebookOutcome(rv); ! In case disturbed by printing activities
	}
	#ENDIF;
	if (rv == RS_SUCCEEDS) UpdateActionBitmap();
	if (frame_id ~= -1) {
		p1 = FindAction(action);
		Mstack_Destroy_Frame(ActionData-->(p1+AD_VARIABLES_CREATOR), frame_id);
	}
	MStack_DestroyRBVars(ACTION_PROCESSING_RB);
	if ((keep_silent == false) && (multiflag == false)) DivideParagraphPoint();
	if (rv == RS_SUCCEEDS) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Internal Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ACTION_PROCESSING_INTERNAL_R; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Type Safety
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ActionVariablesNotTypeSafe mask noun_kova second_kova at;
	at = FindAction(-1); if (at == 0) rfalse; ! For any I6-defined actions

	noun_kova = ActionData-->(at+AD_NOUN_KOV);
	second_kova = ActionData-->(at+AD_SECOND_KOV);

	!print "at = ", at, " nst = ", noun_kova, "^";
	!print "consult_from = ", consult_from, " consult_words = ", consult_from, "^";
	!print "inp1 = ", inp1, " noun = ", noun, "^";
	!print "inp2 = ", inp2, " second = ", second, "^";
	!print "sst = ", second_kova, "^";

	if (noun_kova == SNIPPET_TY or UNDERSTANDING_TY) {
	    if (inp1 ~= 1) { inp2 = inp1; second = noun; }
	    parsed_number = 100*consult_from + consult_words;
	    inp1 = 1; noun = nothing; ! noun = parsed_number;
	}
	if (second_kova == SNIPPET_TY or UNDERSTANDING_TY) {
	    parsed_number = 100*consult_from + consult_words;
	    inp2 = 1; second = nothing; ! second = parsed_number;
	}

	mask = ActionData-->(at+AD_REQUIREMENTS);
	if (mask & OUT_OF_WORLD_ABIT) { meta = 1; rfalse; }
	meta = 0;

	if (inp1 == 1) {
	    if (noun_kova == OBJECT_TY) {
	    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('B'); new_line; }
	        rtrue;
	    }
	} else {
	    if (noun_kova ~= OBJECT_TY) {
	    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('C'); new_line; }
	        rtrue;
	    }
	    if ((mask & NEED_NOUN_ABIT) && (noun == nothing)) {
	    	@push act_requester; act_requester = nothing;
	        CarryOutActivity(SUPPLYING_A_MISSING_NOUN_ACT);
	        @pull act_requester;
	        if (noun == nothing) {
	        	if (say__p) rtrue;
		    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('D'); new_line; }
		        rtrue;
	    	}
	    }
	    if (((mask & NEED_NOUN_ABIT) == 0) && (noun ~= nothing)) {
	    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('E'); new_line; }
	        rtrue;
	    }
	}

	if (inp2 == 1) {
	    if (second_kova == OBJECT_TY) {
	    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('F'); new_line; }
	        rtrue;
	    }
	} else {
	    if (second_kova ~= OBJECT_TY) {
	    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('G'); new_line; }
	        rtrue;
	    }
	    if ((mask & NEED_SECOND_ABIT) && (second == nothing)) {
	        @push act_requester; act_requester = nothing;
	        CarryOutActivity(SUPPLYING_A_MISSING_SECOND_ACT);
	        @pull act_requester;
	        if (second == nothing) {
	        	if (say__p) rtrue;
		    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('H'); new_line; }
		        rtrue;
	        }
	    }
	    if (((mask & NEED_SECOND_ABIT) == 0) && (second ~= nothing)) {
	    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('I'); new_line; }
	        rtrue;
	    }
	}

	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Basic Visibility Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BASIC_VISIBILITY_R;
	if (act_requester) rfalse;
	if ((NeedLightForAction()) &&
		(actor == player) &&
		(FollowRulebook(VISIBLE_RB)) &&
		(RulebookSucceeded())) {
		BeginActivity(REFUSAL_TO_ACT_IN_DARK_ACT);
		if (ForActivity(REFUSAL_TO_ACT_IN_DARK_ACT)==false) {
			BASIC_VISIBILITY_RM('A'); new_line;
		}
		EndActivity(REFUSAL_TO_ACT_IN_DARK_ACT);
		reason_the_action_failed = BASIC_VISIBILITY_R;
		RulebookFails();
		rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Basic Accessibility Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BASIC_ACCESSIBILITY_R mask at;
	if (act_requester) rfalse;
	at = FindAction(-1);
	if (at == 0) rfalse;
	mask = ActionData-->(at+AD_REQUIREMENTS);

	if ((mask & TOUCH_NOUN_ABIT) && noun && (inp1 ~= 1)) {
		if (noun ofclass K3_direction) {
			RulebookFails();
			reason_the_action_failed = BASIC_ACCESSIBILITY_R; 
			if (actor~=player) rtrue;
			BASIC_ACCESSIBILITY_RM('A'); new_line;
			RulebookFails();
			reason_the_action_failed = BASIC_ACCESSIBILITY_R; 
			rtrue;
		}
		if (ObjectIsUntouchable(noun, (actor~=player), actor)) {
			RulebookFails();
			reason_the_action_failed = BASIC_ACCESSIBILITY_R;
			rtrue;
		}
	}

	if ((mask & TOUCH_SECOND_ABIT) && second && (inp2 ~= 1)) {
		if (second ofclass K3_direction) {
			RulebookFails();
			reason_the_action_failed = BASIC_ACCESSIBILITY_R;
			if (actor~=player) rtrue;
			BASIC_ACCESSIBILITY_RM('A'); new_line;
			RulebookFails();
			reason_the_action_failed = BASIC_ACCESSIBILITY_R; 
			rtrue;
		}
		if (ObjectIsUntouchable(second, (actor~=player), actor)) {
			RulebookFails();
			reason_the_action_failed = BASIC_ACCESSIBILITY_R;
			rtrue;
		}
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Carrying Requirements Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CARRYING_REQUIREMENTS_R mask at;
	
	at = FindAction(-1);
	if (at == 0) rfalse;
	mask = ActionData-->(at+AD_REQUIREMENTS);

	if ((mask & TOUCH_NOUN_ABIT) && noun && (inp1 ~= 1)) {
		if ((mask & CARRY_NOUN_ABIT) && (noun notin actor)) {
			CarryOutActivity(IMPLICITLY_TAKING_ACT, noun);
			if (noun notin actor) {
				RulebookFails();
				reason_the_action_failed = CARRYING_REQUIREMENTS_R;
				rtrue;
			}
		}
	}

	if ((mask & TOUCH_SECOND_ABIT) && second && (inp2 ~= 1)) {
		if ((mask & CARRY_SECOND_ABIT) && (second notin actor)) {
			CarryOutActivity(IMPLICITLY_TAKING_ACT, second);
 			if (second notin actor) {
				RulebookFails();
				reason_the_action_failed = CARRYING_REQUIREMENTS_R;
				rtrue;
			}
		}
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Standard Implicit Taking Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STANDARD_IMPLICIT_TAKING_R;
	ImplicitTake(parameter_value);
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Requested Actions Require Persuasion Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ REQUESTED_ACTIONS_REQUIRE_R rv;
	if ((actor ~= player) && (act_requester)) {
		@push say__p;
		say__p = 0;
		rv = FollowRulebook(PERSUADE_RB);
		if (RulebookSucceeded() == false) {
			if ((deadflag == false) && (say__p == FALSE)) {
				REQUESTED_ACTIONS_REQUIRE_RM('A', actor);
				new_line;
			}
			ActRulebookFails(rv); rtrue;
		}
		@pull say__p;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Carry Out Requested Actions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CARRY_OUT_REQUESTED_ACTIONS_R rv;
	if ((actor ~= player) && (act_requester)) {
		@push act_requester; act_requester = nothing;
		rv = BeginAction(action, noun, second);
		if (((meta) || (rv == false)) && (deadflag == false)) {
			if (FollowRulebook(UNSUCCESSFUL_ATTEMPT_RB) == false) {
				CARRY_OUT_REQUESTED_ACTIONS_RM('A', actor); new_line;
			}
		}
		@pull act_requester;
		FollowRulebook(AFTER_RB);
		ActRulebookSucceeds();
		rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Generic Verb Subroutine
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array Details_of_Specific_Action-->5;

[ GenericVerbSub ch co re vis rv;
	@push converted_action_outcome;
	converted_action_outcome = -1;

	Details_of_Specific_Action-->0 = true;
	if (meta) Details_of_Specific_Action-->0 = false;
	Details_of_Specific_Action-->1 = keep_silent;
	Details_of_Specific_Action-->2 = ch; ! Check rules for the action
	Details_of_Specific_Action-->3 = co; ! Carry out rules for the action
	Details_of_Specific_Action-->4 = re; ! Report rules for the action

	FollowRulebook(SPECIFIC_ACTION_PROCESSING_RB, 0, true);
	if ((RulebookFailed()) && (converted_action_outcome == 1)) ActRulebookSucceeds();

	@pull converted_action_outcome;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Work Out Details Of Specific Action Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WORK_OUT_DETAILS_OF_SPECIFIC_R;
	MStack-->MstVO(SPECIFIC_ACTION_PROCESSING_RB, 0) = Details_of_Specific_Action-->0;
	MStack-->MstVO(SPECIFIC_ACTION_PROCESSING_RB, 1) = Details_of_Specific_Action-->1;
	MStack-->MstVO(SPECIFIC_ACTION_PROCESSING_RB, 2) = Details_of_Specific_Action-->2;
	MStack-->MstVO(SPECIFIC_ACTION_PROCESSING_RB, 3) = Details_of_Specific_Action-->3;
	MStack-->MstVO(SPECIFIC_ACTION_PROCESSING_RB, 4) = Details_of_Specific_Action-->4;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Actions Bitmap
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestActionBitmap obj act i j k bitmap;
	if (obj == nothing) bitmap = ActionHappened;
	else {
		if (~~(obj provides action_bitmap)) rfalse;
		bitmap = obj.&action_bitmap;
	}
	if (act == -1) return (((bitmap->0) & 1) ~= 0); 
	for (i=0, k=2: i<ActionCount: i++) {
		if (act == ActionCoding-->i) {
			return (((bitmap->j) & k) ~= 0);
		}
		k = k*2; if (k == 256) { k = 1; j++; }
	}
	rfalse;
];

[ UpdateActionBitmap;
	SetActionBitmap(noun, action);
	if (action == ##Go) SetActionBitmap(location, ##Enter);
];

[ SetActionBitmap obj act i j k bitmap;
	for (i=0, k=2: i<ActionCount: i++) {
		if (act == ActionCoding-->i) {
			if (obj provides action_bitmap) {
				bitmap = obj.&action_bitmap;
				bitmap->0 = (bitmap->0) | 1;
				bitmap->j = (bitmap->j) | k;
			}
			ActionHappened->0 = (ActionHappened->0) | 1;
			ActionHappened->j = (ActionHappened->j) | k;
		}
		k = k*2; if (k == 256) { k = 1; j++; }
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Printing Actions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SayActionName act; DB_Action(0, 0, act, 0, 0, 2); ];

[ DA_Name n; if (n ofclass K3_direction) print (name) n; else print (the) n; ];
[ DA_Topic x a b c d i cf cw;
	cw = x%100; cf = x/100;
	print "~";
	for (a=cf:d<cw:d++,a++) {
		wn = a; b = WordAddress(a); c = WordLength(a);
		for (i=b:i<b+c:i++) {
			print (char) 0->i;
		}
		if (d<cw-1) print " ";
	}
	print "~";
];
[ DA_Number n; print n; ];
[ DA_TruthState n; if (n==0) print "false"; else print "true"; ];
[ DB_Action ac acr act n s for_say t at l j v c clc;
	if ((for_say == 0) && (debug_rule_nesting > 0))
		print "(", debug_rule_nesting, ") ";
	if ((ac ~= player) && (for_say ~= 2)) {
		if (acr) print "asking ", (the) ac, " to try ";
		else print (the) ac, " ";
	}
	DB_Action_Details(act, n, s, for_say);
	if ((keep_silent) && (for_say == 0)) print " - silently";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: The Activities Stack
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant MAX_NESTED_ACTIVITIES = 20;
Global activities_sp = 0;
Array activities_stack --> MAX_NESTED_ACTIVITIES;
Array activity_parameters_stack --> MAX_NESTED_ACTIVITIES;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Rule Debugging Inhibition
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global inhibit_flag = 0;
Global saved_debug_rules = 0;
[ FixInhibitFlag n act inhibit_rule_debugging;
	for (n=0:n<activities_sp:n++) {
		act = activities_stack-->n;
		if (act == PRINTING_THE_NAME_ACT or PRINTING_THE_PLURAL_NAME_ACT or
			PRINTING_ROOM_DESC_DETAILS_ACT or PRINTING_INVENTORY_DETAILS_ACT or
			LISTING_CONTENTS_ACT or GROUPING_TOGETHER_ACT or PRINTING_RESPONSE_ACT)
				inhibit_rule_debugging = true;
	}
	if ((inhibit_flag == false) && (inhibit_rule_debugging)) {
		saved_debug_rules = debug_rules;
		debug_rules = 0;
	}
	if ((inhibit_flag) && (inhibit_rule_debugging == false)) {
		debug_rules = saved_debug_rules;
	}
	inhibit_flag = inhibit_rule_debugging;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Testing Activities
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestActivity A desc val i;
	for (i=0:i<activities_sp:i++)
		if (activities_stack-->i == A) {
			if (desc) {
				if ((desc)(activity_parameters_stack-->i)) rtrue;
			} else if (val) {
				if (val == activity_parameters_stack-->i) rtrue;
			} else rtrue;
		}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Emptiness
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ActivityEmpty A x;
	x = Activity_before_rulebooks-->A;
	if (rulebooks_array-->x ~= EMPTY_RULEBOOK) rfalse;
	x = Activity_for_rulebooks-->A;
	if (rulebooks_array-->x ~= EMPTY_RULEBOOK) rfalse;
	x = Activity_after_rulebooks-->A;
	if (rulebooks_array-->x ~= EMPTY_RULEBOOK) rfalse;
	rtrue;
];

[ RulebookEmpty rb;
	if (rulebooks_array-->rb ~= EMPTY_RULEBOOK) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Process Activity Rulebook
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ProcessActivityRulebook rulebook parameter  rv;
	@push self;
	if (parameter) self = parameter;
	rv = FollowRulebook(rulebook, parameter, true);
	@pull self;
	if (rv) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Carrying Out Activities
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CarryOutActivity A o rv;
	BeginActivity(A, o);
	rv = ForActivity(A, o);
	EndActivity(A, o);
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Begin
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BeginActivity A o x;
	if (activities_sp == MAX_NESTED_ACTIVITIES) return RunTimeProblem(RTP_TOOMANYACTS);
	activity_parameters_stack-->activities_sp = o;
	activities_stack-->(activities_sp++) = A;
	FixInhibitFlag();
	MStack_CreateAVVars(A);
	if (Activity_atb_rulebooks->A) { x = action; action = action_to_be; }
	o = ProcessActivityRulebook(Activity_before_rulebooks-->A, o);
	if (Activity_atb_rulebooks->A) action = x;
	return o;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: For
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ForActivity A o x;
	if (Activity_atb_rulebooks->A) { x = action; action = action_to_be; }
	o = ProcessActivityRulebook(Activity_for_rulebooks-->A, o);
	if (Activity_atb_rulebooks->A) action = x;
	return o;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: End
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ EndActivity A o rv x;
	if ((activities_sp > 0) && (activities_stack-->(activities_sp-1) == A)) {
		if (Activity_atb_rulebooks->A) { x = action; action = action_to_be; }
		rv = ProcessActivityRulebook(Activity_after_rulebooks-->A, o);
		if (Activity_atb_rulebooks->A) action = x;
		activities_sp--; FixInhibitFlag();
		MStack_DestroyAVVars(A);
		return rv;
	}
	return RunTimeProblem(RTP_CANTABANDON);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Abandon
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ AbandonActivity A o;
	if ((activities_sp > 0) && (activities_stack-->(activities_sp-1) == A)) {
		activities_sp--; FixInhibitFlag();
		MStack_DestroyAVVars(A);
		return;
	}
	return RunTimeProblem(RTP_CANTEND);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Figures.i6t: Resource Usage
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array ResourceUsageFlags ->
	(1+0+5);


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Figures.i6t: Figures
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DisplayFigure resource_ID one_time;
	if ((one_time) && (ResourceUsageFlags->resource_ID)) return;
	ResourceUsageFlags->resource_ID = true;
	print "^"; VM_Picture(resource_ID); print "^";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Figures.i6t: Sound Effects
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PlaySound resource_ID one_time;
	if (resource_ID == 0) return; ! The "silence" non-sound effect
	if ((one_time) && (ResourceUsageFlags->resource_ID)) return;
	ResourceUsageFlags->resource_ID = true;
	VM_SoundEffect(resource_ID);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Language
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF PLUGIN_FILES;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Structure
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant AUXF_MAGIC = 0; ! First word holds a safety constant
Constant AUXF_MAGIC_VALUE = 16339; ! Should be first word of any valid file structure
Constant AUXF_STATUS = 1; ! One of the following:
	Constant AUXF_STATUS_IS_CLOSED = 1; ! Currently closed, or perhaps doesn't exist
	Constant AUXF_STATUS_IS_OPEN_FOR_READ = 2;
	Constant AUXF_STATUS_IS_OPEN_FOR_WRITE = 3;
	Constant AUXF_STATUS_IS_OPEN_FOR_APPEND = 4;
Constant AUXF_BINARY = 2; ! False for text files (I7 default), true for binary
Constant AUXF_STREAM = 3; ! Stream for an open file (meaningless otherwise)
Constant AUXF_FILENAME = 4; ! Packed address of constant string
Constant AUXF_IFID_OF_OWNER = 5; ! UUID_ARRAY if owned by this project, or
	! string array of IFID of owner wrapped in //...//, or NULL to leave open


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Instances
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant NO_EXTERNAL_FILES 0;
Array TableOfExternalFiles --> 0 0;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Errors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_Error extf err_text  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES)) {
		print "^*** Error on unknown file: ", (string) err_text, " ***^";
	} else {
		struc = TableOfExternalFiles-->extf;
		print "^*** Error on file '",
			(string) struc-->AUXF_FILENAME, "': ",
			(string) err_text, " ***^";
	}
	RunTimeProblem(RTP_FILEIOERROR);
	return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Glulx Material
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF TARGET_GLULX;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Existence
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_Exists extf  fref struc rv usage;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES)) rfalse;
	struc = TableOfExternalFiles-->extf;
	if ((struc == 0) || (struc-->AUXF_MAGIC ~= AUXF_MAGIC_VALUE)) rfalse;
	if (struc-->AUXF_BINARY) usage = fileusage_BinaryMode;
	else usage = fileusage_TextMode;
	fref = glk_fileref_create_by_name(fileusage_Data + usage,
		Glulx_ChangeAnyToCString(struc-->AUXF_FILENAME), 0);
	rv = glk_fileref_does_file_exist(fref);
	glk_fileref_destroy(fref);
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Readiness
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_Ready extf  struc fref usage str ch;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES)) rfalse;
	struc = TableOfExternalFiles-->extf;
	if ((struc == 0) || (struc-->AUXF_MAGIC ~= AUXF_MAGIC_VALUE)) rfalse;
	if (struc-->AUXF_BINARY) usage = fileusage_BinaryMode;
	else usage = fileusage_TextMode;
	fref = glk_fileref_create_by_name(fileusage_Data + usage,
		Glulx_ChangeAnyToCString(struc-->AUXF_FILENAME), 0);
	if (glk_fileref_does_file_exist(fref) == false) {
		glk_fileref_destroy(fref);
		rfalse;
	}
	str = glk_stream_open_file(fref, filemode_Read, 0);
	ch = glk_get_char_stream(str);
	glk_stream_close(str, 0);
	glk_fileref_destroy(fref);
	if (ch ~= '*') rfalse;
	rtrue;
];

[ FileIO_MarkReady extf readiness  struc fref str ch usage;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to open a non-file");
	struc = TableOfExternalFiles-->extf;
	if ((struc == 0) || (struc-->AUXF_MAGIC ~= AUXF_MAGIC_VALUE)) rfalse;
	if (struc-->AUXF_BINARY) usage = fileusage_BinaryMode;
	else usage = fileusage_TextMode;
	fref = glk_fileref_create_by_name(fileusage_Data + usage,
		Glulx_ChangeAnyToCString(struc-->AUXF_FILENAME), 0);
	if (glk_fileref_does_file_exist(fref) == false) {
		glk_fileref_destroy(fref);
		return FileIO_Error(extf, "only existing files can be marked");
	}
	if (struc-->AUXF_STATUS ~= AUXF_STATUS_IS_CLOSED) {
		glk_fileref_destroy(fref);
		return FileIO_Error(extf, "only closed files can be marked");
	}
	str = glk_stream_open_file(fref, filemode_ReadWrite, 0);
	glk_stream_set_position(str, 0, 0); ! seek start
	if (readiness) ch = '*'; else ch = '-';
	glk_put_char_stream(str, ch); ! mark as complete
	glk_stream_close(str, 0);
	glk_fileref_destroy(fref);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Open File
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_Open extf write_flag append_flag
	struc fref str mode ix ch not_this_ifid owner force_header usage;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to open a non-file");
	struc = TableOfExternalFiles-->extf;
	if ((struc == 0) || (struc-->AUXF_MAGIC ~= AUXF_MAGIC_VALUE)) rfalse;
	if (struc-->AUXF_STATUS ~= AUXF_STATUS_IS_CLOSED)
		return FileIO_Error(extf, "tried to open a file already open");
	if (struc-->AUXF_BINARY) usage = fileusage_BinaryMode;
	else usage = fileusage_TextMode;
	fref = glk_fileref_create_by_name(fileusage_Data + usage,
		Glulx_ChangeAnyToCString(struc-->AUXF_FILENAME), 0);
	if (write_flag) {
		if (append_flag) {
			mode = filemode_WriteAppend;
			if (glk_fileref_does_file_exist(fref) == false)
				force_header = true;
		}
		else mode = filemode_Write;
	} else {
		mode = filemode_Read;
		if (glk_fileref_does_file_exist(fref) == false) {
			glk_fileref_destroy(fref);
			return FileIO_Error(extf, "tried to open a file which does not exist");
		}
	}
	str = glk_stream_open_file(fref, mode, 0);
	glk_fileref_destroy(fref);
	if (str == 0) return FileIO_Error(extf, "tried to open a file but failed");
	struc-->AUXF_STREAM = str;
	if (write_flag) {
		if (append_flag)
			struc-->AUXF_STATUS = AUXF_STATUS_IS_OPEN_FOR_APPEND;
		else
			struc-->AUXF_STATUS = AUXF_STATUS_IS_OPEN_FOR_WRITE;
		glk_stream_set_current(str);
		if ((append_flag == FALSE) || (force_header)) {
			print "- ";
			for (ix=6: ix <= UUID_ARRAY->0: ix++) print (char) UUID_ARRAY->ix;
			print " ", (string) struc-->AUXF_FILENAME, "^";
		}
	} else {
		struc-->AUXF_STATUS = AUXF_STATUS_IS_OPEN_FOR_READ;
		ch = FileIO_GetC(extf);
		if (ch ~= '-' or '*') { jump BadFile; }
		if (ch == '-')
			return FileIO_Error(extf, "tried to open a file which was incomplete");
		ch = FileIO_GetC(extf);
		if (ch ~= ' ') { jump BadFile; }
		ch = FileIO_GetC(extf);
		if (ch ~= '/') { jump BadFile; }
		ch = FileIO_GetC(extf);
		if (ch ~= '/') { jump BadFile; }
		owner = struc-->AUXF_IFID_OF_OWNER;
		ix = 3;
		if (owner == UUID_ARRAY) ix = 8;
		if (owner ~= NULL) {
			for (: ix <= owner->0: ix++) {
				ch = FileIO_GetC(extf);
				if (ch == -1) { jump BadFile; }
				if (ch ~= owner->ix) not_this_ifid = true;
				if (ch == ' ') break;
			}
			if (not_this_ifid == false) {
				ch = FileIO_GetC(extf);
				if (ch ~= ' ') { jump BadFile; }
			}
		}
		while (ch ~= -1) {
			ch = FileIO_GetC(extf);
			if (ch == 10 or 13) break;
		}
		if (not_this_ifid) {
			struc-->AUXF_STATUS = AUXF_STATUS_IS_CLOSED;
			glk_stream_close(str, 0);
			return FileIO_Error(extf,
				"tried to open a file owned by another project");
		}
	}
	return struc-->AUXF_STREAM;
	.BadFile;
	struc-->AUXF_STATUS = AUXF_STATUS_IS_CLOSED;
	glk_stream_close(str, 0);
	return FileIO_Error(extf, "tried to open a file which seems to be malformed");
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Close File
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_Close extf  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to open a non-file");
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_STATUS ~=
		AUXF_STATUS_IS_OPEN_FOR_READ or
		AUXF_STATUS_IS_OPEN_FOR_WRITE or
		AUXF_STATUS_IS_OPEN_FOR_APPEND)
		return FileIO_Error(extf, "tried to close a file which is not open");
	if (struc-->AUXF_STATUS ==
		AUXF_STATUS_IS_OPEN_FOR_WRITE or
		AUXF_STATUS_IS_OPEN_FOR_APPEND) {
		glk_stream_set_position(struc-->AUXF_STREAM, 0, 0); ! seek start
		glk_put_char_stream(struc-->AUXF_STREAM, '*'); ! mark as complete
	}
	glk_stream_close(struc-->AUXF_STREAM, 0);
	struc-->AUXF_STATUS = AUXF_STATUS_IS_CLOSED;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Get Character
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_GetC extf  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES)) return -1;
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_STATUS ~= AUXF_STATUS_IS_OPEN_FOR_READ) return -1;
	return glk_get_char_stream(struc-->AUXF_STREAM);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Put Character
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_PutC extf char  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES)) return -1;
		return FileIO_Error(extf, "tried to write to a non-file");
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_STATUS ~=
		AUXF_STATUS_IS_OPEN_FOR_WRITE or
		AUXF_STATUS_IS_OPEN_FOR_APPEND)
		return FileIO_Error(extf,
			"tried to write to a file which is not open for writing");
	return glk_put_char_stream(struc-->AUXF_STREAM, char);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Print Line
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_PrintLine extf ch  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to write to a non-file");
	struc = TableOfExternalFiles-->extf;
	for (::) {
		ch = FileIO_GetC(extf);
		if (ch == -1) rfalse;
		if (ch == 10 or 13) { print "^"; rtrue; }
		print (char) ch;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Print Contents
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_PrintContents extf tab  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to access a non-file");
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_BINARY)
		return FileIO_Error(extf, "printing text will not work with binary files");
	if (FileIO_Open(extf, false) == 0) rfalse;
	while (FileIO_PrintLine(extf)) ;
	FileIO_Close(extf);
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Print Text
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_PutContents extf text append_flag  struc str ch oldstream;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to access a non-file");
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_BINARY)
		return FileIO_Error(extf, "writing text will not work with binary files");
	oldstream = glk_stream_get_current();
	str = FileIO_Open(extf, true, append_flag);
	if (str == 0) rfalse;
	@push say__p; @push say__pc;
	ClearParagraphing(19);
	TEXT_TY_Say(text);
	FileIO_Close(extf);
	if (oldstream) glk_stream_set_current(oldstream);
	@pull say__pc; @pull say__p;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Serialising Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_PutTable extf tab rv  struc oldstream;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to write table to a non-file");
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_BINARY)
		return FileIO_Error(extf, "writing a table will not work with binary files");
	oldstream = glk_stream_get_current();
	if (FileIO_Open(extf, true) == 0) rfalse;
	rv = TablePrint(tab);
	FileIO_Close(extf);
	if (oldstream) glk_stream_set_current(oldstream);
	if (rv) return RunTimeProblem(RTP_TABLE_CANTSAVE, tab);
	rtrue;
];

[ FileIO_GetTable extf tab  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to read table from a non-file");
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_BINARY)
		return FileIO_Error(extf, "reading a table will not work with binary files");
	if (FileIO_Open(extf, false) == 0) rfalse;
	TableRead(tab, extf);
	FileIO_Close(extf);
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Z-Machine Stubs
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFNOT; ! TARGET_GLULX
[ FileIO_Exists extf; rfalse; ];
[ FileIO_Ready extf; rfalse; ];
[ FileIO_GetC extf; return -1; ];
[ FileIO_PutTable extf tab;
	return FileIO_Error(extf, "external files can only be used under Glulx");
];
[ FileIO_MarkReady extf status; FileIO_PutTable(extf); ];
[ FileIO_GetTable extf tab; FileIO_PutTable(extf); ];
[ FileIO_PrintContents extf; FileIO_PutTable(extf); ];
[ FileIO_PutContents extf; FileIO_PutTable(extf); ];
#ENDIF; ! TARGET_GLULX


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Back To Core
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFNOT; ! PLUGIN_FILES
[ FileIO_GetC extf; return -1; ];
#ENDIF; ! PLUGIN_FILES


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: The Memory Stack
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant MAX_MSTACK_FRAME = 2 + 6;
Constant MSTACK_CAPACITY = 20;
Constant MSTACK_SIZE = MSTACK_CAPACITY*MAX_MSTACK_FRAME;

Array MStack --> MSTACK_SIZE;
Global MStack_Top = 0; ! Topmost word currently used


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Create Frame
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Mstack_Create_Frame creator id extent;
	if (creator == 0) rfalse;
	extent = creator.call(MStack_Top+2, 1);
	if (extent == 0) rfalse;
	if (MStack_Top + MAX_MSTACK_FRAME >= MSTACK_SIZE + 2) {
		RunTimeProblem(RTP_MSTACKMEMORY, MSTACK_SIZE);
		Mstack_Backtrace();
		rfalse;
	}
	MStack_Top++;
	MStack-->MStack_Top = id;
	MStack_Top++;
	MStack_Top = MStack_Top + extent;
	MStack-->MStack_Top = -(extent+2);
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Destroy Frame
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Mstack_Destroy_Frame creator id pos;
	pos = Mstack_Seek_Frame(id);
	if (pos == 0) rfalse; ! Not found: do nothing
	MStack_Top = pos - 2; ! Clear mstack down to just below this frame
	if (creator) creator.call(pos, -1);
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Seek Frame
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global MStack_Frame_Extent = 0;

[ Mstack_Seek_Frame id pos;
	pos = MStack_Top;
	while ((pos > 0) && (MStack-->pos ~= 0)) {
		MStack_Frame_Extent = MStack-->pos;
		pos = pos + MStack_Frame_Extent;
		MStack_Frame_Extent = (-2) - MStack_Frame_Extent;
		if (MStack-->(pos+1) == id) return pos+2;
	}
	MStack_Frame_Extent = 0;
	return 0; ! Not found
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Backtrace
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Mstack_Backtrace pos k;
	print "Mstack backtrace: size ", MStack_Top+1, " words^";
	pos = MStack_Top;
	while (MStack-->pos ~= 0) {
		MStack_Frame_Extent = MStack-->pos;
		pos = pos + MStack_Frame_Extent;
		MStack_Frame_Extent = (-2) - MStack_Frame_Extent;
		print "Block at ", pos+2,
			" owner ID ", MStack-->(pos+1), " size ", MStack_Frame_Extent, "^";
		for (k=0: k<MStack_Frame_Extent: k++) print MStack-->(pos+2+k), " ";
		print "^";
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Access to Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MstVO id off pos;
	pos = Mstack_Seek_Frame(id);
	if (pos == 0) {
		print "Variable unavailable for this action, activity or rulebook: ",
			"internal ID number ",
			id, "/", off, "^";
		rfalse;
	}
	if ((off<0) || (off >= MStack_Frame_Extent)) {
		print "Variable stack offset wrong: ", id, "/", off, " at ", pos, "^";
		rfalse;
	}
	return pos+off;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Access to Nonexistent Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MstVON id off pos;
	pos = Mstack_Seek_Frame(id);
	if (pos == 0) {
		return 0; ! word position 0 on the M-stack
	}
	if ((off<0) || (off >= MStack_Frame_Extent)) {
		print "Variable stack offset wrong: ", id, "/", off, " at ", pos, "^";
		rfalse;
	}
	return pos+off;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Rulebook Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFNDEF MEMORY_ECONOMY;
Array rulebook_var_creators --> 0 0 0 0 0 0 0 0 0 RBSTVC_9 0 RBSTVC_11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
#endif;
[  RBSTVC_9 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = selfobj; pos++;
    } else {
        pos++;
    }
    return 1;
];
[  RBSTVC_11 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = false; pos++;
        MStack-->pos = false; pos++;
        MStack-->pos = 0; pos++;
        MStack-->pos = 0; pos++;
        MStack-->pos = 0; pos++;
        MStack-->pos = false; pos++;
    } else {
        pos++;
        pos++;
        pos++;
        pos++;
        pos++;
        pos++;
    }
    return 6;
];


[ MStack_CreateRBVars rb cr;
#ifdef MEMORY_ECONOMY;
switch (rb) {
9: cr = RBSTVC_9;
11: cr = RBSTVC_11;
}
#IFNOT;
cr = rulebook_var_creators-->rb;
#endif;

	if (cr == 0) return;
	Mstack_Create_Frame(cr, rb);
];

[ MStack_DestroyRBVars rb cr;
#ifdef MEMORY_ECONOMY;
switch (rb) {
9: cr = RBSTVC_9;
11: cr = RBSTVC_11;
}
#IFNOT;
cr = rulebook_var_creators-->rb;
#endif;

	if (cr == 0) return;
	Mstack_Destroy_Frame(cr, rb);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Activity Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array activity_var_creators --> 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;


[ MStack_CreateAVVars av cr;
	cr = activity_var_creators-->av;
	if (cr == 0) return;
	Mstack_Create_Frame(cr, av + 10000);
];

[ MStack_DestroyAVVars av cr;
	cr = activity_var_creators-->av;
	if (cr == 0) return;
	Mstack_Destroy_Frame(cr, av + 10000);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Perform Undo
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Perform_Undo;
	#ifdef PREVENT_UNDO; IMMEDIATELY_UNDO_RM('A'); new_line; return; #endif;
	if (IterationsOfTurnSequence == 0) { IMMEDIATELY_UNDO_RM('B'); new_line; return; }
	if (undo_flag == 0) { IMMEDIATELY_UNDO_RM('C'); new_line; return; }
	if (undo_flag == 1) { IMMEDIATELY_UNDO_RM('D'); new_line; return; }
	if (VM_Undo() == 0) { IMMEDIATELY_UNDO_RM('F'); new_line; }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Announce Score Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ANNOUNCE_SCORE_R;
	if (actor ~= player) rfalse;
	#Iftrue USE_SCORING == 0; ANNOUNCE_SCORE_RM('C'); new_line;
	#ifnot; ANNOUNCE_SCORE_RM('A'); PrintRank();
	#endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Switch Score Notification On Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SWITCH_SCORE_NOTIFY_ON_R;
	if (actor ~= player) rfalse;
	#Iftrue USE_SCORING == 0; ANNOUNCE_SCORE_R();
	#ifnot; notify_mode=1; #endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Standard Report Switching Score Notification On Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ REP_SWITCH_NOTIFY_ON_R;
	if (actor ~= player) rfalse;
	#Iftrue USE_SCORING ~= 0; REP_SWITCH_NOTIFY_ON_RM('A'); new_line; #endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Switch Score Notification Off Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SWITCH_SCORE_NOTIFY_OFF_R;
	if (actor ~= player) rfalse;
	#Iftrue USE_SCORING == 0; ANNOUNCE_SCORE_R();
	#ifnot; notify_mode=0; #endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Standard Report Switching Score Notification Off Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ REP_SWITCH_NOTIFY_OFF_R;
	if (actor ~= player) rfalse;
	#Iftrue USE_SCORING ~= 0; REP_SWITCH_NOTIFY_OFF_RM('A'); new_line; #endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Prefer Sometimes Abbreviated Room Descriptions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PREFER_SOMETIMES_ABBREVIATED_R;
	if (actor ~= player) rfalse;
	lookmode=1;
]; ! Brief


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Standard Report Prefer Sometimes Abbreviated Room Descriptions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ REP_PREFER_SOMETIMES_ABBR_R;
	if (actor ~= player) rfalse;
	print (TEXT_TY_Say) Story; REP_PREFER_SOMETIMES_ABBR_RM('A'); new_line;
]; ! Brief


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Prefer Unabbreviated Room Descriptions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PREFER_UNABBREVIATED_R;
	if (actor ~= player) rfalse;
	lookmode=2;
]; ! Verbose


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Standard Report Prefer Unabbreviated Room Descriptions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ REP_PREFER_UNABBREVIATED_R;
	if (actor ~= player) rfalse;
	print (TEXT_TY_Say) Story; REP_PREFER_UNABBREVIATED_RM('A'); new_line;
]; ! Verbose


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Prefer Abbreviated Room Descriptions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PREFER_ABBREVIATED_R;
	if (actor ~= player) rfalse;
	lookmode=3;
]; ! Superbrief


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Standard Report Prefer Abbreviated Room Descriptions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ REP_PREFER_ABBREVIATED_R;
	if (actor ~= player) rfalse;
	print (TEXT_TY_Say) Story; REP_PREFER_ABBREVIATED_RM('A'); new_line;
]; ! Superbrief


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Announce Pronoun Meanings Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ANNOUNCE_PRONOUN_MEANINGS_R x y c d;
	if (actor ~= player) rfalse;
	ANNOUNCE_PRONOUN_MEANINGS_RM('A');

	c = (LanguagePronouns-->0)/3;
	if (player ~= selfobj) c++;

	if (c==0) { ANNOUNCE_PRONOUN_MEANINGS_RM('D'); rtrue; }

	for (x = 1, d = 0 : x <= LanguagePronouns-->0: x = x+3) {
		print "~", (address) LanguagePronouns-->x, "~ ";
		y = LanguagePronouns-->(x+2);
		if (y == NULL) ANNOUNCE_PRONOUN_MEANINGS_RM('C');
		else { ANNOUNCE_PRONOUN_MEANINGS_RM('B'); print (the) y; }
		d++;
		if (d < c-1) print ", ";
		if (d == c-1) {
			#ifdef SERIAL_COMMA; print ","; #endif;
			LIST_WRITER_INTERNAL_RM('C');
		}
	}
	if (player ~= selfobj) {
		print "~", (address) ME1__WD, "~ "; ANNOUNCE_PRONOUN_MEANINGS_RM('B');
		c = player; player = selfobj;
		print (the) c; player = c;
	}
	".";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Paragraph Control
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: State
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

!Constant TRACE_I7_SPACING;

[ ClearParagraphing r;
	say__p = 0; say__pc = 0;
];

[ DivideParagraphPoint;
	#ifdef TRACE_I7_SPACING; print "[DPP", say__p, say__pc, "]"; #endif;
	if (say__p) {
		new_line; say__p = 0; say__pc = say__pc | PARA_COMPLETED;
		say__pc_save = true;
		if (say__pc & PARA_PROMPTSKIP) say__pc = say__pc - PARA_PROMPTSKIP;
		if (say__pc & PARA_SUPPRESSPROMPTSKIP) say__pc = say__pc - PARA_SUPPRESSPROMPTSKIP;
	}
	#ifdef TRACE_I7_SPACING; print "[-->", say__p, say__pc, "]"; #endif;
	say__pc = say__pc | PARA_CONTENTEXPECTED;
	say__pc_save = (say__pc & PARA_COMPLETED);
];

[ AdjustParagraphPoint;
	#ifdef TRACE_I7_SPACING; print "[APP ", say__p, " ", say__pc, " ", say__pc_save, "]^"; #endif;
	if (say__pc_save) say__pc = (say__pc | PARA_COMPLETED);
];

[ ParaContent;
	if (say__pc & PARA_CONTENTEXPECTED) {
		say__pc = say__pc - PARA_CONTENTEXPECTED;
		say__p = 1;
	}
];

[ GoingLookBreak;
	if (say__pc & PARA_COMPLETED == 0) new_line;
	ClearParagraphing(10);
];

[ CommandClarificationBreak;
	new_line;
	ClearParagraphing(11);
];

[ RunParagraphOn;
	#ifdef TRACE_I7_SPACING; print "[RPO", say__p, say__pc, "]"; #endif;
	say__p = 0;
	say__pc = say__pc | PARA_PROMPTSKIP;
	say__pc = say__pc | PARA_SUPPRESSPROMPTSKIP;
];

[ SpecialLookSpacingBreak;
	#ifdef TRACE_I7_SPACING; print "[SLS", say__p, say__pc, "]"; #endif;
	say__p = 0;
	say__pc = say__pc | PARA_PROMPTSKIP;
];

[ EnsureBreakBeforePrompt;
	if ((say__p) ||
		((say__pc & PARA_PROMPTSKIP) && ((say__pc & PARA_SUPPRESSPROMPTSKIP)==0)))
		new_line;
	ClearParagraphing(12);
];

[ PrintSingleParagraph matter;
	say__p = 1;
	say__pc = say__pc | PARA_NORULEBOOKBREAKS;
	TEXT_TY_Say(matter);
	DivideParagraphPoint(13);
	say__pc = 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Say Number
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STextSubstitution;
	if (say__n ~= 1) print "s";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Prompt
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintPrompt i;
	RunTimeProblemShow();
	ClearRTP();
	style roman;
	EnsureBreakBeforePrompt();
	TEXT_TY_Say( (Global_Vars-->1) );
	ClearBoxedText();
	ClearParagraphing(14);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Boxed Quotations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global pending_boxed_quotation; ! a routine to overlay the quotation on screen

[ DisplayBoxedQuotation Q;
	pending_boxed_quotation = Q;
];

[ ClearBoxedText i;
	if (pending_boxed_quotation) {
		for (i=0: Runtime_Quotations_Displayed-->i: i++)
			if (Runtime_Quotations_Displayed-->i == pending_boxed_quotation) {
				pending_boxed_quotation = 0;
				return;
			}
		Runtime_Quotations_Displayed-->i = pending_boxed_quotation;

		ClearParagraphing(15);
		pending_boxed_quotation();
		ClearParagraphing(16);

		pending_boxed_quotation = 0;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Score Notification
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NotifyTheScore d;
#Iftrue USE_SCORING ~= 0;
	if (notify_mode == 1) {
		DivideParagraphPoint();
		VM_Style(NOTE_VMSTY);
		d = score-last_score;
		if (d > 0) { ANNOUNCE_SCORE_RM('D', d); }
		else if (d < 0) { ANNOUNCE_SCORE_RM('E', -d); }
		new_line;
		VM_Style(NORMAL_VMSTY);
	}
#Endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Status Line
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef TARGET_ZCODE;
#Iftrue (#version_number == 6);
[ DrawStatusLine; Z6_DrawStatusLine(); ];
#Endif;
#Endif;

#Ifndef DrawStatusLine;
[ DrawStatusLine width posb;
	@push say__p; @push say__pc;
	BeginActivity(CONSTRUCTING_STATUS_LINE_ACT);
	VM_StatusLineHeight(1); VM_MoveCursorInStatusLine(1, 1); 
	if (statuswin_current) {
		width = VM_ScreenWidth(); posb = width-15;
		spaces width;
		ClearParagraphing(17);
		if (ForActivity(CONSTRUCTING_STATUS_LINE_ACT) == false) {
			VM_MoveCursorInStatusLine(1, 2);
			TEXT_TY_Say(left_hand_status_line);
			VM_MoveCursorInStatusLine(1, posb);
			TEXT_TY_Say(right_hand_status_line);
		}
		VM_MoveCursorInStatusLine(1, 1); VM_MainWindow();
	}
	ClearParagraphing(18);
	EndActivity(CONSTRUCTING_STATUS_LINE_ACT);
	@pull say__pc; @pull say__p;
];
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Status Line Utilities
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array T_SL_Score_Moves --> CONSTANT_PACKED_TEXT_STORAGE SL_Score_Moves;

[ SL_Score_Moves;
	if (not_yet_in_play) return;
	#Iftrue USE_SCORING > 0; print sline1, "/", sline2; #endif;
];

Array T_SL_Location --> CONSTANT_PACKED_TEXT_STORAGE SL_Location;

[ SL_Location even_before;
	if ((not_yet_in_play) && (even_before == false)) return;
	if (location == thedark) {
		BeginActivity(PRINTING_NAME_OF_DARK_ROOM_ACT);
		if (ForActivity(PRINTING_NAME_OF_DARK_ROOM_ACT) == false)
 			DARKNESS_NAME_INTERNAL_RM('A');
		EndActivity(PRINTING_NAME_OF_DARK_ROOM_ACT);
	} else {
		FindVisibilityLevels();
		if (visibility_ceiling == location) print (name) location;
		else print (The) visibility_ceiling;
	}
];

[ DARKNESS_NAME_INTERNAL_R; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Banner
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Banner;
   BeginActivity(PRINTING_BANNER_TEXT_ACT);
   if (ForActivity(PRINTING_BANNER_TEXT_ACT) == false) {
	   	VM_Style(HEADER_VMSTY);
		TEXT_TY_Say(Story);
		VM_Style(NORMAL_VMSTY);
		new_line;
		TEXT_TY_Say(Headline);
		#ifdef Story_Author;
		print " by "; TEXT_TY_Say(Story_Author);
		#endif; ! Story_Author
		new_line;
		VM_Describe_Release();
		print " / Inform 7 build ", (PrintI6Text) NI_BUILD_COUNT, " ";
		print "(I6/v"; inversion;
		print " lib ", (PrintI6Text) LibRelease, ") ";
		#Ifdef STRICT_MODE;
		print "S";
		#Endif; ! STRICT_MODE
		#Ifdef DEBUG;
		print "D";
		#Endif; ! DEBUG
		new_line;
    }
    EndActivity(PRINTING_BANNER_TEXT_ACT);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Print Decimal Number
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DecimalNumber num; print num; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Print English Number
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ EnglishNumber n; LanguageNumber(n); ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Print Text
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintI6Text x;
	if (x ofclass String) print (string) x;
	if (x ofclass Routine) return (x)();
	if (x == EMPTY_TEXT_PACKED) rfalse;
	rtrue;
];
[ I7_String x; TEXT_TY_Say(x); ]; ! An alternative name now used only by extensions


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Print Or Run
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintOrRun obj prop no_break  pv st routine_return_value;
	@push self; self = obj;
	if (prop == 0) {
		print (name) prop; routine_return_value = true;
	} else {
		routine_return_value = TEXT_TY_Say(obj.prop);
	}
	@pull self;
	if (routine_return_value) {
		say__p = 1;
		if (no_break == false) {
			new_line;
			DivideParagraphPoint();
		}
	}

	return routine_return_value;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Short Name Storage
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array StorageForShortName buffer 250;

[ CPrintOrRun obj prop  v length i;
    if ((obj ofclass String or Routine) || (prop == 0))
        VM_PrintToBuffer (StorageForShortName, 160, obj);
    else {
    	if (obj.prop == NULL) rfalse;
        if (metaclass(obj.prop) == Routine or String)
            VM_PrintToBuffer(StorageForShortName, 160, obj, prop);
        else return RunTimeError(2, obj, prop);
	}

    length = StorageForShortName-->0;

    StorageForShortName->WORDSIZE = VM_LowerToUpperCase(StorageForShortName->WORDSIZE);
    for (i=WORDSIZE: i<length+WORDSIZE: i++) print (char) StorageForShortName->i;
    if (i>WORDSIZE) say__p = 1;

    return;
];

[ Cap str nocaps;
    if (nocaps) print (string) str;
    else CPrintOrRun(str, 0);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Object Names I
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PSN__ o;
    if (o == 0) { LIST_WRITER_INTERNAL_RM('Y'); rtrue; }
    switch (metaclass(o)) {
		Routine:  print "<routine ", o, ">"; rtrue;
		String:   print "<string ~", (string) o, "~>"; rtrue;
		nothing:  print "<illegal object number ", o, ">"; rtrue;
    }
    RegardingSingleObject(o);
    CarryOutActivity(PRINTING_THE_NAME_ACT, o);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Standard Name Printing Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global caps_mode = false;

[ STANDARD_NAME_PRINTING_R obj;
	obj = parameter_value;
    if (obj == 0) {
    	LIST_WRITER_INTERNAL_RM('Y'); return;
    }
    switch (metaclass(obj)) {
		Routine:  print "<routine ", obj, ">"; return;
		String:   print "<string ~", (string) obj, "~>"; return;
		nothing:  print "<illegal object number ", obj, ">"; return;
    }
    if (obj == player) { 
   	    if (indef_mode == NULL && caps_mode) PRINT_PROTAGONIST_INTERNAL_RM('A');
   	    else PRINT_PROTAGONIST_INTERNAL_RM('B');
   	    return;
   	}
    #Ifdef LanguagePrintShortName;
    if (LanguagePrintShortName(obj)) return;
    #Endif; ! LanguagePrintShortName
    if (indef_mode && obj.&short_name_indef ~= 0 &&
    	PrintOrRun(obj, short_name_indef, true) ~= 0) return;
    if (caps_mode &&
    	obj.&cap_short_name ~= 0 && PrintOrRun(obj, cap_short_name, true) ~= 0) {
    	caps_mode = false;
    	return;
    }
    if (obj.&short_name ~= 0 && PrintOrRun(obj, short_name, true) ~= 0) return;
    print (object) obj;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Internal Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PRINT_PROTAGONIST_INTERNAL_R; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Object Names II
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global short_name_case;

[ PrefaceByArticle obj acode pluralise capitalise  i artform findout artval;
    if (obj provides articles) {
        artval=(obj.&articles)-->(acode+short_name_case*LanguageCases);
        if (capitalise)
            print (Cap) artval, " ";
        else
            print (string) artval, " ";
        if (pluralise) return;
        print (PSN__) obj; return;
    }

    i = GetGNAOfObject(obj);
    if (pluralise) {
        if (i < 3 || (i >= 6 && i < 9)) i = i + 3;
    }
    i = LanguageGNAsToArticles-->i;

    artform = LanguageArticles
        + 3*WORDSIZE*LanguageContractionForms*(short_name_case + i*LanguageCases);

    #Iftrue (LanguageContractionForms == 2);
    if (artform-->acode ~= artform-->(acode+3)) findout = true;
    #Endif; ! LanguageContractionForms
    #Iftrue (LanguageContractionForms == 3);
    if (artform-->acode ~= artform-->(acode+3)) findout = true;
    if (artform-->(acode+3) ~= artform-->(acode+6)) findout = true;
    #Endif; ! LanguageContractionForms
    #Iftrue (LanguageContractionForms == 4);
    if (artform-->acode ~= artform-->(acode+3)) findout = true;
    if (artform-->(acode+3) ~= artform-->(acode+6)) findout = true;
    if (artform-->(acode+6) ~= artform-->(acode+9)) findout = true;
    #Endif; ! LanguageContractionForms
    #Iftrue (LanguageContractionForms > 4);
    findout = true;
    #Endif; ! LanguageContractionForms

    #Ifdef TARGET_ZCODE;
    if (standard_interpreter ~= 0 && findout) {
        StorageForShortName-->0 = 160;
        @output_stream 3 StorageForShortName;
        if (pluralise) print (number) pluralise; else print (PSN__) obj;
        @output_stream -3;
        acode = acode + 3*LanguageContraction(StorageForShortName + 2);
    }
    #Ifnot; ! TARGET_GLULX
    if (findout) {
        if (pluralise)
            Glulx_PrintAnyToArray(StorageForShortName, 160, EnglishNumber, pluralise);
        else
            Glulx_PrintAnyToArray(StorageForShortName, 160, PSN__, obj);
        acode = acode + 3*LanguageContraction(StorageForShortName);
    }
    #Endif; ! TARGET_

    Cap (artform-->acode, ~~capitalise); ! print article
    if (pluralise) return;
    print (PSN__) obj;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Object Names III
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IndefArt obj i;
	if (obj == 0) { LIST_WRITER_INTERNAL_RM('Y'); rtrue; }
    i = indef_mode; indef_mode = true;
    if (obj has proper) { indef_mode = NULL; print (PSN__) obj; indef_mode = i; return; }
    if ((obj provides article) && (TEXT_TY_Compare(obj.article, EMPTY_TEXT_VALUE) ~= 0)) {
        PrintOrRun(obj, article, true); print " ", (PSN__) obj; indef_mode = i;
        return;
    }
    PrefaceByArticle(obj, 2); indef_mode = i;
];

[ CIndefArt obj i;
	if (obj == 0) { LIST_WRITER_INTERNAL_RM('X'); rtrue; }
    i = indef_mode; indef_mode = true;
    if (obj has proper) {
    	indef_mode = NULL;
		caps_mode = true;
    	print (PSN__) obj;
    	indef_mode = i;
    	caps_mode = false;
    	return;
    }
    if ((obj provides article) && (TEXT_TY_Compare(obj.article, EMPTY_TEXT_VALUE) ~= 0)) {
        TEXT_TY_Say_Capitalised(obj.article); print " ", (PSN__) obj; indef_mode = i;
        return;
    }
    PrefaceByArticle(obj, 2, 0, 1); indef_mode = i;
];

[ DefArt obj i;
    i = indef_mode; indef_mode = false;
    if ((~~obj ofclass Object) || obj has proper) {
        indef_mode = NULL; print (PSN__) obj; indef_mode = i;
        return;
    }
    PrefaceByArticle(obj, 1); indef_mode = i;
];

[ CDefArt obj i;
    i = indef_mode; indef_mode = false;
    if ((obj ofclass Object) && (obj has proper || obj == player)) {
    	indef_mode = NULL;
    	caps_mode = true;
    	print (PSN__) obj;
    	indef_mode = i;
    	caps_mode = false;
    	return;
    }
    if ((~~obj ofclass Object) || obj has proper) {
        indef_mode = NULL; print (PSN__) obj; indef_mode = i;
        return;
    }
    PrefaceByArticle(obj, 0); indef_mode = i;
];

[ PrintShortName obj i;
    i = indef_mode; indef_mode = NULL;
    PSN__(obj); indef_mode = i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Say One Of
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ I7_SOO_PAR oldval count; if (count <= 1) return count; return random(count); ];
[ I7_SOO_RAN oldval count v; if (count <= 1) return count;
	v = oldval; while (v == oldval) v = random(count); return v; ];
[ I7_SOO_STI oldval count v; if (oldval) return oldval; return I7_SOO_PAR(oldval, count); ];
[ I7_SOO_CYC oldval count; oldval++; if (oldval > count) oldval = 1; return oldval; ];
[ I7_SOO_STOP oldval count; oldval++; if (oldval > count) oldval = count; return oldval; ];
[ I7_SOO_TAP oldval count tn rn c; if (count <= 1) return count; tn = count*(count+1)/2;
	rn = random(tn); for (c=1:c<=count:c++) { rn = rn - c; if (rn<=0) return (count-c+1); } ];
[ I7_SOO_TRAN oldval count; if (oldval<count) return oldval+1; 
	return count + 1 + I7_SOO_RAN(oldval%(count+1), count); ];
[ I7_SOO_TPAR oldval count; if (oldval<count) return oldval+1; 
	return count + 1 + I7_SOO_PAR(oldval%(count+1), count); ];

Array I7_SOO_SHUF->32;

[ I7_SOO_SHU oldval count sd ct v i j s ssd scope cc base;
	base = count+1;
	v = oldval%base; oldval = oldval/base; ct = oldval%base; sd = oldval/base;
	if (count > 32) return I7_SOO_PAR(oldval, count);
	if (count <= 1) v = count;
	else {
		!print "^In v=", v, " ct=", ct, " sd=", sd, "^";
		cc = base*base;
		scope = (MAX_POSITIVE_NUMBER-1)/cc;
		!print "Scope = ", scope, "^";
		if (sd == 0) { sd = random(scope); ct=0; }
		for (i=0:i<count:i++) I7_SOO_SHUF->i = i;
		ssd = sd;
		for (i=0:i<count-1:i++) {
			j = (sd)%(count-i)+i; sd = (sd*31973)+17; if (sd<0) sd=-sd;
			s = I7_SOO_SHUF->j; I7_SOO_SHUF->j = I7_SOO_SHUF->i; I7_SOO_SHUF->i = s;
		}
		!for (i=0:i<count:i++) print I7_SOO_SHUF->i, " "; print "^";
		v = (I7_SOO_SHUF->ct)+1;
		ct++; if (ct >= count) { ct = 0; ssd = 0; }
	}
	!print "Out v=", v, " ct=", ct, " ssd=", sd, "^";
	!print "Return ", v + ct*base + ssd*base*base, "^";
	return v + ct*base + ssd*base*base;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Relation Records
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RR_NAME     		5;
Constant RR_PERMISSIONS		6;
Constant RR_STORAGE			7;
Constant RR_KIND			8;
Constant RR_HANDLER			9;
Constant RR_DESCRIPTION		10;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Valency Adjectives
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant VALENCY_MASK = RELS_EQUIVALENCE+RELS_SYMMETRIC+RELS_X_UNIQUE+RELS_Y_UNIQUE;
[ RELATION_TY_EquivalenceAdjective rel set  perms state handler;
	perms = RlnGetF(rel, RR_PERMISSIONS);
	if (perms & RELS_EQUIVALENCE) state = true;
	if (set < 0) return state;
	if ((set) && (state == false)) {
		perms = perms + RELS_EQUIVALENCE;
		if (perms & RELS_SYMMETRIC == 0) perms = perms + RELS_SYMMETRIC;
	}
	if ((set == false) && (state)) {
		perms = perms - RELS_EQUIVALENCE;
		if (perms & RELS_SYMMETRIC) perms = perms - RELS_SYMMETRIC;
	}
	RlnSetF(rel, RR_PERMISSIONS, perms);
	handler = RlnGetF(rel, RR_HANDLER);
	if (handler(rel, RELS_SET_VALENCY, perms & VALENCY_MASK) == 0)
		"*** Can't change this to an equivalence relation ***";		
];

[ RELATION_TY_SymmetricAdjective rel set  perms state handler;
	perms = RlnGetF(rel, RR_PERMISSIONS);
	if (perms & RELS_SYMMETRIC) state = true;
	if (set < 0) return state;
	if ((set) && (state == false)) perms = perms + RELS_SYMMETRIC;
	if ((set == false) && (state)) perms = perms - RELS_SYMMETRIC;
	RlnSetF(rel, RR_PERMISSIONS, perms);
	handler = RlnGetF(rel, RR_HANDLER);
	if (handler(rel, RELS_SET_VALENCY, perms & VALENCY_MASK) == 0)
		"*** Can't change this to a symmetric relation ***";		
];

[ RELATION_TY_OToOAdjective rel set  perms state handler i;
	perms = RlnGetF(rel, RR_PERMISSIONS);
	if (perms & (RELS_X_UNIQUE+RELS_Y_UNIQUE) == RELS_X_UNIQUE+RELS_Y_UNIQUE) state = true;
	if (set < 0) return state;
	if ((set) && (state == false)) {
		if (perms & RELS_X_UNIQUE == 0) perms = perms + RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE == 0) perms = perms + RELS_Y_UNIQUE;
		if (perms & RELS_EQUIVALENCE) perms = perms - RELS_EQUIVALENCE;
	}
	if ((set == false) && (state)) {
		if (perms & RELS_X_UNIQUE) perms = perms - RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE) perms = perms - RELS_Y_UNIQUE;
	}
	RlnSetF(rel, RR_PERMISSIONS, perms);
	handler = RlnGetF(rel, RR_HANDLER);
	if (handler(rel, RELS_SET_VALENCY, perms & VALENCY_MASK) == 0)
		"*** Can't change this to a one-to-one relation ***";		
];

[ RELATION_TY_OToVAdjective rel set  perms state handler;
	perms = RlnGetF(rel, RR_PERMISSIONS);
	if (perms & (RELS_X_UNIQUE+RELS_Y_UNIQUE) == RELS_X_UNIQUE) state = true;
	if (set < 0) return state;
	if ((set) && (state == false)) {
		if (perms & RELS_X_UNIQUE == 0) perms = perms + RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE) perms = perms - RELS_Y_UNIQUE;
		if (perms & RELS_SYMMETRIC) perms = perms - RELS_SYMMETRIC;
		if (perms & RELS_EQUIVALENCE) perms = perms - RELS_EQUIVALENCE;
	}
	if ((set == false) && (state)) {
		if (perms & RELS_X_UNIQUE) perms = perms - RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE) perms = perms - RELS_Y_UNIQUE;
	}
	RlnSetF(rel, RR_PERMISSIONS, perms);
	handler = RlnGetF(rel, RR_HANDLER);
	if (handler(rel, RELS_SET_VALENCY, perms & VALENCY_MASK) == 0)
		"*** Can't change this to a one-to-various relation ***";		
];

[ RELATION_TY_VToOAdjective rel set  perms state handler;
	perms = RlnGetF(rel, RR_PERMISSIONS);
	if (perms & (RELS_X_UNIQUE+RELS_Y_UNIQUE) == RELS_Y_UNIQUE) state = true;
	if (set < 0) return state;
	if ((set) && (state == false)) {
		if (perms & RELS_X_UNIQUE) perms = perms - RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE == 0) perms = perms + RELS_Y_UNIQUE;
		if (perms & RELS_SYMMETRIC) perms = perms - RELS_SYMMETRIC;
		if (perms & RELS_EQUIVALENCE) perms = perms - RELS_EQUIVALENCE;
	}
	if ((set == false) && (state)) {
		if (perms & RELS_X_UNIQUE) perms = perms - RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE) perms = perms - RELS_Y_UNIQUE;
	}
	RlnSetF(rel, RR_PERMISSIONS, perms);
	handler = RlnGetF(rel, RR_HANDLER);
	if (handler(rel, RELS_SET_VALENCY, perms & VALENCY_MASK) == 0)
		"*** Can't change this to a various-to-one relation ***";		
];

[ RELATION_TY_VToVAdjective rel set  perms state handler;
	perms = RlnGetF(rel, RR_PERMISSIONS);
	if (perms & (RELS_X_UNIQUE+RELS_Y_UNIQUE) == 0) state = true;
	if (set < 0) return state;
	if ((set) && (state == false)) {
		if (perms & RELS_X_UNIQUE) perms = perms - RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE) perms = perms - RELS_Y_UNIQUE;
	}
	if ((set == false) && (state)) {
		if (perms & RELS_X_UNIQUE == 0) perms = perms + RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE == 0) perms = perms + RELS_Y_UNIQUE;
	}
	RlnSetF(rel, RR_PERMISSIONS, perms);
	handler = RlnGetF(rel, RR_HANDLER);
	if (handler(rel, RELS_SET_VALENCY, perms & VALENCY_MASK) == 0)
		"*** Can't change this to a various-to-various relation ***";		
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: One To One Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_Now1to1 obj1 relation_property obj2 ol; ! Assert 1-1 true
	if (obj2) objectloop (ol provides relation_property)
		if (ol.relation_property == obj2) ol.relation_property = nothing;
	if (obj1) obj1.relation_property = obj2;
];

[ Relation_NowN1toV obj1 relation_property obj2; ! Assert 1-1 false
	if ((obj1) && (obj1.relation_property == obj2)) obj1.relation_property = nothing;
];

[ Relation_Now1to1V obj1 obj2 KOV relation_property ol N; ! Assert 1-1 true
	if (obj2) {
		N = KOVDomainSize(KOV);
		for (ol=1: ol<=N: ol++)
			if (GProperty(KOV, ol, relation_property) == obj2)
				WriteGProperty(KOV, ol, relation_property, 0);
	}
	if (obj1) WriteGProperty(KOV, obj1, relation_property, obj2);
];

[ Relation_NowN1toVV obj1 obj2 KOV relation_property; ! Assert 1-1 false
	if ((obj1) && (GProperty(KOV, obj1, relation_property) == obj2))
		WriteGProperty(KOV, obj1, relation_property, 0);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Symmetric One To One Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_NowS1to1 obj1 relation_property obj2; ! Assert symmetric 1-1 true
	if ((obj1 ofclass Object) && (obj1 provides relation_property) &&
		(obj2 ofclass Object) && (obj2 provides relation_property)) {
		if (obj1.relation_property) { (obj1.relation_property).relation_property = 0; }
		if (obj2.relation_property) { (obj2.relation_property).relation_property = 0; }
		obj1.relation_property = obj2; obj2.relation_property = obj1;
	}
];

[ Relation_NowSN1to1 obj1 relation_property obj2; ! Assert symmetric 1-1 false
	if ((obj1 ofclass Object) && (obj1 provides relation_property) &&
		(obj2 ofclass Object) && (obj2 provides relation_property) &&
		(obj1.relation_property == obj2)) {
		obj1.relation_property = 0; obj2.relation_property = 0;
	}
];

[ Relation_NowS1to1V obj1 obj2 KOV relation_property; ! Assert symmetric 1-1 true
	if (GProperty(KOV, obj1, relation_property))
		WriteGProperty(KOV, GProperty(KOV, obj1, relation_property), relation_property, 0);
	if (GProperty(KOV, obj2, relation_property)) 
		WriteGProperty(KOV, GProperty(KOV, obj2, relation_property), relation_property, 0);
	WriteGProperty(KOV, obj1, relation_property, obj2);
	WriteGProperty(KOV, obj2, relation_property, obj1);
];

[ Relation_NowSN1to1V obj1 obj2 KOV relation_property; ! Assert symmetric 1-1 false
	if (GProperty(KOV, obj1, relation_property) == obj2) {
		WriteGProperty(KOV, obj1, relation_property, 0);
		WriteGProperty(KOV, obj2, relation_property, 0);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Various To Various Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant VTOVS_LEFT_INDEX_PROP = 0;
Constant VTOVS_RIGHT_INDEX_PROP = 1;
Constant VTOVS_LEFT_DOMAIN_SIZE = 2;
Constant VTOVS_RIGHT_DOMAIN_SIZE = 3;
Constant VTOVS_LEFT_PRINTING_ROUTINE = 4;
Constant VTOVS_RIGHT_PRINTING_ROUTINE = 5;
Constant VTOVS_CACHE_BROKEN = 6;
Constant VTOVS_CACHE = 7;

[ Relation_NowVtoV obj1 relation obj2 sym pr pr2 i1 i2 vtov_structure;
	if (sym && (obj2 ~= obj1)) { Relation_NowVtoV(obj2, relation, obj1, false); }
	vtov_structure = RlnGetF(relation, RR_STORAGE);
	pr = vtov_structure-->VTOVS_LEFT_INDEX_PROP;
	pr2 = vtov_structure-->VTOVS_RIGHT_INDEX_PROP;
	vtov_structure-->VTOVS_CACHE_BROKEN = true; ! Mark any cache as broken
	if (pr) {
		if ((obj1 ofclass Object) && (obj1 provides pr)) i1 = obj1.pr;
		else return RunTimeProblem(RTP_IMPREL, obj1, relation);
	} else i1 = obj1-1;
	if (pr2) {
		if ((obj2 ofclass Object) && (obj2 provides pr2)) i2 = obj2.pr2;
		else return RunTimeProblem(RTP_IMPREL, obj2, relation);
	} else i2 = obj2-1;
	pr = i1*(vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE) + i2;
	i1 = IncreasingPowersOfTwo_TB-->(pr%16);
	pr = pr/16 + 8;
	vtov_structure-->pr = (vtov_structure-->pr) | i1;
];

[ Relation_NowNVtoV obj1 relation obj2 sym pr pr2 i1 i2 vtov_structure;
	if (sym && (obj2 ~= obj1)) { Relation_NowNVtoV(obj2, relation, obj1, false); }
	vtov_structure = RlnGetF(relation, RR_STORAGE);
	pr = vtov_structure-->VTOVS_LEFT_INDEX_PROP;
	pr2 = vtov_structure-->VTOVS_RIGHT_INDEX_PROP;
	vtov_structure-->VTOVS_CACHE_BROKEN = true; ! Mark any cache as broken
	if (pr) {
		if ((obj1 ofclass Object) && (obj1 provides pr)) i1 = obj1.pr;
		else return RunTimeProblem(RTP_IMPREL, obj1, relation);
	} else i1 = obj1-1;
	if (pr2) {
		if ((obj2 ofclass Object) && (obj2 provides pr2)) i2 = obj2.pr2;
		else return RunTimeProblem(RTP_IMPREL, obj2, relation);
	} else i2 = obj2-1;
	pr = i1*(vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE) + i2;
	i1 = IncreasingPowersOfTwo_TB-->(pr%16);
	pr = pr/16 + 8;
	if ((vtov_structure-->pr) & i1) vtov_structure-->pr = vtov_structure-->pr - i1;
];

[ Relation_TestVtoV obj1 relation obj2 sym pr pr2 i1 i2 vtov_structure;
	vtov_structure = RlnGetF(relation, RR_STORAGE);
	pr = vtov_structure-->VTOVS_LEFT_INDEX_PROP;
	pr2 = vtov_structure-->VTOVS_RIGHT_INDEX_PROP;
	if (sym && (obj2 > obj1)) { sym = obj1; obj1 = obj2; obj2 = sym; }
	if (pr) {
		if ((obj1 ofclass Object) && (obj1 provides pr)) i1 = obj1.pr;
		else { RunTimeProblem(RTP_IMPREL, obj1, relation); rfalse; }
	} else i1 = obj1-1;
	if (pr2) {
		if ((obj2 ofclass Object) && (obj2 provides pr2)) i2 = obj2.pr2;
		else { RunTimeProblem(RTP_IMPREL, obj2, relation); rfalse; }
	} else i2 = obj2-1;
	pr = i1*(vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE) + i2;
	i1 = IncreasingPowersOfTwo_TB-->(pr%16);
	pr = pr/16 + 8;
	if ((vtov_structure-->pr) & i1) rtrue; rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Equivalence Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_NowEquiv obj1 relation_property obj2 big little;
	big = obj1.relation_property; little = obj2.relation_property;
	if (big == little) return;
	if (big < little) { little = obj1.relation_property; big = obj2.relation_property; }
	objectloop (obj1 provides relation_property)
		if (obj1.relation_property == big) obj1.relation_property = little;
];

[ Relation_NowNEquiv obj1 relation_property obj2 old new;
	old = obj1.relation_property; new = obj2.relation_property;
	if (old ~= new) return;
	new = 0;
	objectloop (obj2 provides relation_property)
		if (obj2.relation_property > new) new = obj2.relation_property;
	new++;
	obj1.relation_property = new;
];

[ Relation_NowEquivV obj1 obj2 KOV relation_property n big little i;
	big = GProperty(KOV, obj1, relation_property);
	little = GProperty(KOV, obj2, relation_property);
	if (big == little) return;
	if (big < little) {
		little = GProperty(KOV, obj1, relation_property);
		big = GProperty(KOV, obj2, relation_property);
	}
	n = KOVDomainSize(KOV);
	for (i=1: i<=n: i++)
		if (GProperty(KOV, i, relation_property) == big)
			WriteGProperty(KOV, i, relation_property, little);
];

[ Relation_NowNEquivV obj1 obj2 KOV relation_property n old new i;
	old = GProperty(KOV, obj1, relation_property); 
	new = GProperty(KOV, obj2, relation_property);
	if (old ~= new) return;
	new = 0;
	n = KOVDomainSize(KOV);
	for (i=1: i<=n: i++)
		if (GProperty(KOV, i, relation_property) > new)
			new = GProperty(KOV, i, relation_property);
	new++;
	WriteGProperty(KOV, obj1, relation_property, new);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Show Various to Various
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_ShowVtoV relation sym x obj1 obj2 pr pr2 proutine1 proutine2 vtov_structure;
	vtov_structure = RlnGetF(relation, RR_STORAGE);
	pr = vtov_structure-->VTOVS_LEFT_INDEX_PROP;
	pr2 = vtov_structure-->VTOVS_RIGHT_INDEX_PROP;
	proutine1 = vtov_structure-->VTOVS_LEFT_PRINTING_ROUTINE;
	proutine2 = vtov_structure-->VTOVS_RIGHT_PRINTING_ROUTINE;
 
	if (pr && pr2) {
		objectloop (obj1 provides pr)
		  objectloop (obj2 provides pr2) {
				if (sym && obj2 > obj1) continue;
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  ", (The) obj1;
					if (sym) print "  <=>  "; else print "  >=>  ";
					print (the) obj2, "^";
				}
		  }
		return;
	}
	if (pr && (pr2==0)) {
		objectloop (obj1 provides pr)
		  for (obj2=1:obj2<=vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE:obj2++) {
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  ", (The) obj1, "  >=>  ";
					(proutine2).call(obj2);
					print "^";
				}
		  }
		return;
	}
	if ((pr==0) && (pr2)) {
		for (obj1=1:obj1<=vtov_structure-->2:obj1++)
		  objectloop (obj2 provides pr2) {
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  ";
					(proutine1).call(obj1);
					print "  >=>  ", (the) obj2, "^";
				}
		  }
		return;
	}
	for (obj1=1:obj1<=vtov_structure-->2:obj1++)
		  for (obj2=1:obj2<=vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE:obj2++)
			if (Relation_TestVtoV(obj1, relation, obj2)) {
				if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
				print "  ";
				(proutine1).call(obj1);
				print "  >=>  ";
				(proutine2).call(obj2);
				print "^";
		  }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Show One to One
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_ShowOtoO relation sym x relation_property t N obj1 obj2;
	relation_property = RlnGetF(relation, RR_STORAGE);
	t = KindBaseTerm(RlnGetF(relation, RR_KIND), 0); ! Kind of left term
	N = KOVDomainSize(t);
	if (t == OBJECT_TY) {
		objectloop (obj1 provides relation_property) {
			obj2 = obj1.relation_property;
			if (sym && obj2 < obj1) continue;
			if (obj2 == 0) continue;
			if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
			print "  ", (The) obj1;
			if (sym) print "  ==  "; else print "  >=>  ";
			print (the) obj2, "^";
		}
	} else {
		for (obj1=1: obj1<=N: obj1++) {
			obj2 = GProperty(t, obj1, relation_property);
			if (sym && obj2 < obj1) continue;
			if (obj2 == 0) continue;
			if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
			print "  ";
			PrintKindValuePair(t, obj1);
			if (sym) print "  ==  "; else print "  >=>  ";
			PrintKindValuePair(t, obj2);
			print "^";
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Show Reversed One to One
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_RShowOtoO relation sym x relation_property obj1 obj2 t1 t2 N1 N2;
	relation_property = RlnGetF(relation, RR_STORAGE);
	t1 = KindBaseTerm(RlnGetF(relation, RR_KIND), 0); ! Kind of left term
	t2 = KindBaseTerm(RlnGetF(relation, RR_KIND), 1); ! Kind of right term
	if (t2 == OBJECT_TY) {
		if (t1 == OBJECT_TY) {
			objectloop (obj1) {
				objectloop (obj2 provides relation_property) {
					if (obj2.relation_property ~= obj1) continue;
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  ", (The) obj1;
					print "  >=>  ";
					print (the) obj2, "^";
				}
			}
		} else {
			N1 = KOVDomainSize(t1);
			for (obj1=1: obj1<=N1: obj1++) {
				objectloop (obj2 provides relation_property) {
					if (obj2.relation_property ~= obj1) continue;
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  "; PrintKindValuePair(t1, obj1);
					print "  >=>  ";
					print (the) obj2, "^";
				}
			}
		}
	} else {
		N2 = KOVDomainSize(t2);
		if (t1 == OBJECT_TY) {
			objectloop (obj1) {
				for (obj2=1: obj2<=N2: obj2++) {
					if (GProperty(t2, obj2, relation_property) ~= obj1) continue;
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  ", (The) obj1;
					print "  >=>  ";
					PrintKindValuePair(t2, obj2);
					print "^";
				}
			}
		} else {
			N1 = KOVDomainSize(t1);
			for (obj1=1: obj1<=N1: obj1++) {
				for (obj2=1: obj2<=N2: obj2++) {
					if (GProperty(t2, obj2, relation_property) ~= obj1) continue;
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  ";
					PrintKindValuePair(t1, obj1);
					print "  >=>  ";
					PrintKindValuePair(t2, obj2);
					print "^";
				}
			}
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Show Equivalence
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RSE_Flip KOV v relation_property x;
	x = GProperty(KOV, v, relation_property); x = -x;
	WriteGProperty(KOV, v, relation_property, x);
];
[ RSE_Set KOV v relation_property;
	if (GProperty(KOV, v, relation_property) < 0) rtrue; rfalse;
];
[ Relation_ShowEquiv relation relation_property obj1 obj2 v c d somegroups t N x;
	print (string) RlnGetF(relation, RR_DESCRIPTION), ":^";
	relation_property = RlnGetF(relation, RR_STORAGE);
	t = KindBaseTerm(RlnGetF(relation, RR_KIND), 0); ! Kind of left term
	N = KOVDomainSize(t);
	if (t == OBJECT_TY) {
		objectloop (obj1 provides relation_property)
			obj1.relation_property = -(obj1.relation_property);
		objectloop (obj1 provides relation_property) {
			if (obj1.relation_property < 0) {
				v = obj1.relation_property; c = 0;
				objectloop (obj2 has workflag2) give obj2 ~workflag2;
				objectloop (obj2 provides relation_property) {
					if (obj2.relation_property == v) {
						give obj2 workflag2;
						obj2.relation_property = -v;
						c++;
					}
				}
				if (c>1) {
					somegroups = true;
					print "  { ";
					WriteListOfMarkedObjects(ENGLISH_BIT);
					print " }^";
				} else obj1.relation_property = v;
			}
		}
		objectloop (obj2 has workflag2) give obj2 ~workflag2;
		c = 0; objectloop (obj1 provides relation_property)
			if (obj1.relation_property < 0) { c++; give obj1 workflag2; }
		if (c == 0) return;
		if (somegroups) print "  and "; else print "  ";
		if (c < 4) { WriteListOfMarkedObjects(ENGLISH_BIT); print " in"; }
		else print c;
		if (c == 1) print " a";
		print " single-member group";
		if (c > 1) print "s";
		print "^";
		objectloop (obj1 provides relation_property)
			if (obj1.relation_property < 0)
				obj1.relation_property = -(obj1.relation_property);
	} else {
		! A slower method, since we have less efficient storage:
		for (obj1 = 1: obj1 <= N: obj1++)
			RSE_Flip(t, obj1, relation_property);
		for (obj1 = 1: obj1 <= N: obj1++) {
			if (RSE_Set(t, obj1, relation_property)) {
				v = GProperty(t, obj1, relation_property);
				c = 0;
				for (obj2 = 1: obj2 <= N: obj2++)
					if (GProperty(t, obj2, relation_property) == v)
						c++;
				if (c>1) {
					somegroups = true;
					print "  {";
					d = 0;
					for (obj2 = 1: obj2 <= N: obj2++) {
						if (GProperty(t, obj2, relation_property) == v) {
							print " "; PrintKindValuePair(t, obj2);
							if (d < c-1) print ","; print " ";
							RSE_Flip(t, obj2, relation_property);
							d++;
						}
					}
					print "}^";
				} else WriteGProperty(t, obj1, relation_property, v);
			}
		}
		objectloop (obj2 has workflag2) give obj2 ~workflag2;
		c = 0;
		for (obj1 = 1: obj1 <= N: obj1++)
			if (RSE_Set(t, obj1, relation_property)) c++;
		if (c == 0) return;
		if (somegroups) print "  and "; else print "  ";
		if (c == 1) print "a"; else print c;
		print " single-member group";
		if (c > 1) print "s";
		print "^";
		for (obj1 = 1: obj1 <= N: obj1++)
			if (RSE_Set(t, obj1, relation_property))
				RSE_Flip(t, obj1, relation_property);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Relation Emptying
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_EmptyOtoO relation sym clear relation_property obj1 obj2 t1 t2 N1 N2;
	relation_property = RlnGetF(relation, RR_STORAGE);
	t1 = KindBaseTerm(RlnGetF(relation, RR_KIND), 0); ! Kind of left term
	t2 = KindBaseTerm(RlnGetF(relation, RR_KIND), 1); ! Kind of right term
	if (t2 == OBJECT_TY) {
		objectloop (obj2 provides relation_property) {
			obj1 = obj2.relation_property;
			if (obj1) {
				if (clear) obj2.relation_property = nothing;
				else rfalse;
			}
		}
	} else {
		for (obj2=1: obj2<=N2: obj2++) {
			obj1 = GProperty(t2, obj2, relation_property);
			if (obj1) {
				if (clear) WriteGProperty(t2, obj2, relation_property, 0);
				else rfalse;
			}
		}
	}
	if (t1 ~= t2) {
		if (t1 == OBJECT_TY) {
			objectloop (obj1 provides relation_property) {
				obj2 = obj1.relation_property;
				if (obj2) {
					if (clear) obj1.relation_property = nothing;
					else rfalse;
				}
			}
		} else {
			for (obj1=1: obj1<=N2: obj1++) {
				obj2 = GProperty(t1, obj1, relation_property);
				if (obj2) {
					if (clear) WriteGProperty(t1, obj1, relation_property, 0);
					else rfalse;
				}
			}
		}
	}
	rtrue;
];
[ Relation_EmptyEquiv relation sym clear
	relation_property obj1 obj2 t N v;
	relation_property = RlnGetF(relation, RR_STORAGE);
	t = KindBaseTerm(RlnGetF(relation, RR_KIND), 0); ! Kind of left term
	N = KOVDomainSize(t);
	if (clear) {
		v = 1;
		if (t == OBJECT_TY) {
			objectloop (obj1 provides relation_property)
				obj1.relation_property = v++;
		} else {
			for (obj1=1: obj1<=N: obj1++)
				WriteGProperty(t, obj1, relation_property, v++);
		}
		rtrue;
	}	
	if (t == OBJECT_TY) {
		objectloop (obj1 provides relation_property)
			objectloop (obj2 provides relation_property)
				if ((obj1 < obj2) && (obj1.relation_property == obj2.relation_property))
					rfalse;
	} else {
		for (obj1=1: obj1<=N: obj1++)
			for (obj2=obj1+1: obj1<=N: obj1++)
				if (GProperty(t, obj1, relation_property) == GProperty(t, obj2, relation_property))
					rfalse;
	}
	rtrue;
];
[ Relation_EmptyVtoV relation sym clear vtov_structure obj1 obj2 pr pr2 proutine1 proutine2;
	vtov_structure = RlnGetF(relation, RR_STORAGE);
	pr = vtov_structure-->VTOVS_LEFT_INDEX_PROP;
	pr2 = vtov_structure-->VTOVS_RIGHT_INDEX_PROP;
	proutine1 = vtov_structure-->VTOVS_LEFT_PRINTING_ROUTINE;
	proutine2 = vtov_structure-->VTOVS_RIGHT_PRINTING_ROUTINE;
 
	if (pr && pr2) {
		objectloop (obj1 provides pr)
			objectloop (obj2 provides pr2) {
				if (sym && obj2 > obj1) continue;
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (clear) Relation_NowNVtoV(obj1, relation, obj2, sym);
					else rfalse;
				}
			}
		return;
	}
	if (pr && (pr2==0)) {
		objectloop (obj1 provides pr)
			for (obj2=1:obj2<=vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE:obj2++) {
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (clear) Relation_NowNVtoV(obj1, relation, obj2, sym);
					else rfalse;
				}
			}
		return;
	}
	if ((pr==0) && (pr2)) {
		for (obj1=1:obj1<=vtov_structure-->2:obj1++)
			objectloop (obj2 provides pr2) {
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (clear) Relation_NowNVtoV(obj1, relation, obj2, sym);
					else rfalse;
				}
			}
		return;
	}
	for (obj1=1:obj1<=vtov_structure-->2:obj1++)
		for (obj2=1:obj2<=vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE:obj2++)
			if (Relation_TestVtoV(obj1, relation, obj2)) {
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (clear) Relation_NowNVtoV(obj1, relation, obj2, sym);
					else rfalse;
				}
		}
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Map Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifndef FAST_ROUTE_FINDING;
#ifndef SLOW_ROUTE_FINDING;
#ifdef TARGET_GLULX;
Constant FAST_ROUTE_FINDING;
#ifnot;
Constant SLOW_ROUTE_FINDING;
#endif;
#endif;
#endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Cache Control
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant NUM_DOORS = 9;
Constant NUM_ROOMS = 44;

Array DoorRoutingViable -> NUM_DOORS+1;

Global map_has_changed = true;
Global last_filter; Global last_use_doors;

[ SignalMapChange; map_has_changed = true; ];

[ MapRouteTo from to filter use_doors count  oy oyi ds;
	if (from == nothing) return nothing;
	if (to == nothing) return nothing;
	if (from == to) return nothing;
	if ((filter) && (filter(from) == 0)) return nothing;
	if ((filter) && (filter(to) == 0)) return nothing;
	if ((last_filter ~= filter) || (last_use_doors ~= use_doors)) map_has_changed = true;
	oyi = 0;
	objectloop (oy has mark_as_room) {
		if ((filter == 0) || (filter(oy))) {
			if (oy.room_index == -1) map_has_changed = true;
			oy.room_index = oyi++;
		} else {
			if (oy.room_index >= 0) map_has_changed = true;
			oy.room_index = -1;
		}
	}
	oyi = 0;
	objectloop (oy ofclass K4_door) {
		ds = false;
		if ((use_doors & 2) ||
			(oy has open) || ((oy has openable) && (oy hasnt locked))) ds = true;
		if (DoorRoutingViable->oyi ~= ds) map_has_changed = true;
		DoorRoutingViable->oyi = ds;
		oyi++;
	}
	if (map_has_changed) {
		#ifdef FAST_ROUTE_FINDING; ComputeFWMatrix(filter, use_doors); #endif;
		map_has_changed = false; last_filter = filter; last_use_doors = use_doors;
	}
	#ifdef FAST_ROUTE_FINDING;
	if (count) return FastCountRouteTo(from, to, filter, use_doors);
	return FastRouteTo(from, to, filter, use_doors);
	#ifnot;
	if (count) return SlowCountRouteTo(from, to, filter, use_doors);
	return SlowRouteTo(from, to, filter, use_doors);
	#endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Fast Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifdef FAST_ROUTE_FINDING;
Array FWMatrix --> NUM_ROOMS*NUM_ROOMS;

[ FastRouteTo from to filter use_doors diri i dir oy;
	if (from == to) return nothing;
	i = (FWMatrix-->(from.room_index*NUM_ROOMS + to.room_index))/No_Directions;
	if (i == 0) return nothing;
	diri = (FWMatrix-->(from.room_index*NUM_ROOMS + to.room_index))%No_Directions;
	i=0; objectloop (dir ofclass K3_direction) {
		if (i == diri) return dir;
		i++;
	}
	return nothing;
];

[ FastCountRouteTo from to filter use_doors  k;
	if (from == to) return 0;
	k = (FWMatrix-->(from.room_index*NUM_ROOMS + to.room_index))/No_Directions;
	if (k == 0) return -1;
	return k;
];

[ ComputeFWMatrix filter use_doors  oy ox oj axy ayj axj dir diri nd row;
	objectloop (oy has mark_as_room) if (oy.room_index >= 0)
		objectloop (ox has mark_as_room) if (ox.room_index >= 0)
			FWMatrix-->(oy.room_index*NUM_ROOMS + ox.room_index) = 0;

	objectloop (oy has mark_as_room) if (oy.room_index >= 0) {
		row = (oy.IK1_Count)*No_Directions;
		for (diri=0: diri<No_Directions: diri++) {
			ox = Map_Storage-->(row+diri);
			if ((ox) && (ox has mark_as_room) && (ox.room_index >= 0)) {
				FWMatrix-->(oy.room_index*NUM_ROOMS + ox.room_index) = No_Directions + diri;
				continue;
			}
			if (use_doors && (ox ofclass K4_door) &&
				((use_doors & 2) || (DoorRoutingViable->(ox.IK4_Count)))) {
				@push location; location = oy;
				ox = ox.door_to();
				@pull location;
				if ((ox) && (ox has mark_as_room) && (ox.room_index >= 0)) {
					FWMatrix-->(oy.room_index*NUM_ROOMS + ox.room_index) = No_Directions + diri;
					continue;
				}
			}
		}	
	}

	objectloop (oy has mark_as_room) if (oy.room_index >= 0)
		objectloop (ox has mark_as_room) if (ox.room_index >= 0) {
			axy = (FWMatrix-->(ox.room_index*NUM_ROOMS + oy.room_index))/No_Directions;
			if (axy > 0)
				objectloop (oj has mark_as_room) if (oj.room_index >= 0) {
					ayj = (FWMatrix-->(oy.room_index*NUM_ROOMS + oj.room_index))/No_Directions;
					if (ayj > 0) {
						!print "Is it faster to go from ", (name) ox, " to ",
						!   (name) oj, " via ", (name) oy, "?^";
						axj = (FWMatrix-->(ox.room_index*NUM_ROOMS + oj.room_index))/
							No_Directions;
						if ((axj == 0) || (axy + ayj < axj)) {
							!print "Yes^";
							FWMatrix-->(ox.room_index*NUM_ROOMS + oj.room_index) =
								(axy + ayj)*No_Directions +
								(FWMatrix-->(ox.room_index*NUM_ROOMS + oy.room_index))%
									No_Directions;
						}
					}
				}
		}
];
#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Slow Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifndef FAST_ROUTE_FINDING;
[ SlowRouteTo from to filter use_doors  obj dir in_direction progressed sl through_door;
	if (from == nothing) return nothing;
	if (to == nothing) return nothing;
	if (from == to) return nothing;
	objectloop (obj has mark_as_room) obj.vector = 0;
	to.vector = 1;
	!print "Routing from ", (the) from, " to ", (the) to, "^";
	while (true) {
		progressed = false;
		!print "Pass begins^";
		objectloop (obj has mark_as_room)
			if ((filter == 0) || (filter(obj)))
				if (obj.vector == 0)
					objectloop (dir ofclass K3_direction) {
						in_direction = Map_Storage-->((obj.IK1_Count)*No_Directions + dir.IK3_Count);
						if (in_direction == nothing) continue;
						!print (the) obj, " > ", (the) dir, " > ", (the) in_direction, "^";
						if ((in_direction)
							&& (in_direction has mark_as_room)
							&& (in_direction.vector > 0)
							&& ((filter == 0) || (filter(in_direction)))) {
							obj.vector = dir | WORD_HIGHBIT;
							!print "* ", (the) obj, " vector is ", (the) dir, "^";
							progressed = true;
							continue;
						}
						if (use_doors && (in_direction ofclass K4_door) &&
							((use_doors & 2) ||
							 (in_direction has open) ||
							 ((in_direction has openable) && (in_direction hasnt locked)))) {
							sl = location; location = obj;
							through_door = in_direction.door_to();
							location = sl;
							!print "Through door is ", (the) through_door, "^";
							if ((through_door)
								&& (through_door has mark_as_room)
								&& (through_door.vector > 0)
								&& ((filter == 0) || (filter(through_door)))) {
								obj.vector = dir | WORD_HIGHBIT;
								!print "* ", (the) obj, " vector is ", (the) dir, "^";
								progressed = true;
								continue;
							}
						}
					}
		objectloop (obj has mark_as_room) obj.vector = obj.vector &~ WORD_HIGHBIT;
		if (from.vector) return from.vector;
		if (progressed == false) return from.vector;
	}
];

[ SlowCountRouteTo from to filter use_doors obj i;
	if (from == nothing) return -1;
	if (to == nothing) return -1;
	if (from == to) return 0;
	if (from has mark_as_room && to has mark_as_room) {
		obj = MapRouteTo(from,to,filter,use_doors);
		if (obj == nothing) return -1;
		i = 0; obj = from;
		while ((obj ~= to) && (i<NUM_ROOMS)) { i++; obj = MapConnection(obj,obj.vector); }
		return i;
	}
	return -1;
];
#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Relation Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant MAX_ROUTE_LENGTH = 237 + 32;

[ RelationRouteTo relation from to count  handler;
	if (count) {
		if (from == nothing) return -1;
		if (to == nothing) return -1;
		if (relation == 0) return -1;
	} else {
		if (from == nothing) return nothing;
		if (to == nothing) return nothing;
		if (relation == 0) return nothing;
	}
	if (from == to) return nothing;
	if (((RlnGetF(relation, RR_PERMISSIONS)) & RELS_ROUTE_FIND) == 0) {
		RunTimeProblem(RTP_ROUTELESS);
		return nothing;
	}
	if (RlnGetF(relation, RR_STORAGE) == 0) return nothing;
	handler = RlnGetF(relation, RR_HANDLER);
	if (count) return handler(relation, RELS_ROUTE_FIND_COUNT, from, to);
	return handler(relation, RELS_ROUTE_FIND, from, to);
];

[ RelFollowVector rv from to  obj i;
	if (rv == nothing) return -1;
	i = 0; obj = from;
	while ((obj ~= to) && (i<=MAX_ROUTE_LENGTH)) { i++; obj = obj.vector; }
	return i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: One To Various Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ OtoVRelRouteTo relation_property from to previous;
	while ((to) && (to provides relation_property) && (to.relation_property)) {
		previous = to.relation_property;
		previous.vector = to;
		if (previous == from) return to;
		to = previous;
	}
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Various To One Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VtoORelRouteTo relation_property from to next  start;
	start = from;
	while ((from) && (from provides relation_property) && (from.relation_property)) {
		next = from.relation_property;
		from.vector = next;
		if (next == to) return start.vector;
		from = next;
	}
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Slow Various To Various Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VtoVRelRouteTo relation from to count obj obj2 related progressed left_ix pr2 i vtov_structure;
	vtov_structure = RlnGetF(relation, RR_STORAGE);
	if (vtov_structure-->VTOVS_CACHE)
		return FastVtoVRelRouteTo(relation, from, to, count);
	left_ix = vtov_structure-->VTOVS_LEFT_INDEX_PROP;
	pr2 = vtov_structure-->VTOVS_RIGHT_INDEX_PROP;
	objectloop (obj ofclass Object && obj provides vector) obj.vector = 0;
	to.vector = 1;
	while (true) {
		progressed = false;
		objectloop (obj ofclass Object && obj provides left_ix)
			if (obj.vector == 0) {
				objectloop (obj2 ofclass Object && obj2 provides pr2 && obj2.vector > 0) {
					if (Relation_TestVtoV(obj, relation, obj2)) {
						obj.vector = obj2 | WORD_HIGHBIT;
						progressed = true;
						continue;
					}
				}
			}
		objectloop (obj ofclass Object && obj provides left_ix)
			obj.vector = obj.vector &~ WORD_HIGHBIT;
		if (from.vector) break;
		if (progressed == false) break;
	}
	if (count) {
		if (from.vector == nothing) return -1;
		i = 0; obj = from;
		while ((obj ~= to) && (i<=MAX_ROUTE_LENGTH)) { i++; obj = obj.vector; }
		return i;
	}
	return from.vector;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Fast Various To Various Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FastVtoVRelRouteTo relation from to count
	domainsize cache cache2 left_ix ox oy oj offset axy axj ayj;
	domainsize = RlnGetF(relation, RR_STORAGE)-->2; ! Number of left instances
	left_ix = RlnGetF(relation, RR_STORAGE)-->VTOVS_LEFT_INDEX_PROP;
	if ((from provides left_ix) && (to provides left_ix)) {
		if (domainsize < 256) {
			cache = RlnGetF(relation, RR_STORAGE)-->VTOVS_CACHE;
			cache2 = cache + domainsize*domainsize;
			if (RlnGetF(relation, RR_STORAGE)-->VTOVS_CACHE_BROKEN == true) {
				RlnGetF(relation, RR_STORAGE)-->VTOVS_CACHE_BROKEN = false;
				objectloop (oy provides left_ix)
					objectloop (ox provides left_ix)
						if (Relation_TestVtoV(oy, relation, ox)) {
							offset = ((oy.left_ix)*domainsize + (ox.left_ix));
							cache->offset = 1;
							cache2->offset = ox.left_ix;
						} else {
							offset = ((oy.left_ix)*domainsize + (ox.left_ix));
							cache->offset = 0;
							cache2->offset = 255;
						}
				for (oy=0: oy<domainsize: oy++)
					for (ox=0: ox<domainsize: ox++) {
						axy = cache->(ox*domainsize + oy);
						if (axy > 0)
							for (oj=0: oj<domainsize: oj++) {
								ayj = cache->(oy*domainsize + oj);
								if (ayj > 0) {
									offset = ox*domainsize + oj;
									axj = cache->offset;
									if ((axj == 0) || (axy + ayj < axj)) {
										cache->offset = (axy + ayj);
										cache2->offset = cache2->(ox*domainsize + oy);
									}
								}
							}
					}
			}
			if (count) {
				count = cache->((from.left_ix)*domainsize + (to.left_ix));
				if (count == 0) return -1;
				return count;
			}
			oy = cache2->((from.left_ix)*domainsize + (to.left_ix));
			if (oy < 255)
				objectloop (ox provides left_ix)
					if (ox.left_ix == oy) return ox;
			return nothing;
		} else {
			cache = RlnGetF(relation, RR_STORAGE)-->VTOVS_CACHE;
			cache2 = cache + WORDSIZE*domainsize*domainsize;
			if (RlnGetF(relation, RR_STORAGE)-->VTOVS_CACHE_BROKEN == true) {
				RlnGetF(relation, RR_STORAGE)-->VTOVS_CACHE_BROKEN = false;
				objectloop (oy provides left_ix)
					objectloop (ox provides left_ix)
						if (Relation_TestVtoV(oy, relation, ox)) {
							offset = ((oy.left_ix)*domainsize + (ox.left_ix));
							cache-->offset = 1;
							cache2-->offset = ox;
						} else {
							offset = ((oy.left_ix)*domainsize + (ox.left_ix));
							cache-->offset = 0;
							cache2-->offset = nothing;
						}
				for (oy=0: oy<domainsize: oy++)
					for (ox=0: ox<domainsize: ox++) {
						axy = cache-->(ox*domainsize + oy);
						if (axy > 0)
							for (oj=0: oj<domainsize: oj++) {
								ayj = cache-->(oy*domainsize + oj);
								if (ayj > 0) {
									offset = ox*domainsize + oj;
									axj = cache-->offset;
									if ((axj == 0) || (axy + ayj < axj)) {
										cache-->offset = (axy + ayj);
										cache2-->offset = cache2-->(ox*domainsize + oy);
									}
								}
							}
					}
			}
			if (count) {
				count = cache-->((from.left_ix)*domainsize + (to.left_ix));
				if (count == 0) return -1;
				return count;
			}
			return cache2-->((from.left_ix)*domainsize + (to.left_ix));
		}
	}
	if (count) return -1;
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Iterating Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IterateRelations callback;
	callback(Rel_Record_67);
    callback(Rel_Record_69);

];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Reporting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array RTP_Buffer --> 7;
[ RunTimeProblem n par1 par2 par3 ln file;
	if (RTP_Buffer-->0 == -1) {
		RTP_Buffer-->0 = n; 
		RTP_Buffer-->1 = par1; 
		RTP_Buffer-->2 = par2;
		RTP_Buffer-->3 = par3;
		RTP_Buffer-->4 = ln;
		RTP_Buffer-->5 = file;
	}
	RunTimeProblemShow();
];
[ ClearRTP;
	RTP_Buffer-->0 = -1;
	RTP_Buffer-->6 = false;
];
[ SuspendRTP;
	RTP_Buffer-->6 = true;
];
[ ResumeRTP;
	RTP_Buffer-->6 = false;
];
[ RunTimeProblemShow   n par1 par2 par3 ln file i c;
	if (RTP_Buffer-->0 == -1 or -2) return;
	if (RTP_Buffer-->6) return;

	n = RTP_Buffer-->0; 
	par1 = RTP_Buffer-->1; 
	par2 = RTP_Buffer-->2;
	par3 = RTP_Buffer-->3;
	ln = RTP_Buffer-->4;
	file = RTP_Buffer-->5;
	RTP_Buffer-->0 = -2;

	print "^*** Run-time problem P", n;
	if (ln) {
		print " (at paragraph ", ln, " in ";
		if (file == 0) print "the source text";
		else ShowOneExtension(file);
		print ")";
	}
	print ": ";
	switch(n) {
		RTP_BACKDROP:
			print "Tried to move ", (the) par1, " (a backdrop) to ", (the) par2,
				", which is not a region.^";
		RTP_CANTCHANGE:
			print "Tried to change player to ", (the) par1, ", which is not a person.^";
		RTP_NOEXIT:
		    print "Tried to change ", (the) par2, " exit of ", (the) par1,
		    	", but it didn't seem to have such an exit to change.^";
		RTP_EXITDOOR:
		    print "Tried to change ", (the) par2, " exit of ", (the) par1,
		    	", but it led to a door, not a room.^";
		RTP_IMPREL:
			print "Tried to access an inappropriate relation for ", (the) par1,
				", violating '", (string) RlnGetF(par2, RR_DESCRIPTION), "'.^";
		RTP_TOOMANYRULEBOOKS:
			print "Too many rulebooks in simultaneous use.^";
		RTP_TOOMANYEVENTS:
			print "Too many timed events are going on at once.^";
		RTP_BADPROPERTY:
			print "Tried to access non-existent property for ", (the) par1, ".^";
		RTP_UNPROVIDED:
			print "Since ", (the) par1, " is not allowed the property ~",
					(string) par2, "~, it is against the rules to try to use it.^";
		RTP_UNSET:
			print "Although ", (the) par1, " is allowed to have the property ~",
				(string) par2, "~, no value was ever given, so it can't now be used.^";
		RTP_TOOMANYACTS:
			print "Too many activities are going on at once.^";
		RTP_CANTABANDON:
			print "Tried to abandon an activity which wasn't going on.^";
		RTP_CANTEND:
			print "Tried to end an activity which wasn't going on.^";
		RTP_CANTMOVENOTHING:
			print "You can't move nothing.^";
		RTP_CANTREMOVENOTHING:
			print "You can't remove nothing from play.^";
		RTP_DIVZERO:
			print "You can't divide by zero.^";
		RTP_BADVALUEPROPERTY:
			print "Tried to access property for a value which didn't fit: ",
				"if this were a number it would be ", par1, ".^";
		RTP_NOTBACKDROP:
			print "Tried to move ", (the) par1, " (not a backdrop) to ", (the) par2,
				", which is a region.^";
		RTP_TABLE_NOCOL:
			print "Attempt to look up a non-existent column in the table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_NOCORR:
			print "Attempt to look up a non-existent correspondence in the table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_NOROW:
			print "Attempt to look up a non-existent row in the table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_NOENTRY:
			print "Attempt to look up a non-existent entry at column ", par2,
				", row ", par3, " of the table '", (PrintTableName) par1, "'.^";
		RTP_TABLE_NOTABLE:
			print "Attempt to blank out a row from a non-existent table (value ",
				par1, ").^";
		RTP_TABLE_NOTABLE2:
			print "Attempt to access an entry from a non-existent table.^";
		RTP_TABLE_NOMOREBLANKS:
			print "Attempt to choose a blank row in a table with none left: table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_NOROWS:
			print "Attempt to choose a random row in an entirely blank table: table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_CANTRUNTHROUGH:
			print "Attempt to repeat through a table in a tricky column order: table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_CANTSORT:
			print "Attempt to sort a table whose ordering must remain fixed: table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_CANTSAVE:
			print "Attempt to save a table to a file whose data is unstable: table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_WONTFIT:
			print "File being read has too many rows or columns to fit into table: table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_BADFILE:
			print "File being read is not a previously saved table: table '",
				(PrintTableName) par1, "'.^";
		RTP_NOTINAROOM:
			print "Attempt to test if the current location is '",
				(the) par1, "', which is not a room or region.^";
		RTP_BADTOPIC:
			print "Attempt to see if a snippet of text matches something which
				is not a topic.^";
		RTP_ROUTELESS:
			print "Attempt to find route or count steps through an implicit
				relation.^";
		RTP_PROPOFNOTHING:
			print "Attempt to use a property of the 'nothing' non-object: property ",
				(PrintPropertyName) par2, "^";
		RTP_DECIDEONWRONGKIND:
			print "Attempt to 'decide on V' where V is the wrong kind of object.^";
		RTP_DECIDEONNOTHING:
			print "Attempt to 'decide on nothing'.^";
		RTP_LOWLEVELERROR:
			print "Low level error.^";
		RTP_DONTIGNORETURNSEQUENCE:
			print "Attempt to ignore the turn sequence rules.^";
		RTP_SAYINVALIDSNIPPET:
			print "Attempt to say a snippet value which is currently invalid: words ",
				par1, " to ", par2, ".^";
		RTP_SPLICEINVALIDSNIPPET:
			print "Attempt to splice a snippet value which is currently invalid: words ",
				par1, " to ", par2, ".^";
		RTP_INCLUDEINVALIDSNIPPET:
			print "Attempt to match a snippet value which is currently invalid: words ",
				par1, " to ", par2, ".^";
		RTP_LISTWRITERMEMORY:
			print "The list-writer has run out of memory.^";
		RTP_CANTREMOVEPLAYER:
			print "Attempt to remove the player from play.^";
		RTP_CANTBEOFFSTAGE:
			print "Attempt to move the player off-stage.^";
		RTP_CANTREMOVEDOORS:
			print "Attempt to remove a door from play.^";
		RTP_CANTCHANGEOFFSTAGE:
			print "Attempt to change the player to a person off-stage.^";
		RTP_MSTACKMEMORY:
			print "The memory stack is exhausted.^";
		RTP_TYPECHECK:
			print "Phrase applied to an incompatible kind of value.^";
		RTP_FILEIOERROR:
			print "Error handling external file.^";
		RTP_HEAPERROR:
			print "Memory allocation proved impossible.^";
		RTP_LISTRANGEERROR:
			print "Attempt to use list item which does not exist.^";
		RTP_LISTSIZENEGATIVE:
			print "Attempt to resize list to ", par1, " entries - there must ",
			"always be 0 or more.^";	
		RTP_REGEXPSYNTAXERROR:
			print "Syntax error in regular expression.^";
		RTP_NOGLULXUNICODE:
			print "This interpreter does not support Unicode.^";
		RTP_BACKDROPONLY:
			print "Only backdrops can be moved to multiple places.^";
		RTP_NOTTHING:
			print "Tried to move ", (the) par1, " (not a thing) to ", (the) par2,
				", but only things can move around.^";
		RTP_SCENEHASNTSTARTED:
			print "The scene ", (PrintSceneName) par1,
				" hasn't started, so you can't ask when it did.^";
		RTP_SCENEHASNTENDED:
			print "The scene ", (PrintSceneName) par1,
				" hasn't ended, so you can't ask when it did.^";
		RTP_NEGATIVEROOT:
			print "You can't take the square root of a negative number.^";
		RTP_CANTITERATE:
			print "You can't implicitly repeat through the values of this kind: ",
				"a problem arising from a description which started out here - ~",
				(string) par1, "~.^";
		RTP_WRONGASSIGNEDKIND:
			print "Attempt to set a variable to the wrong kind of object: ",
				"you wrote '", (string) par2, "', which sets the value to ", (the) par1,
				" - but that doesn't have the kind '", (string) par3, "'.^";			
		RTP_RELKINDVIOLATION:
			print "Tried to change a relation for objects with the wrong kinds: ",
				(string) RlnGetF(par3, RR_DESCRIPTION), ", but you tried to ",
				"relate (or unrelate) ", (the) par1, " to ", (the) par2, ".^";
		RTP_CANTMAKEPART:
			print "Tried to make the player part of something: ",
				(the) par1, ".^";
		RTP_TEXTTOKENTOOHARD:
			print "This use of '[text]' is too complicated.^";
		RTP_RELATIONCHANGEIMPOSSIBLE:
			print "This change of the relation's nature is impossible in play.^";
		RTP_RELMINIMAL:
			print "This operation can't be done with the relation '",
				(string) RlnGetF(par3, RR_DESCRIPTION), "'.^";
		RTP_REGIONSNOTADJACENT:
			print "You can't test whether something is adjacent to a region: ",
				"such as, in this case, ", (the) par1, ".^";
		}
	print "^";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Low-Level Errors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant MAX_TIMERS = 0;
[ RunTimeError n p1 p2;
    #Ifdef DEBUG;
    print "** Library error ", n, " (", p1, ",", p2, ") **^** ";
    switch (n) {
      1:    print "preposition not found (this should not occur)";
      2:    print "Property value not routine or string: ~", (property) p2, "~ of ~", (name) p1,
                  "~ (", p1, ")";
      3:    print "Entry in property list not routine or string: ~", (property) p2, "~ list of ~",
                  (name) p1, "~ (", p1, ")";
      4:    print "Too many timers/daemons are active simultaneously.
                  The limit is the library constant MAX_TIMERS (currently ",
                  MAX_TIMERS, ") and should be increased";
      5:    print "Object ~", (name) p1, "~ has no ~time_left~ property";
      7:    print "The object ~", (name) p1, "~ can only be used as a player object if it has
                  the ~number~ property";
      8:    print "Attempt to take random entry from an empty table array";
      9:    print p1, " is not a valid direction property number";
      10:   print "The player-object is outside the object tree";
      11:   print "The room ~", (name) p1, "~ has no ~description~ property";
      12:   print "Tried to set a non-existent pronoun using SetPronoun";
      13:   print "A 'topic' token can only be followed by a preposition";
      default: print "(unexplained)";
    }
    print " **^";
    #Ifnot;
    print "** Library error ", n, " (", p1, ",", p2, ") **^";
    #Endif; ! DEBUG
    RunTimeProblem(RTP_LOWLEVELERROR);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Argument Type Checking Failed
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ArgumentTypeFailed line file;
	RunTimeProblem(RTP_TYPECHECK, 0, 0, 0, line, file);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Return Type Checking Failed
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CheckKindReturned V K;
	if (V ofclass K) return V;
	if (v == nothing) RunTimeProblem(RTP_DECIDEONNOTHING);
	else RunTimeProblem(RTP_DECIDEONWRONGKIND);
	return V;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Whether Provides
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WhetherProvides obj either_or p issue_rtp  off i textual a l;
	if (metaclass(obj) ~= Object) rfalse;
	if (p<0) p = ~p;
	if (either_or) {
		if (p < FBNA_PROP_NUMBER) off = attributed_property_offsets-->p;
		else off = valued_property_offsets-->p;
	} else off = valued_property_offsets-->p;
	if (off<0) {
		if (issue_rtp) RunTimeProblem(RTP_BADPROPERTY, obj);
		rfalse;
	}
	textual = property_metadata-->off; off++;
	
	if (ScanPropertyMetadata(obj, off)) jump PermissionFound;
	if (obj provides KD_Count) {
		l = obj.KD_Count;
		while (l > 0) {
			a = l*2;
			if (ScanPropertyMetadata(KindHierarchy-->a, off)) jump PermissionFound;
			l = KindHierarchy-->(a+1);
		}
	}
	if (issue_rtp) RunTimeProblem(RTP_UNPROVIDED, obj, textual);
	rfalse;

	.PermissionFound;
		if (either_or) rtrue;
		if (obj provides p) rtrue;
		if (issue_rtp) RunTimeProblem(RTP_UNSET, obj, textual);
		rfalse;
];

[ PrintPropertyName  p  off textual;
	if (p<0) p = ~p;
	off = valued_property_offsets-->p;
	textual = property_metadata-->off;
	print (string) textual;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Scan Property Metadata
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ScanPropertyMetadata obj off i;
	for (i=off: property_metadata-->i >= 0: i++)
		if (obj == property_metadata-->i) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Get Either-Or Property
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GetEitherOrProperty o p;
	if (o == nothing) rfalse;
	if (p<0) p = ~p;
	if (WhetherProvides(o, true, p, false)) {
		if (p<FBNA_PROP_NUMBER) { if (o has p) rtrue; rfalse; }
		if ((o provides p) && (o.p)) rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Set Either-Or Property
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SetEitherOrProperty o p negate adj;
	if (p<0) { p = ~p; negate = ~negate; }
	if (adj) {
		(adj)(o);
	} else if (WhetherProvides(o, true, p, true)) {
		if (negate) {
			if (p<FBNA_PROP_NUMBER) give o ~p; else o.p = false;
		} else {
			if (p<FBNA_PROP_NUMBER) give o p; else o.p = true;
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Value Property
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GProperty K V pr obj;
	if (K == OBJECT_TY) obj = V; else obj = KOV_representatives-->K;
	if (obj == 0) { RunTimeProblem(RTP_PROPOFNOTHING, obj, pr); rfalse; }
	if (obj provides pr) {
		if (K == OBJECT_TY) {
			if (pr == door_to) return obj.pr();
			if (WhetherProvides(V, false, pr, true)) return obj.pr;
			rfalse;
		}
		if (obj ofclass K0_kind)
			WhetherProvides(V, false, pr, true); ! to force a run-time problem
		if ((V < 1) || (V > obj.value_range)) {
			RunTimeProblem(RTP_BADVALUEPROPERTY); return 0; }
		return (obj.pr)-->(V+COL_HSIZE);
	} else {
		if (obj ofclass K0_kind)
			WhetherProvides(V, false, pr, true); ! to force a run-time problem
	}
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Write Value Property
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteGProperty K V pr val obj;
	if (K == OBJECT_TY) obj = V; else obj = KOV_representatives-->K;
	if (obj == 0) { RunTimeProblem(RTP_PROPOFNOTHING, obj, pr); rfalse; }
	if (K == OBJECT_TY) {
		if (WhetherProvides(V, false, pr, true)) obj.pr = val;
	} else {
		if ((V < 1) || (V > obj.value_range))
			return RunTimeProblem(RTP_BADVALUEPROPERTY);
		if (obj provides pr) { (obj.pr)-->(V+COL_HSIZE) = val; }
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Printing Property Names
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PROPERTY_TY_Say v;
	print "property ", v;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Latest Rule Result
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RS_NEITHER		= 0;
Constant RS_SUCCEEDS	= 1;
Constant RS_FAILS		= 2;

Array latest_rule_result --> 3;

[ RecordRuleOutcome usage rule1 rule2;
	if ((latest_rule_result-->0 == RS_SUCCEEDS or RS_FAILS) &&
		(KOVIsBlockValue(latest_rule_result-->1)))
		BlkValueFree(latest_rule_result-->2);
	if ((usage == RS_SUCCEEDS or RS_FAILS) && (KOVIsBlockValue(rule1)))
		rule2 = BlkValueCopy(BlkValueCreate(rule1), rule2);
	latest_rule_result-->0 = usage;
	latest_rule_result-->1 = rule1;
	latest_rule_result-->2 = rule2;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Following
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global process_rulebook_count; ! Depth of processing recursion
Global debugging_rules = false; ! Are we tracing rule invocations?

[ FollowRulebook rulebook parameter no_paragraph_skips
	rv ss spv;
	ss = self;
	if ((Protect_I7_Arrays-->0 ~= 16339) || (Protect_I7_Arrays-->1 ~= 12345)) {
		print "^^*** Fatal programming error: I7 arrays corrupted ***^^";
		@quit;
	}
	if (parameter) { self = parameter; parameter_object = parameter; }
	spv = parameter_value; parameter_value = parameter;
	! we won't need parameter again, so can reuse it
	parameter = debugging_rules;
	#ifndef MEMORY_ECONOMY;
	if (debugging_rules) {
		DebugRulebooks(rulebook, parameter);
		process_rulebook_count = process_rulebook_count + debugging_rules;
	}
	#endif;
	if ((rulebook >= 0) && (rulebook < NUMBER_RULEBOOKS_CREATED)) {
		rv = rulebooks_array-->rulebook;
		if (rv ~= EMPTY_RULEBOOK) {
			if (rulebook ~= ACTION_PROCESSING_RB) MStack_CreateRBVars(rulebook);
			if (say__p) RulebookParBreak(no_paragraph_skips);
			rv = rv(no_paragraph_skips);
			if (rulebook ~= ACTION_PROCESSING_RB) MStack_DestroyRBVars(rulebook);
		} else {
			rv = 0;
		}
	} else {
		if (say__p) RulebookParBreak(no_paragraph_skips);
		rv = indirect(rulebook);
		if (rv == 2) rv = reason_the_action_failed;
		else if (rv) rv = rulebook;
	}
	if (rv) {
		#ifndef MEMORY_ECONOMY;
		if (debugging_rules) {
			process_rulebook_count = process_rulebook_count - debugging_rules;
			if (process_rulebook_count < 0) process_rulebook_count = 0;
			spaces(2*process_rulebook_count);
	  	    if (latest_rule_result-->0 == RS_SUCCEEDS) print "[stopped: success]^";
	  	    if (latest_rule_result-->0 == RS_FAILS) print "[stopped: fail]^";
		}
		#endif;
	} else {
		if (debugging_rules)
			process_rulebook_count = process_rulebook_count - debugging_rules;
		latest_rule_result-->0 = RS_NEITHER;
	}
	debugging_rules = parameter;
	self = ss; parameter_value = spv;
	return rv;
];

[ RulebookParBreak no_paragraph_skips;
	if ((no_paragraph_skips == false) && (say__pc & PARA_NORULEBOOKBREAKS == 0))
		DivideParagraphPoint();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Specifying Outcomes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ActRulebookSucceeds rule_id;
	if (rule_id) reason_the_action_failed = rule_id;
	RulebookSucceeds();
];

[ ActRulebookFails rule_id;
	if (rule_id) reason_the_action_failed = rule_id;
	RulebookFails();
];

[ RulebookSucceeds weak_kind value;
	RecordRuleOutcome(RS_SUCCEEDS, weak_kind, value);
];

[ RulebookFails weak_kind value;
	RecordRuleOutcome(RS_FAILS, weak_kind, value);
];

[ RuleHasNoOutcome;
	RecordRuleOutcome(RS_NEITHER, 0, 0);
];

[ SetRulebookOutcome a;
	latest_rule_result-->0 = a;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Discovering Outcomes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RulebookOutcome a;
	a = latest_rule_result-->0;
	if ((a == RS_FAILS) || (a == RS_SUCCEEDS)) return a;
	return RS_NEITHER;
];

[ RulebookFailed;
	if (latest_rule_result-->0 == RS_FAILS) rtrue; rfalse;
];

[ RulebookSucceeded;
	if (latest_rule_result-->0 == RS_SUCCEEDS) rtrue; rfalse;
];

[ ResultOfRule RB V F K a;
	if (RB) FollowRulebook(RB, V, F);
	a = latest_rule_result-->0;
	if ((a == RS_FAILS) || (a == RS_SUCCEEDS)) {
		a = latest_rule_result-->1;
		if (a) return latest_rule_result-->2;
	}
	if (K) return DefaultValueOfKOV(K);
	return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Printing Rule Names
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFNDEF MEMORY_ECONOMY;
Array RulebookNames -->
    "Startup rulebook" ! 0
    "Turn sequence rulebook" ! 1
    "Shutdown rulebook" ! 2
    "Scene changing rulebook" ! 3
    "When play begins rulebook" ! 4
    "When play ends rulebook" ! 5
    "When scene begins rulebook" ! 6
    "When scene ends rulebook" ! 7
    "Every turn rulebook" ! 8
    "Action-processing rulebook" ! 9
    "Setting action variables rulebook" ! 10
    "specific action-processing rulebook" ! 11
    "player's action awareness rulebook" ! 12
    "Accessibility rulebook" ! 13
    "Reaching inside rulebook" ! 14
    "Reaching outside rulebook" ! 15
    "Visibility rulebook" ! 16
    "Persuasion rulebook" ! 17
    "Unsuccessful attempt by rulebook" ! 18
    "Before rulebook" ! 19
    "Instead rulebook" ! 20
    "Check rulebook" ! 21
    "Carry out rulebook" ! 22
    "After rulebook" ! 23
    "Report rulebook" ! 24
    "does the player mean rulebook" ! 25
    "multiple action processing rulebook" ! 26
    "when Entire Game begins rulebook" ! 27
    "when Entire Game ends rulebook" ! 28
    "before Printing the name rulebook" ! 29
    "for Printing the name rulebook" ! 30
    "after Printing the name rulebook" ! 31
    "before Printing the plural name rulebook" ! 32
    "for Printing the plural name rulebook" ! 33
    "after Printing the plural name rulebook" ! 34
    "before Printing a number rulebook" ! 35
    "for Printing a number rulebook" ! 36
    "after Printing a number rulebook" ! 37
    "before Printing room description details rulebook" ! 38
    "for Printing room description details rulebook" ! 39
    "after Printing room description details rulebook" ! 40
    "before Printing inventory details rulebook" ! 41
    "for Printing inventory details rulebook" ! 42
    "after Printing inventory details rulebook" ! 43
    "before Listing contents rulebook" ! 44
    "for Listing contents rulebook" ! 45
    "after Listing contents rulebook" ! 46
    "before Grouping together rulebook" ! 47
    "for Grouping together rulebook" ! 48
    "after Grouping together rulebook" ! 49
    "before Writing a paragraph about rulebook" ! 50
    "for Writing a paragraph about rulebook" ! 51
    "after Writing a paragraph about rulebook" ! 52
    "before Listing nondescript items rulebook" ! 53
    "for Listing nondescript items rulebook" ! 54
    "after Listing nondescript items rulebook" ! 55
    "before Printing the name of a dark room rulebook" ! 56
    "for Printing the name of a dark room rulebook" ! 57
    "after Printing the name of a dark room rulebook" ! 58
    "before Printing the description of a dark room rulebook" ! 59
    "for Printing the description of a dark room rulebook" ! 60
    "after Printing the description of a dark room rulebook" ! 61
    "before Printing the announcement of darkness rulebook" ! 62
    "for Printing the announcement of darkness rulebook" ! 63
    "after Printing the announcement of darkness rulebook" ! 64
    "before Printing the announcement of light rulebook" ! 65
    "for Printing the announcement of light rulebook" ! 66
    "after Printing the announcement of light rulebook" ! 67
    "before Printing a refusal to act in the dark rulebook" ! 68
    "for Printing a refusal to act in the dark rulebook" ! 69
    "after Printing a refusal to act in the dark rulebook" ! 70
    "before Constructing the status line rulebook" ! 71
    "for Constructing the status line rulebook" ! 72
    "after Constructing the status line rulebook" ! 73
    "before Printing the banner text rulebook" ! 74
    "for Printing the banner text rulebook" ! 75
    "after Printing the banner text rulebook" ! 76
    "before Reading a command rulebook" ! 77
    "for Reading a command rulebook" ! 78
    "after Reading a command rulebook" ! 79
    "before Deciding the scope rulebook" ! 80
    "for Deciding the scope rulebook" ! 81
    "after Deciding the scope rulebook" ! 82
    "before Deciding the concealed possessions rulebook" ! 83
    "for Deciding the concealed possessions rulebook" ! 84
    "after Deciding the concealed possessions rulebook" ! 85
    "before Deciding whether all includes rulebook" ! 86
    "for Deciding whether all includes rulebook" ! 87
    "after Deciding whether all includes rulebook" ! 88
    "before Clarifying the parser's choice rulebook" ! 89
    "for Clarifying the parser's choice rulebook" ! 90
    "after Clarifying the parser's choice rulebook" ! 91
    "before Asking which do you mean rulebook" ! 92
    "for Asking which do you mean rulebook" ! 93
    "after Asking which do you mean rulebook" ! 94
    "before Printing a parser error rulebook" ! 95
    "for Printing a parser error rulebook" ! 96
    "after Printing a parser error rulebook" ! 97
    "before Supplying a missing noun rulebook" ! 98
    "for Supplying a missing noun rulebook" ! 99
    "after Supplying a missing noun rulebook" ! 100
    "before Supplying a missing second noun rulebook" ! 101
    "for Supplying a missing second noun rulebook" ! 102
    "after Supplying a missing second noun rulebook" ! 103
    "before Implicitly taking rulebook" ! 104
    "for Implicitly taking rulebook" ! 105
    "after Implicitly taking rulebook" ! 106
    "before Starting the virtual machine rulebook" ! 107
    "for Starting the virtual machine rulebook" ! 108
    "after Starting the virtual machine rulebook" ! 109
    "before Amusing a victorious player rulebook" ! 110
    "for Amusing a victorious player rulebook" ! 111
    "after Amusing a victorious player rulebook" ! 112
    "before Printing the player's obituary rulebook" ! 113
    "for Printing the player's obituary rulebook" ! 114
    "after Printing the player's obituary rulebook" ! 115
    "before Handling the final question rulebook" ! 116
    "for Handling the final question rulebook" ! 117
    "after Handling the final question rulebook" ! 118
    "before Printing the locale description rulebook" ! 119
    "for Printing the locale description rulebook" ! 120
    "after Printing the locale description rulebook" ! 121
    "before Choosing notable locale objects rulebook" ! 122
    "for Choosing notable locale objects rulebook" ! 123
    "after Choosing notable locale objects rulebook" ! 124
    "before Printing a locale paragraph about rulebook" ! 125
    "for Printing a locale paragraph about rulebook" ! 126
    "after Printing a locale paragraph about rulebook" ! 127
    "before Issuing the response text rulebook" ! 128
    "for Issuing the response text rulebook" ! 129
    "after Issuing the response text rulebook" ! 130
    "check Taking inventory rulebook" ! 131
    "carry out Taking inventory rulebook" ! 132
    "report Taking inventory rulebook" ! 133
    "check Taking rulebook" ! 134
    "carry out Taking rulebook" ! 135
    "report Taking rulebook" ! 136
    "check Removing it from rulebook" ! 137
    "carry out Removing it from rulebook" ! 138
    "report Removing it from rulebook" ! 139
    "check Dropping rulebook" ! 140
    "carry out Dropping rulebook" ! 141
    "report Dropping rulebook" ! 142
    "check Putting it on rulebook" ! 143
    "carry out Putting it on rulebook" ! 144
    "report Putting it on rulebook" ! 145
    "check Inserting it into rulebook" ! 146
    "carry out Inserting it into rulebook" ! 147
    "report Inserting it into rulebook" ! 148
    "check Eating rulebook" ! 149
    "carry out Eating rulebook" ! 150
    "report Eating rulebook" ! 151
    "check Going rulebook" ! 152
    "carry out Going rulebook" ! 153
    "report Going rulebook" ! 154
    "check Entering rulebook" ! 155
    "carry out Entering rulebook" ! 156
    "report Entering rulebook" ! 157
    "check Exiting rulebook" ! 158
    "carry out Exiting rulebook" ! 159
    "report Exiting rulebook" ! 160
    "check Getting off rulebook" ! 161
    "carry out Getting off rulebook" ! 162
    "report Getting off rulebook" ! 163
    "check Looking rulebook" ! 164
    "carry out Looking rulebook" ! 165
    "report Looking rulebook" ! 166
    "check Examining rulebook" ! 167
    "carry out Examining rulebook" ! 168
    "report Examining rulebook" ! 169
    "check Looking under rulebook" ! 170
    "carry out Looking under rulebook" ! 171
    "report Looking under rulebook" ! 172
    "check Searching rulebook" ! 173
    "carry out Searching rulebook" ! 174
    "report Searching rulebook" ! 175
    "check Consulting it about rulebook" ! 176
    "carry out Consulting it about rulebook" ! 177
    "report Consulting it about rulebook" ! 178
    "check Locking it with rulebook" ! 179
    "carry out Locking it with rulebook" ! 180
    "report Locking it with rulebook" ! 181
    "check Unlocking it with rulebook" ! 182
    "carry out Unlocking it with rulebook" ! 183
    "report Unlocking it with rulebook" ! 184
    "check Switching on rulebook" ! 185
    "carry out Switching on rulebook" ! 186
    "report Switching on rulebook" ! 187
    "check Switching off rulebook" ! 188
    "carry out Switching off rulebook" ! 189
    "report Switching off rulebook" ! 190
    "check Opening rulebook" ! 191
    "carry out Opening rulebook" ! 192
    "report Opening rulebook" ! 193
    "check Closing rulebook" ! 194
    "carry out Closing rulebook" ! 195
    "report Closing rulebook" ! 196
    "check Wearing rulebook" ! 197
    "carry out Wearing rulebook" ! 198
    "report Wearing rulebook" ! 199
    "check Taking off rulebook" ! 200
    "carry out Taking off rulebook" ! 201
    "report Taking off rulebook" ! 202
    "check Giving it to rulebook" ! 203
    "carry out Giving it to rulebook" ! 204
    "report Giving it to rulebook" ! 205
    "check Showing it to rulebook" ! 206
    "carry out Showing it to rulebook" ! 207
    "report Showing it to rulebook" ! 208
    "check Waking rulebook" ! 209
    "carry out Waking rulebook" ! 210
    "report Waking rulebook" ! 211
    "check Throwing it at rulebook" ! 212
    "carry out Throwing it at rulebook" ! 213
    "report Throwing it at rulebook" ! 214
    "check Attacking rulebook" ! 215
    "carry out Attacking rulebook" ! 216
    "report Attacking rulebook" ! 217
    "check Kissing rulebook" ! 218
    "carry out Kissing rulebook" ! 219
    "report Kissing rulebook" ! 220
    "check Answering it that rulebook" ! 221
    "carry out Answering it that rulebook" ! 222
    "report Answering it that rulebook" ! 223
    "check Telling it about rulebook" ! 224
    "carry out Telling it about rulebook" ! 225
    "report Telling it about rulebook" ! 226
    "check Asking it about rulebook" ! 227
    "carry out Asking it about rulebook" ! 228
    "report Asking it about rulebook" ! 229
    "check Asking it for rulebook" ! 230
    "carry out Asking it for rulebook" ! 231
    "report Asking it for rulebook" ! 232
    "check Waiting rulebook" ! 233
    "carry out Waiting rulebook" ! 234
    "report Waiting rulebook" ! 235
    "check Touching rulebook" ! 236
    "carry out Touching rulebook" ! 237
    "report Touching rulebook" ! 238
    "check Waving rulebook" ! 239
    "carry out Waving rulebook" ! 240
    "report Waving rulebook" ! 241
    "check Pulling rulebook" ! 242
    "carry out Pulling rulebook" ! 243
    "report Pulling rulebook" ! 244
    "check Pushing rulebook" ! 245
    "carry out Pushing rulebook" ! 246
    "report Pushing rulebook" ! 247
    "check Turning rulebook" ! 248
    "carry out Turning rulebook" ! 249
    "report Turning rulebook" ! 250
    "check Pushing it to rulebook" ! 251
    "carry out Pushing it to rulebook" ! 252
    "report Pushing it to rulebook" ! 253
    "check Squeezing rulebook" ! 254
    "carry out Squeezing rulebook" ! 255
    "report Squeezing rulebook" ! 256
    "check Saying yes rulebook" ! 257
    "carry out Saying yes rulebook" ! 258
    "report Saying yes rulebook" ! 259
    "check Saying no rulebook" ! 260
    "carry out Saying no rulebook" ! 261
    "report Saying no rulebook" ! 262
    "check Burning rulebook" ! 263
    "carry out Burning rulebook" ! 264
    "report Burning rulebook" ! 265
    "check Waking up rulebook" ! 266
    "carry out Waking up rulebook" ! 267
    "report Waking up rulebook" ! 268
    "check Thinking rulebook" ! 269
    "carry out Thinking rulebook" ! 270
    "report Thinking rulebook" ! 271
    "check Smelling rulebook" ! 272
    "carry out Smelling rulebook" ! 273
    "report Smelling rulebook" ! 274
    "check Listening to rulebook" ! 275
    "carry out Listening to rulebook" ! 276
    "report Listening to rulebook" ! 277
    "check Tasting rulebook" ! 278
    "carry out Tasting rulebook" ! 279
    "report Tasting rulebook" ! 280
    "check Cutting rulebook" ! 281
    "carry out Cutting rulebook" ! 282
    "report Cutting rulebook" ! 283
    "check Jumping rulebook" ! 284
    "carry out Jumping rulebook" ! 285
    "report Jumping rulebook" ! 286
    "check Tying it to rulebook" ! 287
    "carry out Tying it to rulebook" ! 288
    "report Tying it to rulebook" ! 289
    "check Drinking rulebook" ! 290
    "carry out Drinking rulebook" ! 291
    "report Drinking rulebook" ! 292
    "check Saying sorry rulebook" ! 293
    "carry out Saying sorry rulebook" ! 294
    "report Saying sorry rulebook" ! 295
    "check Swinging rulebook" ! 296
    "carry out Swinging rulebook" ! 297
    "report Swinging rulebook" ! 298
    "check Rubbing rulebook" ! 299
    "carry out Rubbing rulebook" ! 300
    "report Rubbing rulebook" ! 301
    "check Setting it to rulebook" ! 302
    "carry out Setting it to rulebook" ! 303
    "report Setting it to rulebook" ! 304
    "check Waving hands rulebook" ! 305
    "carry out Waving hands rulebook" ! 306
    "report Waving hands rulebook" ! 307
    "check Buying rulebook" ! 308
    "carry out Buying rulebook" ! 309
    "report Buying rulebook" ! 310
    "check Climbing rulebook" ! 311
    "carry out Climbing rulebook" ! 312
    "report Climbing rulebook" ! 313
    "check Sleeping rulebook" ! 314
    "carry out Sleeping rulebook" ! 315
    "report Sleeping rulebook" ! 316
    "check Quitting the game rulebook" ! 317
    "carry out Quitting the game rulebook" ! 318
    "report Quitting the game rulebook" ! 319
    "check Saving the game rulebook" ! 320
    "carry out Saving the game rulebook" ! 321
    "report Saving the game rulebook" ! 322
    "check Restoring the game rulebook" ! 323
    "carry out Restoring the game rulebook" ! 324
    "report Restoring the game rulebook" ! 325
    "check Restarting the game rulebook" ! 326
    "carry out Restarting the game rulebook" ! 327
    "report Restarting the game rulebook" ! 328
    "check Verifying the story file rulebook" ! 329
    "carry out Verifying the story file rulebook" ! 330
    "report Verifying the story file rulebook" ! 331
    "check Switching the story transcript on rulebook" ! 332
    "carry out Switching the story transcript on rulebook" ! 333
    "report Switching the story transcript on rulebook" ! 334
    "check Switching the story transcript off rulebook" ! 335
    "carry out Switching the story transcript off rulebook" ! 336
    "report Switching the story transcript off rulebook" ! 337
    "check Requesting the story file version rulebook" ! 338
    "carry out Requesting the story file version rulebook" ! 339
    "report Requesting the story file version rulebook" ! 340
    "check Requesting the score rulebook" ! 341
    "carry out Requesting the score rulebook" ! 342
    "report Requesting the score rulebook" ! 343
    "check Preferring abbreviated room descriptions rulebook" ! 344
    "carry out Preferring abbreviated room descriptions rulebook" ! 345
    "report Preferring abbreviated room descriptions rulebook" ! 346
    "check Preferring unabbreviated room descriptions rulebook" ! 347
    "carry out Preferring unabbreviated room descriptions rulebook" ! 348
    "report Preferring unabbreviated room descriptions rulebook" ! 349
    "check Preferring sometimes abbreviated room descriptions rulebook" ! 350
    "carry out Preferring sometimes abbreviated room descriptions rulebook" ! 351
    "report Preferring sometimes abbreviated room descriptions rulebook" ! 352
    "check Switching score notification on rulebook" ! 353
    "carry out Switching score notification on rulebook" ! 354
    "report Switching score notification on rulebook" ! 355
    "check Switching score notification off rulebook" ! 356
    "carry out Switching score notification off rulebook" ! 357
    "report Switching score notification off rulebook" ! 358
    "check Requesting the pronoun meanings rulebook" ! 359
    "carry out Requesting the pronoun meanings rulebook" ! 360
    "report Requesting the pronoun meanings rulebook" ! 361
    "check Dumping rulebook" ! 362
    "carry out Dumping rulebook" ! 363
    "report Dumping rulebook" ! 364
    "check using rulebook" ! 365
    "carry out using rulebook" ! 366
    "report using rulebook" ! 367
    "check Bare-help-invoking rulebook" ! 368
    "carry out Bare-help-invoking rulebook" ! 369
    "report Bare-help-invoking rulebook" ! 370
    "check Move-help-invoking rulebook" ! 371
    "carry out Move-help-invoking rulebook" ! 372
    "report Move-help-invoking rulebook" ! 373
    "check Help-invoking rulebook" ! 374
    "carry out Help-invoking rulebook" ! 375
    "report Help-invoking rulebook" ! 376
    "check Plugging rulebook" ! 377
    "carry out Plugging rulebook" ! 378
    "report Plugging rulebook" ! 379
    "check Unplugging rulebook" ! 380
    "carry out Unplugging rulebook" ! 381
    "report Unplugging rulebook" ! 382
    "check Untieing rulebook" ! 383
    "carry out Untieing rulebook" ! 384
    "report Untieing rulebook" ! 385
    "check Flying rulebook" ! 386
    "carry out Flying rulebook" ! 387
    "report Flying rulebook" ! 388
    "check Suiting-up rulebook" ! 389
    "carry out Suiting-up rulebook" ! 390
    "report Suiting-up rulebook" ! 391
    "check Confirming rulebook" ! 392
    "carry out Confirming rulebook" ! 393
    "report Confirming rulebook" ! 394
    "check Canceling rulebook" ! 395
    "carry out Canceling rulebook" ! 396
    "report Canceling rulebook" ! 397
    "check running-across rulebook" ! 398
    "carry out running-across rulebook" ! 399
    "report running-across rulebook" ! 400
    "check Running rulebook" ! 401
    "carry out Running rulebook" ! 402
    "report Running rulebook" ! 403
    "check Lacing rulebook" ! 404
    "carry out Lacing rulebook" ! 405
    "report Lacing rulebook" ! 406
    "check Blowing out rulebook" ! 407
    "carry out Blowing out rulebook" ! 408
    "report Blowing out rulebook" ! 409
    "check Shaking rulebook" ! 410
    "carry out Shaking rulebook" ! 411
    "report Shaking rulebook" ! 412
    "check Going-up rulebook" ! 413
    "carry out Going-up rulebook" ! 414
    "report Going-up rulebook" ! 415
    "check Going-down rulebook" ! 416
    "carry out Going-down rulebook" ! 417
    "report Going-down rulebook" ! 418
    "check Xyzzying rulebook" ! 419
    "carry out Xyzzying rulebook" ! 420
    "report Xyzzying rulebook" ! 421
    "check Plughing rulebook" ! 422
    "carry out Plughing rulebook" ! 423
    "report Plughing rulebook" ! 424
;


#ENDIF; ! MEMORY_ECONOMY

[ RulePrintingRule R p1;
#ifndef MEMORY_ECONOMY;
	if ((R>=0) && (R<NUMBER_RULEBOOKS_CREATED)) {
		print (string) (RulebookNames-->R);
	} else {
        if (R == R_9) { print "declare everything initially unmentioned rule"; rtrue; } ! rule 0
        if (R == R_10) { print "start in the correct scenes rule"; rtrue; } ! rule 1
        if (R == R_11) { print "when play begins stage rule"; rtrue; } ! rule 2
        if (R == R_12) { print "fix baseline scoring rule"; rtrue; } ! rule 3
        if (R == R_13) { print "display banner rule"; rtrue; } ! rule 4
        if (R == R_14) { print "initial room description rule"; rtrue; } ! rule 5
        if (R == R_15) { print "every turn stage rule"; rtrue; } ! rule 6
        if (R == R_18) { print "notify score changes rule"; rtrue; } ! rule 7
        if (R == R_19) { print "when play ends stage rule"; rtrue; } ! rule 8
        if (R == R_20) { print "print player's obituary rule"; rtrue; } ! rule 9
        if (R == R_21) { print "set pronouns from items from multiple object lists rule"; rtrue; } ! rule 10
        if (R == R_22) { print "announce items from multiple object lists rule"; rtrue; } ! rule 11
        if (R == R_23) { print "before stage rule"; rtrue; } ! rule 12
        if (R == R_24) { print "instead stage rule"; rtrue; } ! rule 13
        if (R == R_25) { print "end action-processing in success rule"; rtrue; } ! rule 14
        if (R == R_26) { print "investigate player's awareness before action rule"; rtrue; } ! rule 15
        if (R == R_27) { print "check stage rule"; rtrue; } ! rule 16
        if (R == R_28) { print "carry out stage rule"; rtrue; } ! rule 17
        if (R == R_29) { print "after stage rule"; rtrue; } ! rule 18
        if (R == R_30) { print "investigate player's awareness after action rule"; rtrue; } ! rule 19
        if (R == R_31) { print "report stage rule"; rtrue; } ! rule 20
        if (R == R_33) { print "player aware of his own actions rule"; rtrue; } ! rule 21
        if (R == R_34) { print "player aware of actions by visible actors rule"; rtrue; } ! rule 22
        if (R == R_35) { print "player aware of actions on visible nouns rule"; rtrue; } ! rule 23
        if (R == R_36) { print "player aware of actions on visible second nouns rule"; rtrue; } ! rule 24
        if (R == R_37) { print "can't act in the dark rule"; rtrue; } ! rule 25
        if (R == R_38) { print "very unlikely to mean taking what's already carried rule"; rtrue; } ! rule 26
        if (R == R_65) { print "scene description text rule"; rtrue; } ! rule 27
        if (R == R_66) { print "make named things mentioned rule"; rtrue; } ! rule 28
        if (R == R_67) { print "standard printing the plural name rule"; rtrue; } ! rule 29
        if (R == R_68) { print "standard printing a number of something rule"; rtrue; } ! rule 30
        if (R == R_69) { print "look around once light available rule"; rtrue; } ! rule 31
        if (R == R_70) { print "exclude scenery from take all rule"; rtrue; } ! rule 32
        if (R == R_71) { print "exclude people from take all rule"; rtrue; } ! rule 33
        if (R == R_72) { print "exclude fixed in place things from take all rule"; rtrue; } ! rule 34
        if (R == R_73) { print "exclude indirect possessions from take all rule"; rtrue; } ! rule 35
        if (R == R_74) { print "exclude people from drop all rule"; rtrue; } ! rule 36
        if (R == R_75) { print "ambient odour rule"; rtrue; } ! rule 37
        if (R == R_76) { print "ambient sound rule"; rtrue; } ! rule 38
        if (R == R_77) { print "block vaguely going rule"; rtrue; } ! rule 39
        if (R == R_78) { print "print the final prompt rule"; rtrue; } ! rule 40
        if (R == R_79) { print "print the final question rule"; rtrue; } ! rule 41
        if (R == R_80) { print "standard respond to final question rule"; rtrue; } ! rule 42
        if (R == R_83) { print "initialise locale description rule"; rtrue; } ! rule 43
        if (R == R_84) { print "find notable locale objects rule"; rtrue; } ! rule 44
        if (R == R_85) { print "interesting locale paragraphs rule"; rtrue; } ! rule 45
        if (R == R_86) { print "you-can-also-see rule"; rtrue; } ! rule 46
        if (R == R_87) { print "standard notable locale objects rule"; rtrue; } ! rule 47
        if (R == R_88) { print "don't mention player's supporter in room descriptions rule"; rtrue; } ! rule 48
        if (R == R_89) { print "don't mention scenery in room descriptions rule"; rtrue; } ! rule 49
        if (R == R_90) { print "don't mention undescribed items in room descriptions rule"; rtrue; } ! rule 50
        if (R == R_91) { print "set pronouns from items in room descriptions rule"; rtrue; } ! rule 51
        if (R == R_92) { print "offer items to writing a paragraph about rule"; rtrue; } ! rule 52
        if (R == R_93) { print "use initial appearance in room descriptions rule"; rtrue; } ! rule 53
        if (R == R_94) { print "initial appearance on supporters rule"; rtrue; } ! rule 54
        if (R == R_96) { print "describe what's on scenery supporters in room descriptions rule"; rtrue; } ! rule 55
        if (R == R_97) { print "describe what's on mentioned supporters in room descriptions rule"; rtrue; } ! rule 56
        if (R == R_98) { print "print empty inventory rule"; rtrue; } ! rule 57
        if (R == R_99) { print "print standard inventory rule"; rtrue; } ! rule 58
        if (R == R_100) { print "report other people taking inventory rule"; rtrue; } ! rule 59
        if (R == R_101) { print "can't take yourself rule"; rtrue; } ! rule 60
        if (R == R_102) { print "can't take other people rule"; rtrue; } ! rule 61
        if (R == R_103) { print "can't take component parts rule"; rtrue; } ! rule 62
        if (R == R_104) { print "can't take people's possessions rule"; rtrue; } ! rule 63
        if (R == R_105) { print "can't take items out of play rule"; rtrue; } ! rule 64
        if (R == R_106) { print "can't take what you're inside rule"; rtrue; } ! rule 65
        if (R == R_107) { print "can't take what's already taken rule"; rtrue; } ! rule 66
        if (R == R_108) { print "can't take scenery rule"; rtrue; } ! rule 67
        if (R == R_109) { print "can only take things rule"; rtrue; } ! rule 68
        if (R == R_110) { print "can't take what's fixed in place rule"; rtrue; } ! rule 69
        if (R == R_111) { print "use player's holdall to avoid exceeding carrying capacity rule"; rtrue; } ! rule 70
        if (R == R_112) { print "can't exceed carrying capacity rule"; rtrue; } ! rule 71
        if (R == R_113) { print "standard taking rule"; rtrue; } ! rule 72
        if (R == R_114) { print "standard report taking rule"; rtrue; } ! rule 73
        if (R == R_115) { print "can't remove what's not inside rule"; rtrue; } ! rule 74
        if (R == R_116) { print "can't remove from people rule"; rtrue; } ! rule 75
        if (R == R_117) { print "convert remove to take rule"; rtrue; } ! rule 76
        if (R == R_118) { print "can't drop yourself rule"; rtrue; } ! rule 77
        if (R == R_119) { print "can't drop body parts rule"; rtrue; } ! rule 78
        if (R == R_120) { print "can't drop what's already dropped rule"; rtrue; } ! rule 79
        if (R == R_121) { print "can't drop what's not held rule"; rtrue; } ! rule 80
        if (R == R_122) { print "can't drop clothes being worn rule"; rtrue; } ! rule 81
        if (R == R_123) { print "can't drop if this exceeds carrying capacity rule"; rtrue; } ! rule 82
        if (R == R_124) { print "standard dropping rule"; rtrue; } ! rule 83
        if (R == R_125) { print "standard report dropping rule"; rtrue; } ! rule 84
        if (R == R_126) { print "convert put to drop where possible rule"; rtrue; } ! rule 85
        if (R == R_127) { print "can't put what's not held rule"; rtrue; } ! rule 86
        if (R == R_128) { print "can't put something on itself rule"; rtrue; } ! rule 87
        if (R == R_129) { print "can't put onto what's not a supporter rule"; rtrue; } ! rule 88
        if (R == R_130) { print "can't put clothes being worn rule"; rtrue; } ! rule 89
        if (R == R_131) { print "can't put if this exceeds carrying capacity rule"; rtrue; } ! rule 90
        if (R == R_132) { print "standard putting rule"; rtrue; } ! rule 91
        if (R == R_133) { print "concise report putting rule"; rtrue; } ! rule 92
        if (R == R_134) { print "standard report putting rule"; rtrue; } ! rule 93
        if (R == R_135) { print "convert insert to drop where possible rule"; rtrue; } ! rule 94
        if (R == R_136) { print "can't insert what's not held rule"; rtrue; } ! rule 95
        if (R == R_137) { print "can't insert something into itself rule"; rtrue; } ! rule 96
        if (R == R_138) { print "can't insert into closed containers rule"; rtrue; } ! rule 97
        if (R == R_139) { print "can't insert into what's not a container rule"; rtrue; } ! rule 98
        if (R == R_140) { print "can't insert clothes being worn rule"; rtrue; } ! rule 99
        if (R == R_141) { print "can't insert if this exceeds carrying capacity rule"; rtrue; } ! rule 100
        if (R == R_142) { print "standard inserting rule"; rtrue; } ! rule 101
        if (R == R_143) { print "concise report inserting rule"; rtrue; } ! rule 102
        if (R == R_144) { print "standard report inserting rule"; rtrue; } ! rule 103
        if (R == R_145) { print "can't eat unless edible rule"; rtrue; } ! rule 104
        if (R == R_146) { print "can't eat clothing without removing it first rule"; rtrue; } ! rule 105
        if (R == R_147) { print "can't eat other people's food rule"; rtrue; } ! rule 106
        if (R == R_148) { print "can't eat portable food without carrying it rule"; rtrue; } ! rule 107
        if (R == R_149) { print "standard eating rule"; rtrue; } ! rule 108
        if (R == R_150) { print "standard report eating rule"; rtrue; } ! rule 109
        if (R == R_151) { print "standard set going variables rule"; rtrue; } ! rule 110
        if (R == R_152) { print "stand up before going rule"; rtrue; } ! rule 111
        if (R == R_153) { print "can't travel in what's not a vehicle rule"; rtrue; } ! rule 112
        if (R == R_154) { print "can't go through undescribed doors rule"; rtrue; } ! rule 113
        if (R == R_155) { print "can't go through closed doors rule"; rtrue; } ! rule 114
        if (R == R_156) { print "determine map connection rule"; rtrue; } ! rule 115
        if (R == R_157) { print "can't go that way rule"; rtrue; } ! rule 116
        if (R == R_158) { print "move player and vehicle rule"; rtrue; } ! rule 117
        if (R == R_159) { print "move floating objects rule"; rtrue; } ! rule 118
        if (R == R_160) { print "check light in new location rule"; rtrue; } ! rule 119
        if (R == R_161) { print "describe room gone into rule"; rtrue; } ! rule 120
        if (R == R_162) { print "find what to enter rule"; rtrue; } ! rule 121
        if (R == R_163) { print "convert enter door into go rule"; rtrue; } ! rule 122
        if (R == R_164) { print "convert enter compass direction into go rule"; rtrue; } ! rule 123
        if (R == R_165) { print "can't enter what's already entered rule"; rtrue; } ! rule 124
        if (R == R_166) { print "can't enter what's not enterable rule"; rtrue; } ! rule 125
        if (R == R_167) { print "can't enter closed containers rule"; rtrue; } ! rule 126
        if (R == R_168) { print "can't enter if this exceeds carrying capacity rule"; rtrue; } ! rule 127
        if (R == R_169) { print "can't enter something carried rule"; rtrue; } ! rule 128
        if (R == R_170) { print "implicitly pass through other barriers rule"; rtrue; } ! rule 129
        if (R == R_171) { print "standard entering rule"; rtrue; } ! rule 130
        if (R == R_172) { print "standard report entering rule"; rtrue; } ! rule 131
        if (R == R_173) { print "describe contents entered into rule"; rtrue; } ! rule 132
        if (R == R_175) { print "convert exit into go out rule"; rtrue; } ! rule 133
        if (R == R_176) { print "can't exit when not inside anything rule"; rtrue; } ! rule 134
        if (R == R_177) { print "can't exit closed containers rule"; rtrue; } ! rule 135
        if (R == R_178) { print "convert exit into get off rule"; rtrue; } ! rule 136
        if (R == R_179) { print "standard exiting rule"; rtrue; } ! rule 137
        if (R == R_180) { print "standard report exiting rule"; rtrue; } ! rule 138
        if (R == R_181) { print "describe room emerged into rule"; rtrue; } ! rule 139
        if (R == R_182) { print "can't get off things rule"; rtrue; } ! rule 140
        if (R == R_183) { print "standard getting off rule"; rtrue; } ! rule 141
        if (R == R_184) { print "standard report getting off rule"; rtrue; } ! rule 142
        if (R == R_185) { print "describe room stood up into rule"; rtrue; } ! rule 143
        if (R == R_186) { print "determine visibility ceiling rule"; rtrue; } ! rule 144
        if (R == R_187) { print "declare everything unmentioned rule"; rtrue; } ! rule 145
        if (R == R_188) { print "room description heading rule"; rtrue; } ! rule 146
        if (R == R_189) { print "room description body text rule"; rtrue; } ! rule 147
        if (R == R_190) { print "room description paragraphs about objects rule"; rtrue; } ! rule 148
        if (R == R_191) { print "check new arrival rule"; rtrue; } ! rule 149
        if (R == R_192) { print "other people looking rule"; rtrue; } ! rule 150
        if (R == R_193) { print "standard examining rule"; rtrue; } ! rule 151
        if (R == R_194) { print "examine directions rule"; rtrue; } ! rule 152
        if (R == R_195) { print "examine containers rule"; rtrue; } ! rule 153
        if (R == R_196) { print "examine supporters rule"; rtrue; } ! rule 154
        if (R == R_197) { print "examine devices rule"; rtrue; } ! rule 155
        if (R == R_198) { print "examine undescribed things rule"; rtrue; } ! rule 156
        if (R == R_199) { print "report other people examining rule"; rtrue; } ! rule 157
        if (R == R_200) { print "standard looking under rule"; rtrue; } ! rule 158
        if (R == R_201) { print "report other people looking under rule"; rtrue; } ! rule 159
        if (R == R_202) { print "can't search unless container or supporter rule"; rtrue; } ! rule 160
        if (R == R_203) { print "can't search closed opaque containers rule"; rtrue; } ! rule 161
        if (R == R_204) { print "standard search containers rule"; rtrue; } ! rule 162
        if (R == R_205) { print "standard search supporters rule"; rtrue; } ! rule 163
        if (R == R_206) { print "report other people searching rule"; rtrue; } ! rule 164
        if (R == R_207) { print "block consulting rule"; rtrue; } ! rule 165
        if (R == R_208) { print "can't lock without a lock rule"; rtrue; } ! rule 166
        if (R == R_209) { print "can't lock what's already locked rule"; rtrue; } ! rule 167
        if (R == R_210) { print "can't lock what's open rule"; rtrue; } ! rule 168
        if (R == R_211) { print "can't lock without the correct key rule"; rtrue; } ! rule 169
        if (R == R_212) { print "standard locking rule"; rtrue; } ! rule 170
        if (R == R_213) { print "standard report locking rule"; rtrue; } ! rule 171
        if (R == R_214) { print "can't unlock without a lock rule"; rtrue; } ! rule 172
        if (R == R_215) { print "can't unlock what's already unlocked rule"; rtrue; } ! rule 173
        if (R == R_216) { print "can't unlock without the correct key rule"; rtrue; } ! rule 174
        if (R == R_217) { print "standard unlocking rule"; rtrue; } ! rule 175
        if (R == R_218) { print "standard report unlocking rule"; rtrue; } ! rule 176
        if (R == R_219) { print "can't switch on unless switchable rule"; rtrue; } ! rule 177
        if (R == R_220) { print "can't switch on what's already on rule"; rtrue; } ! rule 178
        if (R == R_221) { print "standard switching on rule"; rtrue; } ! rule 179
        if (R == R_222) { print "standard report switching on rule"; rtrue; } ! rule 180
        if (R == R_223) { print "can't switch off unless switchable rule"; rtrue; } ! rule 181
        if (R == R_224) { print "can't switch off what's already off rule"; rtrue; } ! rule 182
        if (R == R_225) { print "standard switching off rule"; rtrue; } ! rule 183
        if (R == R_226) { print "standard report switching off rule"; rtrue; } ! rule 184
        if (R == R_227) { print "can't open unless openable rule"; rtrue; } ! rule 185
        if (R == R_228) { print "can't open what's locked rule"; rtrue; } ! rule 186
        if (R == R_229) { print "can't open what's already open rule"; rtrue; } ! rule 187
        if (R == R_230) { print "standard opening rule"; rtrue; } ! rule 188
        if (R == R_231) { print "reveal any newly visible interior rule"; rtrue; } ! rule 189
        if (R == R_232) { print "standard report opening rule"; rtrue; } ! rule 190
        if (R == R_233) { print "can't close unless openable rule"; rtrue; } ! rule 191
        if (R == R_234) { print "can't close what's already closed rule"; rtrue; } ! rule 192
        if (R == R_235) { print "standard closing rule"; rtrue; } ! rule 193
        if (R == R_236) { print "standard report closing rule"; rtrue; } ! rule 194
        if (R == R_237) { print "can't wear what's not clothing rule"; rtrue; } ! rule 195
        if (R == R_238) { print "can't wear what's not held rule"; rtrue; } ! rule 196
        if (R == R_239) { print "can't wear what's already worn rule"; rtrue; } ! rule 197
        if (R == R_240) { print "standard wearing rule"; rtrue; } ! rule 198
        if (R == R_241) { print "standard report wearing rule"; rtrue; } ! rule 199
        if (R == R_243) { print "can't take off what's not worn rule"; rtrue; } ! rule 200
        if (R == R_244) { print "can't exceed carrying capacity when taking off rule"; rtrue; } ! rule 201
        if (R == R_245) { print "standard taking off rule"; rtrue; } ! rule 202
        if (R == R_246) { print "standard report taking off rule"; rtrue; } ! rule 203
        if (R == R_247) { print "can't give what you haven't got rule"; rtrue; } ! rule 204
        if (R == R_248) { print "can't give to yourself rule"; rtrue; } ! rule 205
        if (R == R_249) { print "can't give to a non-person rule"; rtrue; } ! rule 206
        if (R == R_250) { print "can't give clothes being worn rule"; rtrue; } ! rule 207
        if (R == R_251) { print "block giving rule"; rtrue; } ! rule 208
        if (R == R_252) { print "can't exceed carrying capacity when giving rule"; rtrue; } ! rule 209
        if (R == R_253) { print "standard giving rule"; rtrue; } ! rule 210
        if (R == R_254) { print "standard report giving rule"; rtrue; } ! rule 211
        if (R == R_255) { print "can't show what you haven't got rule"; rtrue; } ! rule 212
        if (R == R_256) { print "convert show to yourself to examine rule"; rtrue; } ! rule 213
        if (R == R_257) { print "block showing rule"; rtrue; } ! rule 214
        if (R == R_258) { print "block waking rule"; rtrue; } ! rule 215
        if (R == R_259) { print "implicitly remove thrown clothing rule"; rtrue; } ! rule 216
        if (R == R_260) { print "futile to throw things at inanimate objects rule"; rtrue; } ! rule 217
        if (R == R_261) { print "block throwing at rule"; rtrue; } ! rule 218
        if (R == R_262) { print "block attacking rule"; rtrue; } ! rule 219
        if (R == R_263) { print "kissing yourself rule"; rtrue; } ! rule 220
        if (R == R_264) { print "block kissing rule"; rtrue; } ! rule 221
        if (R == R_265) { print "block answering rule"; rtrue; } ! rule 222
        if (R == R_266) { print "telling yourself rule"; rtrue; } ! rule 223
        if (R == R_267) { print "block telling rule"; rtrue; } ! rule 224
        if (R == R_268) { print "block asking rule"; rtrue; } ! rule 225
        if (R == R_269) { print "asking yourself for something rule"; rtrue; } ! rule 226
        if (R == R_270) { print "translate asking for to giving rule"; rtrue; } ! rule 227
        if (R == R_271) { print "standard report waiting rule"; rtrue; } ! rule 228
        if (R == R_272) { print "report touching yourself rule"; rtrue; } ! rule 229
        if (R == R_273) { print "report touching other people rule"; rtrue; } ! rule 230
        if (R == R_274) { print "report touching things rule"; rtrue; } ! rule 231
        if (R == R_275) { print "can't wave what's not held rule"; rtrue; } ! rule 232
        if (R == R_276) { print "report waving things rule"; rtrue; } ! rule 233
        if (R == R_277) { print "can't pull what's fixed in place rule"; rtrue; } ! rule 234
        if (R == R_278) { print "can't pull scenery rule"; rtrue; } ! rule 235
        if (R == R_279) { print "can't pull people rule"; rtrue; } ! rule 236
        if (R == R_280) { print "report pulling rule"; rtrue; } ! rule 237
        if (R == R_281) { print "can't push what's fixed in place rule"; rtrue; } ! rule 238
        if (R == R_282) { print "can't push scenery rule"; rtrue; } ! rule 239
        if (R == R_283) { print "can't push people rule"; rtrue; } ! rule 240
        if (R == R_284) { print "report pushing rule"; rtrue; } ! rule 241
        if (R == R_285) { print "can't turn what's fixed in place rule"; rtrue; } ! rule 242
        if (R == R_286) { print "can't turn scenery rule"; rtrue; } ! rule 243
        if (R == R_287) { print "can't turn people rule"; rtrue; } ! rule 244
        if (R == R_288) { print "report turning rule"; rtrue; } ! rule 245
        if (R == R_289) { print "can't push unpushable things rule"; rtrue; } ! rule 246
        if (R == R_290) { print "can't push to non-directions rule"; rtrue; } ! rule 247
        if (R == R_291) { print "can't push vertically rule"; rtrue; } ! rule 248
        if (R == R_292) { print "can't push from within rule"; rtrue; } ! rule 249
        if (R == R_293) { print "standard pushing in directions rule"; rtrue; } ! rule 250
        if (R == R_294) { print "block pushing in directions rule"; rtrue; } ! rule 251
        if (R == R_295) { print "innuendo about squeezing people rule"; rtrue; } ! rule 252
        if (R == R_296) { print "report squeezing rule"; rtrue; } ! rule 253
        if (R == R_297) { print "block saying yes rule"; rtrue; } ! rule 254
        if (R == R_298) { print "block saying no rule"; rtrue; } ! rule 255
        if (R == R_299) { print "block burning rule"; rtrue; } ! rule 256
        if (R == R_300) { print "block waking up rule"; rtrue; } ! rule 257
        if (R == R_301) { print "block thinking rule"; rtrue; } ! rule 258
        if (R == R_302) { print "report smelling rule"; rtrue; } ! rule 259
        if (R == R_303) { print "report listening rule"; rtrue; } ! rule 260
        if (R == R_304) { print "report tasting rule"; rtrue; } ! rule 261
        if (R == R_305) { print "block cutting rule"; rtrue; } ! rule 262
        if (R == R_306) { print "report jumping rule"; rtrue; } ! rule 263
        if (R == R_307) { print "block tying rule"; rtrue; } ! rule 264
        if (R == R_308) { print "block drinking rule"; rtrue; } ! rule 265
        if (R == R_309) { print "block saying sorry rule"; rtrue; } ! rule 266
        if (R == R_310) { print "block swinging rule"; rtrue; } ! rule 267
        if (R == R_311) { print "can't rub another person rule"; rtrue; } ! rule 268
        if (R == R_312) { print "report rubbing rule"; rtrue; } ! rule 269
        if (R == R_313) { print "block setting it to rule"; rtrue; } ! rule 270
        if (R == R_314) { print "report waving hands rule"; rtrue; } ! rule 271
        if (R == R_315) { print "block buying rule"; rtrue; } ! rule 272
        if (R == R_316) { print "block climbing rule"; rtrue; } ! rule 273
        if (R == R_317) { print "block sleeping rule"; rtrue; } ! rule 274
        if (R == R_801) { print "sort the Table of User Styles rule"; rtrue; } ! rule 275
        if (R == R_802) { print "set text styles rule"; rtrue; } ! rule 276
        if (R == R_988) { print "too many trees rule"; rtrue; } ! rule 277
        if (R == LITTLE_USED_DO_NOTHING_R) { print "little-used do nothing rule"; rtrue; } ! rule 278
        if (R == VIRTUAL_MACHINE_STARTUP_R) { print "virtual machine startup rule"; rtrue; } ! rule 279
        if (R == INITIALISE_MEMORY_R) { print "initialise memory rule"; rtrue; } ! rule 280
        if (R == SEED_RANDOM_NUMBER_GENERATOR_R) { print "seed random number generator rule"; rtrue; } ! rule 281
        if (R == UPDATE_CHRONOLOGICAL_RECORDS_R) { print "update chronological records rule"; rtrue; } ! rule 282
        if (R == POSITION_PLAYER_IN_MODEL_R) { print "position player in model world rule"; rtrue; } ! rule 283
        if (R == ADJUST_LIGHT_R) { print "adjust light rule"; rtrue; } ! rule 284
        if (R == ADVANCE_TIME_R) { print "advance time rule"; rtrue; } ! rule 285
        if (R == GENERATE_ACTION_R) { print "generate action rule"; rtrue; } ! rule 286
        if (R == NOTE_OBJECT_ACQUISITIONS_R) { print "note object acquisitions rule"; rtrue; } ! rule 287
        if (R == PARSE_COMMAND_R) { print "parse command rule"; rtrue; } ! rule 288
        if (R == TIMED_EVENTS_R) { print "timed events rule"; rtrue; } ! rule 289
        if (R == RESURRECT_PLAYER_IF_ASKED_R) { print "resurrect player if asked rule"; rtrue; } ! rule 290
        if (R == ASK_FINAL_QUESTION_R) { print "ask the final question rule"; rtrue; } ! rule 291
        if (R == DetectSceneChange) { print "scene change machinery rule"; rtrue; } ! rule 292
        if (R == BASIC_ACCESSIBILITY_R) { print "basic accessibility rule"; rtrue; } ! rule 293
        if (R == BASIC_VISIBILITY_R) { print "basic visibility rule"; rtrue; } ! rule 294
        if (R == CARRYING_REQUIREMENTS_R) { print "carrying requirements rule"; rtrue; } ! rule 295
        if (R == REQUESTED_ACTIONS_REQUIRE_R) { print "requested actions require persuasion rule"; rtrue; } ! rule 296
        if (R == CARRY_OUT_REQUESTED_ACTIONS_R) { print "carry out requested actions rule"; rtrue; } ! rule 297
        if (R == DESCEND_TO_SPECIFIC_ACTION_R) { print "descend to specific action-processing rule"; rtrue; } ! rule 298
        if (R == WORK_OUT_DETAILS_OF_SPECIFIC_R) { print "work out details of specific action rule"; rtrue; } ! rule 299
        if (R == ACCESS_THROUGH_BARRIERS_R) { print "access through barriers rule"; rtrue; } ! rule 300
        if (R == CANT_REACH_INSIDE_CLOSED_R) { print "can't reach inside closed containers rule"; rtrue; } ! rule 301
        if (R == CANT_REACH_INSIDE_ROOMS_R) { print "can't reach inside rooms rule"; rtrue; } ! rule 302
        if (R == CANT_REACH_OUTSIDE_CLOSED_R) { print "can't reach outside closed containers rule"; rtrue; } ! rule 303
        if (R == LIST_WRITER_INTERNAL_R) { print "list writer internal rule"; rtrue; } ! rule 304
        if (R == ACTION_PROCESSING_INTERNAL_R) { print "action processing internal rule"; rtrue; } ! rule 305
        if (R == PARSER_ERROR_INTERNAL_R) { print "parser error internal rule"; rtrue; } ! rule 306
        if (R == PARSER_N_ERROR_INTERNAL_R) { print "parser nothing error internal rule"; rtrue; } ! rule 307
        if (R == DARKNESS_NAME_INTERNAL_R) { print "darkness name internal rule"; rtrue; } ! rule 308
        if (R == PARSER_COMMAND_INTERNAL_R) { print "parser command internal rule"; rtrue; } ! rule 309
        if (R == PARSER_CLARIF_INTERNAL_R) { print "parser clarification internal rule"; rtrue; } ! rule 310
        if (R == YES_OR_NO_QUESTION_INTERNAL_R) { print "yes or no question internal rule"; rtrue; } ! rule 311
        if (R == PRINT_PROTAGONIST_INTERNAL_R) { print "print protagonist internal rule"; rtrue; } ! rule 312
        if (R == STANDARD_NAME_PRINTING_R) { print "standard name printing rule"; rtrue; } ! rule 313
        if (R == STANDARD_CONTENTS_LISTING_R) { print "standard contents listing rule"; rtrue; } ! rule 314
        if (R == STANDARD_IMPLICIT_TAKING_R) { print "standard implicit taking rule"; rtrue; } ! rule 315
        if (R == ENABLE_GLULX_ACCEL_R) { print "enable Glulx acceleration rule"; rtrue; } ! rule 316
        if (R == PRINT_OBITUARY_HEADLINE_R) { print "print obituary headline rule"; rtrue; } ! rule 317
        if (R == PRINT_FINAL_SCORE_R) { print "print final score rule"; rtrue; } ! rule 318
        if (R == DISPLAY_FINAL_STATUS_LINE_R) { print "display final status line rule"; rtrue; } ! rule 319
        if (R == IMMEDIATELY_RESTART_VM_R) { print "immediately restart the VM rule"; rtrue; } ! rule 320
        if (R == IMMEDIATELY_RESTORE_SAVED_R) { print "immediately restore saved game rule"; rtrue; } ! rule 321
        if (R == IMMEDIATELY_QUIT_R) { print "immediately quit rule"; rtrue; } ! rule 322
        if (R == IMMEDIATELY_UNDO_R) { print "immediately undo rule"; rtrue; } ! rule 323
        if (R == READ_FINAL_ANSWER_R) { print "read the final answer rule"; rtrue; } ! rule 324
        if (R == STANDARD_RESPONSE_ISSUING_R) { print "standard issuing the response text rule"; rtrue; } ! rule 325
        if (R == QUIT_THE_GAME_R) { print "quit the game rule"; rtrue; } ! rule 326
        if (R == SAVE_THE_GAME_R) { print "save the game rule"; rtrue; } ! rule 327
        if (R == RESTORE_THE_GAME_R) { print "restore the game rule"; rtrue; } ! rule 328
        if (R == RESTART_THE_GAME_R) { print "restart the game rule"; rtrue; } ! rule 329
        if (R == VERIFY_THE_STORY_FILE_R) { print "verify the story file rule"; rtrue; } ! rule 330
        if (R == SWITCH_TRANSCRIPT_ON_R) { print "switch the story transcript on rule"; rtrue; } ! rule 331
        if (R == SWITCH_TRANSCRIPT_OFF_R) { print "switch the story transcript off rule"; rtrue; } ! rule 332
        if (R == ANNOUNCE_STORY_FILE_VERSION_R) { print "announce the story file version rule"; rtrue; } ! rule 333
        if (R == ANNOUNCE_SCORE_R) { print "announce the score rule"; rtrue; } ! rule 334
        if (R == PREFER_ABBREVIATED_R) { print "prefer abbreviated room descriptions rule"; rtrue; } ! rule 335
        if (R == REP_PREFER_ABBREVIATED_R) { print "standard report preferring abbreviated room descriptions rule"; rtrue; } ! rule 336
        if (R == PREFER_UNABBREVIATED_R) { print "prefer unabbreviated room descriptions rule"; rtrue; } ! rule 337
        if (R == REP_PREFER_UNABBREVIATED_R) { print "standard report preferring unabbreviated room descriptions rule"; rtrue; } ! rule 338
        if (R == PREFER_SOMETIMES_ABBREVIATED_R) { print "prefer sometimes abbreviated room descriptions rule"; rtrue; } ! rule 339
        if (R == REP_PREFER_SOMETIMES_ABBR_R) { print "standard report preferring sometimes abbreviated room descriptions rule"; rtrue; } ! rule 340
        if (R == SWITCH_SCORE_NOTIFY_ON_R) { print "switch score notification on rule"; rtrue; } ! rule 341
        if (R == REP_SWITCH_NOTIFY_ON_R) { print "standard report switching score notification on rule"; rtrue; } ! rule 342
        if (R == SWITCH_SCORE_NOTIFY_OFF_R) { print "switch score notification off rule"; rtrue; } ! rule 343
        if (R == REP_SWITCH_NOTIFY_OFF_R) { print "standard report switching score notification off rule"; rtrue; } ! rule 344
        if (R == ANNOUNCE_PRONOUN_MEANINGS_R) { print "announce the pronoun meanings rule"; rtrue; } ! rule 345
        if (R == R_16) { print "A first turn sequence rule"; rtrue; } ! rule 346
        if (R == R_17) { print "A last turn sequence rule"; rtrue; } ! rule 347
        if (R == R_32) { print "last specific action-processing rule"; rtrue; } ! rule 348
        if (R == R_174) { print "Setting action variables for exiting"; rtrue; } ! rule 349
        if (R == R_242) { print "Does the player mean taking off something worn"; rtrue; } ! rule 350
        if (R == R_799) { print "Rule for printing the banner text"; rtrue; } ! rule 351
        if (R == R_800) { print "Instead of going through a closed door"; rtrue; } ! rule 352
        if (R == R_826) { print "When play begins"; rtrue; } ! rule 353
        if (R == R_828) { print "Instead of taking something when the number of entries in the multiple object list is greater than 1"; rtrue; } ! rule 354
        if (R == R_829) { print "Instead of going from the house to a room which is not in the house when the jacket is not worn"; rtrue; } ! rule 355
        if (R == R_830) { print "Instead of taking off the jacket when the player is not in the house"; rtrue; } ! rule 356
        if (R == R_831) { print "Instead of going from the house to a room which is not in the house when the hat is not worn"; rtrue; } ! rule 357
        if (R == R_832) { print "Instead of taking off the hat when the player is not in the house"; rtrue; } ! rule 358
        if (R == R_833) { print "Instead of going from the house to a room which is not in the house when the belt is not worn"; rtrue; } ! rule 359
        if (R == R_834) { print "Instead of taking off the belt when the player is not in the house"; rtrue; } ! rule 360
        if (R == R_835) { print "Instead of taking off socks when the player is wearing work shoes or the player is wearing the pair of running shoes"; rtrue; } ! rule 361
        if (R == R_836) { print "Instead of taking off a shirt when the player is wearing a jacket"; rtrue; } ! rule 362
        if (R == R_837) { print "Instead of taking off pants when the player is wearing shoes"; rtrue; } ! rule 363
        if (R == R_838) { print "Instead of taking off pants when the player is wearing a belt"; rtrue; } ! rule 364
        if (R == R_839) { print "Instead of taking off underwear when the player is wearing pants"; rtrue; } ! rule 365
        if (R == R_840) { print "Instead of putting on socks when the player is wearing work shoes or the player is wearing the pair of running shoes"; rtrue; } ! rule 366
        if (R == R_841) { print "Instead of putting on a shirt when the player is wearing a jacket"; rtrue; } ! rule 367
        if (R == R_842) { print "Instead of putting on pants when the player is wearing shoes"; rtrue; } ! rule 368
        if (R == R_843) { print "Instead of putting on a belt when the player is not wearing pants"; rtrue; } ! rule 369
        if (R == R_844) { print "Instead of putting on underwear when the player is wearing pants"; rtrue; } ! rule 370
        if (R == R_845) { print "Instead of taking a liquid"; rtrue; } ! rule 371
        if (R == R_846) { print "Carry out dumping"; rtrue; } ! rule 372
        if (R == R_847) { print "Instead of dumping the bucket"; rtrue; } ! rule 373
        if (R == R_848) { print "carry out using"; rtrue; } ! rule 374
        if (R == R_849) { print "Instead of using the ladder"; rtrue; } ! rule 375
        if (R == R_850) { print "Instead of using the iPod"; rtrue; } ! rule 376
        if (R == R_851) { print "Instead of using the stool"; rtrue; } ! rule 377
        if (R == R_852) { print "Instead of using the car"; rtrue; } ! rule 378
        if (R == R_853) { print "Instead of using the hair gel"; rtrue; } ! rule 379
        if (R == R_868) { print "Rule for printing a parser error when the latest parser error is the noun did not make sense in that context error and action-to-be is the help-invoking action"; rtrue; } ! rule 380
        if (R == R_869) { print "Check bare-help-invoking"; rtrue; } ! rule 381
        if (R == R_870) { print "Check move-help-invoking"; rtrue; } ! rule 382
        if (R == R_871) { print "Carry out help-invoking a help-topic"; rtrue; } ! rule 383
        if (R == R_873) { print "Instead of listening when the iPod is playing"; rtrue; } ! rule 384
        if (R == R_874) { print "Instead of listening when the player is in the woods and the nest is not found"; rtrue; } ! rule 385
        if (R == R_875) { print "Instead of entering the bed"; rtrue; } ! rule 386
        if (R == R_876) { print "Instead of wearing the iPod"; rtrue; } ! rule 387
        if (R == R_877) { print "Instead of inserting the earbuds into the iPod"; rtrue; } ! rule 388
        if (R == R_878) { print "After taking the muddy brown key"; rtrue; } ! rule 389
        if (R == R_879) { print "Instead of climbing the staircase"; rtrue; } ! rule 390
        if (R == R_880) { print "Instead of opening the bottom drawer"; rtrue; } ! rule 391
        if (R == R_881) { print "Instead of taking the cereal crumbs"; rtrue; } ! rule 392
        if (R == R_882) { print "Instead of taking the tupperware"; rtrue; } ! rule 393
        if (R == R_883) { print "Instead of eating the loaf"; rtrue; } ! rule 394
        if (R == R_884) { print "Instead of inserting something into the toaster"; rtrue; } ! rule 395
        if (R == R_885) { print "Instead of going from the kitchen when the button is active"; rtrue; } ! rule 396
        if (R == R_886) { print "Instead of opening the bread"; rtrue; } ! rule 397
        if (R == R_887) { print "Instead of switching on the toaster"; rtrue; } ! rule 398
        if (R == R_889) { print "Carry out plugging"; rtrue; } ! rule 399
        if (R == R_890) { print "song ends"; rtrue; } ! rule 400
        if (R == R_891) { print "Carry out unplugging"; rtrue; } ! rule 401
        if (R == R_892) { print "Instead of pushing the TOAST button"; rtrue; } ! rule 402
        if (R == R_893) { print "toaster beeps"; rtrue; } ! rule 403
        if (R == R_894) { print "Instead of taking the toast button when the toaster is done"; rtrue; } ! rule 404
        if (R == R_895) { print "Instead of climbing the stool"; rtrue; } ! rule 405
        if (R == R_896) { print "Before unlocking the back door with the blue key"; rtrue; } ! rule 406
        if (R == R_897) { print "Carry out untieing"; rtrue; } ! rule 407
        if (R == R_898) { print "Instead of wearing the running shoes when the work shoes are worn"; rtrue; } ! rule 408
        if (R == R_899) { print "Instead of wearing the work shoes when the running shoes are worn"; rtrue; } ! rule 409
        if (R == R_900) { print "Instead of untieing the work shoes"; rtrue; } ! rule 410
        if (R == R_901) { print "Instead of untieing the running shoes"; rtrue; } ! rule 411
        if (R == R_902) { print "Instead of untieing the Toyota key"; rtrue; } ! rule 412
        if (R == R_903) { print "Before taking the Toyota key"; rtrue; } ! rule 413
        if (R == R_904) { print "Instead of wearing the left running shoe"; rtrue; } ! rule 414
        if (R == R_905) { print "Instead of wearing the right running shoe"; rtrue; } ! rule 415
        if (R == R_906) { print "Every turn when the player has the right running shoe and the player has the left running shoe"; rtrue; } ! rule 416
        if (R == R_907) { print "Instead of examining the closet door"; rtrue; } ! rule 417
        if (R == R_908) { print "Instead of opening the chest"; rtrue; } ! rule 418
        if (R == R_909) { print "Instead of taking off the dollop of hair gel"; rtrue; } ! rule 419
        if (R == R_910) { print "Instead of wearing the can of hair gel"; rtrue; } ! rule 420
        if (R == R_911) { print "Instead of opening or closing the medicine cabinet when the player is not on the stool"; rtrue; } ! rule 421
        if (R == R_913) { print "Instead of inserting the bucket into the bathtub"; rtrue; } ! rule 422
        if (R == R_914) { print "Every turn while the water level is greater than 9 and the drain is plugged"; rtrue; } ! rule 423
        if (R == R_915) { print "Every turn while the faucet is on and the drain is plugged"; rtrue; } ! rule 424
        if (R == R_916) { print "Instead of entering the bathtub when the water level is less than 5"; rtrue; } ! rule 425
        if (R == R_917) { print "Instead of switching on the faucet"; rtrue; } ! rule 426
        if (R == R_918) { print "Instead of switching off the faucet"; rtrue; } ! rule 427
        if (R == R_919) { print "Instead of turning the faucet"; rtrue; } ! rule 428
        if (R == R_920) { print "Rule for printing the name of the bathtub"; rtrue; } ! rule 429
        if (R == R_921) { print "Instead of entering the bathtub when the player is wearing anything tub-relevant"; rtrue; } ! rule 430
        if (R == R_922) { print "Instead of entering the bathtub when the piranhas are in the bathtub"; rtrue; } ! rule 431
        if (R == R_923) { print "Instead of opening the vat"; rtrue; } ! rule 432
        if (R == R_924) { print "Instead of inserting the bucket into the rocket fuel"; rtrue; } ! rule 433
        if (R == R_925) { print "Instead of inserting the bucket into the vat"; rtrue; } ! rule 434
        if (R == R_926) { print "Instead of inserting something into the vat"; rtrue; } ! rule 435
        if (R == R_927) { print "Instead of taking the key cabinet"; rtrue; } ! rule 436
        if (R == R_928) { print "Instead of turning on the spigot"; rtrue; } ! rule 437
        if (R == R_929) { print "Before taking the bucket"; rtrue; } ! rule 438
        if (R == R_930) { print "A rule for reaching inside the roof of the shed"; rtrue; } ! rule 439
        if (R == R_931) { print "Rule for printing the name of the spaceship"; rtrue; } ! rule 440
        if (R == R_932) { print "Carry out flying"; rtrue; } ! rule 441
        if (R == R_933) { print "Instead of flying the spaceship"; rtrue; } ! rule 442
        if (R == R_934) { print "Instead of pushing the ON button"; rtrue; } ! rule 443
        if (R == R_935) { print "Instead of entering the spaceship when a mouse is enclosed by the player"; rtrue; } ! rule 444
        if (R == R_936) { print "Instead of answering the computer that ~confirm~"; rtrue; } ! rule 445
        if (R == R_937) { print "Instead of answering the computer that ~SUIT UP~"; rtrue; } ! rule 446
        if (R == R_938) { print "Instead of answering the computer that ~CANCEL~"; rtrue; } ! rule 447
        if (R == R_939) { print "Instead of suiting-up"; rtrue; } ! rule 448
        if (R == R_940) { print "Instead of confirming"; rtrue; } ! rule 449
        if (R == R_941) { print "Instead of canceling"; rtrue; } ! rule 450
        if (R == R_942) { print "Instead of pushing the LAUNCH button"; rtrue; } ! rule 451
        if (R == R_943) { print "Instead of opening the spaceship in the air"; rtrue; } ! rule 452
        if (R == R_944) { print "Instead of opening the spaceship in outer space"; rtrue; } ! rule 453
        if (R == R_945) { print "autopilot engages"; rtrue; } ! rule 454
        if (R == R_946) { print "autopilot takes over"; rtrue; } ! rule 455
        if (R == R_947) { print "ship runs out of fuel"; rtrue; } ! rule 456
        if (R == R_948) { print "Every turn while the spaceship is out of control"; rtrue; } ! rule 457
        if (R == R_949) { print "ship crash lands"; rtrue; } ! rule 458
        if (R == R_950) { print "autopilot lands the ship"; rtrue; } ! rule 459
        if (R == R_951) { print "Instead of inserting bucketful of rocket fuel into the spaceship"; rtrue; } ! rule 460
        if (R == R_952) { print "Instead of taking off the spacesuit in outer space"; rtrue; } ! rule 461
        if (R == R_953) { print "Instead of taking off the helmet in outer space"; rtrue; } ! rule 462
        if (R == R_954) { print "Instead of taking or pulling the fork when the fork is stuck"; rtrue; } ! rule 463
        if (R == R_955) { print "Before opening the blue car"; rtrue; } ! rule 464
        if (R == R_956) { print "After entering the blue car"; rtrue; } ! rule 465
        if (R == R_957) { print "Instead of going to the house when the player is in the car"; rtrue; } ! rule 466
        if (R == R_958) { print "Before going when the player is in the car"; rtrue; } ! rule 467
        if (R == R_959) { print "Instead of unlocking the car with something"; rtrue; } ! rule 468
        if (R == R_960) { print "Instead of going to the abandoned train station when the player is in the car"; rtrue; } ! rule 469
        if (R == R_961) { print "After examining the map"; rtrue; } ! rule 470
        if (R == R_962) { print "Instead of entering the tracks"; rtrue; } ! rule 471
        if (R == R_963) { print "Every turn when the player is on the edge of the platform"; rtrue; } ! rule 472
        if (R == R_964) { print "Instead of pushing the CALL TRAIN button"; rtrue; } ! rule 473
        if (R == R_965) { print "After examining the CALL TRAIN button"; rtrue; } ! rule 474
        if (R == R_966) { print "train comes"; rtrue; } ! rule 475
        if (R == R_967) { print "Carry out running"; rtrue; } ! rule 476
        if (R == R_968) { print "Instead of going when the player is wearing the pair of running shoes"; rtrue; } ! rule 477
        if (R == R_969) { print "Carry out running-across"; rtrue; } ! rule 478
        if (R == R_970) { print "Carry out lacing"; rtrue; } ! rule 479
        if (R == R_971) { print "Instead of lacing the pair of running shoes"; rtrue; } ! rule 480
        if (R == R_972) { print "After taking off the pair of running shoes"; rtrue; } ! rule 481
        if (R == R_973) { print "Before going through the tunnel"; rtrue; } ! rule 482
        if (R == R_974) { print "Every turn when the player is in the lair"; rtrue; } ! rule 483
        if (R == R_975) { print "Instead of taking the snake"; rtrue; } ! rule 484
        if (R == R_976) { print "After dropping a mouse"; rtrue; } ! rule 485
        if (R == R_977) { print "Instead of taking or touching the candle when the player is wearing a dollop of hair gel"; rtrue; } ! rule 486
        if (R == R_978) { print "Instead of taking the candle"; rtrue; } ! rule 487
        if (R == R_979) { print "Carry out blowing out"; rtrue; } ! rule 488
        if (R == R_980) { print "Instead of blowing out the candle"; rtrue; } ! rule 489
        if (R == R_981) { print "Instead of inserting something into the cage"; rtrue; } ! rule 490
        if (R == R_982) { print "snake leaves the cage"; rtrue; } ! rule 491
        if (R == R_983) { print "Instead of entering the stream"; rtrue; } ! rule 492
        if (R == R_984) { print "Instead of taking the stream when the player has the bucket"; rtrue; } ! rule 493
        if (R == R_985) { print "Instead of inserting the bucket into the stream"; rtrue; } ! rule 494
        if (R == R_986) { print "Instead of going up from the Woods"; rtrue; } ! rule 495
        if (R == R_987) { print "Instead of going down from the Woods"; rtrue; } ! rule 496
        if (R == R_989) { print "Instead of dropping the wasps' nest when the player does not have the wasps' nest"; rtrue; } ! rule 497
        if (R == R_990) { print "Instead of taking the wasps' nest when the player is not in the Woods"; rtrue; } ! rule 498
        if (R == R_991) { print "Instead of dropping the wasps' nest"; rtrue; } ! rule 499
        if (R == R_992) { print "Carry out shaking"; rtrue; } ! rule 500
        if (R == R_993) { print "Instead of shaking a tree"; rtrue; } ! rule 501
        if (R == R_994) { print "Instead of going up from the Woods"; rtrue; } ! rule 502
        if (R == R_995) { print "Instead of climbing a tree ( called the apparatus )"; rtrue; } ! rule 503
        if (R == R_996) { print "Instead of going-up"; rtrue; } ! rule 504
        if (R == R_997) { print "Instead of going-down"; rtrue; } ! rule 505
        if (R == R_998) { print "Instead of going outside from the Hunting Lodge"; rtrue; } ! rule 506
        if (R == R_1000) { print "Instead of wearing the moose head"; rtrue; } ! rule 507
        if (R == R_1001) { print "Instead of going somewhere when the player is wearing the moose head and the moose head is not accustomed"; rtrue; } ! rule 508
        if (R == R_1002) { print "Instead of going to the hunting grounds when the player is wearing the moose head and it is hunting season and the moose head is accustomed"; rtrue; } ! rule 509
        if (R == R_1004) { print "Every turn when the player can see the bear and the bear is awake"; rtrue; } ! rule 510
        if (R == R_1005) { print "Instead of going to the woods when not the woods are accessible"; rtrue; } ! rule 511
        if (R == R_1006) { print "Instead of attacking the bear"; rtrue; } ! rule 512
        if (R == R_1008) { print "Instead of dropping the fish when the fish is ready to be thrown"; rtrue; } ! rule 513
        if (R == R_1009) { print "bear eats the fish"; rtrue; } ! rule 514
        if (R == R_1010) { print "bear rubs its belly"; rtrue; } ! rule 515
        if (R == R_1011) { print "bear falls asleep"; rtrue; } ! rule 516
        if (R == R_1012) { print "Before wearing something"; rtrue; } ! rule 517
        if (R == R_1013) { print "After eating the soylent"; rtrue; } ! rule 518
        if (R == R_1014) { print "Instead of drinking the soylent"; rtrue; } ! rule 519
        if (R == R_1015) { print "Rule for printing the name of the shelf when the player is not on the stool"; rtrue; } ! rule 520
        if (R == R_1016) { print "Instead of opening something portable"; rtrue; } ! rule 521
        if (R == R_1017) { print "Instead of cutting the super glue"; rtrue; } ! rule 522
        if (R == R_1018) { print "glue recongeals"; rtrue; } ! rule 523
        if (R == R_1019) { print "Instead of eating the super glue"; rtrue; } ! rule 524
        if (R == R_1020) { print "A rule for reaching inside the shelf"; rtrue; } ! rule 525
        if (R == R_1021) { print "Instead of climbing the ladder"; rtrue; } ! rule 526
        if (R == R_1022) { print "Rule for printing the name of the time machine"; rtrue; } ! rule 527
        if (R == R_1023) { print "Every turn"; rtrue; } ! rule 528
        if (R == R_1024) { print "Instead of inserting something into the coin slot"; rtrue; } ! rule 529
        if (R == R_1025) { print "Instead of inserting something into the middle safe"; rtrue; } ! rule 530
        if (R == R_1026) { print "Instead of inserting something into the time safe"; rtrue; } ! rule 531
        if (R == R_1027) { print "After inserting something into the inner safe"; rtrue; } ! rule 532
        if (R == R_1029) { print "Instead of taking the pie when the player is in the time machine"; rtrue; } ! rule 533
        if (R == R_1030) { print "Instead of eating the pie when the pie is in the inner safe"; rtrue; } ! rule 534
        if (R == R_1031) { print "Instead of eating the pie when the pie is aged"; rtrue; } ! rule 535
        if (R == R_1032) { print "Instead of pushing the button"; rtrue; } ! rule 536
        if (R == R_1033) { print "Carry out xyzzying"; rtrue; } ! rule 537
        if (R == R_1034) { print "Carry out plughing"; rtrue; } ! rule 538
        if (R == R_1035) { print "Instead of touching the wire"; rtrue; } ! rule 539
        if (R == R_1036) { print "Instead of attacking the black car"; rtrue; } ! rule 540
        if (R == R_1037) { print "Instead of entering the clothes dryer"; rtrue; } ! rule 541
        if (R == R_1038) { print "Instead of opening the front door"; rtrue; } ! rule 542

		print "(nameless rule at address ", R, ")";
	}
#ifnot;
	if ((R>=0) && (R<NUMBER_RULEBOOKS_CREATED)) {
		print "(rulebook ", R, ")";
	} else {
		print "(rule at address ", R, ")";
	}
#endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Casting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RULEBOOK_TY_to_RULE_TY r;
	return r;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Debugging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DebugRulebooks subs parameter i;
	spaces(2*process_rulebook_count);
	print "[", (RulePrintingRule) subs;
	if (parameter) print " / on O", parameter;
	print "]^";
];

[ DB_Rule R N blocked;
	if (R==0) return;
	print "[Rule ~", (RulePrintingRule) R, "~ ";
	#ifdef NUMBERED_RULES; print "(", N, ") "; #endif;
	if (blocked == false) "applies.]";
	print "does not apply (wrong ", (address) blocked, ").]^";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: Storage
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global I7S_Tab; ! The array to be sorted, which can have almost any format
Global I7S_Col; ! The "column number" in the array, if any
Global I7S_Dir; ! The direction of sorting: ascending (1) or descending (-1)
Global I7S_Swap; ! The current routine for swapping two fields
Global I7S_Comp; ! The current routine for comparing two fields

#ifdef MEASURE_SORT_PERFORMANCE;
Global I7S_CCOUNT; Global I7S_CCOUNT2; Global I7S_XCOUNT; ! For testing only
#endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: Front End
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SetSortDomain swapf compf;
	I7S_Swap = swapf;
	I7S_Comp = compf;
];

[ SortArray tab col dir size test_flag algorithm;
	I7S_Tab = tab;
	I7S_Col = col;
	I7S_Dir = dir;
	#ifdef MEASURE_SORT_PERFORMANCE;
	I7S_CCOUNT = 0;
	I7S_CCOUNT2 = 0;
	I7S_XCOUNT = 0;
	#endif;
	SortRange(0, size, algorithm);
	#ifdef MEASURE_SORT_PERFORMANCE;
	if (test_flag)
		print "Sorted array of size ", size, " with ", I7S_CCOUNT2, "*10000 + ", I7S_CCOUNT,
			" comparisons and ", I7S_XCOUNT, " exchanges^";
	#endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: Sort Range
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SortRange x y algorithm;
	if (y - x < 2) return;
	if (algorithm) {
		(algorithm)(x, y);
	} else {
		InPlaceMergeSortAlgorithm(x, y);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: Comparison and Exchange
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CompareFields x y;
	#ifdef MEASURE_SORT_PERFORMANCE;
	I7S_CCOUNT++;
	if (I7S_CCOUNT == 10000) { I7S_CCOUNT = 0; I7S_CCOUNT2++; }
	#endif;
	return I7S_Dir*I7S_Comp(I7S_Tab, I7S_Col, x+1, y+1, I7S_Dir);
];

[ ExchangeFields x y r;
	#ifdef MEASURE_SORT_PERFORMANCE;
	I7S_XCOUNT++;
	if (I7S_XCOUNT < 0) { print "XO^"; I7S_XCOUNT = 0; }
	#endif;
	r = I7S_Swap(I7S_Tab, x+1, y+1);
	
	return r; 
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: 4W37 Sort
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ OldSortAlgorithm x y
	f i j;
	if (y - x < 2) return;
	f = true;
	while (f) {
		f = false;
		for (i=x:i<y:i++)
		    for (j=i+1:j<y:j++)
				if (CompareFields(i, j) > 0) {
					ExchangeFields(i, j); f = true; break;
				}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: Insertion Sort
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ InsertionSortAlgorithm from to
	i j;
	if (to > from+1) { 
		for (i = from+1: i < to: i++) { 
			for (j = i: j > from: j--) { 
				if (CompareFields(j, j-1) < 0) 
					ExchangeFields(j, j-1);
				else break;
			}
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: In-Place Mergesort
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ InPlaceMergeSortAlgorithm from to
	middle;
	if (to - from < 12) {
		if (to - from < 2) return;
		InsertionSortAlgorithm(from, to);
		return;
	}
	middle = (from + to)/2; 
	InPlaceMergeSortAlgorithm(from, middle); 
	InPlaceMergeSortAlgorithm(middle, to); 
	IPMS_Merge(from, middle, to, middle-from, to - middle); 
];

[ IPMS_Lower from to val
	len half mid;
	len = to - from;
	while (len > 0) { 
		half = len/2; 
		mid = from + half;
		if (CompareFields(mid, val) < 0) {
			from = mid + 1;
			len = len - half -1; 
		} else len = half;
	}
	return from;
];

[ IPMS_Upper from to val
	len half mid;
	len = to - from;
	while (len > 0) { 
		half = len/2; 
		mid = from + half;
		if (CompareFields(val, mid) < 0)
			len = half;
		else {
			from = mid + 1;
			len = len - half -1; 
		}
	}
	return from;
];

[ IPMS_Reverse from to;
	while (from < to) {
		ExchangeFields(from++, to--);
	}
];

[ IPMS_Rotate from mid to
	n val shift p1 p2;
	if ((from==mid) || (mid==to)) return; 
	IPMS_Reverse(from, mid-1); 
	IPMS_Reverse(mid, to-1); 
	IPMS_Reverse(from, to-1);
];

[ IPMS_Merge from pivot to len1 len2
	first_cut second_cut len11 len22 new_mid;
	if ((len1 == 0) || (len2 == 0)) return; 
	if (len1+len2 == 2) { 
		if (CompareFields(pivot, from) < 0) 
		ExchangeFields(pivot, from); 
		return; 
	}
	if (len1 > len2) { 
		len11 = len1/2; 
		first_cut = from + len11; 
		second_cut = IPMS_Lower(pivot, to, first_cut); 
		len22 = second_cut - pivot; 
	} else { 
		len22 = len2/2; 
		second_cut = pivot + len22; 
		first_cut = IPMS_Upper(from, pivot, second_cut); 
		len11 = first_cut - from; 
	} 
	IPMS_Rotate(first_cut, pivot, second_cut); 
	new_mid = first_cut + len22; 
	IPMS_Merge(from, first_cut, new_mid, len11, len22); 
	IPMS_Merge(new_mid, second_cut, to, len1 - len11, len2 - len22); 
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant TB_COLUMN_REAL        $8000;
Constant TB_COLUMN_SIGNED      $4000;
Constant TB_COLUMN_TOPIC       $2000;
Constant TB_COLUMN_DONTSORTME  $1000;
Constant TB_COLUMN_NOBLANKBITS $0800;
Constant TB_COLUMN_CANEXCHANGE $0400;
Constant TB_COLUMN_ALLOCATED   $0200;
Constant TB_COLUMN_NUMBER      $01ff; ! Mask to remove upper bit flags

Constant COL_HSIZE 2; ! Column header size: two words (ID/flags, blank bits)


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Find Column
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableFindCol tab col f i no_cols n;
	no_cols = tab-->0;
	for (i=1: i<=no_cols: i++)
		if (col == ((tab-->i)-->1) & TB_COLUMN_NUMBER) return i;
	if (f) { RunTimeProblem(RTP_TABLE_NOCOL, tab); return 0; }
	return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Number of Rows
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableRows tab first_col;
	first_col = tab-->1; if (first_col == 0) return 0;
	return (first_col-->0) - COL_HSIZE;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Blanks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant TABLE_NOVALUE = IMPROBABLE_VALUE;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Masks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array CheckTableEntryIsBlank_LU
	->	$$00000001
		$$00000010
		$$00000100
		$$00001000
		$$00010000
		$$00100000
		$$01000000
		$$10000000;
Array CheckTableEntryIsNonBlank_LU
	->	$$11111110
		$$11111101
		$$11111011
		$$11110111
		$$11101111
		$$11011111
		$$10111111
		$$01111111;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Testing Blankness
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CheckTableEntryIsBlank tab col row i at;
	if (col >= 100) col = TableFindCol(tab, col);
	if (col == 0) rtrue;
	if ((tab-->col)-->(row+COL_HSIZE) ~= TABLE_NOVALUE) {
		print "*** CTEIB on nonblank value ", tab, " ", col, " ", row, " ***^";
	}
	if (((tab-->col)-->1) & TB_COLUMN_NOBLANKBITS) rtrue;
	row--;
	at = ((tab-->col)-->2) + (row/8);
	if ((TB_Blanks->at) & (CheckTableEntryIsBlank_LU->(row%8))) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Force Entry Blank
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ForceTableEntryBlank tab col row i at oldv flags;
	if (col >= 100) col = TableFindCol(tab, col);
	if (col == 0) rtrue;
	flags = (tab-->col)-->1;
	oldv = (tab-->col)-->(row+COL_HSIZE);
	if ((flags & TB_COLUMN_ALLOCATED) && (oldv ~= 0 or TABLE_NOVALUE))
		BlkValueFree(oldv);
	(tab-->col)-->(row+COL_HSIZE) = TABLE_NOVALUE;
	if (flags & TB_COLUMN_NOBLANKBITS) return;
	row--;
	at = ((tab-->col)-->2) + (row/8);
	(TB_Blanks->at) = (TB_Blanks->at) | (CheckTableEntryIsBlank_LU->(row%8));
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Force Entry Non-Blank
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ForceTableEntryNonBlank tab col row i at oldv flags tc kov;
	if (col >= 100) col=TableFindCol(tab, col);
	if (col == 0) rtrue;
	if (((tab-->col)-->1) & TB_COLUMN_NOBLANKBITS) return;
	flags = (tab-->col)-->1;
	oldv = (tab-->col)-->(row+COL_HSIZE);
	if ((flags & TB_COLUMN_ALLOCATED) &&
		(oldv == 0 or TABLE_NOVALUE)) {
		kov = UNKNOWN_TY;
		tc = ((tab-->col)-->1) & TB_COLUMN_NUMBER;
		kov = TC_KOV(tc);
		if (kov ~= UNKNOWN_TY) {
			(tab-->col)-->(row+COL_HSIZE) = BlkValueCreate(kov);
		}
	}
	row--;
	at = ((tab-->col)-->2) + (row/8);
	(TB_Blanks->at) = (TB_Blanks->at) & (CheckTableEntryIsNonBlank_LU->(row%8));
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Swapping Blank Bits
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableSwapBlankBits tab row1 row2 col at1 at2 bit1 bit2;
	if (col >= 100) col=TableFindCol(tab, col);
	if (col == 0) rtrue;
	if (((tab-->col)-->1) & TB_COLUMN_NOBLANKBITS) return;
	row1--;
	at1 = ((tab-->col)-->2) + (row1/8);
	row2--;
	at2 = ((tab-->col)-->2) + (row2/8);
	bit1 = ((TB_Blanks->at1) & (CheckTableEntryIsBlank_LU->(row1%8)));
	bit2 = ((TB_Blanks->at2) & (CheckTableEntryIsBlank_LU->(row2%8)));
	if (bit1) bit1 = true; 
	if (bit2) bit2 = true;
	if (bit1 == bit2) return;
	if (bit1) {
		(TB_Blanks->at1)
			= (TB_Blanks->at1) & (CheckTableEntryIsNonBlank_LU->(row1%8));
		(TB_Blanks->at2)
			= (TB_Blanks->at2) | (CheckTableEntryIsBlank_LU->(row2%8));
	} else {
		(TB_Blanks->at1)
			= (TB_Blanks->at1) | (CheckTableEntryIsBlank_LU->(row1%8));
		(TB_Blanks->at2)
			= (TB_Blanks->at2) & (CheckTableEntryIsNonBlank_LU->(row2%8));
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Moving Blank Bits Down
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableMoveBlankBitsDown tab row1 row2 col at atp1 bit rx;
	if (col >= 100) col=TableFindCol(tab, col);
	if (col == 0) rtrue;
	if (((tab-->col)-->1) & TB_COLUMN_NOBLANKBITS) return;
	row1--; row2--;
	! Read blank bit for row1:
	at = ((tab-->col)-->2) + (row1/8);
	bit = ((TB_Blanks->at) & (CheckTableEntryIsBlank_LU->(row1%8)));
	if (bit) bit = true;
	! Loop through, setting each blank bit to the next:
	for (rx=row1:rx<row2:rx++) {
		atp1 = ((tab-->col)-->2) + ((rx+1)/8);
		at = ((tab-->col)-->2) + (rx/8);
		if ((TB_Blanks->atp1) & (CheckTableEntryIsBlank_LU->((rx+1)%8))) {
			(TB_Blanks->at)
				= (TB_Blanks->at) | (CheckTableEntryIsBlank_LU->(rx%8));
		} else {
			(TB_Blanks->at)
				= (TB_Blanks->at) & (CheckTableEntryIsNonBlank_LU->(rx%8));
		}
	}
	! Write bit to blank bit for row2:
	at = ((tab-->col)-->2) + (row2/8);
	if (bit) {
		(TB_Blanks->at)
			= (TB_Blanks->at) | (CheckTableEntryIsBlank_LU->(row2%8));
	} else {
		(TB_Blanks->at)
			= (TB_Blanks->at) & (CheckTableEntryIsNonBlank_LU->(row2%8));
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Table Row Corresponding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableRowCorr tab col lookup_value lookup_col i j f v;
	if (col >= 100) col=TableFindCol(tab, col, true);
	lookup_col = tab-->col;
	j = lookup_col-->0 - COL_HSIZE;
	if (((tab-->col)-->1) & TB_COLUMN_ALLOCATED) f=1;
	if (f) {
		for (i=1:i<=j:i++) {
			v = lookup_col-->(i+COL_HSIZE);
			if ((v == TABLE_NOVALUE) &&
				(CheckTableEntryIsBlank(tab,col,i))) continue;
			if (BlkValueCompare(v, lookup_value) == 0)
				return i;
		}
	} else {
		for (i=1:i<=j:i++) {
			if ((lookup_value == TABLE_NOVALUE) &&
				(CheckTableEntryIsBlank(tab,col,i))) continue;
			if (lookup_col-->(i+COL_HSIZE) == lookup_value) return i;
		}
	}
	return RunTimeProblem(RTP_TABLE_NOCORR, tab);
];

[ ExistsTableRowCorr tab col entry i k v f kov;
	if (col >= 100) col=TableFindCol(tab, col);
	if (col == 0) rfalse;
	f=0;
	if (((tab-->col)-->1) & TB_COLUMN_TOPIC) f=1;
	else if (((tab-->col)-->1) & TB_COLUMN_ALLOCATED) f=2;
	k = TableRows(tab);
	for (i=1:i<=k:i++) {
		v = (tab-->col)-->(i+COL_HSIZE);
		if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,i))) continue;
		switch (f) {
			1: if ((v)(entry/100, entry%100) ~= GPR_FAIL) return i;
			2: if (BlkValueCompare(v, entry) == 0) return i;
			default: if (v == entry) return i;
		}
	}
	! print "Giving up^";
	return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Table Look Up Corresponding Row
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableLookUpCorr tab col1 col2 lookup_value write_flag write_value cola1 cola2 i j v f;
	if (col1 >= 100) col1=TableFindCol(tab, col1, true);
	if (col2 >= 100) col2=TableFindCol(tab, col2, true);
	cola1 = tab-->col1;
	cola2 = tab-->col2;
	j = cola2-->0;
	f=0;
	if (((tab-->col2)-->1) & TB_COLUMN_ALLOCATED) f=1;
	if (((tab-->col2)-->1) & TB_COLUMN_TOPIC) f=2;
	for (i=1+COL_HSIZE:i<=j:i++) {
		v = cola2-->i;

		if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col2,i-COL_HSIZE))) continue;
		if (f == 1) {
			if (BlkValueCompare(v, lookup_value) ~= 0) continue;
		} else if (f == 2) {
			if ((v)(lookup_value/100, lookup_value%100) == GPR_FAIL) continue;
		} else {
			if (v ~= lookup_value) continue;
		}
		if (write_flag) {
			if (write_flag == 4) ForceTableEntryBlank(tab,col1,i-COL_HSIZE);
			else ForceTableEntryNonBlank(tab,col1,i-COL_HSIZE);
			switch (write_flag) {
				1: cola1-->i = write_value;
				2: cola1-->i = cola1-->i + write_value;
				3: cola1-->i = cola1-->i - write_value;
				5: return cola1-->i;
			}
			rfalse;
		}
		v = cola1-->i;
		if ((v == TABLE_NOVALUE) &&
			(CheckTableEntryIsBlank(tab,col1,i-COL_HSIZE))) continue;
		return v;
	}
	return RunTimeProblem(RTP_TABLE_NOCORR, tab);
];

[ ExistsTableLookUpCorr tab col1 col2 lookup_value cola1 cola2 i j f;
	if (col1 >= 100) col1=TableFindCol(tab, col1, false);
	if (col2 >= 100) col2=TableFindCol(tab, col2, false);
	if (col1*col2 == 0) rfalse;
	cola1 = tab-->col1; cola2 = tab-->col2;
	j = cola2-->0;
	f=0;
	if (((tab-->col2)-->1) & TB_COLUMN_ALLOCATED) f=1;
	if (((tab-->col2)-->1) & TB_COLUMN_TOPIC) f=2;
	for (i=1+COL_HSIZE:i<=j:i++) {
		if ((cola1-->i == TABLE_NOVALUE) &&
			(CheckTableEntryIsBlank(tab,col1,i-COL_HSIZE))) continue;
		if (f == 1) {
			if (BlkValueCompare(cola2-->i, lookup_value) ~= 0) continue;
		} else if (f == 2) {
			if ((cola2-->i)(lookup_value/100, lookup_value%100) == GPR_FAIL) continue;
		} else {
			if (cola2-->i ~= lookup_value) continue;
		}
		rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Table Look Up Entry
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableLookUpEntry tab col index write_flag write_value v;
	if (tab == 0) return RunTimeProblem(RTP_TABLE_NOTABLE2);
	if (col >= 100) col=TableFindCol(tab, col, true);
	if ((index < 1) || (index > TableRows(tab))) {
		RunTimeProblem(RTP_TABLE_NOROW, tab, index); index = 1;
	}
	if (write_flag) {
		switch(write_flag) {
			1:	ForceTableEntryNonBlank(tab,col,index);
				(tab-->col)-->(index+COL_HSIZE) = write_value;
			2:	ForceTableEntryNonBlank(tab,col,index);
				(tab-->col)-->(index+COL_HSIZE) =
					((tab-->col)-->(index+COL_HSIZE)) + write_value;
			3:	ForceTableEntryNonBlank(tab,col,index);
				(tab-->col)-->(index+COL_HSIZE) =
					((tab-->col)-->(index+COL_HSIZE)) - write_value;
			4:	ForceTableEntryBlank(tab,col,index);
			5:	ForceTableEntryNonBlank(tab,col,index);
				return ((tab-->col)-->(index+COL_HSIZE));
		}
		rfalse;
	}
	v = ((tab-->col)-->(index+COL_HSIZE));
	if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,index))) {
		RunTimeProblem(RTP_TABLE_NOENTRY, tab, col, index); rfalse;
	}
	return v;
];

[ ExistsTableLookUpEntry tab col index v;
	if (col >= 100) col=TableFindCol(tab, col);
	if (col == 0) rfalse;
	if ((index<1) || (index > TableRows(tab))) rfalse;
	v = ((tab-->col)-->(index+COL_HSIZE));
	if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,index)))
		rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Blank Rows
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableRowIsBlank tab j k;
	for (k=1:k<=tab-->0:k++) {
		if (((tab-->k)-->(j+COL_HSIZE)) ~= TABLE_NOVALUE) rfalse;
		if (CheckTableEntryIsBlank(tab, k, j) == false) rfalse;
	}
	rtrue;
];

[ TableBlankOutRow tab row k;
	if (tab==0) return RunTimeProblem(RTP_TABLE_NOTABLE);
	for (k=1:k<=tab-->0:k++)
		ForceTableEntryBlank(tab, k, row);
];

[ TableBlankOutColumn tab col n k;
	if (tab==0) return RunTimeProblem(RTP_TABLE_NOTABLE);
	n = TableRows(tab);
	for (k=1:k<=n:k++)
		ForceTableEntryBlank(tab, col, k);
];

[ TableBlankOutAll tab n k;
	if (tab==0) return RunTimeProblem(RTP_TABLE_NOTABLE);
	n = TableRows(tab);
	for (k=1:k<=n:k++)
		TableBlankOutRow(tab, k);
];

[ TableBlankRows tab i j c;
	i = TableRows(tab); !print i, " rows^";
	for (j=1:j<=i:j++)
		if (TableRowIsBlank(tab, j)) c++;
	!print c, " blank^";
	return c;
];

[ TableFilledRows tab;
	return TableRows(tab) - TableBlankRows(tab);
];

[ TableBlankRow tab i j;
	i = TableRows(tab);
	for (j=1:j<=i:j++)
		if (TableRowIsBlank(tab, j)) return j;
	RunTimeProblem(RTP_TABLE_NOMOREBLANKS, tab);
	return i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Random Row
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableRandomRow tab i j k;
	i = TableRows(tab);
	j = TableFilledRows(tab);
	if (j==0) return RunTimeProblem(RTP_TABLE_NOROWS, tab);
	if (j>1) j = random(j);
	for (k=1:k<=i:k++) {
		if (TableRowIsBlank(tab, k) == false) j--;
		if (j==0) return k;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Swap Rows
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableSwapRows tab i j k l v1 v2;
	if (i==j) return;
	l = tab-->0;
	for (k=1:k<=l:k++) {
		v1 = (tab-->k)-->(i+COL_HSIZE);
		v2 = (tab-->k)-->(j+COL_HSIZE);
		(tab-->k)-->(i+COL_HSIZE) = v2;
		(tab-->k)-->(j+COL_HSIZE) = v1;
		if ((v1 == TABLE_NOVALUE) || (v2 == TABLE_NOVALUE))
			TableSwapBlankBits(tab, i, j, k);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Compare Rows
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableCompareRows tab col row1 row2 dir val1 val2 bl1 bl2 f;
	if (col >= 100) col=TableFindCol(tab, col, false);
	val1 = (tab-->col)-->(row1+COL_HSIZE);
	val2 = (tab-->col)-->(row2+COL_HSIZE);
	if (val1 == TABLE_NOVALUE) bl1 = CheckTableEntryIsBlank(tab,col,row1);
	if (val2 == TABLE_NOVALUE) bl2 = CheckTableEntryIsBlank(tab,col,row2);
	if ((val1 == val2) && (bl1 == bl2)) {
		if (val1 ~= TABLE_NOVALUE) return 0;
		if (bl1 == false) return 0;
		! The two entries are both blank:
		if (TableRowIsBlank(tab, row1)) {
		    if (TableRowIsBlank(tab, row2)) return 0;
		    return -1*dir;
		}
		if (TableRowIsBlank(tab, row2)) return dir;
		return 0;
	}
	if (bl1) return dir;
	if (bl2) return -1*dir;
	f = ((tab-->col)-->1);
	if (f & TB_COLUMN_ALLOCATED) {
		if (BlkValueCompare(val2, val1) < 0) return 1;
		return -1;
	} else if (f & TB_COLUMN_REAL) {
		if (REAL_NUMBER_TY_Compare(val1, val2) > 0) return 1;
		return -1;
	} else if (f & TB_COLUMN_SIGNED) {
		if (val1 > val2) return 1;
		return -1;
	} else {
		if (UnsignedCompare(val1, val2) > 0) return 1;
		return -1;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Move Row Down
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableMoveRowDown tab r1 r2 rx k l m v f;
	if (r1==r2) return;
	l = tab-->0;
	for (k=1:k<=l:k++) {
		f = false;
		m = (tab-->k)-->(r1+COL_HSIZE);
		if (m == TABLE_NOVALUE) f = true;
		for (rx=r1:rx<r2:rx++) {
			v = (tab-->k)-->(rx+COL_HSIZE+1);
			(tab-->k)-->(rx+COL_HSIZE) = v;
			if (v == TABLE_NOVALUE) f = true;
		}
		(tab-->k)-->(r2+COL_HSIZE) = m;
		if (f) TableMoveBlankBitsDown(tab, r1, r2, k);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Shuffle
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableShuffle tab i to;
	TableMoveBlanksToBack(tab, 1, TableRows(tab));
	to = TableFilledRows(tab);
	for (i=2:i<=to:i++) TableSwapRows(tab, i, random(i));
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Next Row
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableNextRow tab col row dir i k val v dv min_dv min_at signed_arithmetic f blk z;
	if (col >= 100) col=TableFindCol(tab, col, false);
	f = ((tab-->col)-->1);
	if (f & TB_COLUMN_ALLOCATED) blk = true;
	signed_arithmetic = f & TB_COLUMN_SIGNED;
	#Iftrue (WORDSIZE == 2);
	if (row == 0) {
		if (signed_arithmetic) {
		    if (dir == 1) val = $8000; else val = $7fff;
		} else {
		    if (dir == 1) val = 0; else val = $ffff;
		}
	} else val = (tab-->col)-->(row+COL_HSIZE);
	if (signed_arithmetic) min_dv = $7fff; else min_dv = $ffff;
	#ifnot; ! WORDSIZE == 4
	if (row == 0) {
		if (signed_arithmetic) {
		    if (dir == 1) val = $80000000; else val = $7fffffff;
		} else {
		    if (dir == 1) val = 0; else val = $ffffffff;
		}
	} else val = (tab-->col)-->(row+COL_HSIZE);
	if (signed_arithmetic) min_dv = $7fffffff; else min_dv = $ffffffff;
	#endif;
	k = TableRows(tab);
	if (dir == 1) {
		for (i=1:i<=k:i++) {
		    v = (tab-->col)-->(i+COL_HSIZE);
		    if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,i)))
		    	continue;
		    if (blk) {
		    	dv = v;
				if (row == 0) z = 1; else z = BlkValueCompare(v, val);
				f = (((z > 0) || ((z == 0) && (i > row))) &&
					((min_at == 0) || (BlkValueCompare(v, min_dv) < 0)));
		    } else {
				dv = dir*v;
				if (signed_arithmetic)
				f = (((dv > dir*val) || ((v == val) && (i>row))) &&
					  (dv < min_dv));
				else
				f = (((UnsignedCompare(dv, dir*val) > 0) || ((v == val) && (i>row))) &&
					  (UnsignedCompare(dv, min_dv) < 0));
			}
		    if (f) { min_dv = dv; min_at = i; }
		}
	} else {
		for (i=k:i>=1:i--) {
		    v = (tab-->col)-->(i+COL_HSIZE);
		    if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,i)))
		    	continue;
		    if (blk) {
		    	dv = v;
		    	if (row == 0) z = -1; else z = BlkValueCompare(v, val);
				f = (((z < 0) || ((z == 0) && (i < row))) &&
					((min_at == 0) || (BlkValueCompare(v, min_dv) > 0)));
		    } else {
				dv = dir*v;
				if (signed_arithmetic)
				f = (((dv > dir*val) || ((v == val) && (i<row))) &&
					  (dv < min_dv));
				else
				f = (((UnsignedCompare(dv, dir*val) > 0) || ((v == val) && (i<row))) &&
					  (UnsignedCompare(dv, min_dv) < 0));
			}
		    if (f) { min_dv = dv; min_at = i; }
		}
	}
	return min_at;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Move Blanks to Back
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableMoveBlanksToBack tab fromrow torow i fbl lnbl blc;
	if (torow < fromrow) return;
	fbl = 0; lnbl = 0;
	for (i=fromrow: i<=torow: i++)
		if (TableRowIsBlank(tab, i)) {
			if (fbl == 0) fbl = i;
			blc++;
		} else {
			lnbl = i;
		}
	if ((fbl>0) && (lnbl>0) && (fbl < lnbl)) {
		TableMoveRowDown(tab, fbl, lnbl); ! Move first blank just past last nonblank
		TableMoveBlanksToBack(tab, fbl, lnbl-1);
	}
	return torow-blc; ! Final non-blank row
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Sort
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableSort tab col dir test_flag algorithm i j k f;
	for (i=1:i<=tab-->0:i++) {
		j = tab-->i; ! Address of column table
		if ((j-->1) & TB_COLUMN_DONTSORTME)
		    return RunTimeProblem(RTP_TABLE_CANTSORT, tab);
	}
	if (col >= 100) col=TableFindCol(tab, col, false);
	k = TableRows(tab);
	k = TableMoveBlanksToBack(tab, 1, k);
	if (test_flag) {
		print "After moving blanks to back:^"; TableColumnDebug(tab, col);
	}

	SetSortDomain(TableSwapRows, TableCompareRows);
	SortArray(tab, col, dir, k, test_flag, algorithm);

	if (test_flag) {
		print "Final state:^"; TableColumnDebug(tab, col);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Print Table Name
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintTableName T;
	switch(T) {
  TheEmptyTable: print "(the empty table)"; return;
  T0_final_question_options: print "Table of Final Question Options"; return;
  T1_locale_priorities: print "Table of Locale Priorities"; return;
  T2_user_styles: print "Table of User Styles"; return;

		default: print "** No such table **";
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Print Table to File
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TablePrint tab i j k row col v tc kov;
	for (i=1:i<=tab-->0:i++) {
		j = tab-->i; ! Address of column table
		if (((j-->1) & TB_COLUMN_CANEXCHANGE) == 0)
		    rtrue;
	}
	k = TableRows(tab);
	k = TableMoveBlanksToBack(tab, 1, k);
	print "! ", (PrintTableName) tab, " (", k, ")^";
	for (row=1:row<=k:row++) {
		for (col=1:col<=tab-->0:col++) {
			tc = ((tab-->col)-->1) & TB_COLUMN_NUMBER;
			kov = KindAtomic(TC_KOV(tc));
			if (kov == UNKNOWN_TY) kov = NUMBER_TY;
			v = (tab-->col)-->(row+COL_HSIZE);
			if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,row)))
				print "-- ";
			else {
				if (BlkValueWriteToFile(v, kov) == false) print v;
				print " ";
			}
		}
		print "^";
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Read Table from File
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifdef TARGET_GLULX;
[ TableRead tab auxf row maxrow col ch v sgn dg j tc kov;
	for (col=1:col<=tab-->0:col++) {
		j = tab-->col; ! Address of column table
		if (((j-->1) & TB_COLUMN_CANEXCHANGE) == 0)
		    return RunTimeProblem(RTP_TABLE_CANTSAVE, tab);
	}
	maxrow = TableRows(tab);
	!print maxrow, " rows available.^";
	for (row=1: row<=maxrow: row++) {
		TableBlankOutRow(tab, row);
	}
	for (row=1: row<=maxrow: row++) {
		!print "Reading row ", row, "^";
		ch = FileIO_GetC(auxf);
		if (ch == '!') {
			while (ch ~= -1 or 10 or 13) ch = FileIO_GetC(auxf);
			while (ch == 10 or 13) ch = FileIO_GetC(auxf);
		}
		for (col=1: col<=tab-->0: col++) {
			if (ch == -1) { row++; jump NoMore; }
			if (ch == 10 or 13) break;
			tc = ((tab-->col)-->1) & TB_COLUMN_NUMBER;
			kov = KindAtomic(TC_KOV(tc));
			if (kov == UNKNOWN_TY) kov = NUMBER_TY;
			!print "tc = ", tc, " kov = ", kov, "^";
			sgn = 1;
			if (ch == '-') {
				ch = FileIO_GetC(auxf);
				if (ch == -1) jump NotTable;
				if (ch == '-') { ch = FileIO_GetC(auxf); jump EntryDone; }
				sgn = -1;
			}
			if (((tab-->col)-->1) & TB_COLUMN_ALLOCATED)
				ForceTableEntryNonBlank(tab, col, row);
			!print "A";
			v = BlkValueReadFromFile(0, 0, -1, kov);
			if (v) {
				if (((tab-->col)-->1) & TB_COLUMN_ALLOCATED)
					v = BlkValueReadFromFile(TableLookUpEntry(tab, col, row),
						auxf, ch, kov);
				else
					v = BlkValueReadFromFile(0, auxf, ch, kov);
				ch = 32;
			} else {
				dg = ch - '0';
				if ((dg < 0) || (dg > 9)) jump NotTable;
				v = dg;
				for (::) {
					ch = FileIO_GetC(auxf);
					dg = ch - '0';
					if ((dg < 0) || (dg > 9)) break;
					v = 10*v + dg;
				}
				v = v*sgn;
			}
			!print "v=", v, " ";
			if (((tab-->col)-->1) & TB_COLUMN_ALLOCATED == 0)
				TableLookUpEntry(tab, col, row, true, v);
			.EntryDone;
			!print "First nd is ", ch, "^";
			while (ch == 9 or 32) ch = FileIO_GetC(auxf);
		}
		while (ch ~= -1 or 10 or 13) {
			if ((ch ~= '-') && (((ch-'0')<0) || ((ch-'0')>9))) jump NotTable;
			if (ch ~= 9 or 32) jump WontFit;
			ch = FileIO_GetC(auxf);
		}
	}
	.NoMore;
	while (ch == 9 or 32 or 10 or 13) ch = FileIO_GetC(auxf);
	if (ch == -1) return;
	.WontFit;
	return RunTimeProblem(RTP_TABLE_WONTFIT, tab);
	.NotTable;
	return RunTimeProblem(RTP_TABLE_BADFILE, tab);
];
#ENDIF; ! TARGET_GLULX


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Print Rank
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintRank i j v;
#ifdef RANKING_TABLE;
	ANNOUNCE_SCORE_RM('B');
	j = TableRows(RANKING_TABLE);
	for (i=j:i>=1:i--)
		if (score >= TableLookUpEntry(RANKING_TABLE, 1, i)) {
		    v = TableLookUpEntry(RANKING_TABLE, 2, i);
		    TEXT_TY_Say(v);
		    ".";
		}
#endif;
	".";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Debugging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableColumnDebug tab col k i v tc kov;
	if (col >= 100) col=TableFindCol(tab, col, false);
	k = TableRows(tab);
	tc = ((tab-->col)-->1) & TB_COLUMN_NUMBER;
	kov = TC_KOV(tc);
	for (i=1:i<=k:i++) {
		if (i>1) print ", ";
		v = (tab-->col)-->(i+COL_HSIZE);
		if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,i)))
			print "--";
		else {
			PrintKindValuePair(kov, v);
		}
	}
	say__p = 1;
];

[ TableRowDebug tab i col k v tc kov;
	k = TableRows(tab);
	if ((i<1) || (i>k)) "No such row";
	print "(row ", i, ")  |";
	for (col=1: col<=tab-->0: col++) {
		print " ";
		tc = ((tab-->col)-->1) & TB_COLUMN_NUMBER;
		kov = TC_KOV(tc);
		v = (tab-->col)-->(i+COL_HSIZE);
		if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,i)))
			print "-- ";
		else {
			PrintKindValuePair(kov, v);
			print " |";
		}
	}
	say__p = 1;
];

[ TableDebug tab i k;
	PrintTableName(tab); print "^";
	k = TableRows(tab);
	for (i=1:i<=k:i++) { TableRowDebug(tab, i); print "^"; }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: The Core Tree
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ HolderOf o;
	if (InitialSituation-->DONE_INIS == false) return thedark;
	if (o && (o.component_parent)) return o.component_parent;
	if (o && (parent(o))) return parent(o);
	return nothing;
];

[ ParentOf o;
	if (o) o = parent(o);
	return o;
];

[ CoreOf o;
	while (o && (o provides component_parent) && (o.component_parent)) o = o.component_parent;
	return o;
];

[ CoreOfParentOfCoreOf o;
	while (o && (o provides component_parent) && (o.component_parent)) o = o.component_parent;
	if (o) o = parent(o);
	while (o && (o provides component_parent) && (o.component_parent)) o = o.component_parent;
	return o;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Climbing the Core Tree
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LocationOf o;
	if (~~(o ofclass K1_room or K2_thing)) return nothing;
	if (o ofclass K4_door) {
		if (parent(o) == real_location) return real_location;
		return FrontSideOfDoor(o);
	}
	if (o ofclass K7_backdrop) {
		! print "(deciding ", (the) O, " is at ", (the) BackdropLocation(o), ") ";
		return BackdropLocation(o);
	}
	while (o) {
		if (o ofclass K1_room) return o;
		o = CoreOfParentOfCoreOf(o);
	}
	return nothing;
];

[ CommonAncestor o1 o2 i j;
	o1 = CoreOf(o1);
	o2 = CoreOf(o2);
	
	for (i=o1: i: i = CoreOfParentOfCoreOf(i))
		for (j=o2: j: j = CoreOfParentOfCoreOf(j))
			if (j == i) return j;

	return nothing;
];

[ IndirectlyContains o1 o2;
	if ((o1 == nothing) || (o2 == nothing)) rfalse;
	if ((o1 ofclass K1_room) && (o2 ofclass K4_door)) {
		if (o1 == FrontSideOfDoor(o2)) rtrue;
		if (o1 == BackSideOfDoor(o2)) rtrue;
		rfalse;
	}
	if (o2 ofclass K7_backdrop) rfalse;
	for (o2 = HolderOf(o2) : o2 && o2 ~= thedark : o2 = HolderOf(o2)) if (o2 == o1) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: To Decide Whether In
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WhetherIn obj;
	if (obj has enterable) {
		if (IndirectlyContains(obj, player)) rtrue;
		rfalse;
	}
	if (obj ofclass K9_region) return TestRegionalContainment(real_location, obj);
	if (obj ofclass K1_room) {
		if (obj == real_location) rtrue;
		rfalse;
	}
	RunTimeProblem(RTP_NOTINAROOM, obj);
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Containment Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ContainerOf A p;
	if (A ofclass K1_room) return A.map_region;
	p = parent(A);
	if (p == nothing) return nothing;
	if (p ofclass K5_container) return p;
	if (p ofclass K1_room) return p;
	if (p ofclass K9_region) return p;
	return nothing;
];

[ TestContainmentRange obj e f;
	if (obj ofclass K9_region) {
		objectloop (f ofclass K1_room && f.map_region == obj)
			if (f > e) return f;
		return nothing;
	}
	if (obj ofclass K5_container or K1_room) {
		if (e == nothing) return child(obj);
		return sibling(e);
	}
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Support Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SupporterOf obj p;
	p = parent(obj);
	if (p == nothing) return nothing;
	if (p ofclass K6_supporter) return p;
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Carrying Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CarrierOf obj p;
	p = parent(obj);
	if (p && (p ofclass K8_person) && (obj hasnt worn)) return p;
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Wearing Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WearerOf obj p;
	p = parent(obj);
	if (p && (p ofclass K8_person) && (obj has worn)) return p;
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Having Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ OwnerOf obj p;
	p = parent(obj);
	if (p && (p ofclass K8_person)) return p;
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Making Parts
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MakePart P Of First;
	if (P == player) return RunTimeProblem(RTP_CANTMAKEPART, Of);
	if (parent(P)) remove P; give P ~worn;
	if (Of == nothing) { DetachPart(P); return; }
	if (P.component_parent) DetachPart(P);
	P.component_parent = Of;
	First = Of.component_child;
	Of.component_child = P; P.component_sibling = First;
];

[ DetachPart P From Daddy O;
	Daddy = P.component_parent; P.component_parent = nothing;
	if (Daddy == nothing) { P.component_sibling = nothing; return; }
	if (Daddy.component_child == P) {
		Daddy.component_child = P.component_sibling;
		P.component_sibling = nothing; return;
	}
	for (O = Daddy.component_child: O: O = O.component_sibling)
		if (O.component_sibling == P) {
			O.component_sibling = P.component_sibling;
			P.component_sibling = nothing; return;
		}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Movements
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MoveObject F T opt going_mode was L;
	if (F == nothing) return RunTimeProblem(RTP_CANTMOVENOTHING);
	if (F ofclass K7_backdrop) {
		if (T ofclass K9_region) {
			give F ~absent; F.found_in = T.regional_found_in;
			if (TestRegionalContainment(LocationOf(player), T)) move F to LocationOf(player);
			else remove F;
			return; }
		if (T == FoundEverywhere) {
			give F ~absent; F.found_in = FoundEverywhere;
			return;
		}
		return RunTimeProblem(RTP_BACKDROP, F, T);
	}
	if (T ofclass K9_region) return RunTimeProblem(RTP_NOTBACKDROP, F, T);
	if (T == FoundEverywhere) return RunTimeProblem(RTP_BACKDROPONLY, F);
	if (~~(F ofclass K2_thing)) return RunTimeProblem(RTP_NOTTHING, F, T);
	if (F has worn) {
		give F ~worn;
		if (F in T) return;
	}
	DetachPart(F);
	if (going_mode == false) {
		if (F == player) { PlayerTo(T, opt); return; }
		if (IndirectlyContains(F, player)) {
			L = LocationOf(T);
			if (L == nothing) return RunTimeProblem(RTP_CANTBEOFFSTAGE);
			if (LocationOf(player) ~= L) {
				was = parent(player);
				move player to real_location;
				move F to T;
				PlayerTo(was, true);
				return;
			}
		}
	}
	move F to T;
];

[ RemoveFromPlay F;
	if (F == nothing) return RunTimeProblem(RTP_CANTREMOVENOTHING);
	if (F == player) return RunTimeProblem(RTP_CANTREMOVEPLAYER);
	if (F ofclass K4_door) return RunTimeProblem(RTP_CANTREMOVEDOORS);
	if (IndirectlyContains(F, player)) return RunTimeProblem(RTP_CANTBEOFFSTAGE);
	give F ~worn; DetachPart(F);
	if (F ofclass K7_backdrop) give F absent;
	remove F;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: On Stage
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ OnStage O set x;
	if (O ofclass K1_room) rfalse;
	if (set < 0) {
		while (metaclass(O) == Object) {
			if (O ofclass K1_room) rtrue;
			if (O ofclass K9_region) rfalse;
			if (O ofclass K4_door) rtrue;
			if (O ofclass K7_backdrop) { if (O has absent) rfalse; rtrue; }
			x = O.component_parent; if (x) { O = x; continue; }
			x = parent(O); if (x) { O = x; continue; }
			rfalse;
		}
	}
	x = OnStage(O, -1);
	if ((x) && (set == false)) RemoveFromPlay(O);
	if ((x == false) && (set)) MoveObject(O, real_location);
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Moving the Player
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PlayerTo newplace flag L;
    L = LocationOf(newplace);
   	if (L == nothing) return RunTimeProblem(RTP_CANTBEOFFSTAGE);
	@push actor; actor = player;
    move player to newplace;
    location = L;
    real_location = location;
    MoveFloatingObjects();
    SilentlyConsiderLight();
    DivideParagraphPoint();
    if (flag == 0) <Look>;
    if (flag == 1) give location visited;
    if (flag == 2) AbbreviatedRoomDescription();
    @pull actor;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Move During Going
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MoveDuringGoing F T;
	MoveObject(F, T, 0, true);
	if (actor == player) {
		location = LocationOf(player);
		real_location = location;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Being Everywhere
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FoundEverywhere; rtrue; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Testing Everywhere
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BackdropEverywhere O;
	if (O ofclass K7_backdrop) {
		if (O has absent) rfalse;
		if (O.found_in == FoundEverywhere) rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Changing the Player
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ChangePlayer obj flag;
	if (~~(obj ofclass K8_person)) return RunTimeProblem(RTP_CANTCHANGE, obj);
	if (~~(OnStage(obj, -1))) return RunTimeProblem(RTP_CANTCHANGEOFFSTAGE, obj);
	if (obj.component_parent) return RunTimeProblem(RTP_CANTMAKEPART, obj);
	if (obj == player) return;

    give player ~concealed;
    if (player has remove_proper) give player ~proper;
    if (player == selfobj) {
    	player.saved_short_name = player.short_name;
    	player.short_name = PRINT_PROTAGONIST_INTERNAL_RM('c');
    }
    player = obj;
    if (player == selfobj) {
    	player.short_name = player.saved_short_name;
    }
    if (player hasnt proper) give player remove_proper; ! when changing out again
    give player concealed proper;

    location = LocationOf(player); real_location = location;
    MoveFloatingObjects();
    SilentlyConsiderLight();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Floating Objects
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MoveFloatingObjects toroom i k l m address flag;
	if (toroom == nothing) toroom = real_location;
    if (toroom == nothing) return;
    objectloop (i) {
        address = i.&found_in;
        if (address ~= 0 && i hasnt absent) {
            if (ZRegion(address-->0) == 2) {
                m = address-->0;
                .TestPropositionally;
                if (m.call(toroom) ~= 0) move i to toroom;
                else { if (i in toroom) remove i; }
            } else {
                k = i.#found_in;
                for (l=0 : l<k/WORDSIZE : l++) {
                    m = address-->l;
                    if (ZRegion(m) == 2) jump TestPropositionally;
                    if (m == toroom || m in toroom) {
                        if (i notin toroom) move i to toroom;
                        flag = true;
                    }
                }
                if (flag == false) { if (i in toroom) remove i; }
            }
            if ((i ofclass K4_door) && (parent(i) == nothing)) {
            	move i to ((i.door_to).call());
            }
        }
    }
];

[ MoveBackdrop bd D x address;
	if (~~(bd ofclass K7_backdrop)) return RunTimeProblem(RTP_BACKDROPONLY, bd);
	if (bd.#found_in > WORDSIZE) {
		address = bd.&found_in;
		address-->0 = D;
	} else bd.found_in = D;
	give bd ~absent;
	MoveFloatingObjects();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Backdrop Location
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BackdropLocation O target address m x i k l r sl;
	if (O has absent) return nothing;
	if ((target == nothing or real_location) && (parent(O) == real_location))
		return real_location;
	address = O.&found_in;
	if (address ~= 0) {
		k = O.#found_in;
		for (l=0 : l<k/WORDSIZE : l++) {
			m = address-->l;
			if (ZRegion(m) == 2) {
				sl = location;
				if (target) {
					location = target;
					r = m.call();
					if (r ~= 0) { location = sl; return target; }
				} else {
					objectloop (x ofclass K1_room) {
						location = x;
						r = m.call();
						if (r ~= 0) { location = sl; return x; }
					}
				}
				location = sl;
			} else {
				if (m ofclass K9_region) {
					objectloop (x ofclass K1_room)
						if (TestRegionalContainment(x, m))
							if (target == nothing or x)
								return x;
				} else {
					if (target == nothing or m) return m;
				}
			}
		}
	}
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Wearing Clothes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WearObject X P opt;
	if (X == false) rfalse;
	if (X notin P) MoveObject(X, P, opt);
	give X worn;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Map Connections
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MapConnection from_room dir
	in_direction through_door;
	if ((from_room ofclass K1_room) && (dir ofclass K3_direction)) {
		in_direction = Map_Storage-->
			((from_room.IK1_Count)*No_Directions + dir.IK3_Count);
		if (in_direction ofclass K1_room) return in_direction;
		if (in_direction ofclass K4_door) {
			@push location;
			location = from_room;
			through_door = in_direction.door_to();
			@pull location;
			if (through_door ofclass K1_room) return through_door;
		}
	}
	return nothing;
];

[ DoorFrom obj dir rv;
	rv = RoomOrDoorFrom(obj, dir);
	if (rv ofclass K4_door) return rv;
	return nothing;
];

[ RoomOrDoorFrom obj dir use_doors in_direction sl through_door;
	if ((obj ofclass K1_room) && (dir ofclass K3_direction)) {
		in_direction = Map_Storage-->
			((obj.IK1_Count)*No_Directions + dir.IK3_Count);
		if (in_direction ofclass K1_room or K4_door) return in_direction;	
	}
	return nothing;
];

[ AssertMapConnection r1 dir r2 in_direction;
	SignalMapChange();
	in_direction = Map_Storage-->
		((r1.IK1_Count)*No_Directions + dir.IK3_Count);
	if ((in_direction == 0) || (in_direction ofclass K1_room)) {
		Map_Storage-->((r1.IK1_Count)*No_Directions + dir.IK3_Count) = r2;
		return;
	}
	if (in_direction ofclass K4_door) {
		RunTimeProblem(RTP_EXITDOOR, r1, dir);
		return;
	}
	RunTimeProblem(RTP_NOEXIT, r1, dir);
];

[ AssertMapUnconnection r1 dir r2 in_direction;
	SignalMapChange();
	in_direction = Map_Storage-->
		((r1.IK1_Count)*No_Directions + dir.IK3_Count);
	if (r1 ofclass K4_door) {
		RunTimeProblem(RTP_EXITDOOR, r1, dir);
		return;
	}
	if (in_direction == r2)
		Map_Storage-->((r1.IK1_Count)*No_Directions + dir.IK3_Count) = 0;
	return;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Adjacency Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestAdjacency R1 R2 i row;
	if (R1 ofclass K9_region) RunTimeProblem(RTP_REGIONSNOTADJACENT, R1);
	else if (R2 ofclass K9_region) RunTimeProblem(RTP_REGIONSNOTADJACENT, R2);
	row = (R1.IK1_Count)*No_Directions;
	for (i=0: i<No_Directions: i++, row++)
		if (Map_Storage-->row == R2) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Regional Containment Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestRegionalContainment obj region o;
	if ((obj == nothing) || (region == nothing)) rfalse;
	if (obj ofclass K7_backdrop or K4_door) {
		if (obj has absent) rfalse;
		objectloop (o ofclass K1_room)
			if (TestRegionalContainment(o, region))
				if (BackdropLocation(obj, o))
					rtrue;
		rfalse;
	}
	if (~~(obj ofclass K1_room)) obj = LocationOf(obj);
	if (obj == nothing) rfalse;
	o = obj.map_region;
	while (o) {
		if (o == region) rtrue;
		o = parent(o);
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Doors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FrontSideOfDoor D; if (~~(D ofclass K4_door)) rfalse;
	if (D provides found_in) return (D.&found_in)-->0; ! Two-sided
	return parent(D); ! One-sided
];

[ BackSideOfDoor D; if (~~(D ofclass K4_door)) rfalse;
	if (D provides found_in) return (D.&found_in)-->1; ! Two-sided
	return nothing; ! One-sided
];

[ OtherSideOfDoor D from_room rv;
	if (D ofclass K4_door) {
		@push location;
		location = LocationOf(from_room);
		rv = D.door_to();
		@pull location;
	}
	return rv;
];

[ DirectionDoorLeadsIn D from_room rv dir;
	if (D ofclass K4_door) {
		@push location;
		location = LocationOf(from_room);
		rv = D.door_dir();
		@pull location;
	}
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Visibility Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestVisibility A B;
	if (~~OffersLight(parent(CoreOf(A)))) rfalse;
	if (suppress_scope_loops) rtrue;
	return TestScope(B, A);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Touchability Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestTouchability A B rv;
	if (A ofclass K4_door or K7_backdrop) MoveFloatingObjects(LocationOf(B));
	if (B ofclass K4_door or K7_backdrop) MoveFloatingObjects(LocationOf(A));
	if (TestScope(B,A) == false) rv = true;
	else rv = ObjectIsUntouchable(B, true, A);
	if (A ofclass K4_door or K7_backdrop) MoveFloatingObjects();
	if (rv) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Concealment Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestConcealment A B;
	if (A ofclass K2_thing && B ofclass K2_thing) {
		particular_possession = B;
		if (CarryOutActivity(DECIDING_CONCEALED_POSSESS_ACT, A)) rtrue;
	}
	rfalse;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Parsing Tokens
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


[ Cond_Token_12 ;
    if ((((~~((player == selfobj)))))) return GPR_PREPOSITION;
    return GPR_FAIL;
];
[ Cond_Token_13 ;
    if ((((~~((player == selfobj)))))) return GPR_PREPOSITION;
    return GPR_FAIL;
];
[ Cond_Token_14 ;
    if ((((~~((player == selfobj)))))) return GPR_PREPOSITION;
    return GPR_FAIL;
];
[ Cond_Token_15 ;
    if ((((~~((player == selfobj)))))) return GPR_PREPOSITION;
    return GPR_FAIL;
];
[ Mistake_Token_306 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 406;
    return GPR_PREPOSITION;
];
[ Mistake_Token_340 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 440;
    return GPR_PREPOSITION;
];
[ Mistake_Token_339 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 439;
    return GPR_PREPOSITION;
];
[ Mistake_Token_341 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 441;
    return GPR_PREPOSITION;
];
[ Mistake_Token_326 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 426;
    return GPR_PREPOSITION;
];
[ Mistake_Token_307 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 407;
    return GPR_PREPOSITION;
];
[ Mistake_Token_288 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 388;
    return GPR_PREPOSITION;
];
[ Mistake_Token_297 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 397;
    return GPR_PREPOSITION;
];
[ Mistake_Token_298 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 398;
    return GPR_PREPOSITION;
];
[ Mistake_Token_311 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 411;
    return GPR_PREPOSITION;
];
[ Mistake_Token_319 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 419;
    return GPR_PREPOSITION;
];
[ Cond_Token_321 ;
    if ((((I302_blue_car == ContainerOf(player))))) return GPR_PREPOSITION;
    return GPR_FAIL;
];
[ Mistake_Token_324 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 424;
    return GPR_PREPOSITION;
];
[ Mistake_Token_325 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 425;
    return GPR_PREPOSITION;
];
[ Mistake_Token_330 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 430;
    return GPR_PREPOSITION;
];
[ Mistake_Token_331 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 431;
    return GPR_PREPOSITION;
];




! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Number.i6t: Understanding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DECIMAL_TOKEN wnc wna r n wa wl sign base digit digit_count original_wn group_wn;
	wnc = wn; original_wn = wn; group_wn = wn;

	wn = wnc;
	r = ParseTokenStopped(ELEMENTARY_TT, NUMBER_TOKEN);
	if ((r == GPR_NUMBER) && (parsed_number ~= 10000)) return r;
	wn = wnc;
	wa = WordAddress(wn);
	wl = WordLength(wn);
	sign = 1; base = 10; digit_count = 0;
	if (wa->0 ~= '-' or '$' or '0' or '1' or '2' or '3' or '4'
		or '5' or '6' or '7' or '8' or '9')
		return GPR_FAIL;
	if (wa->0 == '-') { sign = -1; wl--; wa++; }
	if (wl == 0) return GPR_FAIL;
	n = 0;
	while (wl > 0) {
		if (wa->0 >= 'a') digit = wa->0 - 'a' + 10;
		else digit = wa->0 - '0';
		digit_count++;
		switch (base) {
			2:  if (digit_count == 17) return GPR_FAIL;
			10:
				#Iftrue (WORDSIZE == 2);
				if (digit_count == 6) return GPR_FAIL;
				if (digit_count == 5) {
					if (n > 3276) return GPR_FAIL;
					if (n == 3276) {
						if (sign == 1 && digit > 7) return GPR_FAIL;
						if (sign == -1 && digit > 8) return GPR_FAIL;
					}
				}
				#Ifnot; ! i.e., if (WORDSIZE == 4)
				if (digit_count == 11) return GPR_FAIL;
				if (digit_count == 10) {
					if (n > 214748364) return GPR_FAIL;
					if (n == 214748364) {
						if (sign == 1 && digit > 7) return GPR_FAIL;
						if (sign == -1 && digit > 8) return GPR_FAIL;
					}
				}
				#Endif; 
			16: if (digit_count == 5) return GPR_FAIL;
		}
		if (digit >= 0 && digit < base) n = base*n + digit;
		else return GPR_FAIL;
		wl--; wa++;
	}
	parsed_number = n*sign; wn++;
	return GPR_NUMBER;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Number.i6t: Truth states
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TRUTH_STATE_TOKEN original_wn wd;
	original_wn = wn;

	wn = original_wn;
	wd = NextWordStopped();
	if (wd == 'true') { parsed_number = 1; return GPR_NUMBER; }
	if (wd == 'false') { parsed_number = 0; return GPR_NUMBER; }
	wn = original_wn;
	return GPR_FAIL;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Number.i6t: Absolute value
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NUMBER_TY_Abs x; if (x<0) return -x; return x; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RealNumber.i6t: Printing reals
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef TARGET_GLULX;

[ REAL_NUMBER_TY_Say fp;
	print (Float) fp;
];

[ REAL_NUMBER_TY_Compare r1 r2;
	@jflt r1 r2 ?less;
	@jfeq r1 r2 0 ?same;
	return 1;
	.same; return 0;
	.less; return -1;
];

[ NUMBER_TY_to_REAL_NUMBER_TY int real; @numtof int real; return real; ];
[ REAL_NUMBER_TY_to_NUMBER_TY real int; @ftonumn real int; return int; ];

[ REAL_NUMBER_TY_Sin in out; @sin in out; return out; ];
[ REAL_NUMBER_TY_Cos in out; @cos in out; return out; ];
[ REAL_NUMBER_TY_Tan in out; @tan in out; return out; ];
[ REAL_NUMBER_TY_Arcsin in out; @asin in out; return out; ];
[ REAL_NUMBER_TY_Arccos in out; @acos in out; return out; ];
[ REAL_NUMBER_TY_Arctan in out; @atan in out; return out; ];

[ REAL_NUMBER_TY_Sinh in tmp out;
	@exp in tmp;
	@fsub M_0 in in;
	@exp in out;
	@fadd tmp out out;
	@fmul out M_HALF out;
	return out;
];

[ REAL_NUMBER_TY_Cosh in tmp out;
	@exp in tmp;
	@fsub M_0 in in;
	@exp in out;
	@fsub tmp out out;
	@fmul out M_HALF out;
	return out;
];

[ REAL_NUMBER_TY_Tanh in tmp out;
	tmp = REAL_NUMBER_TY_Sinh(in);
	in = REAL_NUMBER_TY_Cosh(in);
	@fdiv tmp in out;
	return out;
];

[ REAL_NUMBER_TY_Reciprocal in out; @fdiv M_1 in out; return out; ];
[ REAL_NUMBER_TY_Negate in out; @fsub M_0 in out; return out; ];
[ REAL_NUMBER_TY_Plus x y out; @fadd x y out; return out; ];
[ REAL_NUMBER_TY_Minus x y out; @fsub x y out; return out; ];
[ REAL_NUMBER_TY_Times x y out; @fmul x y out; return out; ];
[ REAL_NUMBER_TY_Divide x y out; @fdiv x y out; return out; ];
[ REAL_NUMBER_TY_Remainder x y r q; @fmod x y r q; return r; ];
[ REAL_NUMBER_TY_Approximate x y quotient out;
	@fdiv x y quotient;
	@fadd quotient M_HALF quotient;
	@floor quotient quotient;
	@fmul quotient y out;
	return out;
];
[ REAL_NUMBER_TY_Root x out; @sqrt x out; return out; ];
[ REAL_NUMBER_TY_Cube_Root x out; @pow x M_THIRD out; return out; ];
[ REAL_NUMBER_TY_Pow x y out; @pow x y out; return out; ];
[ REAL_NUMBER_TY_Exp x out; @exp x out; return out; ];
[ REAL_NUMBER_TY_Log x out; @log x out; return out; ];
[ REAL_NUMBER_TY_BLog x n d out;
	@log x out;
	if (n == 10) d = M_LOG10;
	else {
		@numtof n d;
		@log d d;
	}
	@fdiv out d out;
	return out;
];
[ REAL_NUMBER_TY_Floor x out; @floor x out; return out; ];
[ REAL_NUMBER_TY_Ceiling x out; @ceil x out; return out; ];
[ REAL_NUMBER_TY_Abs x; return x & $7fffffff; ];
[ REAL_NUMBER_TY_Nan x; @jisnan x ?Nan; rfalse; .Nan; rtrue; ];

Constant M_0    = $0;
Constant M_1    = $3F800000;
Constant M_HALF = $3F000000; ! 1/3
Constant M_THIRD = $3EAAAAAB; ! 1/3
Constant M_LOG10 = $40135D8E; ! log(10)
Constant M_N1   = $BF800000; ! -1
Constant M_PI   = $40490FDB;
Constant M_NPI  = $C0490FDB;
Constant M_2PI  = $40C90FDB; ! 2*pi
Constant M_PI2  = $3FC90FDB; ! pi/2
Constant M_NPI2 = $BFC90FDB; 
Constant M_E    = $402DF854;
Constant M_E2   = $40EC7326; ! e^2
Constant M_N0   = $80000000; ! negative zero
Constant M_INF  = $7F800000; ! infinity
Constant M_NINF = $FF800000; ! negative infinity
Constant M_NAN  = $7F800001; ! one of many NaN values
Constant M_NNAN = $FF800001; ! another, with a sign bit

! Floating-point parsing routines.

! Parse a float from a text buffer. Returns a float value, or FLOAT_NAN if
! no value was understood.
!
! The recognized format, if you'll pardon a slightly bastardized regexp
! syntax, is "S?D*(PD*)?(ES?D+)?" where S is a sign character "+" or "-",
! D is a decimal digit "0" to "9", P is a decimal point ".",
! and E is the exponential modifier "E" or "e".
!
! For flexibility, the string "M10^" is also accepted for E, where M is
! "X", "x", "*", or the multiplication sign @{D7}. Optional spaces are
! allowed before and after the M sign. (But only for the "10^" form of
! the exponent, not the "e" form.)
!
! This routine does not try to recognize special names for infinity or NaN,
! but it can return FLOAT_INFINITY or FLOAT_NINFINITY if the exponent is too
! large.
!
! This routine relies on floating-point math. Therefore, the same string
! may parse to slightly different float values on different interpreters!
! Be warned.
!
! If useall is true, this insists on using all len characters from the buffer.
! (It returns FLOAT_NAN if any unrecognized characters are left over.)
! Contrariwise, if useall is false, unused characters at the end of the buffer
! are fine. (But not at the beginning; the float must start at the beginning
! of the buffer.)
! 
[ FloatParse buf len useall
	res ix val ch ten negative intpart fracpart fracdiv
	expon expnegative count;
	
!	print "FloatParse <";
!	for (ix=0: ix<len: ix++) print (char) buf->ix;
!	print ">^";

	if (len == 0)
		return FLOAT_NAN;
		
	ix = 0;
	negative = false;
	intpart = 0;
	fracpart = 0;
	@numtof 10 ten;

	! Sign character (optional)
	ch = buf->ix;
	if (ch == '-') {
		negative = true;
		ix++;
	}
	else if (ch == '+') {
		ix++;
	}

	! Some digits (optional)
	for (count=0 : ix<len : ix++, count++) {
		ch = buf->ix;
		if (ch < '0' || ch > '9')
			break;
		val = (ch - '0');
		@numtof val val;
		@fmul intpart ten intpart;
		@fadd intpart val intpart;
	}

	! Decimal point and more digits (optional)
	if (ix<len && buf->ix == '.') {
		ix++;
		@numtof 1 fracdiv;
		for ( : ix<len : ix++, count++) {
			ch = buf->ix;
			if (ch < '0' || ch > '9')
				break;
			val = (ch - '0');
			@numtof	val val;
			@fmul fracpart ten fracpart;
			@fadd fracpart val fracpart;
			@fmul fracdiv ten fracdiv;
		}
		@fdiv fracpart fracdiv fracpart;
	}

	! If there are no digits before *or* after the decimal point, fail.
	if (count == 0)
		return FLOAT_NAN;

	! Combine the integer and fractional parts.
	@fadd intpart fracpart res;

	! Exponent (optional)
	if (ix<len && buf->ix == 'e' or 'E' or ' ' or '*' or 'x' or 'X' or $D7) {
		if (buf->ix == 'e' or 'E') {
			! no spaces, just the 'e'
			ix++;
			if (ix == len)
				return FLOAT_NAN;
		}
		else {
			! any number of spaces, "*", any number of spaces more, "10^"
			while (ix < len && buf->ix == ' ')
				ix++;
			if (ix == len)
				return FLOAT_NAN;
			if (buf->ix ~= '*' or 'x' or 'X' or $D7)
				return FLOAT_NAN;
			ix++;
			while (ix < len && buf->ix == ' ')
				ix++;
			if (ix == len)
				return FLOAT_NAN;
			if (buf->ix ~= '1')
				return FLOAT_NAN;
			ix++;
			if (buf->ix ~= '0')
				return FLOAT_NAN;
			ix++;
			if (buf->ix ~= $5E)
				return FLOAT_NAN;
			ix++;
		}

		! Sign character (optional)
		expnegative = false;
		ch = buf->ix;
		if (ch == '-') {
			expnegative = true;
			ix++;
		}
		else if (ch == '+') {
			ix++;
		}

		expon = 0;
		! Some digits (mandatory)
		for (count=0 : ix<len : ix++, count++) {
			ch = buf->ix;
			if (ch < '0' || ch > '9')
				break;
			expon = 10*expon + (ch - '0');
		}

		if (count == 0)
			return FLOAT_NAN;

		if (expnegative)
			expon = -expon;

		if (expon) {
			@numtof expon expon;
			@pow ten expon val;
			@fmul res val res;
		}
	}

	if (negative) {
		! set the value's sign bit
		res = $80000000 | res;
	}

	if (useall && ix ~= len)
		return FLOAT_NAN;
	return res;
];

! An I6 grammar routine (GPR) for floats. On success, this returns
! GPR_NUMBER and stores a value in the global parsed_number.
!
! This is quite a nuisance, actually, because "." is a word separator.
! Also, we want to accept command sequences like "type 4. look"! So we
! need to collect a set of words made up of digits, signs, periods, and
! the letter "e", but without any intervening whitespace, and excluding
! a trailing period.
!
! (This will fail to correctly parse "type 4.e", but I think that is a
! small flaw. A player would more likely try "type 4. e" or, really,
! not concatenate commands at all. It will also parse "type 4. on keyboard"
! as two commands, even though "4." is a legitimate float literal.
! Contrariwise, "type 4. x me" will be taken as one command. (Because the "x"
! *could* be a continuation of the float, and I don't back up when it turns
! out not to be.) I don't plan to worry about these cases.)

[ FLOAT_TOKEN buf bufend ix ch firstwd newstart newlen lastchar lastwasdot;
	if (wn > num_words)
		return GPR_FAIL;

	! We're going to collect a set of words. Start with zero words.
	firstwd = wn;
	buf = WordAddress(wn);
	bufend = buf;
	lastchar = 0;

	while (wn <= num_words) {
		newstart = WordAddress(wn);
		if (newstart ~= bufend) {
			! There's whitespace between the previous word and this one.
			! Whitespace is okay around an asterisk...
			if ((lastchar ~= '*' or 'x' or 'X' or $D7)
				&& (newstart->0 ~= '*' or 'x' or 'X' or $D7)) {
				! But around any other character, it's not.
				! Don't include the new word.
				break;
			}
		}
		newlen = WordLength(wn);
		for (ix=0 : ix<newlen : ix++) {
			ch = newstart->ix;
			if (~~((ch >= '0' && ch <= '9')
				|| (ch == '-' or '+' or 'E' or 'e' or '.' or 'x' or 'X' or '*' or $D7 or $5E)))
				break;
		}
		if (ix < newlen) {
			! This word contains an invalid character.
			! Don't include the new word.
			break;
		}
		! Okay, include it.
		bufend = newstart + newlen;
		wn++;
		lastchar = (bufend-1)->0;
		lastwasdot = (newlen == 1 && lastchar == '.');
	}

	if (wn > firstwd && lastwasdot) {
		! Exclude a trailing period.
		wn--;
		bufend--;
	}

	if (wn == firstwd) {
		! No words accepted.
		return GPR_FAIL;
	}

	parsed_number = FloatParse(buf, bufend-buf, true);
	if (parsed_number == FLOAT_NAN)
		return GPR_FAIL;
	return GPR_NUMBER;
];

! Floating-point printing routines. (These are based on code in
! Glulxercise.inf, but modified.)
  
! Print a float. This uses exponential notation ("[-]N.NNNe[+-]NN") if
! the exponent is not between 6 and -4. If it is (that is, if the
! absolute value is near 1.0) then it uses decimal notation ("[-]NNN.NNNNN").
! The precision is the number of digits after the decimal point
! (at least one, no more than eight). The default is five, because
! beyond that rounding errors creep in, and even exactly-represented
! float values are printed with trailing fudgy digits.
! Trailing zeroes are trimmed.
[ Float val prec   pval;
	pval = val & $7FFFFFFF;

	@jz pval ?UseFloatDec;
	@jfge pval $49742400 ?UseFloatExp; ! 1000000.0
	@jflt pval $38D1B717 ?UseFloatExp; ! 0.0001

	.UseFloatDec;
	return FloatDec(val, prec);
	.UseFloatExp;
	return FloatExp(val, prec);
];

Array PowersOfTen --> 1 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000;

! Print a float in exponential notation: "[-]N.NNNe[+-]NN".
! The precision is the number of digits after the decimal point
! (at least one, no more than eight). The default is five, because
! beyond that rounding errors creep in, and even exactly-represented
! float values are printed with trailing fudgy digits.
! Trailing zeroes are trimmed.
[ FloatExp val prec   log10val expo fexpo idig ix pow10;
	if (prec == 0)
		prec = 5;
	if (prec > 8)
		prec = 8;
	pow10 = PowersOfTen --> prec;

	! Knock off the sign bit first.
	if (val & $80000000) {
		@streamchar '-';
		val = val & $7FFFFFFF;
	}
	
	@jisnan val ?IsNan;
	@jisinf val ?IsInf;

	if (val == $0) {
		expo = 0;
		idig = 0;
		jump DoPrint;
	}

	! Take as an example val=123.5, with precision=6. The desired
	! result is "1.23000e+02".
	
	@log val sp;
	@fdiv sp $40135D8E log10val; ! $40135D8E is log(10)
	@floor log10val fexpo;
	@ftonumn fexpo expo;
	! expo is now the exponent (as an integer). For our example, expo=2.

	@fsub log10val fexpo sp;
	@numtof prec sp;
	@fadd sp sp sp;
	@fmul sp $40135D8E sp;
	@exp sp sp;
	! The stack value is now exp((log10val - fexpo + prec) * log(10)).
	! We've shifted the decimal point left by expo digits (so that
	! it's after the first nonzero digit), and then right by prec
	! digits. In our example, that would be 1235000.0.
	@ftonumn sp idig;
	! Round to an integer, and we have 1235000. Notice that this is
	! exactly the digits we want to print (if we stick a decimal point
	! after the first).

	.DoPrint;
	
	if (idig >= 10*pow10) {
		! Rounding errors have left us outside the decimal range of
		! [1.0, 10.0) where we should be. Adjust to the next higher
		! exponent.
		expo++;
		@div idig 10 idig;
	}
	
	! Trim off trailing zeroes, as long as there's at least one digit
	! after the decimal point. (Delete this stanza if you want to
	! keep the trailing zeroes.)
	while (prec > 1) {
		@mod idig 10 sp;
		@jnz sp ?DoneTrimming;
		@div pow10 10 pow10;
		@div idig 10 idig;
		prec--;
	}
	.DoneTrimming;
	
	for (ix=0 : ix<=prec : ix++) {
		@div idig pow10 sp;
		@mod sp 10 sp;
		@streamnum sp;
		if (ix == 0)
			@streamchar '.';
		@div pow10 10 pow10;
	}

	! Print the exponent. There are two conventions coded here: the
	! programmatic ("1.0e+00") and the literary ("1.0 x 10^0").
	#ifndef FLOAT_PROGRAMMING_EXPONENTS;
		PrintMultiplicationSign();
		@streamstr "10";
		@streamchar $5E;
		@streamnum expo;
	#ifnot;
		! Convention is to use at least two digits.
		@streamchar 'e';
		if (expo < 0) {
			@streamchar '-';
			@neg expo expo;
		}
		else {
			@streamchar '+';
		}
		if (expo < 10)
			@streamchar '0';
		@streamnum expo;
	#endif; ! FLOAT_PROGRAMMING_EXPONENTS
	
	rtrue;

	.IsNan;
	PrintNan();
	rtrue;

	.IsInf;
	PrintInfinity();
	rtrue;
];

! Print a float in decimal notation: "[-]NNN.NNNNN".
! The precision is the number of digits after the decimal point
! (at least one, no more than eight). The default is five, because
! beyond that rounding errors creep in, and even exactly-represented
! float values are printed with trailing fudgy digits.
! Trailing zeroes are trimmed.
[ FloatDec val prec   log10val int fint extra0 frac idig ix pow10;
	if (prec == 0)
		prec = 5;
	if (prec > 8)
		prec = 8;
	pow10 = PowersOfTen --> prec;
	
	! Knock off the sign bit first.
	if (val & $80000000) {
		@streamchar '-';
		val = val & $7FFFFFFF;
	}
	
	@jisnan val ?IsNan;
	@jisinf val ?IsInf;

	! Take as an example val=123.5, with precision=6. The desired result
	! is "123.50000".
	
	extra0 = 0;
	@fmod val $3F800000 frac fint; ! $3F800000 is 1.0.
	@ftonumz fint int;
	! This converts the integer part of the value to an integer value;
	! in our example, 123.
	
	if (int == $7FFFFFFF) {
		! Looks like the integer part of the value is bigger than
		! we can store in an int variable. (It could be as large
		! as 3e+38.) We're going to have to use a log function to
		! reduce it by some number of factors of 10, and then pad
		! with zeroes.
		@log fint sp;
		@fdiv sp $40135D8E log10val; ! $40135D8E is log(10)
		@ftonumz log10val extra0;
		@sub extra0 8 extra0;
		! extra0 is the number of zeroes we'll be padding with.
		@numtof extra0 sp;
		@fsub log10val sp sp;
		@fmul sp $40135D8E sp;
		@exp sp sp;
		! The stack value is now exp((log10val - extra0) * log(10)).
		! We've shifted the decimal point far enough left to leave
		! about eight digits, which is all we can print as an integer.
		@ftonumz sp int;
	}

	! Print the integer part.
	@streamnum int;
	for (ix=0 : ix<extra0 : ix++)
		@streamchar '0';

	@streamchar '.';

	! Now we need to print the frac part, which is .5.
	
	@log frac sp;
	@fdiv sp $40135D8E log10val; ! $40135D8E is log(10)
	@numtof prec sp;
	@fadd log10val sp sp;
	@fmul sp $40135D8E sp;
	@exp sp sp;
	! The stack value is now exp((frac + prec) * log(10)).
	! We've shifted the decimal point right by prec
	! digits. In our example, that would be 50000.0.
	@ftonumn sp idig;
	! Round to an integer, and we have 50000. Notice that this is
	! exactly the (post-decimal-point) digits we want to print.

	.DoPrint;
	
	if (idig >= pow10) {
		! Rounding errors have left us outside the decimal range of
		! [0.0, 1.0) where we should be. I'm not sure this is possible,
		! actually, but we'll just adjust downward.
		idig = pow10 - 1;
	}

	! Trim off trailing zeroes, as long as there's at least one digit
	! after the decimal point. (Delete this stanza if you want to
	! keep the trailing zeroes.)
	while (prec > 1) {
		@mod idig 10 sp;
		@jnz sp ?DoneTrimming;
		@div pow10 10 pow10;
		@div idig 10 idig;
		prec--;
	}
	.DoneTrimming;
	
	@div pow10 10 pow10;
	for (ix=0 : ix<prec : ix++) {
		@div idig pow10 sp;
		@mod sp 10 sp;
		@streamnum sp;
		@div pow10 10 pow10;
	}
	rtrue;

	.IsNan;
	PrintNan();
	rtrue;

	.IsInf;
	PrintInfinity();
	rtrue;
];

[ PrintInfinity;
	@streamunichar $221E;
	! @streamstr "Inf";
];

[ PrintNan;
	@streamunichar $26a0;
	! @streamstr "NaN";
];

[ PrintMultiplicationSign;
	print " ";
	@streamunichar $D7;
	print " ";
	! @streamstr " x ";
];

#Ifnot; ! TARGET_GLULX

[ REAL_NUMBER_TY_Say real; print real; ]; ! Needs to exist, but likely never used

[ REAL_NUMBER_TY_Compare r1 r2; return UnsignedCompare(r1, r2); ];

#Endif; ! TARGET_GLULX


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Rounding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RoundOffTime t1 t2;
	if (t1 >= 0) return ((t1+t2/2)/t2)*t2;
	return -((-t1+t2/2)/t2)*t2;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Conversion To Number
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NUMBER_TY_to_TIME_TY n;
	n = n%1440;
	if (n < 0) return n + 1440;
	return n;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Square Root
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SquareRoot num
    op res one n x;
    if (num < 0) { RunTimeProblem(RTP_NEGATIVEROOT); return 1; }

    ! Use floating-point ops if available.
    #ifdef TARGET_GLULX;
    @gestalt 11 0 n;
    if (n) {
        @numtof num x;
        @sqrt x x;
        @ftonumz x num;
        return num;
    }
   #endif;
	op = num;
	if (num < 0) { RunTimeProblem(RTP_NEGATIVEROOT); return 1; }
	! "one" starts at the highest power of four <= the argument.
	for (one = WORD_NEXTTOHIGHBIT: one > op: one = one/4) ;

	while (one ~= 0) {
		! print "Round: op = ", op, " res = ", res, ", res**2 = ", res*res, " one = ", one, " nthb = ", WORD_NEXTTOHIGHBIT, "^";
		if (op >= res + one) {
			op = op - res - one;
			res = res/2 + one;
		} else {
			res = res/2;
		}
		one = one/4;
	}
	! print "Res is ", res, "^";
	return res;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Cube Root
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CubeRoot num neg x y n;
    ! Use floating-point ops if available.
    #ifdef TARGET_GLULX;
    @gestalt 11 0 n;
    if (n) {
        if (num < 0) {
            neg = true;
            num = -num;
        }
        @numtof num x;
        @pow x 1051372203 x; ! pow(x, 0.3333)
        @ftonumz x num;
        if (neg)
            return -num;
        else
            return num;
    }
    #endif;
	if (num < 0) x = -SquareRoot(-num); else x = SquareRoot(num);
	for (n=0: (y ~= x) && (n++ < 100): y = x, x = (2*x + num/x/x)/3) ;
	return x;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Digital Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintTimeOfDay t h aop;
	if (t<0) { print "<no time>"; return; }
	if (t >= TWELVE_HOURS) { aop = "pm"; t = t - TWELVE_HOURS; } else aop = "am";
	h = t/ONE_HOUR; if (h==0) h=12;
	print h, ":";
	if (t%ONE_HOUR < 10) print "0"; print t%ONE_HOUR, " ", (string) aop;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Analogue Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintTimeOfDayEnglish t h m dir aop;
	h = (t/ONE_HOUR) % 12; m = t%ONE_HOUR; if (h==0) h=12;
	if (m==0) { print (number) h, " o'clock"; return; }
	dir = "past";
	if (m > HALF_HOUR) { m = ONE_HOUR-m; h = (h+1)%12; if (h==0) h=12; dir = "to"; }
	switch(m) {
		QUARTER_HOUR: print "quarter"; HALF_HOUR: print "half";
		default: print (number) m;
		    if (m%5 ~= 0) {
				if (m == 1) print " minute"; else print " minutes";
		    }
	}
	print " ", (string) dir, " ", (number) h;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Understanding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TIME_TOKEN first_word second_word at length flag
	illegal_char offhour hr mn i original_wn;
	original_wn = wn;

	wn = original_wn;
	first_word = NextWordStopped();
	switch (first_word) {
		'midnight': parsed_number = 0; return GPR_NUMBER;
		'midday', 'noon': parsed_number = TWELVE_HOURS;
		return GPR_NUMBER;
	}
	! Next try the format 12:02
	at = WordAddress(wn-1); length = WordLength(wn-1);
	for (i=0: i<length: i++) {
		switch (at->i) {
			':': if (flag == false && i>0 && i<length-1) flag = true;
			else illegal_char = true;
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9': ;
			default: illegal_char = true;
		}
	}
	if (length < 3 || length > 5 || illegal_char) flag = false;
	if (flag) {
		for (i=0: at->i~=':': i++, hr=hr*10) hr = hr + at->i - '0';
		hr = hr/10;
		for (i++: i<length: i++, mn=mn*10) mn = mn + at->i - '0';
		mn = mn/10;
		second_word = NextWordStopped();
		parsed_number = HoursMinsWordToTime(hr, mn, second_word);
		if (parsed_number == -1) return GPR_FAIL;
		if (second_word ~= 'pm' or 'am') wn--;
		return GPR_NUMBER;
	}
	! Lastly the wordy format
	offhour = -1;
	if (first_word == 'half') offhour = HALF_HOUR;
	if (first_word == 'quarter') offhour = QUARTER_HOUR;
	if (offhour < 0) offhour = TryNumber(wn-1);
	if (offhour < 0 || offhour >= ONE_HOUR) return GPR_FAIL;
	second_word = NextWordStopped();
	switch (second_word) {
		! "six o'clock", "six"
		'o^clock', 'am', 'pm', -1:
			hr = offhour; if (hr > 12) return GPR_FAIL;
		! "quarter to six", "twenty past midnight"
		'to', 'past':
			mn = offhour; hr = TryNumber(wn);
			if (hr <= 0) {
				switch (NextWordStopped()) {
					'noon', 'midday': hr = 12;
					'midnight': hr = 0;
					default: return GPR_FAIL;
				}
			}
			if (hr >= 13) return GPR_FAIL;
			if (second_word == 'to') {
				mn = ONE_HOUR-mn; hr--; if (hr<0) hr=23;
			}
			wn++; second_word = NextWordStopped();
		! "six thirty"
		default:
			hr = offhour; mn = TryNumber(--wn);
			if (mn < 0 || mn >= ONE_HOUR) return GPR_FAIL;
			wn++; second_word = NextWordStopped();
	}
	parsed_number = HoursMinsWordToTime(hr, mn, second_word);
	if (parsed_number < 0) return GPR_FAIL;
	if (second_word ~= 'pm' or 'am' or 'o^clock') wn--;
	return GPR_NUMBER;
];

[ HoursMinsWordToTime hour minute word x;
	if (hour >= 24) return -1;
	if (minute >= ONE_HOUR) return -1;
	x = hour*ONE_HOUR + minute; if (hour >= 13) return x;
	x = x % TWELVE_HOURS; if (word == 'pm') x = x + TWELVE_HOURS;
	if (word ~= 'am' or 'pm' && hour == 12) x = x + TWELVE_HOURS;
	return x;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Relative Time Token
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATIVE_TIME_TOKEN first_word second_word offhour mult mn original_wn;
	original_wn = wn;
	wn = original_wn;
	
	first_word = NextWordStopped(); wn--;
	if (first_word == 'an' or 'a//') mn=1; else mn=TryNumber(wn);
	
    if (mn == -1000) {
		first_word = NextWordStopped();
		if (first_word == 'half') offhour = HALF_HOUR;
		if (first_word == 'quarter') offhour = QUARTER_HOUR;
		if (offhour > 0) {
			second_word = NextWordStopped();
			if (second_word == 'of') second_word = NextWordStopped();
			if (second_word == 'an') second_word = NextWordStopped();
			if (second_word == 'hour') {
				parsed_number = offhour;
				return GPR_NUMBER;
			}
		}
		return GPR_FAIL;
    }
	wn++;
	
	first_word = NextWordStopped();
	switch (first_word) {
		'minutes', 'minute': mult = 1;
		'hours', 'hour': mult = 60;
		default: return GPR_FAIL;
	}
	parsed_number = mn*mult;
	if (mult == 60) {
		mn=TryNumber(wn);
		if (mn ~= -1000) {
			wn++;
			first_word = NextWordStopped();
			if (first_word == 'minutes' or 'minute')
				parsed_number = parsed_number + mn;
			else wn = wn - 2;
		}
	}
	return GPR_NUMBER;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: During Scene Matching
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DuringSceneMatching prop sc;
	for (sc=0: sc<NUMBER_SCENES_CREATED: sc++)
		if ((scene_status-->sc == 1) && (prop(sc+1))) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Scene Questions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SceneUtility sc task;
	if (sc <= 0) return 0;
	if (task == 1 or 2) {
		if (scene_endings-->(sc-1) == 0) return RunTimeProblem(RTP_SCENEHASNTSTARTED, sc);
	} else {
		if (scene_endings-->(sc-1) <= 1) return RunTimeProblem(RTP_SCENEHASNTENDED, sc);
	}
	switch (task) {
		1: return (the_time - scene_started-->(sc-1))%(TWENTY_FOUR_HOURS);
		2: return scene_started-->(sc-1);
		3: return (the_time - scene_ended-->(sc-1))%(TWENTY_FOUR_HOURS);
		4: return scene_ended-->(sc-1);
	}
];




! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Text generation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant CV_POS = -1;
Constant CV_NEG = -2;
Constant CV_MODAL = -3;
Constant CV_MEANING = -4;
[ ConjugateVerb_0 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "be";
        2: print "been";
        3: print "being";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "am";
                    2: print "are";
                    3: print "is";
                    4: print "are";
                    5: print "are";
                    6: print "are";
                }
                2: switch (vp) {
                    1: print "was";
                    2: print "were";
                    3: print "was";
                    4: print "were";
                    5: print "were";
                    6: print "were";
                }
                3: if (vp == 3) { print "has been"; } else { print "have been"; }
                4: print "had been";
                5: print "will be";
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "am not";
                    2: print "are not";
                    3: print "is not";
                    4: print "are not";
                    5: print "are not";
                    6: print "are not";
                }
                2: switch (vp) {
                    1: print "was not";
                    2: print "were not";
                    3: print "was not";
                    4: print "were not";
                    5: print "were not";
                    6: print "were not";
                }
                3: if (vp == 3) { print "has not been"; } else { print "have not been"; }
                4: print "had not been";
                5: print "will not be";
            }
    }
];
[ ConjugateVerb_1 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "auxiliary-have";
        2: print "had";
        3: print "having";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "has"; } else { print "have"; }
                2: print "had";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "has not"; } else { print "have not"; }
                2: print "had not";
            }
    }
];
[ ConjugateVerb_2 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "have";
        2: print "had";
        3: print "having";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_27;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "has"; } else { print "have"; }
                2: print "had";
                3: if (vp == 3) { print "has had"; } else { print "have had"; }
                4: print "had had";
                5: print "will have";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not have"; } else { print "do not have"; }
                2: print "did not have";
                3: if (vp == 3) { print "has not had"; } else { print "have not had"; }
                4: print "had not had";
                5: print "will not have";
            }
    }
];
[ ConjugateVerb_3 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "do";
        2: print "done";
        3: print "doing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "does"; } else { print "do"; }
                2: print "did";
                3: if (vp == 3) { print "has done"; } else { print "have done"; }
                4: print "had done";
                5: print "will do";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not"; } else { print "do not"; }
                2: print "did not";
                3: if (vp == 3) { print "has not done"; } else { print "have not done"; }
                4: print "had not done";
                5: print "will not do";
            }
    }
];
[ ConjugateVerb_4 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "relate";
        2: print "related";
        3: print "relating";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_3;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "relates"; } else { print "relate"; }
                2: print "related";
                3: if (vp == 3) { print "has related"; } else { print "have related"; }
                4: print "had related";
                5: print "will relate";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not relate"; } else { print "do not relate"; }
                2: print "did not relate";
                3: if (vp == 3) { print "has not related"; } else { print "have not related"; }
                4: print "had not related";
                5: print "will not relate";
            }
    }
];
[ ConjugateVerb_5 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "mean";
        2: print "meant";
        3: print "meaning";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_5;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "means"; } else { print "mean"; }
                2: print "meant";
                3: if (vp == 3) { print "has meant"; } else { print "have meant"; }
                4: print "had meant";
                5: print "will mean";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not mean"; } else { print "do not mean"; }
                2: print "did not mean";
                3: if (vp == 3) { print "has not meant"; } else { print "have not meant"; }
                4: print "had not meant";
                5: print "will not mean";
            }
    }
];
[ ConjugateVerb_6 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "provide";
        2: print "provided";
        3: print "providing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_1;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "provides"; } else { print "provide"; }
                2: print "provided";
                3: if (vp == 3) { print "has provided"; } else { print "have provided"; }
                4: print "had provided";
                5: print "will provide";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not provide"; } else { print "do not provide"; }
                2: print "did not provide";
                3: if (vp == 3) { print "has not provided"; } else { print "have not provided"; }
                4: print "had not provided";
                5: print "will not provide";
            }
    }
];
[ ConjugateVerb_7 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "contain";
        2: print "contained";
        3: print "containing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_15;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "contains"; } else { print "contain"; }
                2: print "contained";
                3: if (vp == 3) { print "has contained"; } else { print "have contained"; }
                4: print "had contained";
                5: print "will contain";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not contain"; } else { print "do not contain"; }
                2: print "did not contain";
                3: if (vp == 3) { print "has not contained"; } else { print "have not contained"; }
                4: print "had not contained";
                5: print "will not contain";
            }
    }
];
[ ConjugateVerb_8 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "support";
        2: print "supported";
        3: print "supporting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_17;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "supports"; } else { print "support"; }
                2: print "supported";
                3: if (vp == 3) { print "has supported"; } else { print "have supported"; }
                4: print "had supported";
                5: print "will support";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not support"; } else { print "do not support"; }
                2: print "did not support";
                3: if (vp == 3) { print "has not supported"; } else { print "have not supported"; }
                4: print "had not supported";
                5: print "will not support";
            }
    }
];
[ ConjugateVerb_9 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "incorporate";
        2: print "incorporated";
        3: print "incorporating";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_19;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "incorporates"; } else { print "incorporate"; }
                2: print "incorporated";
                3: if (vp == 3) { print "has incorporated"; } else { print "have incorporated"; }
                4: print "had incorporated";
                5: print "will incorporate";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not incorporate"; } else { print "do not incorporate"; }
                2: print "did not incorporate";
                3: if (vp == 3) { print "has not incorporated"; } else { print "have not incorporated"; }
                4: print "had not incorporated";
                5: print "will not incorporate";
            }
    }
];
[ ConjugateVerb_10 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "enclose";
        2: print "enclosed";
        3: print "enclosing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_37;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "encloses"; } else { print "enclose"; }
                2: print "enclosed";
                3: if (vp == 3) { print "has enclosed"; } else { print "have enclosed"; }
                4: print "had enclosed";
                5: print "will enclose";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not enclose"; } else { print "do not enclose"; }
                2: print "did not enclose";
                3: if (vp == 3) { print "has not enclosed"; } else { print "have not enclosed"; }
                4: print "had not enclosed";
                5: print "will not enclose";
            }
    }
];
[ ConjugateVerb_11 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "carry";
        2: print "carried";
        3: print "carrying";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_21;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "carries"; } else { print "carry"; }
                2: print "carried";
                3: if (vp == 3) { print "has carried"; } else { print "have carried"; }
                4: print "had carried";
                5: print "will carry";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not carry"; } else { print "do not carry"; }
                2: print "did not carry";
                3: if (vp == 3) { print "has not carried"; } else { print "have not carried"; }
                4: print "had not carried";
                5: print "will not carry";
            }
    }
];
[ ConjugateVerb_12 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "hold";
        2: print "held";
        3: print "holding";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_23;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "holds"; } else { print "hold"; }
                2: print "held";
                3: if (vp == 3) { print "has held"; } else { print "have held"; }
                4: print "had held";
                5: print "will hold";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not hold"; } else { print "do not hold"; }
                2: print "did not hold";
                3: if (vp == 3) { print "has not held"; } else { print "have not held"; }
                4: print "had not held";
                5: print "will not hold";
            }
    }
];
[ ConjugateVerb_13 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "wear";
        2: print "worn";
        3: print "wearing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_25;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "wears"; } else { print "wear"; }
                2: print "wore";
                3: if (vp == 3) { print "has worn"; } else { print "have worn"; }
                4: print "had worn";
                5: print "will wear";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not wear"; } else { print "do not wear"; }
                2: print "did not wear";
                3: if (vp == 3) { print "has not worn"; } else { print "have not worn"; }
                4: print "had not worn";
                5: print "will not wear";
            }
    }
];
[ ConjugateVerb_14 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "be able to see";
        2: print "been able to see";
        3: print "being able to see";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_31;
        CV_POS:
            switch (t) {
                1: print "can see";
                2: print "could see";
                3: if (vp == 3) { print "has been able to see"; } else { print "have been able to see"; }
                4: print "had been able to see";
                5: print "will be able to see";
                6: print "see";
                7: print "see";
            }
        CV_NEG:
            switch (t) {
                1: print "cannot see";
                2: print "could not see";
                3: if (vp == 3) { print "has not been able to see"; } else { print "have not been able to see"; }
                4: print "had not been able to see";
                5: print "will not be able to see";
                6: print "see";
                7: print "see";
            }
    }
];
[ ConjugateVerb_15 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "be able to";
        2: print "been able to";
        3: print "being able to";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "can"; if (modal_to) { print " "; modal_to(1); }
                    2: print "can"; if (modal_to) { print " "; modal_to(1); }
                    3: print "can"; if (modal_to) { print " "; modal_to(1); }
                    4: print "can"; if (modal_to) { print " "; modal_to(1); }
                    5: print "can"; if (modal_to) { print " "; modal_to(1); }
                    6: print "can"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "could"; if (modal_to) { print " "; modal_to(1); }
                    2: print "could"; if (modal_to) { print " "; modal_to(1); }
                    3: print "could"; if (modal_to) { print " "; modal_to(1); }
                    4: print "could"; if (modal_to) { print " "; modal_to(1); }
                    5: print "could"; if (modal_to) { print " "; modal_to(1); }
                    6: print "could"; if (modal_to) { print " "; modal_to(1); }
                }
                3: switch (vp) {
                    1: print "have been able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "have been able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "has been able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "have been able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "have been able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "have been able to"; if (modal_to) { print " "; modal_to(1); }
                }
                4: switch (vp) {
                    1: print "had been able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "had been able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "had been able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "had been able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "had been able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "had been able to"; if (modal_to) { print " "; modal_to(1); }
                }
                5: switch (vp) {
                    1: print "will be able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "will be able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "will be able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "will be able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "will be able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "will be able to"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "cannot"; if (modal_to) { print " "; modal_to(1); }
                    2: print "cannot"; if (modal_to) { print " "; modal_to(1); }
                    3: print "cannot"; if (modal_to) { print " "; modal_to(1); }
                    4: print "cannot"; if (modal_to) { print " "; modal_to(1); }
                    5: print "cannot"; if (modal_to) { print " "; modal_to(1); }
                    6: print "cannot"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "could not"; if (modal_to) { print " "; modal_to(1); }
                }
                3: switch (vp) {
                    1: print "have not been able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "have not been able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "has not been able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "have not been able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "have not been able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "have not been able to"; if (modal_to) { print " "; modal_to(1); }
                }
                4: switch (vp) {
                    1: print "had not been able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "had not been able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "had not been able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "had not been able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "had not been able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "had not been able to"; if (modal_to) { print " "; modal_to(1); }
                }
                5: switch (vp) {
                    1: print "will not be able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "will not be able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "will not be able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "will not be able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "will not be able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "will not be able to"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_16 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "see";
        2: print "seen";
        3: print "seeing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "sees"; } else { print "see"; }
                2: print "saw";
                3: if (vp == 3) { print "has seen"; } else { print "have seen"; }
                4: print "had seen";
                5: print "will see";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not see"; } else { print "do not see"; }
                2: print "did not see";
                3: if (vp == 3) { print "has not seen"; } else { print "have not seen"; }
                4: print "had not seen";
                5: print "will not see";
            }
    }
];
[ ConjugateVerb_17 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "be able to touch";
        2: print "been able to touch";
        3: print "being able to touch";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_33;
        CV_POS:
            switch (t) {
                1: print "can touch";
                2: print "could touch";
                3: if (vp == 3) { print "has been able to touch"; } else { print "have been able to touch"; }
                4: print "had been able to touch";
                5: print "will be able to touch";
                6: print "touch";
                7: print "touch";
            }
        CV_NEG:
            switch (t) {
                1: print "cannot touch";
                2: print "could not touch";
                3: if (vp == 3) { print "has not been able to touch"; } else { print "have not been able to touch"; }
                4: print "had not been able to touch";
                5: print "will not be able to touch";
                6: print "touch";
                7: print "touch";
            }
    }
];
[ ConjugateVerb_18 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "touch";
        2: print "touched";
        3: print "touching";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "touches"; } else { print "touch"; }
                2: print "touched";
                3: if (vp == 3) { print "has touched"; } else { print "have touched"; }
                4: print "had touched";
                5: print "will touch";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not touch"; } else { print "do not touch"; }
                2: print "did not touch";
                3: if (vp == 3) { print "has not touched"; } else { print "have not touched"; }
                4: print "had not touched";
                5: print "will not touch";
            }
    }
];
[ ConjugateVerb_19 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "conceal";
        2: print "concealed";
        3: print "concealing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_35;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "conceals"; } else { print "conceal"; }
                2: print "concealed";
                3: if (vp == 3) { print "has concealed"; } else { print "have concealed"; }
                4: print "had concealed";
                5: print "will conceal";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not conceal"; } else { print "do not conceal"; }
                2: print "did not conceal";
                3: if (vp == 3) { print "has not concealed"; } else { print "have not concealed"; }
                4: print "had not concealed";
                5: print "will not conceal";
            }
    }
];
[ ConjugateVerb_20 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "unlock";
        2: print "unlocked";
        3: print "unlocking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_69;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "unlocks"; } else { print "unlock"; }
                2: print "unlocked";
                3: if (vp == 3) { print "has unlocked"; } else { print "have unlocked"; }
                4: print "had unlocked";
                5: print "will unlock";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not unlock"; } else { print "do not unlock"; }
                2: print "did not unlock";
                3: if (vp == 3) { print "has not unlocked"; } else { print "have not unlocked"; }
                4: print "had not unlocked";
                5: print "will not unlock";
            }
    }
];
[ ConjugateVerb_21 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "achieve";
        2: print "achieved";
        3: print "achieving";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "achieves"; } else { print "achieve"; }
                2: print "achieved";
                3: if (vp == 3) { print "has achieved"; } else { print "have achieved"; }
                4: print "had achieved";
                5: print "will achieve";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not achieve"; } else { print "do not achieve"; }
                2: print "did not achieve";
                3: if (vp == 3) { print "has not achieved"; } else { print "have not achieved"; }
                4: print "had not achieved";
                5: print "will not achieve";
            }
    }
];
[ ConjugateVerb_22 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "appreciate";
        2: print "appreciated";
        3: print "appreciating";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "appreciates"; } else { print "appreciate"; }
                2: print "appreciated";
                3: if (vp == 3) { print "has appreciated"; } else { print "have appreciated"; }
                4: print "had appreciated";
                5: print "will appreciate";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not appreciate"; } else { print "do not appreciate"; }
                2: print "did not appreciate";
                3: if (vp == 3) { print "has not appreciated"; } else { print "have not appreciated"; }
                4: print "had not appreciated";
                5: print "will not appreciate";
            }
    }
];
[ ConjugateVerb_23 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "arrive";
        2: print "arrived";
        3: print "arriving";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "arrives"; } else { print "arrive"; }
                2: print "arrived";
                3: if (vp == 3) { print "has arrived"; } else { print "have arrived"; }
                4: print "had arrived";
                5: print "will arrive";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not arrive"; } else { print "do not arrive"; }
                2: print "did not arrive";
                3: if (vp == 3) { print "has not arrived"; } else { print "have not arrived"; }
                4: print "had not arrived";
                5: print "will not arrive";
            }
    }
];
[ ConjugateVerb_24 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "care";
        2: print "cared";
        3: print "caring";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "cares"; } else { print "care"; }
                2: print "cared";
                3: if (vp == 3) { print "has cared"; } else { print "have cared"; }
                4: print "had cared";
                5: print "will care";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not care"; } else { print "do not care"; }
                2: print "did not care";
                3: if (vp == 3) { print "has not cared"; } else { print "have not cared"; }
                4: print "had not cared";
                5: print "will not care";
            }
    }
];
[ ConjugateVerb_25 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "close";
        2: print "closed";
        3: print "closing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "closes"; } else { print "close"; }
                2: print "closed";
                3: if (vp == 3) { print "has closed"; } else { print "have closed"; }
                4: print "had closed";
                5: print "will close";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not close"; } else { print "do not close"; }
                2: print "did not close";
                3: if (vp == 3) { print "has not closed"; } else { print "have not closed"; }
                4: print "had not closed";
                5: print "will not close";
            }
    }
];
[ ConjugateVerb_26 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "die";
        2: print "died";
        3: print "dying";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "dies"; } else { print "die"; }
                2: print "died";
                3: if (vp == 3) { print "has died"; } else { print "have died"; }
                4: print "had died";
                5: print "will die";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not die"; } else { print "do not die"; }
                2: print "did not die";
                3: if (vp == 3) { print "has not died"; } else { print "have not died"; }
                4: print "had not died";
                5: print "will not die";
            }
    }
];
[ ConjugateVerb_27 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "discover";
        2: print "discovered";
        3: print "discovering";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "discovers"; } else { print "discover"; }
                2: print "discovered";
                3: if (vp == 3) { print "has discovered"; } else { print "have discovered"; }
                4: print "had discovered";
                5: print "will discover";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not discover"; } else { print "do not discover"; }
                2: print "did not discover";
                3: if (vp == 3) { print "has not discovered"; } else { print "have not discovered"; }
                4: print "had not discovered";
                5: print "will not discover";
            }
    }
];
[ ConjugateVerb_28 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "drop";
        2: print "dropped";
        3: print "dropping";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "drops"; } else { print "drop"; }
                2: print "dropped";
                3: if (vp == 3) { print "has dropped"; } else { print "have dropped"; }
                4: print "had dropped";
                5: print "will drop";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not drop"; } else { print "do not drop"; }
                2: print "did not drop";
                3: if (vp == 3) { print "has not dropped"; } else { print "have not dropped"; }
                4: print "had not dropped";
                5: print "will not drop";
            }
    }
];
[ ConjugateVerb_29 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "eat";
        2: print "eaten";
        3: print "eating";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "eats"; } else { print "eat"; }
                2: print "ate";
                3: if (vp == 3) { print "has eaten"; } else { print "have eaten"; }
                4: print "had eaten";
                5: print "will eat";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not eat"; } else { print "do not eat"; }
                2: print "did not eat";
                3: if (vp == 3) { print "has not eaten"; } else { print "have not eaten"; }
                4: print "had not eaten";
                5: print "will not eat";
            }
    }
];
[ ConjugateVerb_30 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "feel";
        2: print "felt";
        3: print "feeling";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "feels"; } else { print "feel"; }
                2: print "felt";
                3: if (vp == 3) { print "has felt"; } else { print "have felt"; }
                4: print "had felt";
                5: print "will feel";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not feel"; } else { print "do not feel"; }
                2: print "did not feel";
                3: if (vp == 3) { print "has not felt"; } else { print "have not felt"; }
                4: print "had not felt";
                5: print "will not feel";
            }
    }
];
[ ConjugateVerb_31 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "find";
        2: print "found";
        3: print "finding";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "finds"; } else { print "find"; }
                2: print "found";
                3: if (vp == 3) { print "has found"; } else { print "have found"; }
                4: print "had found";
                5: print "will find";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not find"; } else { print "do not find"; }
                2: print "did not find";
                3: if (vp == 3) { print "has not found"; } else { print "have not found"; }
                4: print "had not found";
                5: print "will not find";
            }
    }
];
[ ConjugateVerb_32 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "get";
        2: print "got";
        3: print "getting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "gets"; } else { print "get"; }
                2: print "got";
                3: if (vp == 3) { print "has got"; } else { print "have got"; }
                4: print "had got";
                5: print "will get";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not get"; } else { print "do not get"; }
                2: print "did not get";
                3: if (vp == 3) { print "has not got"; } else { print "have not got"; }
                4: print "had not got";
                5: print "will not get";
            }
    }
];
[ ConjugateVerb_33 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "give";
        2: print "given";
        3: print "giving";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "gives"; } else { print "give"; }
                2: print "gave";
                3: if (vp == 3) { print "has given"; } else { print "have given"; }
                4: print "had given";
                5: print "will give";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not give"; } else { print "do not give"; }
                2: print "did not give";
                3: if (vp == 3) { print "has not given"; } else { print "have not given"; }
                4: print "had not given";
                5: print "will not give";
            }
    }
];
[ ConjugateVerb_34 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "go";
        2: print "gone";
        3: print "going";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "goes"; } else { print "go"; }
                2: print "went";
                3: if (vp == 3) { print "has gone"; } else { print "have gone"; }
                4: print "had gone";
                5: print "will go";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not go"; } else { print "do not go"; }
                2: print "did not go";
                3: if (vp == 3) { print "has not gone"; } else { print "have not gone"; }
                4: print "had not gone";
                5: print "will not go";
            }
    }
];
[ ConjugateVerb_35 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "happen";
        2: print "happened";
        3: print "happening";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "happens"; } else { print "happen"; }
                2: print "happened";
                3: if (vp == 3) { print "has happened"; } else { print "have happened"; }
                4: print "had happened";
                5: print "will happen";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not happen"; } else { print "do not happen"; }
                2: print "did not happen";
                3: if (vp == 3) { print "has not happened"; } else { print "have not happened"; }
                4: print "had not happened";
                5: print "will not happen";
            }
    }
];
[ ConjugateVerb_36 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "hear";
        2: print "heard";
        3: print "hearing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "hears"; } else { print "hear"; }
                2: print "heard";
                3: if (vp == 3) { print "has heard"; } else { print "have heard"; }
                4: print "had heard";
                5: print "will hear";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not hear"; } else { print "do not hear"; }
                2: print "did not hear";
                3: if (vp == 3) { print "has not heard"; } else { print "have not heard"; }
                4: print "had not heard";
                5: print "will not hear";
            }
    }
];
[ ConjugateVerb_37 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "jump";
        2: print "jumped";
        3: print "jumping";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "jumps"; } else { print "jump"; }
                2: print "jumped";
                3: if (vp == 3) { print "has jumped"; } else { print "have jumped"; }
                4: print "had jumped";
                5: print "will jump";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not jump"; } else { print "do not jump"; }
                2: print "did not jump";
                3: if (vp == 3) { print "has not jumped"; } else { print "have not jumped"; }
                4: print "had not jumped";
                5: print "will not jump";
            }
    }
];
[ ConjugateVerb_38 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "lack";
        2: print "lacked";
        3: print "lacking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "lacks"; } else { print "lack"; }
                2: print "lacked";
                3: if (vp == 3) { print "has lacked"; } else { print "have lacked"; }
                4: print "had lacked";
                5: print "will lack";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not lack"; } else { print "do not lack"; }
                2: print "did not lack";
                3: if (vp == 3) { print "has not lacked"; } else { print "have not lacked"; }
                4: print "had not lacked";
                5: print "will not lack";
            }
    }
];
[ ConjugateVerb_39 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "lead";
        2: print "led";
        3: print "leading";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "leads"; } else { print "lead"; }
                2: print "led";
                3: if (vp == 3) { print "has led"; } else { print "have led"; }
                4: print "had led";
                5: print "will lead";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not lead"; } else { print "do not lead"; }
                2: print "did not lead";
                3: if (vp == 3) { print "has not led"; } else { print "have not led"; }
                4: print "had not led";
                5: print "will not lead";
            }
    }
];
[ ConjugateVerb_40 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "like";
        2: print "liked";
        3: print "liking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "likes"; } else { print "like"; }
                2: print "liked";
                3: if (vp == 3) { print "has liked"; } else { print "have liked"; }
                4: print "had liked";
                5: print "will like";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not like"; } else { print "do not like"; }
                2: print "did not like";
                3: if (vp == 3) { print "has not liked"; } else { print "have not liked"; }
                4: print "had not liked";
                5: print "will not like";
            }
    }
];
[ ConjugateVerb_41 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "listen";
        2: print "listened";
        3: print "listening";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "listens"; } else { print "listen"; }
                2: print "listened";
                3: if (vp == 3) { print "has listened"; } else { print "have listened"; }
                4: print "had listened";
                5: print "will listen";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not listen"; } else { print "do not listen"; }
                2: print "did not listen";
                3: if (vp == 3) { print "has not listened"; } else { print "have not listened"; }
                4: print "had not listened";
                5: print "will not listen";
            }
    }
];
[ ConjugateVerb_42 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "lock";
        2: print "locked";
        3: print "locking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "locks"; } else { print "lock"; }
                2: print "locked";
                3: if (vp == 3) { print "has locked"; } else { print "have locked"; }
                4: print "had locked";
                5: print "will lock";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not lock"; } else { print "do not lock"; }
                2: print "did not lock";
                3: if (vp == 3) { print "has not locked"; } else { print "have not locked"; }
                4: print "had not locked";
                5: print "will not lock";
            }
    }
];
[ ConjugateVerb_43 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "look";
        2: print "looked";
        3: print "looking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "looks"; } else { print "look"; }
                2: print "looked";
                3: if (vp == 3) { print "has looked"; } else { print "have looked"; }
                4: print "had looked";
                5: print "will look";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not look"; } else { print "do not look"; }
                2: print "did not look";
                3: if (vp == 3) { print "has not looked"; } else { print "have not looked"; }
                4: print "had not looked";
                5: print "will not look";
            }
    }
];
[ ConjugateVerb_44 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "need";
        2: print "needed";
        3: print "needing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "needs"; } else { print "need"; }
                2: print "needed";
                3: if (vp == 3) { print "has needed"; } else { print "have needed"; }
                4: print "had needed";
                5: print "will need";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not need"; } else { print "do not need"; }
                2: print "did not need";
                3: if (vp == 3) { print "has not needed"; } else { print "have not needed"; }
                4: print "had not needed";
                5: print "will not need";
            }
    }
];
[ ConjugateVerb_45 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "open";
        2: print "opened";
        3: print "opening";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "opens"; } else { print "open"; }
                2: print "opened";
                3: if (vp == 3) { print "has opened"; } else { print "have opened"; }
                4: print "had opened";
                5: print "will open";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not open"; } else { print "do not open"; }
                2: print "did not open";
                3: if (vp == 3) { print "has not opened"; } else { print "have not opened"; }
                4: print "had not opened";
                5: print "will not open";
            }
    }
];
[ ConjugateVerb_46 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "pass";
        2: print "passed";
        3: print "passing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "passes"; } else { print "pass"; }
                2: print "passed";
                3: if (vp == 3) { print "has passed"; } else { print "have passed"; }
                4: print "had passed";
                5: print "will pass";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not pass"; } else { print "do not pass"; }
                2: print "did not pass";
                3: if (vp == 3) { print "has not passed"; } else { print "have not passed"; }
                4: print "had not passed";
                5: print "will not pass";
            }
    }
];
[ ConjugateVerb_47 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "pick";
        2: print "picked";
        3: print "picking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "picks"; } else { print "pick"; }
                2: print "picked";
                3: if (vp == 3) { print "has picked"; } else { print "have picked"; }
                4: print "had picked";
                5: print "will pick";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not pick"; } else { print "do not pick"; }
                2: print "did not pick";
                3: if (vp == 3) { print "has not picked"; } else { print "have not picked"; }
                4: print "had not picked";
                5: print "will not pick";
            }
    }
];
[ ConjugateVerb_48 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "provoke";
        2: print "provoked";
        3: print "provoking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "provokes"; } else { print "provoke"; }
                2: print "provoked";
                3: if (vp == 3) { print "has provoked"; } else { print "have provoked"; }
                4: print "had provoked";
                5: print "will provoke";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not provoke"; } else { print "do not provoke"; }
                2: print "did not provoke";
                3: if (vp == 3) { print "has not provoked"; } else { print "have not provoked"; }
                4: print "had not provoked";
                5: print "will not provoke";
            }
    }
];
[ ConjugateVerb_49 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "pull";
        2: print "pulled";
        3: print "pulling";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "pulls"; } else { print "pull"; }
                2: print "pulled";
                3: if (vp == 3) { print "has pulled"; } else { print "have pulled"; }
                4: print "had pulled";
                5: print "will pull";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not pull"; } else { print "do not pull"; }
                2: print "did not pull";
                3: if (vp == 3) { print "has not pulled"; } else { print "have not pulled"; }
                4: print "had not pulled";
                5: print "will not pull";
            }
    }
];
[ ConjugateVerb_50 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "push";
        2: print "pushed";
        3: print "pushing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "pushes"; } else { print "push"; }
                2: print "pushed";
                3: if (vp == 3) { print "has pushed"; } else { print "have pushed"; }
                4: print "had pushed";
                5: print "will push";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not push"; } else { print "do not push"; }
                2: print "did not push";
                3: if (vp == 3) { print "has not pushed"; } else { print "have not pushed"; }
                4: print "had not pushed";
                5: print "will not push";
            }
    }
];
[ ConjugateVerb_51 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "put";
        2: print "put";
        3: print "putting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "puts"; } else { print "put"; }
                2: print "put";
                3: if (vp == 3) { print "has put"; } else { print "have put"; }
                4: print "had put";
                5: print "will put";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not put"; } else { print "do not put"; }
                2: print "did not put";
                3: if (vp == 3) { print "has not put"; } else { print "have not put"; }
                4: print "had not put";
                5: print "will not put";
            }
    }
];
[ ConjugateVerb_52 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "rub";
        2: print "rubbed";
        3: print "rubbing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "rubs"; } else { print "rub"; }
                2: print "rubbed";
                3: if (vp == 3) { print "has rubbed"; } else { print "have rubbed"; }
                4: print "had rubbed";
                5: print "will rub";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not rub"; } else { print "do not rub"; }
                2: print "did not rub";
                3: if (vp == 3) { print "has not rubbed"; } else { print "have not rubbed"; }
                4: print "had not rubbed";
                5: print "will not rub";
            }
    }
];
[ ConjugateVerb_53 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "say";
        2: print "said";
        3: print "saying";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "says"; } else { print "say"; }
                2: print "said";
                3: if (vp == 3) { print "has said"; } else { print "have said"; }
                4: print "had said";
                5: print "will say";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not say"; } else { print "do not say"; }
                2: print "did not say";
                3: if (vp == 3) { print "has not said"; } else { print "have not said"; }
                4: print "had not said";
                5: print "will not say";
            }
    }
];
[ ConjugateVerb_54 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "search";
        2: print "searched";
        3: print "searching";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "searches"; } else { print "search"; }
                2: print "searched";
                3: if (vp == 3) { print "has searched"; } else { print "have searched"; }
                4: print "had searched";
                5: print "will search";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not search"; } else { print "do not search"; }
                2: print "did not search";
                3: if (vp == 3) { print "has not searched"; } else { print "have not searched"; }
                4: print "had not searched";
                5: print "will not search";
            }
    }
];
[ ConjugateVerb_55 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "seem";
        2: print "seemed";
        3: print "seeming";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "seems"; } else { print "seem"; }
                2: print "seemed";
                3: if (vp == 3) { print "has seemed"; } else { print "have seemed"; }
                4: print "had seemed";
                5: print "will seem";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not seem"; } else { print "do not seem"; }
                2: print "did not seem";
                3: if (vp == 3) { print "has not seemed"; } else { print "have not seemed"; }
                4: print "had not seemed";
                5: print "will not seem";
            }
    }
];
[ ConjugateVerb_56 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "set";
        2: print "set";
        3: print "setting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "sets"; } else { print "set"; }
                2: print "set";
                3: if (vp == 3) { print "has set"; } else { print "have set"; }
                4: print "had set";
                5: print "will set";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not set"; } else { print "do not set"; }
                2: print "did not set";
                3: if (vp == 3) { print "has not set"; } else { print "have not set"; }
                4: print "had not set";
                5: print "will not set";
            }
    }
];
[ ConjugateVerb_57 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "smell";
        2: print "smelled";
        3: print "smelling";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "smells"; } else { print "smell"; }
                2: print "smelled";
                3: if (vp == 3) { print "has smelled"; } else { print "have smelled"; }
                4: print "had smelled";
                5: print "will smell";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not smell"; } else { print "do not smell"; }
                2: print "did not smell";
                3: if (vp == 3) { print "has not smelled"; } else { print "have not smelled"; }
                4: print "had not smelled";
                5: print "will not smell";
            }
    }
];
[ ConjugateVerb_58 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "sniff";
        2: print "sniffed";
        3: print "sniffing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "sniffs"; } else { print "sniff"; }
                2: print "sniffed";
                3: if (vp == 3) { print "has sniffed"; } else { print "have sniffed"; }
                4: print "had sniffed";
                5: print "will sniff";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not sniff"; } else { print "do not sniff"; }
                2: print "did not sniff";
                3: if (vp == 3) { print "has not sniffed"; } else { print "have not sniffed"; }
                4: print "had not sniffed";
                5: print "will not sniff";
            }
    }
];
[ ConjugateVerb_59 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "squeeze";
        2: print "squeezed";
        3: print "squeezing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "squeezes"; } else { print "squeeze"; }
                2: print "squeezed";
                3: if (vp == 3) { print "has squeezed"; } else { print "have squeezed"; }
                4: print "had squeezed";
                5: print "will squeeze";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not squeeze"; } else { print "do not squeeze"; }
                2: print "did not squeeze";
                3: if (vp == 3) { print "has not squeezed"; } else { print "have not squeezed"; }
                4: print "had not squeezed";
                5: print "will not squeeze";
            }
    }
];
[ ConjugateVerb_60 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "switch";
        2: print "switched";
        3: print "switching";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "switches"; } else { print "switch"; }
                2: print "switched";
                3: if (vp == 3) { print "has switched"; } else { print "have switched"; }
                4: print "had switched";
                5: print "will switch";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not switch"; } else { print "do not switch"; }
                2: print "did not switch";
                3: if (vp == 3) { print "has not switched"; } else { print "have not switched"; }
                4: print "had not switched";
                5: print "will not switch";
            }
    }
];
[ ConjugateVerb_61 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "take";
        2: print "taken";
        3: print "taking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "takes"; } else { print "take"; }
                2: print "took";
                3: if (vp == 3) { print "has taken"; } else { print "have taken"; }
                4: print "had taken";
                5: print "will take";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not take"; } else { print "do not take"; }
                2: print "did not take";
                3: if (vp == 3) { print "has not taken"; } else { print "have not taken"; }
                4: print "had not taken";
                5: print "will not take";
            }
    }
];
[ ConjugateVerb_62 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "talk";
        2: print "talked";
        3: print "talking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "talks"; } else { print "talk"; }
                2: print "talked";
                3: if (vp == 3) { print "has talked"; } else { print "have talked"; }
                4: print "had talked";
                5: print "will talk";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not talk"; } else { print "do not talk"; }
                2: print "did not talk";
                3: if (vp == 3) { print "has not talked"; } else { print "have not talked"; }
                4: print "had not talked";
                5: print "will not talk";
            }
    }
];
[ ConjugateVerb_63 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "taste";
        2: print "tasted";
        3: print "tasting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "tastes"; } else { print "taste"; }
                2: print "tasted";
                3: if (vp == 3) { print "has tasted"; } else { print "have tasted"; }
                4: print "had tasted";
                5: print "will taste";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not taste"; } else { print "do not taste"; }
                2: print "did not taste";
                3: if (vp == 3) { print "has not tasted"; } else { print "have not tasted"; }
                4: print "had not tasted";
                5: print "will not taste";
            }
    }
];
[ ConjugateVerb_64 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "turn";
        2: print "turned";
        3: print "turning";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "turns"; } else { print "turn"; }
                2: print "turned";
                3: if (vp == 3) { print "has turned"; } else { print "have turned"; }
                4: print "had turned";
                5: print "will turn";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not turn"; } else { print "do not turn"; }
                2: print "did not turn";
                3: if (vp == 3) { print "has not turned"; } else { print "have not turned"; }
                4: print "had not turned";
                5: print "will not turn";
            }
    }
];
[ ConjugateVerb_65 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "wait";
        2: print "waited";
        3: print "waiting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "waits"; } else { print "wait"; }
                2: print "waited";
                3: if (vp == 3) { print "has waited"; } else { print "have waited"; }
                4: print "had waited";
                5: print "will wait";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not wait"; } else { print "do not wait"; }
                2: print "did not wait";
                3: if (vp == 3) { print "has not waited"; } else { print "have not waited"; }
                4: print "had not waited";
                5: print "will not wait";
            }
    }
];
[ ConjugateVerb_66 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "wave";
        2: print "waved";
        3: print "waving";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "waves"; } else { print "wave"; }
                2: print "waved";
                3: if (vp == 3) { print "has waved"; } else { print "have waved"; }
                4: print "had waved";
                5: print "will wave";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not wave"; } else { print "do not wave"; }
                2: print "did not wave";
                3: if (vp == 3) { print "has not waved"; } else { print "have not waved"; }
                4: print "had not waved";
                5: print "will not wave";
            }
    }
];
[ ConjugateVerb_67 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "win";
        2: print "won";
        3: print "winning";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "wins"; } else { print "win"; }
                2: print "won";
                3: if (vp == 3) { print "has won"; } else { print "have won"; }
                4: print "had won";
                5: print "will win";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not win"; } else { print "do not win"; }
                2: print "did not win";
                3: if (vp == 3) { print "has not won"; } else { print "have not won"; }
                4: print "had not won";
                5: print "will not win";
            }
    }
];
[ ConjugateVerb_68 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "could";
        2: print "coulded";
        3: print "coulding";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "could"; if (modal_to) { print " "; modal_to(1); }
                    2: print "could"; if (modal_to) { print " "; modal_to(1); }
                    3: print "could"; if (modal_to) { print " "; modal_to(1); }
                    4: print "could"; if (modal_to) { print " "; modal_to(1); }
                    5: print "could"; if (modal_to) { print " "; modal_to(1); }
                    6: print "could"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "could have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "could have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "could have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "could"; if (modal_to) { print " "; modal_to(1); }
                    2: print "could"; if (modal_to) { print " "; modal_to(1); }
                    3: print "could"; if (modal_to) { print " "; modal_to(1); }
                    4: print "could"; if (modal_to) { print " "; modal_to(1); }
                    5: print "could"; if (modal_to) { print " "; modal_to(1); }
                    6: print "could"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "could not"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "could not"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_69 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "may";
        2: print "mayed";
        3: print "maying";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "may"; if (modal_to) { print " "; modal_to(1); }
                    2: print "may"; if (modal_to) { print " "; modal_to(1); }
                    3: print "may"; if (modal_to) { print " "; modal_to(1); }
                    4: print "may"; if (modal_to) { print " "; modal_to(1); }
                    5: print "may"; if (modal_to) { print " "; modal_to(1); }
                    6: print "may"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "may have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "may have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "may have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "may"; if (modal_to) { print " "; modal_to(1); }
                    2: print "may"; if (modal_to) { print " "; modal_to(1); }
                    3: print "may"; if (modal_to) { print " "; modal_to(1); }
                    4: print "may"; if (modal_to) { print " "; modal_to(1); }
                    5: print "may"; if (modal_to) { print " "; modal_to(1); }
                    6: print "may"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "may not"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "may not"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_70 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "might";
        2: print "mighted";
        3: print "mighting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "might"; if (modal_to) { print " "; modal_to(1); }
                    2: print "might"; if (modal_to) { print " "; modal_to(1); }
                    3: print "might"; if (modal_to) { print " "; modal_to(1); }
                    4: print "might"; if (modal_to) { print " "; modal_to(1); }
                    5: print "might"; if (modal_to) { print " "; modal_to(1); }
                    6: print "might"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "might have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "might have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "might have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "might"; if (modal_to) { print " "; modal_to(1); }
                    2: print "might"; if (modal_to) { print " "; modal_to(1); }
                    3: print "might"; if (modal_to) { print " "; modal_to(1); }
                    4: print "might"; if (modal_to) { print " "; modal_to(1); }
                    5: print "might"; if (modal_to) { print " "; modal_to(1); }
                    6: print "might"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "might not"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "might not"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_71 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "must";
        2: print "musted";
        3: print "musting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "must"; if (modal_to) { print " "; modal_to(1); }
                    2: print "must"; if (modal_to) { print " "; modal_to(1); }
                    3: print "must"; if (modal_to) { print " "; modal_to(1); }
                    4: print "must"; if (modal_to) { print " "; modal_to(1); }
                    5: print "must"; if (modal_to) { print " "; modal_to(1); }
                    6: print "must"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "must have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "must have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "must have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "must"; if (modal_to) { print " "; modal_to(1); }
                    2: print "must"; if (modal_to) { print " "; modal_to(1); }
                    3: print "must"; if (modal_to) { print " "; modal_to(1); }
                    4: print "must"; if (modal_to) { print " "; modal_to(1); }
                    5: print "must"; if (modal_to) { print " "; modal_to(1); }
                    6: print "must"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "must not"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "must not"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_72 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "should";
        2: print "shoulded";
        3: print "shoulding";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "should"; if (modal_to) { print " "; modal_to(1); }
                    2: print "should"; if (modal_to) { print " "; modal_to(1); }
                    3: print "should"; if (modal_to) { print " "; modal_to(1); }
                    4: print "should"; if (modal_to) { print " "; modal_to(1); }
                    5: print "should"; if (modal_to) { print " "; modal_to(1); }
                    6: print "should"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "should have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "should have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "should have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "should"; if (modal_to) { print " "; modal_to(1); }
                    2: print "should"; if (modal_to) { print " "; modal_to(1); }
                    3: print "should"; if (modal_to) { print " "; modal_to(1); }
                    4: print "should"; if (modal_to) { print " "; modal_to(1); }
                    5: print "should"; if (modal_to) { print " "; modal_to(1); }
                    6: print "should"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "should not"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "should not"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_73 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "would";
        2: print "woulded";
        3: print "woulding";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "would"; if (modal_to) { print " "; modal_to(1); }
                    2: print "would"; if (modal_to) { print " "; modal_to(1); }
                    3: print "would"; if (modal_to) { print " "; modal_to(1); }
                    4: print "would"; if (modal_to) { print " "; modal_to(1); }
                    5: print "would"; if (modal_to) { print " "; modal_to(1); }
                    6: print "would"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "would have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "would have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "would have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "would"; if (modal_to) { print " "; modal_to(1); }
                    2: print "would"; if (modal_to) { print " "; modal_to(1); }
                    3: print "would"; if (modal_to) { print " "; modal_to(1); }
                    4: print "would"; if (modal_to) { print " "; modal_to(1); }
                    5: print "would"; if (modal_to) { print " "; modal_to(1); }
                    6: print "would"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "would not"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "would not"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_74 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "'re";
        2: print " been";
        3: print " being";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "'m";
                    2: print "'re";
                    3: print "'s";
                    4: print "'re";
                    5: print "'re";
                    6: print "'re";
                }
                2: switch (vp) {
                    1: print " was";
                    2: print " were";
                    3: print " was";
                    4: print " were";
                    5: print " were";
                    6: print " were";
                }
                3: if (vp == 3) { print "'s been"; } else { print "'ve been"; }
                4: print "'d been";
                5: print "'ll be";
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "'m not";
                    2: print "'re not";
                    3: print "'s not";
                    4: print "'re not";
                    5: print "'re not";
                    6: print "'re not";
                }
                2: switch (vp) {
                    1: print " wasn't";
                    2: print " weren't";
                    3: print " wasn't";
                    4: print " weren't";
                    5: print " weren't";
                    6: print " weren't";
                }
                3: if (vp == 3) { print "'s not been"; } else { print "'ve not been"; }
                4: print "'d not been";
                5: print "'ll not be";
            }
    }
];
[ ConjugateVerb_75 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "'ve";
        2: print " had";
        3: print " having";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "'s"; } else { print "'ve"; }
                2: print " had";
                3: if (vp == 3) { print "'s had"; } else { print "'ve had"; }
                4: print "'d had";
                5: print "'ll have";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "'s not"; } else { print "'ve not"; }
                2: print " hadn't";
                3: if (vp == 3) { print "'s not had"; } else { print "'ve not had"; }
                4: print "'d not had";
                5: print "'ll not have";
            }
    }
];
[ ConjugateVerb_76 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "aren't";
        2: print "aren'ted";
        3: print "aren'ting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "am not";
                    2: print "aren't";
                    3: print "isn't";
                    4: print "aren't";
                    5: print "aren't";
                    6: print "aren't";
                }
                2: switch (vp) {
                    1: print "wasn't";
                    2: print "weren't";
                    3: print "wasn't";
                    4: print "weren't";
                    5: print "weren't";
                    6: print "weren't";
                }
                3: if (vp == 3) { print "hasn't been"; } else { print "haven't been"; }
                4: print "hadn't been";
                5: print "won't be";
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_77 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "can't";
        2: print "can'ted";
        3: print "can'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "can't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "can't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "can't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "can't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "can't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "can't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                }
                3: switch (vp) {
                    1: print "haven't been able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "haven't been able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "hasn't been able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "haven't been able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "haven't been able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "haven't been able to"; if (modal_to) { print " "; modal_to(1); }
                }
                4: switch (vp) {
                    1: print "hadn't been able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "hadn't been able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "hadn't been able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "hadn't been able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "hadn't been able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "hadn't been able to"; if (modal_to) { print " "; modal_to(1); }
                }
                5: switch (vp) {
                    1: print "won't be able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "won't be able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "won't be able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "won't be able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "won't be able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "won't be able to"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_78 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "haven't";
        2: print "haven'ted";
        3: print "haven'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "haven't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "haven't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "hasn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "haven't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "haven't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "haven't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "won't have"; if (modal_to) { print " "; modal_to(1); }
                    2: print "won't have"; if (modal_to) { print " "; modal_to(1); }
                    3: print "won't have"; if (modal_to) { print " "; modal_to(1); }
                    4: print "won't have"; if (modal_to) { print " "; modal_to(1); }
                    5: print "won't have"; if (modal_to) { print " "; modal_to(1); }
                    6: print "won't have"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_79 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "don't";
        2: print "don'ted";
        3: print "don'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "don't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "don't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "doesn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "don't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "don't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "don't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "won't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_80 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "mustn't";
        2: print "mustn'ted";
        3: print "mustn'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_81 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "mightn't";
        2: print "mightn'ted";
        3: print "mightn'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_82 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "mayn't";
        2: print "mayn'ted";
        3: print "mayn'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_83 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "wouldn't";
        2: print "wouldn'ted";
        3: print "wouldn'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_84 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "couldn't";
        2: print "couldn'ted";
        3: print "couldn'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_85 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "shouldn't";
        2: print "shouldn'ted";
        3: print "shouldn'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_86 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "won't";
        2: print "won'ted";
        3: print "won'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "won't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "won't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
Array TableOfVerbs --> ConjugateVerb_0 ConjugateVerb_2 ConjugateVerb_3 ConjugateVerb_4 ConjugateVerb_5 ConjugateVerb_6 ConjugateVerb_7 ConjugateVerb_8 ConjugateVerb_9 ConjugateVerb_10 ConjugateVerb_11 ConjugateVerb_12 ConjugateVerb_13 ConjugateVerb_14 ConjugateVerb_15 ConjugateVerb_16 ConjugateVerb_17 ConjugateVerb_18 ConjugateVerb_19 ConjugateVerb_20 ConjugateVerb_21 ConjugateVerb_22 ConjugateVerb_23 ConjugateVerb_24 ConjugateVerb_25 ConjugateVerb_26 ConjugateVerb_27 ConjugateVerb_28 ConjugateVerb_29 ConjugateVerb_30 ConjugateVerb_31 ConjugateVerb_32 ConjugateVerb_33 ConjugateVerb_34 ConjugateVerb_35 ConjugateVerb_36 ConjugateVerb_37 ConjugateVerb_38 ConjugateVerb_39 ConjugateVerb_40 ConjugateVerb_41 ConjugateVerb_42 ConjugateVerb_43 ConjugateVerb_44 ConjugateVerb_45 ConjugateVerb_46 ConjugateVerb_47 ConjugateVerb_48 ConjugateVerb_49 ConjugateVerb_50 ConjugateVerb_51 ConjugateVerb_52 ConjugateVerb_53 ConjugateVerb_54 ConjugateVerb_55 ConjugateVerb_56 ConjugateVerb_57 ConjugateVerb_58 ConjugateVerb_59 ConjugateVerb_60 ConjugateVerb_61 ConjugateVerb_62 ConjugateVerb_63 ConjugateVerb_64 ConjugateVerb_65 ConjugateVerb_66 ConjugateVerb_67 ConjugateVerb_68 ConjugateVerb_69 ConjugateVerb_70 ConjugateVerb_71 ConjugateVerb_72 ConjugateVerb_73 0;




! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Testing commands
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF DEBUG;
Array TestText_0 ->
    "test candle/restart/test bear/restart/test piranhas/restart/test toaster/restart/test fly/restart/test pie/restart/test space/restart/test cage/restart/test glue/restart/test moose/restar/test trees/restart/test platform/restart/test car/restart/test running||||";
Array TestReq_0 -->
    0 0;
Array TestText_1 ->
    "get ipod/e/u/w/open drawer/get earbuds/e/d/d/w/n/n/n/e/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/w/put on earbuds/put earbuds in ipod/get on edge||||";
Array TestReq_1 -->
    0 0;
Array TestText_2 ->
    "open door/w/w/w/n/pull fork/take fork/s/s/d/u/e/open cabinet/open middle drawer/open big tupperware/get bread/unwrap bread/plug in toaster/put bread in toaster/put bread in toaster/press button/wait/wait/put fork in toaster||||";
Array TestReq_2 -->
    0 0;
Array TestText_3 ->
    "open door/w/w/n/n/open spaceship/get in spaceship/close spaceship/press on/say confirm/press launch/wait/say cancel/wait/wait/wait/wait/wait/wait/wait/wait||||";
Array TestReq_3 -->
    0 0;
Array TestText_4 ->
    "e/e/get stool/w/w/open door/w/put down stool/get on stool/get bucket/e/e/d/open vat/dip bucket in vat/w/n/e/n/n/put fuel in ship/get in ship/close door/press on/press launch/say suit up/open door/get out/take off helmet||||";
Array TestReq_4 -->
    0 0;
Array TestText_5 ->
    "e/s/untie toyota key/get toyota key/n/d/w/n/n/n/e/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/w/s/w/open car/get in car/close car/e/n/n||||";
Array TestReq_5 -->
    0 0;
Array TestText_6 ->
    "e/s/untie toyota/get toyota/n/d/w/n/n/w/open car/get in car/close car/e/n/e/open car/press button/g/g/g/g/g/g/g/g/g/g/g/g/g/g/g/g/g/g/close car/w/w||||";
Array TestReq_6 -->
    0 0;
Array TestText_7 ->
    "e/s/get right shoe/n/u/get left shoe/d/d/w/n/n/n/e/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/press button/w/take off shoes/put on running shoes/lace up running shoes/run across tracks||||";
Array TestReq_7 -->
    0 0;
Array TestText_8 ->
    "e/e/get stool/w/n/e/put stool down/get on stool/open cabinet/get gel/put on gel/w/d/d/w/s/get candle||||";
Array TestReq_8 -->
    0 0;
Array TestText_9 ->
    "e/get key/w/open door/w/unlock shed with key/open shed/get cage/e/e/d/get small key/w/s/put cage down/open ancient cabinet/get canister/open canister/get mouse/put mouse in cage/close cage/lock cage with small key||||";
Array TestReq_9 -->
    0 0;
Array TestText_10 ->
    "e/e/get stool/w/w/open door/w/put down stool /get on stool/get bucket/w/w/w/take water/e/s/d/u/u/e/plug drain/turn on faucet/pour bucket/take off belt/take off shoes/take off socks/take off pants/take off jacket/take off shirt/take off hat/take off underwear/get in tub||||";
Array TestReq_10 -->
    0 0;
Array TestText_11 ->
    "e/e/open fridge/take fish/w/d/w/w/w/w/throw fish/wait/wait/wait/w/climb ash/u/u/u/shake tree/d/d/d/d/climb elm/u/shake tree/d/d/climb pine/shake tree/d/take nest/throw nest||||";
Array TestReq_11 -->
    0 0;
Array TestText_12 ->
    "e/e/open fridge/take fish/w/d/w/w/w/w/throw fish/wait/wait/wait/w/climb ash/u/u/u||||";
Array TestReq_12 -->
    0 0;
Array TestText_13 ->
    "e/u/w/get quarter/n/get quarter/open second drawer/get quarter/s/e/d/d/w/e/open entrance/s/u/go into time machine/insert quarter into slot/insert quarter into slot/insert quarter into slot/press button/get out/d/n/w/w/w/w/s/open entrance/s/get moose head/wear moose head/n/n||||";
Array TestReq_13 -->
    0 0;
Array TestText_14 ->
    "e/u/w/get quarter/n/get quarter/open second drawer/get quarter/s/e/d/d/w/e/open entrance/s/u/go into time machine||||";
Array TestReq_14 -->
    0 0;
Array TestText_15 ->
    "e/s/take blue key/unlock door with blue key/open door/s/take stick/n/n/e/open fridge/take fish/w/d/w/w/w/w/throw fish/z/z/z/w/attack bear||||";
Array TestReq_15 -->
    0 0;
Array TestText_16 ->
    "e/e/take stool/w/down/go through tunnel/s/get knife/n/e/open entrance/s/put down stool/get on stool/get box/open box/get glue/cut glue/eat glue||||";
Array TestReq_16 -->
    0 0;
Array TestText_17 ->
    "e/e/open fridge/get pie/w/u/w/get quarter/e/d/d/w/e/open entrance/s/u/open time safe/open middle safe/open inner safe/put pie in inner safe/close middle safe/close time safe/go in time machine/put quarter in slot/press button/get out/open outer safe/open middle safe/open inner safe/get pie/eat pie||||";
Array TestReq_17 -->
    0 0;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Abstract Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ XAbstractSub;
    if (XTestMove(noun, second)) return;
    move noun to second;
    "[Abstracted.]";
];

[ XTestMove obj dest;
    if (obj <= InformLibrary) "[Can't move ", (name) obj, ": it's a system object.]";
    if (obj.component_parent) "[Can't move ", (name) obj, ": it's part of ",
        (the) obj.component_parent, ".]";
    while (dest) {
        if (dest == obj) "[Can't move ", (name) obj, ": it would contain itself.]";
        dest = CoreOfParentOfCoreOf(dest);
    }
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Actions Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ActionsOnSub; trace_actions = 1; say__p = 1; "Actions listing on."; ];
[ ActionsOffSub; trace_actions = 0; say__p = 1; "Actions listing off."; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Gonear Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GonearSub;
	PlayerTo(LocationOf(noun));
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Purloin Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ XPurloinSub;
    if (XTestMove(noun, player)) return;
    move noun to player; give noun moved ~concealed;
    say__p = 1;
    "[Purloined.]";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Random Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PredictableSub;
    VM_Seed_RNG(-100);
    say__p = 1;
    "[Random number generator now predictable.]";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Relations Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ShowRelationsSub;
   IterateRelations(ShowOneRelation);
];

[ ShowOneRelation rel;
	if ((RlnGetF(rel, RR_PERMISSIONS)) & (RELS_SHOW)) {
		(RlnGetF(rel, RR_HANDLER))(rel, RELS_SHOW);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Responses Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global suppress_text_substitution = false;
[ ShowResponsesSub a i j reg wd set_mode;
	if (NO_RESPONSES == 0) "There are no lettered responses.";
	wn = 2;
	if (NextWordStopped() == 'now') set_mode = 1; else wn--;
	if (NextWordStopped() == 'set') set_mode = 2; else wn--;
	wd = NextWordStopped(); wn--;
	if (wd == 'all') reg = 0;
	else {
		reg = -1;
		if (wd ~= -1) reg = TryNumber(wn);
		if (reg < 0) {
			say__p = 1;
   			print ">--> The following sets of responses are available:^";
			print "    RESPONSES ALL^";
		}
	}
	for (a=0, i=1, j=0: ResponseDivisions-->a: a=a+3, i++) {
		if (ResponseDivisions-->a ~= EMPTY_TEXT_PACKED) j++;
		if ((reg == 0) || (reg == j)) {
			if (ResponseDivisions-->a ~= EMPTY_TEXT_PACKED) {
				if (set_mode) {
					print "[", (string) ResponseDivisions-->a, "]^";
				} else {
					print (string) ResponseDivisions-->a, ":^";
				}
			}
			ShowResponsesRange(ResponseDivisions-->(a+1), ResponseDivisions-->(a+2), set_mode);
		}
		if (reg < 0) {
			if (ResponseDivisions-->a ~= EMPTY_TEXT_PACKED) {
				print "    RESPONSES ", j, ": ", (string) ResponseDivisions-->a, "^";
			}
		}
	}
];

[ ShowResponsesRange from to set_mode i;
	say__p = 1;
	for (i=from: i<=to: i++) {
		switch (set_mode) {
			1: print "now ";
			2: ;
			0: print "    ";
		}
		print (PrintResponse) i;
		switch (set_mode) {
			1: print " is ";
			2: print " is ";
			0: print ": ";
		}
		suppress_text_substitution = true;
		CarryOutActivity(PRINTING_RESPONSE_ACT, i);
		suppress_text_substitution = false;
		switch (set_mode) {
			1: print ";";
			2: print ".";
		}
		print "^";
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Rules Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RulesOnSub;
	debug_rules = 1; say__p = 1;
	"Rules tracing now switched on. Type ~rules off~ to switch it off again,
	 or ~rules all~ to include even rules which do not apply.";
];
[ RulesAllSub;
	debug_rules = 2; say__p = 1;
	"Rules tracing now switched to ~all~. Type ~rules off~ to switch it off again.";
];
[ RulesOffSub;
	debug_rules = 0; say__p = 1;
	"Rules tracing now switched off. Type ~rules~ to switch it on again.";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Scenes Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ScenesOnSub;
	debug_scenes = 1;
	ShowSceneStatus(); say__p = 1;
	"(Scene monitoring now switched on. Type ~scenes off~ to switch it off again.)";
];
[ ScenesOffSub;
	debug_scenes = 0; say__p = 1;
	"(Scene monitoring now switched off. Type ~scenes~ to switch it on again.)";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Scope Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global x_scope_count;
[ ScopeSub;
    x_scope_count = 0;
    LoopOverScope(Print_ScL, noun);
    if (x_scope_count == 0) "Nothing is in scope.";
];
[ Print_ScL obj; print_ret ++x_scope_count, ": ", (a) obj, " (", obj, ")"; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Showheap Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ShowHeapSub;
	HeapDebug();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: ShowMe Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ShowMeSub t_0 na;
	t_0 = noun;
 	if (noun == nothing) noun = real_location;
 	if (ShowMeRecursively(noun, 0, (noun == real_location))) {
 		if (noun == real_location)
			print "* denotes things which are not in scope^";
	}
 	if (t_0 ofclass K2_thing) {
 		print "location:"; ShowRLocation(noun, true); print "^";
 	}
 	if (t_0) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(pluralname)) && (t_0  has pluralname)) { if (na++ > 0) print ", "; print "plural-named"; }
    if ((AllowInShowme(pluralname)) && (t_0  hasnt pluralname)) { if (na++ > 0) print ", "; print "singular-named"; }
    if ((AllowInShowme(proper)) && (t_0  has proper)) { if (na++ > 0) print ", "; print "proper-named"; }
    if ((AllowInShowme(proper)) && (t_0  hasnt proper)) { if (na++ > 0) print ", "; print "improper-named"; }
    if ((AllowInShowme(ambigpluralname)) && (t_0  has ambigpluralname)) { if (na++ > 0) print ", "; print "ambiguously plural"; }
}
if (t_0 ofclass K1_room) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(light)) && (t_0  has light)) { if (na++ > 0) print ", "; print "lighted"; }
    if ((AllowInShowme(light)) && (t_0  hasnt light)) { if (na++ > 0) print ", "; print "dark"; }
    if ((AllowInShowme(visited)) && (t_0  has visited)) { if (na++ > 0) print ", "; print "visited"; }
    if ((AllowInShowme(visited)) && (t_0  hasnt visited)) { if (na++ > 0) print ", "; print "unvisited"; }
}
if (t_0 ofclass K2_thing) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(light)) && (t_0  has light)) { if (na++ > 0) print ", "; print "lit"; }
    if ((AllowInShowme(light)) && (t_0  hasnt light)) { if (na++ > 0) print ", "; print "unlit"; }
    if ((AllowInShowme(edible)) && (t_0  has edible)) { if (na++ > 0) print ", "; print "edible"; }
    if ((AllowInShowme(edible)) && (t_0  hasnt edible)) { if (na++ > 0) print ", "; print "inedible"; }
    if ((AllowInShowme(static)) && (t_0  has static)) { if (na++ > 0) print ", "; print "fixed in place"; }
    if ((AllowInShowme(static)) && (t_0  hasnt static)) { if (na++ > 0) print ", "; print "portable"; }
    if ((AllowInShowme(scenery)) && (t_0  has scenery)) { if (na++ > 0) print ", "; print "scenery"; }
    if ((AllowInShowme(clothing)) && (t_0  has clothing)) { if (na++ > 0) print ", "; print "wearable"; }
    if ((AllowInShowme(pushable)) && (t_0  has pushable)) { if (na++ > 0) print ", "; print "pushable between rooms"; }
    if ((AllowInShowme(moved)) && (t_0  has moved)) { if (na++ > 0) print ", "; print "handled"; }
    if ((AllowInShowme(concealed)) && (t_0  hasnt concealed)) { if (na++ > 0) print ", "; print "described"; }
    if ((AllowInShowme(concealed)) && (t_0  has concealed)) { if (na++ > 0) print ", "; print "undescribed"; }
    if ((AllowInShowme(workflag)) && (t_0  has workflag)) { if (na++ > 0) print ", "; print "marked for listing"; }
    if ((AllowInShowme(workflag)) && (t_0  hasnt workflag)) { if (na++ > 0) print ", "; print "unmarked for listing"; }
    if ((AllowInShowme(mentioned)) && (t_0  has mentioned)) { if (na++ > 0) print ", "; print "mentioned"; }
    if ((AllowInShowme(mentioned)) && (t_0  hasnt mentioned)) { if (na++ > 0) print ", "; print "unmentioned"; }
    if ((AllowInShowme(p80_tub_relevant)) && (t_0 .p80_tub_relevant == true)) { if (na++ > 0) print ", "; print "tub-relevant"; }
}
if (t_0 ofclass K3_direction) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(workflag)) && (t_0  has workflag)) { if (na++ > 0) print ", "; print "marked for listing"; }
    if ((AllowInShowme(workflag)) && (t_0  hasnt workflag)) { if (na++ > 0) print ", "; print "unmarked for listing"; }
}
if (t_0 ofclass K4_door) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(open)) && (t_0  has open)) { if (na++ > 0) print ", "; print "open"; }
    if ((AllowInShowme(open)) && (t_0  hasnt open)) { if (na++ > 0) print ", "; print "closed"; }
    if ((AllowInShowme(openable)) && (t_0  has openable)) { if (na++ > 0) print ", "; print "openable"; }
    if ((AllowInShowme(openable)) && (t_0  hasnt openable)) { if (na++ > 0) print ", "; print "unopenable"; }
    if ((AllowInShowme(lockable)) && (t_0  has lockable)) { if (na++ > 0) print ", "; print "lockable"; }
    if ((AllowInShowme(locked)) && (t_0  has locked)) { if (na++ > 0) print ", "; print "locked"; }
    if ((AllowInShowme(locked)) && (t_0  hasnt locked)) { if (na++ > 0) print ", "; print "unlocked"; }
}
if (t_0 ofclass K5_container) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(enterable)) && (t_0  has enterable)) { if (na++ > 0) print ", "; print "enterable"; }
    if ((AllowInShowme(transparent)) && (t_0  hasnt transparent)) { if (na++ > 0) print ", "; print "opaque"; }
    if ((AllowInShowme(transparent)) && (t_0  has transparent)) { if (na++ > 0) print ", "; print "transparent"; }
    if ((AllowInShowme(open)) && (t_0  has open)) { if (na++ > 0) print ", "; print "open"; }
    if ((AllowInShowme(open)) && (t_0  hasnt open)) { if (na++ > 0) print ", "; print "closed"; }
    if ((AllowInShowme(openable)) && (t_0  has openable)) { if (na++ > 0) print ", "; print "openable"; }
    if ((AllowInShowme(openable)) && (t_0  hasnt openable)) { if (na++ > 0) print ", "; print "unopenable"; }
    if ((AllowInShowme(lockable)) && (t_0  has lockable)) { if (na++ > 0) print ", "; print "lockable"; }
    if ((AllowInShowme(locked)) && (t_0  has locked)) { if (na++ > 0) print ", "; print "locked"; }
    if ((AllowInShowme(locked)) && (t_0  hasnt locked)) { if (na++ > 0) print ", "; print "unlocked"; }
}
if (t_0 ofclass K6_supporter) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(enterable)) && (t_0  has enterable)) { if (na++ > 0) print ", "; print "enterable"; }
}
if (t_0 ofclass K8_person) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(female)) && (t_0  has female)) { if (na++ > 0) print ", "; print "female"; }
    if ((AllowInShowme(female)) && (t_0  hasnt female)) { if (na++ > 0) print ", "; print "male"; }
    if ((AllowInShowme(neuter)) && (t_0  has neuter)) { if (na++ > 0) print ", "; print "neuter"; }
}
if (t_0 ofclass K13_device) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(on)) && (t_0  has on)) { if (na++ > 0) print ", "; print "switched on"; }
    if ((AllowInShowme(on)) && (t_0  hasnt on)) { if (na++ > 0) print ", "; print "switched off"; }
}
if (t_0 ofclass K17_help_topic) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(visited)) && (t_0  has visited)) { if (na++ > 0) print ", "; print "visited"; }
    if ((AllowInShowme(visited)) && (t_0  hasnt visited)) { if (na++ > 0) print ", "; print "unvisited"; }
}
if (t_0 ofclass K18_slice_of_bread) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p70_toasted)) && (t_0  has p70_toasted)) { if (na++ > 0) print ", "; print "toasted"; }
}
if (t_0 == I184_help_about) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p66_game_available)) && (t_0  has p66_game_available)) { if (na++ > 0) print ", "; print "game-available"; }
}
if (t_0 == I200_ipod) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p67_playing)) && (t_0  has p67_playing)) { if (na++ > 0) print ", "; print "playing"; }
}
if (t_0 == I205_toaster) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p71_plugged_in)) && (t_0  has p71_plugged_in)) { if (na++ > 0) print ", "; print "plugged in"; }
    if ((AllowInShowme(p71_plugged_in)) && (t_0  hasnt p71_plugged_in)) { if (na++ > 0) print ", "; print "unplugged"; }
    if ((AllowInShowme(p73_done)) && (t_0  has p73_done)) { if (na++ > 0) print ", "; print "done"; }
}
if (t_0 == I214_loaf_of_bread) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p68_wrapped)) && (t_0  has p68_wrapped)) { if (na++ > 0) print ", "; print "wrapped"; }
    if ((AllowInShowme(p68_wrapped)) && (t_0  hasnt p68_wrapped)) { if (na++ > 0) print ", "; print "unwrapped"; }
}
if (t_0 == I216_play_button) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p74_active)) && (t_0  has p74_active)) { if (na++ > 0) print ", "; print "active"; }
}
if (t_0 == I219_pie) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p101_aged)) && (t_0 .p101_aged == true)) { if (na++ > 0) print ", "; print "aged"; }
}
if (t_0 == I228_toyota_key) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p75_tied)) && (t_0  has p75_tied)) { if (na++ > 0) print ", "; print "tied"; }
}
if (t_0 == I229_pair_of_running_shoes) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p92_laced)) && (t_0 .p92_laced == true)) { if (na++ > 0) print ", "; print "laced"; }
}
if (t_0 == I239_earbuds) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p76_connected)) && (t_0  has p76_connected)) { if (na++ > 0) print ", "; print "connected"; }
}
if (t_0 == I260_drain) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p77_plugged)) && (t_0  has p77_plugged)) { if (na++ > 0) print ", "; print "plugged"; }
}
if (t_0 == I261_faucet) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p78_on)) && (t_0  has p78_on)) { if (na++ > 0) print ", "; print "on"; }
    if ((AllowInShowme(p78_on)) && (t_0  hasnt p78_on)) { if (na++ > 0) print ", "; print "off"; }
}
if (t_0 == I284_bucket) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p81_hidden)) && (t_0 .p81_hidden == true)) { if (na++ > 0) print ", "; print "hidden"; }
}
if (t_0 == I288_spaceship) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p78_on)) && (t_0  has p78_on)) { if (na++ > 0) print ", "; print "on"; }
    if ((AllowInShowme(p78_on)) && (t_0  hasnt p78_on)) { if (na++ > 0) print ", "; print "off"; }
    if ((AllowInShowme(p82_low_on_fuel)) && (t_0 .p82_low_on_fuel == true)) { if (na++ > 0) print ", "; print "low on fuel"; }
    if ((AllowInShowme(p83_waiting_for_confirmation)) && (t_0 .p83_waiting_for_confirmation == true)) { if (na++ > 0) print ", "; print "waiting for confirmation"; }
    if ((AllowInShowme(p84_broken)) && (t_0 .p84_broken == true)) { if (na++ > 0) print ", "; print "broken"; }
    if ((AllowInShowme(p86_out_of_control)) && (t_0 .p86_out_of_control == true)) { if (na++ > 0) print ", "; print "out of control"; }
}
if (t_0 == I291_computer) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p85_disabled)) && (t_0 .p85_disabled == true)) { if (na++ > 0) print ", "; print "disabled"; }
}
if (t_0 == I300_fork) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p87_stuck)) && (t_0 .p87_stuck == true)) { if (na++ > 0) print ", "; print "stuck"; }
}
if (t_0 == I302_blue_car) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p88_started)) && (t_0 .p88_started == true)) { if (na++ > 0) print ", "; print "started"; }
    if ((AllowInShowme(p89_ready)) && (t_0 .p89_ready == true)) { if (na++ > 0) print ", "; print "ready"; }
}
if (t_0 == I303_abandoned_train_station) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p89_ready)) && (t_0 .p89_ready == true)) { if (na++ > 0) print ", "; print "ready"; }
}
if (t_0 == I304_map) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p90_examined)) && (t_0 .p90_examined == true)) { if (na++ > 0) print ", "; print "examined"; }
    if ((AllowInShowme(p90_examined)) && (t_0 .p90_examined == false)) { if (na++ > 0) print ", "; print "unexamined"; }
}
if (t_0 == I307_call_train_button) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p90_examined)) && (t_0 .p90_examined == true)) { if (na++ > 0) print ", "; print "examined"; }
    if ((AllowInShowme(p90_examined)) && (t_0 .p90_examined == false)) { if (na++ > 0) print ", "; print "unexamined"; }
}
if (t_0 == I313_candle) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p93_urge_passed)) && (t_0 .p93_urge_passed == true)) { if (na++ > 0) print ", "; print "urge passed"; }
}
if (t_0 == I337_wasps__nest) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p94_found)) && (t_0 .p94_found == true)) { if (na++ > 0) print ", "; print "found"; }
}
if (t_0 == I349_moose_head) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p95_accustomed)) && (t_0 .p95_accustomed == true)) { if (na++ > 0) print ", "; print "accustomed"; }
}
if (t_0 == I353_grizzly_bear) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p96_asleep)) && (t_0 .p96_asleep == true)) { if (na++ > 0) print ", "; print "asleep"; }
    if ((AllowInShowme(p96_asleep)) && (t_0 .p96_asleep == false)) { if (na++ > 0) print ", "; print "awake"; }
}
if (t_0 == I362_super_glue) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p98_cut)) && (t_0 .p98_cut == true)) { if (na++ > 0) print ", "; print "cut"; }
    if ((AllowInShowme(p98_cut)) && (t_0 .p98_cut == false)) { if (na++ > 0) print ", "; print "whole"; }
}
if (t_0 == I366_coin_slot) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p100_available)) && (t_0 .p100_available == true)) { if (na++ > 0) print ", "; print "available"; }
}
if (t_0) {if (na > 0) { na = 0; print "^"; }
    print "list grouping key: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, list_together), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, list_together), "~", "^";
    print "printed name: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, short_name), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, short_name), "~", "^";
    print "printed plural name: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, plural), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, plural), "~", "^";
    print "indefinite article: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, article), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, article), "~", "^";
}
if (t_0 ofclass K1_room) {if (na > 0) { na = 0; print "^"; }
    print "description: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, description), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, description), "~", "^";
    if (GProperty(OBJECT_TY, t_0, map_region)) { print "map region: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, map_region), "^";
    }
}
if (t_0 ofclass K2_thing) {if (na > 0) { na = 0; print "^"; }
    print "description: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, description), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, description), "~", "^";
    print "initial appearance: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, initial), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, initial), "~", "^";
    if (GProperty(OBJECT_TY, t_0, with_key)) { print "matching key: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, with_key), "^";
    }
}
if (t_0 ofclass K3_direction) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, p10_opposite)) { print "opposite: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p10_opposite), "^";
    }
}
if (t_0 ofclass K4_door) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, door_to)) { print "other side: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, door_to), "^";
    }
}
if (t_0 ofclass K5_container) {if (na > 0) { na = 0; print "^"; }
    print "carrying capacity: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, capacity), "^";
}
if (t_0 ofclass K6_supporter) {if (na > 0) { na = 0; print "^"; }
    print "carrying capacity: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, capacity), "^";
}
if (t_0 ofclass K8_person) {if (na > 0) { na = 0; print "^"; }
    print "carrying capacity: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, capacity), "^";
}
if (t_0 ofclass K23_tree) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, p19_branches)) { print "branches: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p19_branches), "^";
    }
}
if (t_0 == I157_bare_help) {if (na > 0) { na = 0; print "^"; }
    print "game-specific help: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, p15_game_specific_help), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, p15_game_specific_help), "~", "^";
}
if (t_0 == I184_help_about) {if (na > 0) { na = 0; print "^"; }
    print "game-specific help: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, p15_game_specific_help), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, p15_game_specific_help), "~", "^";
}
if (t_0 == I186_help_score) {if (na > 0) { na = 0; print "^"; }
    print "game-specific help: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, p15_game_specific_help), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, p15_game_specific_help), "~", "^";
}
if (t_0 == I205_toaster) {if (na > 0) { na = 0; print "^"; }
    print "its slice count: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p16_its_slice_count), "^";
}
if (t_0 == I259_bathtub) {if (na > 0) { na = 0; print "^"; }
    print "its water level: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p17_its_water_level), "^";
}
if (t_0 == I289_on_button) {if (na > 0) { na = 0; print "^"; }
    print "finnickiness: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p18_finnickiness), "^";
}
if (t_0 == I364_time_machine) {if (na > 0) { na = 0; print "^"; }
    print "use count: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p20_use_count), "^";
}
if (t_0 == I366_coin_slot) {if (na > 0) { na = 0; print "^"; }
    print "credits: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p21_credits), "^";
}

];

[ ShowRLocation obj top;
	if (obj ofclass K1_room) return;
	print " ";
	if (parent(obj)) {
		if (obj has worn) print "worn by ";
		else {
			if (parent(obj) has animate) print "carried by ";
			if (parent(obj) has container) print "in ";
			if (parent(obj) ofclass K1_room) print "in ";
			if (parent(obj) has supporter) print "on ";
		}
		print (the) parent(obj);
		ShowRLocation(parent(obj));
	} else {
		if (obj.component_parent) {
			if (top == false) print ", which is ";
			print "part of ", (the) obj.component_parent;
			ShowRLocation(obj.component_parent);
		}
		else print "out of play";
	}
];

[ ShowMeRecursively obj depth f c i k;
	spaces(2*depth);
	if (f && (depth > 0) && (TestScope(obj, player) == false)) { print "*"; c = true; }
	print (name) obj;
	if (depth > 0) {
		if (obj.component_parent) print " (part of ", (name) obj.component_parent, ")";
		if (obj has worn) print " (worn)";
	}
	if (obj provides KD_Count) {
		k = KindHierarchy-->((obj.KD_Count)*2);
		if ((k ~= K2_thing) || (depth==0)) {
			print " - ";
			if (k == K4_door or K5_container) {
				if (obj has transparent) print "transparent ";
				if (obj has locked) print "locked ";
				else if (obj has open) print "open ";
				else print "closed ";
			}
			print (I7_Kind_Name) k;
		}
	}
	print "^";
	if (obj.component_child) c = c | ShowMeRecursively(obj.component_child, depth+2, f);
	if ((depth>0) && (obj.component_sibling))
		c = c | ShowMeRecursively(obj.component_sibling, depth, f);
	if (child(obj)) c = c | ShowMeRecursively(child(obj), depth+2, f);
	if ((depth>0) && (sibling(obj))) c = c | ShowMeRecursively(sibling(obj), depth, f);
	return c;
];

[ AllowInShowme pr;
	if (pr == workflag or concealed or mentioned) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Showverb Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ShowVerbSub address lines meta i x;
	wn = 2; x = NextWordStopped();
    if (x == 0 || ((x->#dict_par1) & 1) == 0)
        "Try typing ~showverb~ and then the name of a verb.";
    meta = ((x->#dict_par1) & 2)/2;
    i = DictionaryWordToVerbNum(x);
    address = VM_CommandTableAddress(i);
    lines = address->0;
    address++;
    print "Verb ";
    if (meta) print "meta ";
    VM_PrintCommandWords(i);
    new_line;
    if (lines == 0) print "has no grammar lines.^";
    for (: lines>0 : lines--) {
        address = UnpackGrammarLine(address);
        print "    "; DebugGrammarLine(); new_line;
    }
    ParaContent();
];

[ DebugGrammarLine pcount;
    print " * ";
    for (: line_token-->pcount ~= ENDIT_TOKEN : pcount++) {
        if ((line_token-->pcount)->0 & $10) print "/ ";
        print (DebugToken) line_token-->pcount, " ";
    }
    print "-> ", (DebugAction) action_to_be;
    if (action_reversed) print " reverse";
];

[ DebugToken token;
    AnalyseToken(token);
    switch (found_ttype) {
      ILLEGAL_TT:
        print "<illegal token number ", token, ">";
      ELEMENTARY_TT:
        switch (found_tdata) {
          NOUN_TOKEN:           print "noun";
          HELD_TOKEN:           print "held";
          MULTI_TOKEN:          print "multi";
          MULTIHELD_TOKEN:      print "multiheld";
          MULTIEXCEPT_TOKEN:    print "multiexcept";
          MULTIINSIDE_TOKEN:    print "multiinside";
          CREATURE_TOKEN:       print "creature";
          SPECIAL_TOKEN:        print "special";
          NUMBER_TOKEN:         print "number";
          TOPIC_TOKEN:          print "topic";
          ENDIT_TOKEN:          print "END";
        }
      PREPOSITION_TT:
        print "'", (address) found_tdata, "'";
      ROUTINE_FILTER_TT:
        print "noun=Routine(", found_tdata, ")";
      ATTR_FILTER_TT:
        print (DebugAttribute) found_tdata;
      SCOPE_TT:
        print "scope=Routine(", found_tdata, ")";
      GPR_TT:
        print "Routine(", found_tdata, ")";
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Test Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Iftrue (18 > 0);

[ TestScriptSub;
	switch(special_word) {
'all//': TestStart(TestText_0, TestReq_0, 258);
'platform//': TestStart(TestText_1, TestReq_1, 350);
'toaster//': TestStart(TestText_2, TestReq_2, 223);
'fly//': TestStart(TestText_3, TestReq_3, 155);
'space//': TestStart(TestText_4, TestReq_4, 219);
'car//': TestStart(TestText_5, TestReq_5, 338);
'car2//': TestStart(TestText_6, TestReq_6, 147);
'running//': TestStart(TestText_7, TestReq_7, 375);
'candle//': TestStart(TestText_8, TestReq_8, 100);
'cage//': TestStart(TestText_9, TestReq_9, 213);
'piranhas//': TestStart(TestText_10, TestReq_10, 269);
'trees//': TestStart(TestText_11, TestReq_11, 172);
'treetops//': TestStart(TestText_12, TestReq_12, 81);
'moose//': TestStart(TestText_13, TestReq_13, 274);
'time-machine//': TestStart(TestText_14, TestReq_14, 113);
'bear//': TestStart(TestText_15, TestReq_15, 137);
'glue//': TestStart(TestText_16, TestReq_16, 143);
'pie//': TestStart(TestText_17, TestReq_17, 298);

	default:
		print ">--> The following tests are available:^";
print "'test all'^";
print "'test platform'^";
print "'test toaster'^";
print "'test fly'^";
print "'test space'^";
print "'test car'^";
print "'test car2'^";
print "'test running'^";
print "'test candle'^";
print "'test cage'^";
print "'test piranhas'^";
print "'test trees'^";
print "'test treetops'^";
print "'test moose'^";
print "'test time-machine'^";
print "'test bear'^";
print "'test glue'^";
print "'test pie'^";

	}
];

#ifdef TARGET_GLULX;
Constant TEST_STACK_SIZE = 128;
#ifnot;
Constant TEST_STACK_SIZE = 48;
#endif;

Array test_stack --> TEST_STACK_SIZE;
Global test_sp = 0;
[ TestStart T R l k;
	if (test_sp >= TEST_STACK_SIZE) ">--> Testing too many levels deep";
	test_stack-->test_sp = T;
	test_stack-->(test_sp+1) = 0;
	test_stack-->(test_sp+3) = l;
	test_sp = test_sp + 4;
	if ((R-->0) && (R-->0 ~= real_location)) {
	     print "(first moving to ", (name) R-->0, ")^";
	     PlayerTo(R-->0, 1);
	}
	k=1;
	while (R-->k) {
	    if (R-->k notin player) {
	        print "(first acquiring ", (the) R-->k, ")^";
	        move R-->k to player;
	    }
	    k++;
	}
	print "(Testing.)^"; say__p = 1;
];
[ TestKeyboardPrimitive a_buffer a_table p i j l spaced ch;
	if (test_sp == 0) {
	    test_stack-->2 = 1;
	    return VM_ReadKeyboard(a_buffer, a_table);
	}
	else {
	    p = test_stack-->(test_sp-4);
	    i = test_stack-->(test_sp-3);
	    l = test_stack-->(test_sp-1);
	    print "[";
	    print test_stack-->2;
	    print "] ";
	    test_stack-->2 = test_stack-->2 + 1;
	    style bold;
	    while ((i < l) && (p->i ~= '/')) {
	    	ch = p->i;
	        if (spaced || (ch ~= ' ')) {
	        	if ((p->i == '[') && (p->(i+1) == '/') && (p->(i+2) == ']')) {
	        		ch = '/'; i = i+2;
	        	}
	            a_buffer->(j+WORDSIZE) = ch;
	            print (char) ch;
	            i++; j++;
	            spaced = true;
	        } else i++;
	    }
	    style roman;
	    print "^";
	    #ifdef TARGET_ZCODE;
	    a_buffer->1 = j;
	    #ifnot; ! TARGET_GLULX
	    a_buffer-->0 = j;
	    #endif;
	    VM_Tokenise(a_buffer, a_table);
	    if (p->i == '/') i++;
	    if (i >= l) {
	        test_sp = test_sp - 4;
	    } else test_stack-->(test_sp-3) = i;
	}
];

#IFNOT;

[ TestScriptSub;
	">--> No test scripts exist for this game.";
];

#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Trace Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TraceOnSub; parser_trace=1; say__p = 1; "[Trace on.]"; ];

[ TraceLevelSub;
    parser_trace = parsed_number; say__p = 1;
    print "[Parser tracing set to level ", parser_trace, ".]^";
];

[ TraceOffSub; parser_trace=0; say__p = 1; "Trace off."; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Tree Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ XTreeSub i;
    if (noun == 0) {
        objectloop (i)
            if (i ofclass Object && parent(i) == 0) XObj(i);
    }
    else XObj(noun,1);
];

[ XObj obj f;
    if (parent(obj) == 0) print (name) obj; else print (a) obj;
    print " (", obj, ") ";
    if (f == 1 && parent(obj) ~= 0)
        print "(in ", (name) parent(obj), " ", parent(obj), ")";
    new_line;
    if (child(obj) == 0) rtrue;
    if (obj == Class)
        WriteListFrom(child(obj), NEWLINE_BIT+INDENT_BIT+ALWAYS_BIT+NOARTICLE_BIT, 1);
    else
        WriteListFrom(child(obj), NEWLINE_BIT+INDENT_BIT+ALWAYS_BIT+FULLINV_BIT, 1);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Grammar
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ testcommandnoun obj o2;
	switch (scope_stage) {
		1: rtrue; ! allow multiple objects
		2: objectloop (obj)
        	if ((obj ofclass Object) && (obj provides KD_Count))
            	PlaceInScope(obj, true);
        3: print "There seems to be no such object anywhere in the model world.^";
    }
];

Verb meta 'abstract'

    * scope=testcommandnoun 'to' scope=testcommandnoun -> XAbstract;
Verb meta 'actions'

    *                                           -> ActionsOn
    * 'on'                                      -> ActionsOn
    * 'off'                                     -> ActionsOff;
Verb meta 'gonear'

    * scope=testcommandnoun                     -> Gonear;
Verb meta 'purloin'

    * scope=testcommandnoun                     -> XPurloin;
Verb meta 'random'

    *                                           -> Predictable;
Verb meta 'relations'

	*                                           -> ShowRelations;
Verb meta 'responses'

	*                                           -> ShowResponses
	* special                                   -> ShowResponses
	* 'now' special                             -> ShowResponses
	* 'set' special                             -> ShowResponses;
Verb meta 'rules'

	*                                           -> RulesOn
	* 'all'                                     -> RulesAll
	* 'on'                                      -> RulesOn
	* 'off'                                     -> RulesOff;
Verb meta 'scenes'

	*                                           -> ScenesOn
	* 'on'                                      -> ScenesOn
	* 'off'                                     -> ScenesOff;
Verb meta 'scope'

    *                                           -> Scope
    * scope=testcommandnoun                     -> Scope;
Verb meta 'showheap'

	*                                           -> ShowHeap;
Verb meta 'showme'

	*                                           -> ShowMe
	* scope=testcommandnoun                     -> ShowMe;
Verb meta 'showverb'

    * special                                   -> Showverb;
Verb meta 'test'

	*                                           -> TestScript
	* special                                   -> TestScript;
Verb meta 'trace'

    *                                           -> TraceOn
    * number                                    -> TraceLevel
    * 'on'                                      -> TraceOn
    * 'off'                                     -> TraceOff;
Verb meta 'tree'

    *                                           -> XTree
    * scope=testcommandnoun                     -> XTree;

[ InternalTestCases ;
    ];

#ENDIF; ! DEBUG


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: I6 Inclusions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! "Include (- ... -)" inclusions with no specified position appear here.


	[ CheckDPMR result sinp1 sinp2 rv;
		sinp1 = inp1; sinp2 = inp2; inp1 = noun; inp2 = second;
		rv = FollowRulebook( 25 );
		inp1 = sinp1; inp2 = sinp2;
		if ((rv) && RulebookSucceeded()) {
			result = ResultOfRule();
			if (result == RBNO_6 ) return 4;
			if (result == RBNO_7 ) return 3;
			if (result == RBNO_8 ) return 2;
			if (result == RBNO_9 ) return 1;
			if (result == RBNO_10 ) return 0;
		}
		return 2;
	];

[ LITTLE_USED_DO_NOTHING_R; rfalse; ];

[ GTE_SetStylehint wintype style hint N i;
	if ( style == I126_all_styles )
	{
		for ( i = 0: i < style_NUMSTYLES : i++ )
		{
			glk_stylehint_set( wintype, i, hint, N );
		}
	}
	else
	{
		glk_stylehint_set( wintype, style - 2, hint, N );
	}
];

[ GTE_ConvertColour txt p1 cp1 dsize i ch progress;
	! Transmute the text
	cp1 = txt-->0;
	p1 = TEXT_TY_Temporarily_Transmute( txt );
	dsize = BlkValueLBCapacity( txt );
	for ( i = 0 : i < dsize : i++ )
	{
		! Decode the hex characters
		ch = BlkValueRead( txt, i );
		if ( ch == 0 )
		{
			break;
		}
		else if ( ch > 47 && ch < 58 )
		{
			progress = progress * 16 + ch - 48;
		}
		else if ( ch > 64 && ch < 71 )
		{
			progress = progress * 16 + ch - 55;
		}
		else if ( ch > 96 && ch < 103 )
		{
			progress = progress * 16 + ch - 87;
		}
	}
	! Clean up and return
	TEXT_TY_Untransmute( txt, p1, cp1 );
	return progress;
];

! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Entries in constant lists
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====





! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: To Phrases
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! Request 0: phrase nothing -> nothing
! To say red letters:
[ PHR_824_r0  ;
    ! [2: say first custom style]
    say__p=1;! [3: first custom style]
    ParaContent(); glk_set_style( style_User1 ); .L_Say574; .L_SayX574;rfalse;
];
! Request 1: phrase nothing -> nothing
! To say default letters:
[ PHR_825_r1  ;
    ! [2: say roman type]
    say__p=1;! [3: roman type]
    ParaContent(); style roman; .L_Say575; .L_SayX575;rfalse;
];
! Request 2: phrase number -> nothing
! To conclude with ( par - a number ):
[ PHR_827_r2  
    t_0 ! Call parameter 'par': number
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_6(t_0);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_6 
    t_0 ! Call parameter 'par': number
    ;
    ! [2: now the right hand status line is ~Moves: [turn count]~]
    BlkValueCopy(right_hand_status_line, ((LocalParking-->0=t_0),TEXT_TY_ExpandIfPerishable(I7SFRAME,TX_S_461)));
    ! [3: say ~[paragraph break]~]
    say__p=1;! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say576; .L_SayX576;! [5: end the story saying ~You have died~]
    deadflag=TX_L_324; story_complete=false;
    ! [6: say ~You've reached one of this game's 14 endings! In that game you used [turn count] moves. The optimal number of moves is [par].~]
    say__p=1;! [7: ~You've reached one of this game's 14 endings! In that game you used ~]
    ParaContent(); print "You've reached one of this game's 14 endings! In that game you used ";! [8: turn count]
    ParaContent(); print (say__n=turns);! [9: ~ moves. The optimal number of moves is ~]
    ParaContent(); print " moves. The optimal number of moves is ";! [10: par]
    ParaContent(); print (say__n=t_0);! [11: ~.~]
    ParaContent(); print "."; new_line; .L_Say577; .L_SayX577;! [12: if turn count is less than par]
    if (((turns < t_0)))
    {! [13: say ~Uh-oh, the puzzle is broken! Please send us an email at galacticpuzzlesetters@@64gmail.com with the exact sequence of moves you made.~]
        say__p=1;! [14: ~Uh-oh, the puzzle is broken! Please send us an email at galacticpuzzlesetters@@64gmail.com with the exact sequence of moves you made.~]
        ParaContent(); print "Uh-oh, the puzzle is broken! Please send us an email at galacticpuzzlesetters@@64gmail.com with the exact sequence of moves you made."; new_line; .L_Say578; .L_SayX578;} else {
        ! [15: if turn count is par]
        if (((turns == t_0)))
        {! [16: say ~Great job, you got the optimal number of moves!~]
            say__p=1;! [17: ~Great job, you got the optimal number of moves!~]
            ParaContent(); print "Great job, you got the optimal number of moves!"; new_line; .L_Say579; .L_SayX579;} else {
            ! [18: say ~You can reach this ending more quickly!~]
            say__p=1;! [19: ~You can reach this ending more quickly!~]
            ParaContent(); print "You can reach this ending more quickly!"; new_line; .L_Say580; .L_SayX580;}
            }
            rfalse;
];
! Request 3: phrase nothing -> truth state
! To decide if it is hunting season:
[ PHR_999_r3  ;
    ! [2: if the time machine's use count is greater than 2]
    if ((((Global_Vars-->14) > 2)))
    {! [3: decide yes]
        rtrue;
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! Request 4: phrase nothing -> truth state
! To decide whether the woods are accessible:
[ PHR_1003_r4  ;
    ! [2: if the bear is asleep]
    if ((((Adj_115_t1_v10(I353_grizzly_bear)))))
    {! [3: decide yes]
        rtrue;
        }
    ! [4: if the time machine's use count is not 0]
    if (((~~(((Global_Vars-->14) == 0)))))
    {! [5: decide yes]
        rtrue;
        }
    ! [6: decide no]
    rfalse;
    return false;
];
! Request 5: phrase nothing -> truth state
! To decide if the fish is ready to be thrown:
[ PHR_1007_r5  ;
    ! [2: if the player is in the edge of the woods and the bear is in the woods]
    if ((((I331_edge_of_the_woods == ContainerOf(player)))) && (((I332_woods == ContainerOf(I353_grizzly_bear)))))
    {! [3: decide yes]
        rtrue;
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! Request 6: phrase nothing -> truth state
! To decide if the pie is guarded:
[ PHR_1028_r6  ;
    ! [2: if the pie is not in the inner safe]
    if (((~~((I369_inner_safe == ContainerOf(I219_pie))))))
    {! [3: decide no]
        rfalse;
        }
    ! [4: if the inner safe is open]
    if ((((Adj_72_t1_v10(I369_inner_safe)))))
    {! [5: decide no]
        rfalse;
        }
    ! [6: if the middle safe is open]
    if ((((Adj_72_t1_v10(I368_middle_safe)))))
    {! [7: decide no]
        rfalse;
        }
    ! [8: if the time safe is open]
    if ((((Adj_72_t1_v10(I367_time_safe)))))
    {! [9: decide no]
        rfalse;
        }
    ! [10: decide yes]
    rtrue;
    return false;
];
! Request 7: phrase nothing -> nothing
! to say the wasp tree:
[ PHR_872_r7  ;
    ! [2: if the wasps' nest is in top of ash tree]
    if (((I338_top_of_ash_tree == ContainerOf(I337_wasps__nest))))
    {! [3: say ~the ash tree~]
        say__p=1;! [4: ~the ash tree~]
        ParaContent(); print "the ash tree"; .L_Say581; .L_SayX581;} else {
        ! [5: if the wasps' nest is in top of elm tree]
        if (((I344_top_of_elm_tree == ContainerOf(I337_wasps__nest))))
        {! [6: say ~the elm tree~]
            say__p=1;! [7: ~the elm tree~]
            ParaContent(); print "the elm tree"; .L_Say582; .L_SayX582;} else {
            ! [8: if the wasps' nest is in top of pine tree]
            if (((I340_top_of_pine_tree == ContainerOf(I337_wasps__nest))))
            {! [9: say ~the pine tree~]
                say__p=1;! [10: ~the pine tree~]
                ParaContent(); print "the pine tree"; .L_Say583; .L_SayX583;} else {
                ! [11: say ~somewhere indistinct. Uh oh, the game is broken, send us an email with what you did!~]
                say__p=1;! [12: ~somewhere indistinct. Uh oh, the game is broken, send us an email with what you did!~]
                ParaContent(); print "somewhere indistinct. Uh oh, the game is broken, send us an email with what you did!"; new_line; .L_Say584; .L_SayX584;}
                }
                }
                rfalse;
];
! From the Standard Rules
! Request 8: phrase (object, number) -> nothing
! To set the/-- locale priority of ( O - an object ) to ( N - a number ):
[ PHR_82_r8  
    t_0 ! Call parameter 'O': object
    t_1 ! Call parameter 'N': number
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    ! [2: if o is a thing]
    if (((t_0 ofclass K2_thing)))
    {! [3: if n <= 0]
        if (((t_1 <= 0)))
        {! [4: now o is mentioned]
            (Adj_67_t2_v10(t_0));
            }
        ! [5: if there is a notable-object of o in the table of locale priorities]
        if (((ExistsTableLookUpCorr(T1_locale_priorities,105,105,t_0))))
        {! [6: choose row with a notable-object of o in the table of locale priorities]
            ct_0 = T1_locale_priorities; ct_1 = TableRowCorr(ct_0, 105, t_0);
            ! [7: if n <= 0]
            if (((t_1 <= 0)))
            {! [8: blank out the whole row]
                TableBlankOutRow(ct_0, ct_1);
                } else {
                ! [9: now the locale description priority entry is n]
                TableLookUpEntry(ct_0,106,ct_1,1,t_1);
                }
                } else {
            ! [10: if n is greater than 0]
            if (((t_1 > 0)))
            {! [11: choose a blank row in the table of locale priorities]
                ct_0 = T1_locale_priorities; ct_1 = TableBlankRow(ct_0);
                ! [12: now the notable-object entry is o]
                TableLookUpEntry(ct_0,105,ct_1,1,t_0);
                ! [13: now the locale description priority entry is n]
                TableLookUpEntry(ct_0,106,ct_1,1,t_1);
                }
                }
                }
                rfalse;
];
! From the Standard Rules
! Request 9: phrase object -> nothing
! To describe locale for ( O - object ):
[ PHR_81_r9  
    t_0 ! Call parameter 'O': object
    ;
    ! [2: carry out the printing the locale description activity with o]
    CarryOutActivity(V30_printing_the_locale_desc, t_0);
    rfalse;
];
! From the Standard Rules
! Request 10: phrase nothing -> nothing
! To say no line break -- running on ( documented at phs_nolinebreak ):
[ PHR_350_r10  ;
    ! [2: do nothing]
    ;
    rfalse;
];
! From the Standard Rules
! Request 11: phrase response -> nothing
! To say text of ( R - response ) ( documented at phs_response ):
[ PHR_390_r11  
    t_0 ! Call parameter 'R': response
    ;
    ! [2: carry out the issuing the response text activity with r]
    CarryOutActivity(V33_issuing_the_response_tex, t_0);
    rfalse;
];
! From the Standard Rules
! Request 12: phrase real number -> real number
! To decide which real number is the real square of ( R - a real number ) ( this is the rsqr function inverse to root ):
[ PHR_424_r12  
    t_0 ! Call parameter 'R': real number
    tmp_0 ! Let/loop value, e.g., 'x': real number
    ;
    ! [2: let x be given by x = r@@94@{32} where x is a real number]

    		! Solving Q0_german for '$w'
    (tmp_0 = (REAL_NUMBER_TY_Pow(t_0, NUMBER_TY_to_REAL_NUMBER_TY(2))));
    ;
    ! [3: decide on x]
    return tmp_0;
    return 0;
];
! From the Standard Rules
! Request 13: phrase real number -> real number
! To decide which real number is the hyperbolic arcsine of ( R - a real number ) ( documented at ph_hyperbolicarcsine ) ( this is the arcsinh function inverse to sinh ):
[ PHR_442_r13  
    t_0 ! Call parameter 'R': real number
    tmp_0 ! Let/loop value, e.g., 'x': real number
    ;
    ! [2: let x be given by x = log ( r + root ( r@@94@{32} + 1 ) ) where x is a real number]

    		! Solving Q1_german for '$w'
    (tmp_0 = (REAL_NUMBER_TY_Log((REAL_NUMBER_TY_Plus(t_0, (REAL_NUMBER_TY_Root((REAL_NUMBER_TY_Plus((REAL_NUMBER_TY_Pow(t_0, NUMBER_TY_to_REAL_NUMBER_TY(2))), NUMBER_TY_to_REAL_NUMBER_TY(1))))))))));
    ;
    ! [3: decide on x]
    return tmp_0;
    return 0;
];
! From the Standard Rules
! Request 14: phrase real number -> real number
! To decide which real number is the hyperbolic arccosine of ( R - a real number ) ( documented at ph_hyperbolicarccosine ) ( this is the arccosh function inverse to cosh ):
[ PHR_443_r14  
    t_0 ! Call parameter 'R': real number
    tmp_0 ! Let/loop value, e.g., 'x': real number
    ;
    ! [2: let x be given by x = log ( r + root ( r@@94@{32} - 1 ) ) where x is a real number]

    		! Solving Q2_german for '$w'
    (tmp_0 = (REAL_NUMBER_TY_Log((REAL_NUMBER_TY_Plus(t_0, (REAL_NUMBER_TY_Root((REAL_NUMBER_TY_Minus((REAL_NUMBER_TY_Pow(t_0, NUMBER_TY_to_REAL_NUMBER_TY(2))), NUMBER_TY_to_REAL_NUMBER_TY(1))))))))));
    ;
    ! [3: decide on x]
    return tmp_0;
    return 0;
];
! From the Standard Rules
! Request 15: phrase real number -> real number
! To decide which real number is the hyperbolic arctangent of ( R - a real number ) ( documented at ph_hyperbolicarctangent ) ( this is the arctanh function inverse to tanh ):
[ PHR_444_r15  
    t_0 ! Call parameter 'R': real number
    tmp_0 ! Let/loop value, e.g., 'x': real number
    ;
    ! [2: let x be given by x = 0.5* ( log ( 1+r ) - log ( 1-r ) ) where x is a real number]

    		! Solving Q3_german for '$w'
    (tmp_0 = (REAL_NUMBER_TY_Times(1056964608, (REAL_NUMBER_TY_Minus((REAL_NUMBER_TY_Log((REAL_NUMBER_TY_Plus(NUMBER_TY_to_REAL_NUMBER_TY(1), t_0)))), (REAL_NUMBER_TY_Log((REAL_NUMBER_TY_Minus(NUMBER_TY_to_REAL_NUMBER_TY(1), t_0)))))))));
    ;
    ! [3: decide on x]
    return tmp_0;
    return 0;
];
! From the Standard Rules
! Request 16: phrase nothing -> nothing
! To say here ( documented at phs_here ):
[ PHR_527_r16  ;
    ! [2: say ~[if story tense is present tense]here[otherwise]there~]
    say__p=1;! [3: if story tense is present tense]

    	if (~~((((story_tense == I106_present_tense))))) jump L_Say585;! [4: ~here~]
    ParaContent(); print "here";! [5: otherwise]

    	jump L_SayX585; .L_Say585;! [6: ~there~]
    ParaContent(); print "there"; .L_Say586; .L_SayX585;rfalse;
];
! From the Standard Rules
! Request 17: phrase nothing -> nothing
! To say now ( documented at phs_now ):
[ PHR_528_r17  ;
    ! [2: say ~[if story tense is present tense]now[otherwise]then~]
    say__p=1;! [3: if story tense is present tense]

    	if (~~((((story_tense == I106_present_tense))))) jump L_Say587;! [4: ~now~]
    ParaContent(); print "now";! [5: otherwise]

    	jump L_SayX586; .L_Say587;! [6: ~then~]
    ParaContent(); print "then"; .L_Say588; .L_SayX586;rfalse;
];
! From "English Language" by Graham Nelson
! Request 18: phrase nothing -> nothing
! To say we:
[ PHR_763_r18  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I112_first_person_singular)))
    {! [4: say ~I~]
        say__p=1;! [5: ~I~]
        ParaContent(); print "I"; .L_Say589; .L_SayX587;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I113_second_person_singular)))
    {! [7: say ~you~]
        say__p=1;! [8: ~you~]
        ParaContent(); print "you"; .L_Say590; .L_SayX588;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I114_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_80_t1_v10(player)))))
        {! [11: say ~he~]
            say__p=1;! [12: ~he~]
            ParaContent(); print "he"; .L_Say591; .L_SayX589;} else {
            ! [13: say ~she~]
            say__p=1;! [14: ~she~]
            ParaContent(); print "she"; .L_Say592; .L_SayX590;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I115_first_person_plural)))
    {! [16: say ~we~]
        say__p=1;! [17: ~we~]
        ParaContent(); print "we"; .L_Say593; .L_SayX591;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I116_second_person_plural)))
    {! [19: say ~you~]
        say__p=1;! [20: ~you~]
        ParaContent(); print "you"; .L_Say594; .L_SayX592;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I117_third_person_plural)))
    {! [22: say ~they~]
        say__p=1;! [23: ~they~]
        ParaContent(); print "they"; .L_Say595; .L_SayX593;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 19: phrase nothing -> nothing
! To say us:
[ PHR_764_r19  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I112_first_person_singular)))
    {! [4: say ~me~]
        say__p=1;! [5: ~me~]
        ParaContent(); print "me"; .L_Say596; .L_SayX594;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I113_second_person_singular)))
    {! [7: say ~you~]
        say__p=1;! [8: ~you~]
        ParaContent(); print "you"; .L_Say597; .L_SayX595;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I114_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_80_t1_v10(player)))))
        {! [11: say ~him~]
            say__p=1;! [12: ~him~]
            ParaContent(); print "him"; .L_Say598; .L_SayX596;} else {
            ! [13: say ~her~]
            say__p=1;! [14: ~her~]
            ParaContent(); print "her"; .L_Say599; .L_SayX597;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I115_first_person_plural)))
    {! [16: say ~us~]
        say__p=1;! [17: ~us~]
        ParaContent(); print "us"; .L_Say600; .L_SayX598;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I116_second_person_plural)))
    {! [19: say ~you~]
        say__p=1;! [20: ~you~]
        ParaContent(); print "you"; .L_Say601; .L_SayX599;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I117_third_person_plural)))
    {! [22: say ~them~]
        say__p=1;! [23: ~them~]
        ParaContent(); print "them"; .L_Say602; .L_SayX600;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 20: phrase nothing -> nothing
! To say ours:
[ PHR_765_r20  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I112_first_person_singular)))
    {! [4: say ~mine~]
        say__p=1;! [5: ~mine~]
        ParaContent(); print "mine"; .L_Say603; .L_SayX601;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I113_second_person_singular)))
    {! [7: say ~yours~]
        say__p=1;! [8: ~yours~]
        ParaContent(); print "yours"; .L_Say604; .L_SayX602;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I114_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_80_t1_v10(player)))))
        {! [11: say ~his~]
            say__p=1;! [12: ~his~]
            ParaContent(); print "his"; .L_Say605; .L_SayX603;} else {
            ! [13: say ~hers~]
            say__p=1;! [14: ~hers~]
            ParaContent(); print "hers"; .L_Say606; .L_SayX604;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I115_first_person_plural)))
    {! [16: say ~ours~]
        say__p=1;! [17: ~ours~]
        ParaContent(); print "ours"; .L_Say607; .L_SayX605;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I116_second_person_plural)))
    {! [19: say ~yours~]
        say__p=1;! [20: ~yours~]
        ParaContent(); print "yours"; .L_Say608; .L_SayX606;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I117_third_person_plural)))
    {! [22: say ~theirs~]
        say__p=1;! [23: ~theirs~]
        ParaContent(); print "theirs"; .L_Say609; .L_SayX607;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 21: phrase nothing -> nothing
! To say ourselves:
[ PHR_766_r21  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I112_first_person_singular)))
    {! [4: say ~myself~]
        say__p=1;! [5: ~myself~]
        ParaContent(); print "myself"; .L_Say610; .L_SayX608;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I113_second_person_singular)))
    {! [7: say ~yourself~]
        say__p=1;! [8: ~yourself~]
        ParaContent(); print "yourself"; .L_Say611; .L_SayX609;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I114_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_80_t1_v10(player)))))
        {! [11: say ~himself~]
            say__p=1;! [12: ~himself~]
            ParaContent(); print "himself"; .L_Say612; .L_SayX610;} else {
            ! [13: say ~herself~]
            say__p=1;! [14: ~herself~]
            ParaContent(); print "herself"; .L_Say613; .L_SayX611;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I115_first_person_plural)))
    {! [16: say ~ourselves~]
        say__p=1;! [17: ~ourselves~]
        ParaContent(); print "ourselves"; .L_Say614; .L_SayX612;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I116_second_person_plural)))
    {! [19: say ~yourselves~]
        say__p=1;! [20: ~yourselves~]
        ParaContent(); print "yourselves"; .L_Say615; .L_SayX613;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I117_third_person_plural)))
    {! [22: say ~themselves~]
        say__p=1;! [23: ~themselves~]
        ParaContent(); print "themselves"; .L_Say616; .L_SayX614;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 22: phrase nothing -> nothing
! To say our:
[ PHR_767_r22  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I112_first_person_singular)))
    {! [4: say ~my~]
        say__p=1;! [5: ~my~]
        ParaContent(); print "my"; .L_Say617; .L_SayX615;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I113_second_person_singular)))
    {! [7: say ~your~]
        say__p=1;! [8: ~your~]
        ParaContent(); print "your"; .L_Say618; .L_SayX616;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I114_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_80_t1_v10(player)))))
        {! [11: say ~his~]
            say__p=1;! [12: ~his~]
            ParaContent(); print "his"; .L_Say619; .L_SayX617;} else {
            ! [13: say ~her~]
            say__p=1;! [14: ~her~]
            ParaContent(); print "her"; .L_Say620; .L_SayX618;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I115_first_person_plural)))
    {! [16: say ~our~]
        say__p=1;! [17: ~our~]
        ParaContent(); print "our"; .L_Say621; .L_SayX619;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I116_second_person_plural)))
    {! [19: say ~your~]
        say__p=1;! [20: ~your~]
        ParaContent(); print "your"; .L_Say622; .L_SayX620;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I117_third_person_plural)))
    {! [22: say ~their~]
        say__p=1;! [23: ~their~]
        ParaContent(); print "their"; .L_Say623; .L_SayX621;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 23: phrase nothing -> nothing
! To say We:
[ PHR_768_r23  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I112_first_person_singular)))
    {! [4: say ~I~]
        say__p=1;! [5: ~I~]
        ParaContent(); print "I"; .L_Say624; .L_SayX622;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I113_second_person_singular)))
    {! [7: say ~You~]
        say__p=1;! [8: ~You~]
        ParaContent(); print "You"; .L_Say625; .L_SayX623;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I114_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_80_t1_v10(player)))))
        {! [11: say ~He~]
            say__p=1;! [12: ~He~]
            ParaContent(); print "He"; .L_Say626; .L_SayX624;} else {
            ! [13: say ~She~]
            say__p=1;! [14: ~She~]
            ParaContent(); print "She"; .L_Say627; .L_SayX625;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I115_first_person_plural)))
    {! [16: say ~We~]
        say__p=1;! [17: ~We~]
        ParaContent(); print "We"; .L_Say628; .L_SayX626;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I116_second_person_plural)))
    {! [19: say ~You~]
        say__p=1;! [20: ~You~]
        ParaContent(); print "You"; .L_Say629; .L_SayX627;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I117_third_person_plural)))
    {! [22: say ~They~]
        say__p=1;! [23: ~They~]
        ParaContent(); print "They"; .L_Say630; .L_SayX628;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 24: phrase nothing -> nothing
! To say Us:
[ PHR_769_r24  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I112_first_person_singular)))
    {! [4: say ~Me~]
        say__p=1;! [5: ~Me~]
        ParaContent(); print "Me"; .L_Say631; .L_SayX629;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I113_second_person_singular)))
    {! [7: say ~You~]
        say__p=1;! [8: ~You~]
        ParaContent(); print "You"; .L_Say632; .L_SayX630;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I114_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_80_t1_v10(player)))))
        {! [11: say ~Him~]
            say__p=1;! [12: ~Him~]
            ParaContent(); print "Him"; .L_Say633; .L_SayX631;} else {
            ! [13: say ~Her~]
            say__p=1;! [14: ~Her~]
            ParaContent(); print "Her"; .L_Say634; .L_SayX632;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I115_first_person_plural)))
    {! [16: say ~Us~]
        say__p=1;! [17: ~Us~]
        ParaContent(); print "Us"; .L_Say635; .L_SayX633;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I116_second_person_plural)))
    {! [19: say ~You~]
        say__p=1;! [20: ~You~]
        ParaContent(); print "You"; .L_Say636; .L_SayX634;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I117_third_person_plural)))
    {! [22: say ~Them~]
        say__p=1;! [23: ~Them~]
        ParaContent(); print "Them"; .L_Say637; .L_SayX635;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 25: phrase nothing -> nothing
! To say Ours:
[ PHR_770_r25  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I112_first_person_singular)))
    {! [4: say ~Mine~]
        say__p=1;! [5: ~Mine~]
        ParaContent(); print "Mine"; .L_Say638; .L_SayX636;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I113_second_person_singular)))
    {! [7: say ~Yours~]
        say__p=1;! [8: ~Yours~]
        ParaContent(); print "Yours"; .L_Say639; .L_SayX637;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I114_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_80_t1_v10(player)))))
        {! [11: say ~His~]
            say__p=1;! [12: ~His~]
            ParaContent(); print "His"; .L_Say640; .L_SayX638;} else {
            ! [13: say ~Hers~]
            say__p=1;! [14: ~Hers~]
            ParaContent(); print "Hers"; .L_Say641; .L_SayX639;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I115_first_person_plural)))
    {! [16: say ~Ours~]
        say__p=1;! [17: ~Ours~]
        ParaContent(); print "Ours"; .L_Say642; .L_SayX640;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I116_second_person_plural)))
    {! [19: say ~Yours~]
        say__p=1;! [20: ~Yours~]
        ParaContent(); print "Yours"; .L_Say643; .L_SayX641;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I117_third_person_plural)))
    {! [22: say ~Theirs~]
        say__p=1;! [23: ~Theirs~]
        ParaContent(); print "Theirs"; .L_Say644; .L_SayX642;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 26: phrase nothing -> nothing
! To say Ourselves:
[ PHR_771_r26  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I112_first_person_singular)))
    {! [4: say ~Myself~]
        say__p=1;! [5: ~Myself~]
        ParaContent(); print "Myself"; .L_Say645; .L_SayX643;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I113_second_person_singular)))
    {! [7: say ~Yourself~]
        say__p=1;! [8: ~Yourself~]
        ParaContent(); print "Yourself"; .L_Say646; .L_SayX644;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I114_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_80_t1_v10(player)))))
        {! [11: say ~Himself~]
            say__p=1;! [12: ~Himself~]
            ParaContent(); print "Himself"; .L_Say647; .L_SayX645;} else {
            ! [13: say ~Herself~]
            say__p=1;! [14: ~Herself~]
            ParaContent(); print "Herself"; .L_Say648; .L_SayX646;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I115_first_person_plural)))
    {! [16: say ~Ourselves~]
        say__p=1;! [17: ~Ourselves~]
        ParaContent(); print "Ourselves"; .L_Say649; .L_SayX647;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I116_second_person_plural)))
    {! [19: say ~Yourselves~]
        say__p=1;! [20: ~Yourselves~]
        ParaContent(); print "Yourselves"; .L_Say650; .L_SayX648;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I117_third_person_plural)))
    {! [22: say ~Themselves~]
        say__p=1;! [23: ~Themselves~]
        ParaContent(); print "Themselves"; .L_Say651; .L_SayX649;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 27: phrase nothing -> nothing
! To say Our:
[ PHR_772_r27  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I112_first_person_singular)))
    {! [4: say ~My~]
        say__p=1;! [5: ~My~]
        ParaContent(); print "My"; .L_Say652; .L_SayX650;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I113_second_person_singular)))
    {! [7: say ~Your~]
        say__p=1;! [8: ~Your~]
        ParaContent(); print "Your"; .L_Say653; .L_SayX651;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I114_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_80_t1_v10(player)))))
        {! [11: say ~His~]
            say__p=1;! [12: ~His~]
            ParaContent(); print "His"; .L_Say654; .L_SayX652;} else {
            ! [13: say ~Her~]
            say__p=1;! [14: ~Her~]
            ParaContent(); print "Her"; .L_Say655; .L_SayX653;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I115_first_person_plural)))
    {! [16: say ~Our~]
        say__p=1;! [17: ~Our~]
        ParaContent(); print "Our"; .L_Say656; .L_SayX654;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I116_second_person_plural)))
    {! [19: say ~Your~]
        say__p=1;! [20: ~Your~]
        ParaContent(); print "Your"; .L_Say657; .L_SayX655;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I117_third_person_plural)))
    {! [22: say ~Their~]
        say__p=1;! [23: ~Their~]
        ParaContent(); print "Their"; .L_Say658; .L_SayX656;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 28: phrase nothing -> nothing
! To say those:
[ PHR_773_r28  ;
    ! [2: say those in the accusative]
    say__p=1;! [3: those in the accusative]
    ParaContent(); (PHR_775_r30 (I120_accusative)); .L_Say659; .L_SayX657;rfalse;
];
! From "English Language" by Graham Nelson
! Request 29: phrase nothing -> nothing
! To say Those:
[ PHR_774_r29  ;
    ! [2: say those in the nominative]
    say__p=1;! [3: those in the nominative]
    ParaContent(); (PHR_776_r31 (I119_nominative)); .L_Say660; .L_SayX658;rfalse;
];
! From "English Language" by Graham Nelson
! Request 30: phrase grammatical case -> nothing
! To say those in ( case - grammatical case ):
[ PHR_775_r30  
    t_0 ! Call parameter 'case': grammatical case
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if the case is nominative]
    if (((t_0 == I119_nominative)))
    {! [3: let the item be the prior named object]

        		tmp_0 = prior_named_noun;
        ! [4: if the prior naming context is plural]
        if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
        {! [5: say ~those~]
            say__p=1;! [6: ~those~]
            ParaContent(); print "those"; .L_Say661; .L_SayX659;} else {
            ! [7: if the item is the player]
            if (((tmp_0 == player)))
            {! [8: say ~[we]~]
                say__p=1;! [9: we]
                ParaContent(); (PHR_763_r18 ()); .L_Say662; .L_SayX660;} else {
                ! [10: if the item is a male person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [11: say ~he~]
                    say__p=1;! [12: ~he~]
                    ParaContent(); print "he"; .L_Say663; .L_SayX661;} else {
                    ! [13: if the item is a female person and item is not neuter]
                    if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                    {! [14: say ~she~]
                        say__p=1;! [15: ~she~]
                        ParaContent(); print "she"; .L_Say664; .L_SayX662;} else {
                        ! [16: say ~that~]
                        say__p=1;! [17: ~that~]
                        ParaContent(); print "that"; .L_Say665; .L_SayX663;}
                        }
                        }
                        }
                        } else {
        ! [18: let the item be the prior named object]

        		tmp_0 = prior_named_noun;
        ! [19: if the prior naming context is plural]
        if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
        {! [20: say ~those~]
            say__p=1;! [21: ~those~]
            ParaContent(); print "those"; .L_Say666; .L_SayX664;} else {
            ! [22: if the item is the player]
            if (((tmp_0 == player)))
            {! [23: say ~[we]~]
                say__p=1;! [24: we]
                ParaContent(); (PHR_763_r18 ()); .L_Say667; .L_SayX665;} else {
                ! [25: if the item is a male person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [26: say ~him~]
                    say__p=1;! [27: ~him~]
                    ParaContent(); print "him"; .L_Say668; .L_SayX666;} else {
                    ! [28: if the item is a female person and item is not neuter]
                    if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                    {! [29: say ~her~]
                        say__p=1;! [30: ~her~]
                        ParaContent(); print "her"; .L_Say669; .L_SayX667;} else {
                        ! [31: say ~that~]
                        say__p=1;! [32: ~that~]
                        ParaContent(); print "that"; .L_Say670; .L_SayX668;}
                        }
                        }
                        }
                        }
                        rfalse;
];
! From "English Language" by Graham Nelson
! Request 31: phrase grammatical case -> nothing
! To say Those in ( case - grammatical case ):
[ PHR_776_r31  
    t_0 ! Call parameter 'case': grammatical case
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if the case is nominative]
    if (((t_0 == I119_nominative)))
    {! [3: let the item be the prior named object]

        		tmp_0 = prior_named_noun;
        ! [4: if the prior naming context is plural]
        if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
        {! [5: say ~Those~]
            say__p=1;! [6: ~Those~]
            ParaContent(); print "Those"; .L_Say671; .L_SayX669;} else {
            ! [7: if the item is the player]
            if (((tmp_0 == player)))
            {! [8: say ~[We]~]
                say__p=1;! [9: we]
                ParaContent(); (PHR_768_r23 ()); .L_Say672; .L_SayX670;} else {
                ! [10: if the item is a male person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [11: say ~He~]
                    say__p=1;! [12: ~He~]
                    ParaContent(); print "He"; .L_Say673; .L_SayX671;} else {
                    ! [13: if the item is a female person and item is not neuter]
                    if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                    {! [14: say ~She~]
                        say__p=1;! [15: ~She~]
                        ParaContent(); print "She"; .L_Say674; .L_SayX672;} else {
                        ! [16: say ~That~]
                        say__p=1;! [17: ~That~]
                        ParaContent(); print "That"; .L_Say675; .L_SayX673;}
                        }
                        }
                        }
                        } else {
        ! [18: let the item be the prior named object]

        		tmp_0 = prior_named_noun;
        ! [19: if the prior naming context is plural]
        if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
        {! [20: say ~Those~]
            say__p=1;! [21: ~Those~]
            ParaContent(); print "Those"; .L_Say676; .L_SayX674;} else {
            ! [22: if the item is the player]
            if (((tmp_0 == player)))
            {! [23: say ~[We]~]
                say__p=1;! [24: we]
                ParaContent(); (PHR_768_r23 ()); .L_Say677; .L_SayX675;} else {
                ! [25: if the item is a male person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [26: say ~Him~]
                    say__p=1;! [27: ~Him~]
                    ParaContent(); print "Him"; .L_Say678; .L_SayX676;} else {
                    ! [28: if the item is a female person and item is not neuter]
                    if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                    {! [29: say ~Her~]
                        say__p=1;! [30: ~Her~]
                        ParaContent(); print "Her"; .L_Say679; .L_SayX677;} else {
                        ! [31: say ~That~]
                        say__p=1;! [32: ~That~]
                        ParaContent(); print "That"; .L_Say680; .L_SayX678;}
                        }
                        }
                        }
                        }
                        rfalse;
];
! From "English Language" by Graham Nelson
! Request 32: phrase nothing -> nothing
! To say they:
[ PHR_777_r32  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~they~]
        say__p=1;! [5: ~they~]
        ParaContent(); print "they"; .L_Say681; .L_SayX679;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[we]~]
            say__p=1;! [8: we]
            ParaContent(); (PHR_763_r18 ()); .L_Say682; .L_SayX680;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
            {! [10: say ~he~]
                say__p=1;! [11: ~he~]
                ParaContent(); print "he"; .L_Say683; .L_SayX681;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [13: say ~she~]
                    say__p=1;! [14: ~she~]
                    ParaContent(); print "she"; .L_Say684; .L_SayX682;} else {
                    ! [15: say ~it~]
                    say__p=1;! [16: ~it~]
                    ParaContent(); print "it"; .L_Say685; .L_SayX683;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 33: phrase nothing -> nothing
! To say They:
[ PHR_778_r33  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~They~]
        say__p=1;! [5: ~They~]
        ParaContent(); print "They"; .L_Say686; .L_SayX684;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[We]~]
            say__p=1;! [8: we]
            ParaContent(); (PHR_768_r23 ()); .L_Say687; .L_SayX685;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
            {! [10: say ~He~]
                say__p=1;! [11: ~He~]
                ParaContent(); print "He"; .L_Say688; .L_SayX686;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [13: say ~She~]
                    say__p=1;! [14: ~She~]
                    ParaContent(); print "She"; .L_Say689; .L_SayX687;} else {
                    ! [15: say ~It~]
                    say__p=1;! [16: ~It~]
                    ParaContent(); print "It"; .L_Say690; .L_SayX688;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 34: phrase nothing -> nothing
! To say their:
[ PHR_779_r34  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~their~]
        say__p=1;! [5: ~their~]
        ParaContent(); print "their"; .L_Say691; .L_SayX689;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[our]~]
            say__p=1;! [8: our]
            ParaContent(); (PHR_767_r22 ()); .L_Say692; .L_SayX690;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
            {! [10: say ~his~]
                say__p=1;! [11: ~his~]
                ParaContent(); print "his"; .L_Say693; .L_SayX691;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [13: say ~her~]
                    say__p=1;! [14: ~her~]
                    ParaContent(); print "her"; .L_Say694; .L_SayX692;} else {
                    ! [15: say ~its~]
                    say__p=1;! [16: ~its~]
                    ParaContent(); print "its"; .L_Say695; .L_SayX693;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 35: phrase nothing -> nothing
! To say Their:
[ PHR_780_r35  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~Their~]
        say__p=1;! [5: ~Their~]
        ParaContent(); print "Their"; .L_Say696; .L_SayX694;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[Our]~]
            say__p=1;! [8: our]
            ParaContent(); (PHR_772_r27 ()); .L_Say697; .L_SayX695;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
            {! [10: say ~His~]
                say__p=1;! [11: ~His~]
                ParaContent(); print "His"; .L_Say698; .L_SayX696;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [13: say ~Her~]
                    say__p=1;! [14: ~Her~]
                    ParaContent(); print "Her"; .L_Say699; .L_SayX697;} else {
                    ! [15: say ~Its~]
                    say__p=1;! [16: ~Its~]
                    ParaContent(); print "Its"; .L_Say700; .L_SayX698;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 36: phrase nothing -> nothing
! To say them:
[ PHR_781_r36  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~them~]
        say__p=1;! [5: ~them~]
        ParaContent(); print "them"; .L_Say701; .L_SayX699;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[us]~]
            say__p=1;! [8: us]
            ParaContent(); (PHR_764_r19 ()); .L_Say702; .L_SayX700;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
            {! [10: say ~him~]
                say__p=1;! [11: ~him~]
                ParaContent(); print "him"; .L_Say703; .L_SayX701;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [13: say ~her~]
                    say__p=1;! [14: ~her~]
                    ParaContent(); print "her"; .L_Say704; .L_SayX702;} else {
                    ! [15: say ~it~]
                    say__p=1;! [16: ~it~]
                    ParaContent(); print "it"; .L_Say705; .L_SayX703;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 37: phrase nothing -> nothing
! To say Them:
[ PHR_782_r37  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~Them~]
        say__p=1;! [5: ~Them~]
        ParaContent(); print "Them"; .L_Say706; .L_SayX704;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[Us]~]
            say__p=1;! [8: us]
            ParaContent(); (PHR_769_r24 ()); .L_Say707; .L_SayX705;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
            {! [10: say ~Him~]
                say__p=1;! [11: ~Him~]
                ParaContent(); print "Him"; .L_Say708; .L_SayX706;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [13: say ~Her~]
                    say__p=1;! [14: ~Her~]
                    ParaContent(); print "Her"; .L_Say709; .L_SayX707;} else {
                    ! [15: say ~It~]
                    say__p=1;! [16: ~It~]
                    ParaContent(); print "It"; .L_Say710; .L_SayX708;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 38: phrase nothing -> nothing
! To say theirs:
[ PHR_783_r38  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~theirs~]
        say__p=1;! [5: ~theirs~]
        ParaContent(); print "theirs"; .L_Say711; .L_SayX709;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[ours]~]
            say__p=1;! [8: ours]
            ParaContent(); (PHR_765_r20 ()); .L_Say712; .L_SayX710;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
            {! [10: say ~his~]
                say__p=1;! [11: ~his~]
                ParaContent(); print "his"; .L_Say713; .L_SayX711;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [13: say ~hers~]
                    say__p=1;! [14: ~hers~]
                    ParaContent(); print "hers"; .L_Say714; .L_SayX712;} else {
                    ! [15: say ~its~]
                    say__p=1;! [16: ~its~]
                    ParaContent(); print "its"; .L_Say715; .L_SayX713;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 39: phrase nothing -> nothing
! To say Theirs:
[ PHR_784_r39  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~Theirs~]
        say__p=1;! [5: ~Theirs~]
        ParaContent(); print "Theirs"; .L_Say716; .L_SayX714;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[Ours]~]
            say__p=1;! [8: ours]
            ParaContent(); (PHR_770_r25 ()); .L_Say717; .L_SayX715;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
            {! [10: say ~His~]
                say__p=1;! [11: ~His~]
                ParaContent(); print "His"; .L_Say718; .L_SayX716;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [13: say ~Hers~]
                    say__p=1;! [14: ~Hers~]
                    ParaContent(); print "Hers"; .L_Say719; .L_SayX717;} else {
                    ! [15: say ~Its~]
                    say__p=1;! [16: ~Its~]
                    ParaContent(); print "Its"; .L_Say720; .L_SayX718;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 40: phrase nothing -> nothing
! To say themselves:
[ PHR_785_r40  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~themselves~]
        say__p=1;! [5: ~themselves~]
        ParaContent(); print "themselves"; .L_Say721; .L_SayX719;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[ourselves]~]
            say__p=1;! [8: ourselves]
            ParaContent(); (PHR_766_r21 ()); .L_Say722; .L_SayX720;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
            {! [10: say ~himself~]
                say__p=1;! [11: ~himself~]
                ParaContent(); print "himself"; .L_Say723; .L_SayX721;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [13: say ~herself~]
                    say__p=1;! [14: ~herself~]
                    ParaContent(); print "herself"; .L_Say724; .L_SayX722;} else {
                    ! [15: say ~itself~]
                    say__p=1;! [16: ~itself~]
                    ParaContent(); print "itself"; .L_Say725; .L_SayX723;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 41: phrase nothing -> nothing
! To say Themselves:
[ PHR_786_r41  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~Themselves~]
        say__p=1;! [5: ~Themselves~]
        ParaContent(); print "Themselves"; .L_Say726; .L_SayX724;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[Ourselves]~]
            say__p=1;! [8: ourselves]
            ParaContent(); (PHR_771_r26 ()); .L_Say727; .L_SayX725;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
            {! [10: say ~Himself~]
                say__p=1;! [11: ~Himself~]
                ParaContent(); print "Himself"; .L_Say728; .L_SayX726;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [13: say ~Herself~]
                    say__p=1;! [14: ~Herself~]
                    ParaContent(); print "Herself"; .L_Say729; .L_SayX727;} else {
                    ! [15: say ~Itself~]
                    say__p=1;! [16: ~Itself~]
                    ParaContent(); print "Itself"; .L_Say730; .L_SayX728;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 42: phrase nothing -> nothing
! To say they're:
[ PHR_787_r42  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~they~]
        say__p=1;! [5: ~they~]
        ParaContent(); print "they"; .L_Say731; .L_SayX729;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[we]~]
            say__p=1;! [8: we]
            ParaContent(); (PHR_763_r18 ()); .L_Say732; .L_SayX730;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
            {! [10: say ~he~]
                say__p=1;! [11: ~he~]
                ParaContent(); print "he"; .L_Say733; .L_SayX731;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [13: say ~she~]
                    say__p=1;! [14: ~she~]
                    ParaContent(); print "she"; .L_Say734; .L_SayX732;} else {
                    ! [15: say ~that~]
                    say__p=1;! [16: ~that~]
                    ParaContent(); print "that"; .L_Say735; .L_SayX733;}
                    }
                    }
                    }
    ! [17: say ~['re]~]
    say__p=1;! [18: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say736; .L_SayX734;rfalse;
];
! From "English Language" by Graham Nelson
! Request 43: phrase nothing -> nothing
! To say They're:
[ PHR_788_r43  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~They~]
        say__p=1;! [5: ~They~]
        ParaContent(); print "They"; .L_Say737; .L_SayX735;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[We]~]
            say__p=1;! [8: we]
            ParaContent(); (PHR_768_r23 ()); .L_Say738; .L_SayX736;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_80_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
            {! [10: say ~He~]
                say__p=1;! [11: ~He~]
                ParaContent(); print "He"; .L_Say739; .L_SayX737;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_79_t1_v10(tmp_0))))) && (((~~(((Adj_81_t1_v10(tmp_0))))))))
                {! [13: say ~She~]
                    say__p=1;! [14: ~She~]
                    ParaContent(); print "She"; .L_Say740; .L_SayX738;} else {
                    ! [15: say ~That~]
                    say__p=1;! [16: ~That~]
                    ParaContent(); print "That"; .L_Say741; .L_SayX739;}
                    }
                    }
                    }
    ! [17: say ~['re]~]
    say__p=1;! [18: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say742; .L_SayX740;rfalse;
];
! From "English Language" by Graham Nelson
! Request 44: phrase nothing -> nothing
! To say It:
[ PHR_789_r44  ;
    ! [2: say ~[regarding nothing]It~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~It~]
    ParaContent(); print "It"; .L_Say743; .L_SayX741;rfalse;
];
! From "English Language" by Graham Nelson
! Request 45: phrase nothing -> nothing
! To say There:
[ PHR_790_r45  ;
    ! [2: say ~[regarding nothing]There~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~There~]
    ParaContent(); print "There"; .L_Say744; .L_SayX742;rfalse;
];
! From "English Language" by Graham Nelson
! Request 46: phrase nothing -> nothing
! To say it:
[ PHR_791_r46  ;
    ! [2: say ~[regarding nothing]it~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~it~]
    ParaContent(); print "it"; .L_Say745; .L_SayX743;rfalse;
];
! From "English Language" by Graham Nelson
! Request 47: phrase nothing -> nothing
! To say there:
[ PHR_792_r47  ;
    ! [2: say ~[regarding nothing]there~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~there~]
    ParaContent(); print "there"; .L_Say746; .L_SayX744;rfalse;
];
! From "English Language" by Graham Nelson
! Request 48: phrase nothing -> nothing
! To say It's:
[ PHR_793_r48  ;
    ! [2: say ~[regarding nothing]It['re]~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~It~]
    ParaContent(); print "It";! [5: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say747; .L_SayX745;rfalse;
];
! From "English Language" by Graham Nelson
! Request 49: phrase nothing -> nothing
! To say There's:
[ PHR_794_r49  ;
    ! [2: say ~[regarding nothing]There['re]~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~There~]
    ParaContent(); print "There";! [5: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say748; .L_SayX746;rfalse;
];
! From "English Language" by Graham Nelson
! Request 50: phrase nothing -> nothing
! To say it's:
[ PHR_795_r50  ;
    ! [2: say ~[regarding nothing]it['re]~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~it~]
    ParaContent(); print "it";! [5: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say749; .L_SayX747;rfalse;
];
! From "English Language" by Graham Nelson
! Request 51: phrase nothing -> nothing
! To say there's:
[ PHR_796_r51  ;
    ! [2: say ~[regarding nothing]there['re]~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~there~]
    ParaContent(); print "there";! [5: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say750; .L_SayX748;rfalse;
];
! From "English Language" by Graham Nelson
! Request 52: phrase nothing -> nothing
! To say possessive:
[ PHR_797_r52  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the item is the player]
    if (((tmp_0 == player)))
    {! [4: say ~[our]~]
        say__p=1;! [5: our]
        ParaContent(); (PHR_767_r22 ()); .L_Say751; .L_SayX749;} else {
        ! [6: if the prior naming context is plural]
        if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
        {! [7: say ~[the item][apostrophe]~]
            say__p=1;! [8: the item]
            ParaContent(); print (the) tmp_0;! [9: apostrophe]
            ParaContent(); print "'"; .L_Say752; .L_SayX750;} else {
            ! [10: say ~[the item][apostrophe]s~]
            say__p=1;! [11: the item]
            ParaContent(); print (the) tmp_0;! [12: apostrophe]
            ParaContent(); print "'";! [13: ~s~]
            ParaContent(); print "s"; .L_Say753; .L_SayX751;}
            }
            rfalse;
];
! From "English Language" by Graham Nelson
! Request 53: phrase nothing -> nothing
! To say Possessive:
[ PHR_798_r53  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the item is the player]
    if (((tmp_0 == player)))
    {! [4: say ~[Our]~]
        say__p=1;! [5: our]
        ParaContent(); (PHR_772_r27 ()); .L_Say754; .L_SayX752;} else {
        ! [6: if the prior naming context is plural]
        if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
        {! [7: say ~[The item][apostrophe]~]
            say__p=1;! [8: the item]
            ParaContent(); print (The) tmp_0;! [9: apostrophe]
            ParaContent(); print "'"; .L_Say755; .L_SayX753;} else {
            ! [10: say ~[The item][apostrophe]s~]
            say__p=1;! [11: the item]
            ParaContent(); print (The) tmp_0;! [12: apostrophe]
            ParaContent(); print "'";! [13: ~s~]
            ParaContent(); print "s"; .L_Say756; .L_SayX754;}
            }
            rfalse;
];
! Request 54: phrase nothing -> nothing
! To say the toaster's content:
[ PHR_888_r54  ;
    ! [2: if the toaster is done]
    if ((((Adj_93_t1_v10(I205_toaster)))))
    {! [3: say ~toast~]
        say__p=1;! [4: ~toast~]
        ParaContent(); print "toast"; .L_Say757; .L_SayX755;} else {
        ! [5: say ~bread~]
        say__p=1;! [6: ~bread~]
        ParaContent(); print "bread"; .L_Say758; .L_SayX756;}
        rfalse;
];
! Request 55: phrase nothing -> nothing
! To say the water status:
[ PHR_912_r55  ;
    ! [2: say ~The drain is [if the drain is plugged]plugged[else]unplugged[end if]. The faucet is [if the faucet is on]on[else]off[end if]. ~]
    say__p=1;! [3: ~The drain is ~]
    ParaContent(); print "The drain is ";! [4: if the drain is plugged]

    	if (~~(((((Adj_96_t1_v10(I260_drain))))))) jump L_Say759;! [5: ~plugged~]
    ParaContent(); print "plugged";! [6: else]

    	jump L_SayX757; .L_Say759;! [7: ~unplugged~]
    ParaContent(); print "unplugged";! [8: end if]

    	.L_Say760; .L_SayX757;! [9: ~. The faucet is ~]
    ParaContent(); print ". The faucet is ";! [10: if the faucet is on]

    	if (~~(((((Adj_97_t1_v10(I261_faucet))))))) jump L_Say761;! [11: ~on~]
    ParaContent(); print "on";! [12: else]

    	jump L_SayX758; .L_Say761;! [13: ~off~]
    ParaContent(); print "off";! [14: end if]

    	.L_Say762; .L_SayX758;! [15: ~. ~]
    ParaContent(); print ". "; .L_Say763; .L_SayX759;! [16: if the water level is 0]
    if ((((Global_Vars-->11) == 0)))
    {! [17: say ~The tub has no water in it.~]
        say__p=1;! [18: ~The tub has no water in it.~]
        ParaContent(); print "The tub has no water in it."; new_line; .L_Say764; .L_SayX760;} else {
        ! [19: say ~The water is around [the water level]0% of the way up the edge of the tub.~]
        say__p=1;! [20: ~The water is around ~]
        ParaContent(); print "The water is around ";! [21: the water level]
        ParaContent(); print (say__n=(Global_Vars-->11));! [22: ~0% of the way up the edge of the tub.~]
        ParaContent(); print "0% of the way up the edge of the tub."; new_line; .L_Say765; .L_SayX761;}
    ! [23: if the water level is 10]
    if ((((Global_Vars-->11) == 10)))
    {! [24: say ~ the bathtub is overflowing into the bathroom. For some reason, you don't really care about this.~]
        say__p=1;! [25: ~ the bathtub is overflowing into the bathroom. For some reason, you don't really care about this.~]
        ParaContent(); print " the bathtub is overflowing into the bathroom. For some reason, you don't really care about this."; new_line; .L_Say766; .L_SayX762;}
    ! [26: if the swimming piranhas are in the bathtub]
    if (((I259_bathtub == ContainerOf(I328_swimming_piranhas))))
    {! [27: say ~A few piranhas are swimming peacefully around the tub.~]
        say__p=1;! [28: ~A few piranhas are swimming peacefully around the tub.~]
        ParaContent(); print "A few piranhas are swimming peacefully around the tub."; new_line; .L_Say767; .L_SayX763;}
        rfalse;
];
Array TX_R_0 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_0_R;
[ TX_R_0_R ;
    ResponseViaActivity(R_284_RESP_A);
];
[ ADJUST_LIGHT_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_0;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_1 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_1_R;
[ TX_R_1_R ;
    ResponseViaActivity(R_286_RESP_A);
];
[ GENERATE_ACTION_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_1;
        'B': str = TX_R_2;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_2 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_2_R;
[ TX_R_2_R ;
    ResponseViaActivity(R_286_RESP_B);
];
Array TX_R_3 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_3_R;
[ TX_R_3_R ;
    ResponseViaActivity(R_293_RESP_A);
];
[ BASIC_ACCESSIBILITY_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_3;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_4 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_4_R;
[ TX_R_4_R ;
    ResponseViaActivity(R_294_RESP_A);
];
[ BASIC_VISIBILITY_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_4;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_5 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_5_R;
[ TX_R_5_R ;
    ResponseViaActivity(R_296_RESP_A);
];
[ REQUESTED_ACTIONS_REQUIRE_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_5;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_6 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_6_R;
[ TX_R_6_R ;
    ResponseViaActivity(R_297_RESP_A);
];
[ CARRY_OUT_REQUESTED_ACTIONS_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_6;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_7 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_7_R;
[ TX_R_7_R ;
    ResponseViaActivity(R_300_RESP_A);
];
[ ACCESS_THROUGH_BARRIERS_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_7;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_8 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_8_R;
[ TX_R_8_R ;
    ResponseViaActivity(R_301_RESP_A);
];
[ CANT_REACH_INSIDE_CLOSED_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_8;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_9 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_9_R;
[ TX_R_9_R ;
    ResponseViaActivity(R_302_RESP_A);
];
[ CANT_REACH_INSIDE_ROOMS_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_9;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_10 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_10_R;
[ TX_R_10_R ;
    ResponseViaActivity(R_303_RESP_A);
];
[ CANT_REACH_OUTSIDE_CLOSED_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_10;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_11 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_11_R;
[ TX_R_11_R ;
    ResponseViaActivity(R_304_RESP_A);
];
[ LIST_WRITER_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_11;
        'B': str = TX_R_12;
        'C': str = TX_R_13;
        'D': str = TX_R_14;
        'E': str = TX_R_15;
        'F': str = TX_R_16;
        'G': str = TX_R_17;
        'H': str = TX_R_18;
        'I': str = TX_R_19;
        'J': str = TX_R_20;
        'K': str = TX_R_21;
        'L': str = TX_R_22;
        'M': str = TX_R_23;
        'N': str = TX_R_24;
        'O': str = TX_R_25;
        'P': str = TX_R_26;
        'Q': str = TX_R_27;
        'R': str = TX_R_28;
        'S': str = TX_R_29;
        'T': str = TX_R_30;
        'U': str = TX_R_31;
        'V': str = TX_R_32;
        'W': str = TX_R_33;
        'X': str = TX_R_34;
        'Y': str = TX_R_35;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_12 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_12_R;
[ TX_R_12_R ;
    ResponseViaActivity(R_304_RESP_B);
];
Array TX_R_13 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_13_R;
[ TX_R_13_R ;
    ResponseViaActivity(R_304_RESP_C);
];
Array TX_R_14 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_14_R;
[ TX_R_14_R ;
    ResponseViaActivity(R_304_RESP_D);
];
Array TX_R_15 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_15_R;
[ TX_R_15_R ;
    ResponseViaActivity(R_304_RESP_E);
];
Array TX_R_16 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_16_R;
[ TX_R_16_R ;
    ResponseViaActivity(R_304_RESP_F);
];
Array TX_R_17 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_17_R;
[ TX_R_17_R ;
    ResponseViaActivity(R_304_RESP_G);
];
Array TX_R_18 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_18_R;
[ TX_R_18_R ;
    ResponseViaActivity(R_304_RESP_H);
];
Array TX_R_19 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_19_R;
[ TX_R_19_R ;
    ResponseViaActivity(R_304_RESP_I);
];
Array TX_R_20 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_20_R;
[ TX_R_20_R ;
    ResponseViaActivity(R_304_RESP_J);
];
Array TX_R_21 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_21_R;
[ TX_R_21_R ;
    ResponseViaActivity(R_304_RESP_K);
];
Array TX_R_22 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_22_R;
[ TX_R_22_R ;
    ResponseViaActivity(R_304_RESP_L);
];
Array TX_R_23 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_23_R;
[ TX_R_23_R ;
    ResponseViaActivity(R_304_RESP_M);
];
Array TX_R_24 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_24_R;
[ TX_R_24_R ;
    ResponseViaActivity(R_304_RESP_N);
];
Array TX_R_25 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_25_R;
[ TX_R_25_R ;
    ResponseViaActivity(R_304_RESP_O);
];
Array TX_R_26 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_26_R;
[ TX_R_26_R ;
    ResponseViaActivity(R_304_RESP_P);
];
Array TX_R_27 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_27_R;
[ TX_R_27_R ;
    ResponseViaActivity(R_304_RESP_Q);
];
Array TX_R_28 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_28_R;
[ TX_R_28_R ;
    ResponseViaActivity(R_304_RESP_R);
];
Array TX_R_29 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_29_R;
[ TX_R_29_R ;
    ResponseViaActivity(R_304_RESP_S);
];
Array TX_R_30 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_30_R;
[ TX_R_30_R ;
    ResponseViaActivity(R_304_RESP_T);
];
Array TX_R_31 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_31_R;
[ TX_R_31_R ;
    ResponseViaActivity(R_304_RESP_U);
];
Array TX_R_32 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_32_R;
[ TX_R_32_R ;
    ResponseViaActivity(R_304_RESP_V);
];
Array TX_R_33 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_33_R;
[ TX_R_33_R ;
    ResponseViaActivity(R_304_RESP_W);
];
Array TX_R_34 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_34_R;
[ TX_R_34_R ;
    ResponseViaActivity(R_304_RESP_X);
];
Array TX_R_35 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_35_R;
[ TX_R_35_R ;
    ResponseViaActivity(R_304_RESP_Y);
];
Array TX_R_36 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_36_R;
[ TX_R_36_R ;
    ResponseViaActivity(R_305_RESP_A);
];
[ ACTION_PROCESSING_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_36;
        'B': str = TX_R_37;
        'C': str = TX_R_38;
        'D': str = TX_R_39;
        'E': str = TX_R_40;
        'F': str = TX_R_41;
        'G': str = TX_R_42;
        'H': str = TX_R_43;
        'I': str = TX_R_44;
        'J': str = TX_R_45;
        'K': str = TX_R_46;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_37 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_37_R;
[ TX_R_37_R ;
    ResponseViaActivity(R_305_RESP_B);
];
Array TX_R_38 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_38_R;
[ TX_R_38_R ;
    ResponseViaActivity(R_305_RESP_C);
];
Array TX_R_39 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_39_R;
[ TX_R_39_R ;
    ResponseViaActivity(R_305_RESP_D);
];
Array TX_R_40 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_40_R;
[ TX_R_40_R ;
    ResponseViaActivity(R_305_RESP_E);
];
Array TX_R_41 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_41_R;
[ TX_R_41_R ;
    ResponseViaActivity(R_305_RESP_F);
];
Array TX_R_42 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_42_R;
[ TX_R_42_R ;
    ResponseViaActivity(R_305_RESP_G);
];
Array TX_R_43 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_43_R;
[ TX_R_43_R ;
    ResponseViaActivity(R_305_RESP_H);
];
Array TX_R_44 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_44_R;
[ TX_R_44_R ;
    ResponseViaActivity(R_305_RESP_I);
];
Array TX_R_45 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_45_R;
[ TX_R_45_R ;
    ResponseViaActivity(R_305_RESP_J);
];
Array TX_R_46 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_46_R;
[ TX_R_46_R ;
    ResponseViaActivity(R_305_RESP_K);
];
Array TX_R_47 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_47_R;
[ TX_R_47_R ;
    ResponseViaActivity(R_306_RESP_A);
];
[ PARSER_ERROR_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_47;
        'B': str = TX_R_48;
        'C': str = TX_R_49;
        'D': str = TX_R_50;
        'E': str = TX_R_51;
        'F': str = TX_R_52;
        'G': str = TX_R_53;
        'H': str = TX_R_54;
        'I': str = TX_R_55;
        'J': str = TX_R_56;
        'K': str = TX_R_57;
        'L': str = TX_R_58;
        'M': str = TX_R_59;
        'N': str = TX_R_60;
        'O': str = TX_R_61;
        'P': str = TX_R_62;
        'Q': str = TX_R_63;
        'R': str = TX_R_64;
        'S': str = TX_R_65;
        'T': str = TX_R_66;
        'U': str = TX_R_67;
        'V': str = TX_R_68;
        'W': str = TX_R_69;
        'X': str = TX_R_70;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_48 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_48_R;
[ TX_R_48_R ;
    ResponseViaActivity(R_306_RESP_B);
];
Array TX_R_49 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_49_R;
[ TX_R_49_R ;
    ResponseViaActivity(R_306_RESP_C);
];
Array TX_R_50 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_50_R;
[ TX_R_50_R ;
    ResponseViaActivity(R_306_RESP_D);
];
Array TX_R_51 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_51_R;
[ TX_R_51_R ;
    ResponseViaActivity(R_306_RESP_E);
];
Array TX_R_52 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_52_R;
[ TX_R_52_R ;
    ResponseViaActivity(R_306_RESP_F);
];
Array TX_R_53 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_53_R;
[ TX_R_53_R ;
    ResponseViaActivity(R_306_RESP_G);
];
Array TX_R_54 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_54_R;
[ TX_R_54_R ;
    ResponseViaActivity(R_306_RESP_H);
];
Array TX_R_55 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_55_R;
[ TX_R_55_R ;
    ResponseViaActivity(R_306_RESP_I);
];
Array TX_R_56 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_56_R;
[ TX_R_56_R ;
    ResponseViaActivity(R_306_RESP_J);
];
Array TX_R_57 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_57_R;
[ TX_R_57_R ;
    ResponseViaActivity(R_306_RESP_K);
];
Array TX_R_58 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_58_R;
[ TX_R_58_R ;
    ResponseViaActivity(R_306_RESP_L);
];
Array TX_R_59 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_59_R;
[ TX_R_59_R ;
    ResponseViaActivity(R_306_RESP_M);
];
Array TX_R_60 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_60_R;
[ TX_R_60_R ;
    ResponseViaActivity(R_306_RESP_N);
];
Array TX_R_61 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_61_R;
[ TX_R_61_R ;
    ResponseViaActivity(R_306_RESP_O);
];
Array TX_R_62 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_62_R;
[ TX_R_62_R ;
    ResponseViaActivity(R_306_RESP_P);
];
Array TX_R_63 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_63_R;
[ TX_R_63_R ;
    ResponseViaActivity(R_306_RESP_Q);
];
Array TX_R_64 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_64_R;
[ TX_R_64_R ;
    ResponseViaActivity(R_306_RESP_R);
];
Array TX_R_65 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_65_R;
[ TX_R_65_R ;
    ResponseViaActivity(R_306_RESP_S);
];
Array TX_R_66 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_66_R;
[ TX_R_66_R ;
    ResponseViaActivity(R_306_RESP_T);
];
Array TX_R_67 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_67_R;
[ TX_R_67_R ;
    ResponseViaActivity(R_306_RESP_U);
];
Array TX_R_68 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_68_R;
[ TX_R_68_R ;
    ResponseViaActivity(R_306_RESP_V);
];
Array TX_R_69 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_69_R;
[ TX_R_69_R ;
    ResponseViaActivity(R_306_RESP_W);
];
Array TX_R_70 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_70_R;
[ TX_R_70_R ;
    ResponseViaActivity(R_306_RESP_X);
];
Array TX_R_71 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_71_R;
[ TX_R_71_R ;
    ResponseViaActivity(R_307_RESP_A);
];
[ PARSER_N_ERROR_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_71;
        'B': str = TX_R_72;
        'C': str = TX_R_73;
        'D': str = TX_R_74;
        'E': str = TX_R_75;
        'F': str = TX_R_76;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_72 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_72_R;
[ TX_R_72_R ;
    ResponseViaActivity(R_307_RESP_B);
];
Array TX_R_73 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_73_R;
[ TX_R_73_R ;
    ResponseViaActivity(R_307_RESP_C);
];
Array TX_R_74 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_74_R;
[ TX_R_74_R ;
    ResponseViaActivity(R_307_RESP_D);
];
Array TX_R_75 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_75_R;
[ TX_R_75_R ;
    ResponseViaActivity(R_307_RESP_E);
];
Array TX_R_76 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_76_R;
[ TX_R_76_R ;
    ResponseViaActivity(R_307_RESP_F);
];
Array TX_R_77 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_77_R;
[ TX_R_77_R ;
    ResponseViaActivity(R_308_RESP_A);
];
[ DARKNESS_NAME_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_77;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_78 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_78_R;
[ TX_R_78_R ;
    ResponseViaActivity(R_309_RESP_A);
];
[ PARSER_COMMAND_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_78;
        'B': str = TX_R_79;
        'C': str = TX_R_80;
        'D': str = TX_R_81;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_79 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_79_R;
[ TX_R_79_R ;
    ResponseViaActivity(R_309_RESP_B);
];
Array TX_R_80 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_80_R;
[ TX_R_80_R ;
    ResponseViaActivity(R_309_RESP_C);
];
Array TX_R_81 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_81_R;
[ TX_R_81_R ;
    ResponseViaActivity(R_309_RESP_D);
];
Array TX_R_82 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_82_R;
[ TX_R_82_R ;
    ResponseViaActivity(R_310_RESP_A);
];
[ PARSER_CLARIF_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_82;
        'B': str = TX_R_83;
        'C': str = TX_R_84;
        'D': str = TX_R_85;
        'E': str = TX_R_86;
        'F': str = TX_R_87;
        'G': str = TX_R_88;
        'H': str = TX_R_89;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_83 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_83_R;
[ TX_R_83_R ;
    ResponseViaActivity(R_310_RESP_B);
];
Array TX_R_84 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_84_R;
[ TX_R_84_R ;
    ResponseViaActivity(R_310_RESP_C);
];
Array TX_R_85 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_85_R;
[ TX_R_85_R ;
    ResponseViaActivity(R_310_RESP_D);
];
Array TX_R_86 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_86_R;
[ TX_R_86_R ;
    ResponseViaActivity(R_310_RESP_E);
];
Array TX_R_87 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_87_R;
[ TX_R_87_R ;
    ResponseViaActivity(R_310_RESP_F);
];
Array TX_R_88 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_88_R;
[ TX_R_88_R ;
    ResponseViaActivity(R_310_RESP_G);
];
Array TX_R_89 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_89_R;
[ TX_R_89_R ;
    ResponseViaActivity(R_310_RESP_H);
];
Array TX_R_90 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_90_R;
[ TX_R_90_R ;
    ResponseViaActivity(R_311_RESP_A);
];
[ YES_OR_NO_QUESTION_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_90;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_91 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_91_R;
[ TX_R_91_R ;
    ResponseViaActivity(R_312_RESP_A);
];
[ PRINT_PROTAGONIST_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_91;
        'B': str = TX_R_92;
        'C': str = TX_R_93;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_92 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_92_R;
[ TX_R_92_R ;
    ResponseViaActivity(R_312_RESP_B);
];
Array TX_R_93 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_93_R;
[ TX_R_93_R ;
    ResponseViaActivity(R_312_RESP_C);
];
Array TX_R_94 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_94_R;
[ TX_R_94_R ;
    ResponseViaActivity(R_315_RESP_A);
];
[ STANDARD_IMPLICIT_TAKING_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_94;
        'B': str = TX_R_95;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_95 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_95_R;
[ TX_R_95_R ;
    ResponseViaActivity(R_315_RESP_B);
];
Array TX_R_96 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_96_R;
[ TX_R_96_R ;
    ResponseViaActivity(R_317_RESP_A);
];
[ PRINT_OBITUARY_HEADLINE_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_96;
        'B': str = TX_R_97;
        'C': str = TX_R_98;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_97 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_97_R;
[ TX_R_97_R ;
    ResponseViaActivity(R_317_RESP_B);
];
Array TX_R_98 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_98_R;
[ TX_R_98_R ;
    ResponseViaActivity(R_317_RESP_C);
];
Array TX_R_99 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_99_R;
[ TX_R_99_R ;
    ResponseViaActivity(R_323_RESP_A);
];
[ IMMEDIATELY_UNDO_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_99;
        'B': str = TX_R_100;
        'C': str = TX_R_101;
        'D': str = TX_R_102;
        'E': str = TX_R_103;
        'F': str = TX_R_104;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_100 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_100_R;
[ TX_R_100_R ;
    ResponseViaActivity(R_323_RESP_B);
];
Array TX_R_101 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_101_R;
[ TX_R_101_R ;
    ResponseViaActivity(R_323_RESP_C);
];
Array TX_R_102 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_102_R;
[ TX_R_102_R ;
    ResponseViaActivity(R_323_RESP_D);
];
Array TX_R_103 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_103_R;
[ TX_R_103_R ;
    ResponseViaActivity(R_323_RESP_E);
];
Array TX_R_104 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_104_R;
[ TX_R_104_R ;
    ResponseViaActivity(R_323_RESP_F);
];
Array TX_R_105 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_105_R;
[ TX_R_105_R ;
    ResponseViaActivity(R_326_RESP_A);
];
[ QUIT_THE_GAME_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_105;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_106 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_106_R;
[ TX_R_106_R ;
    ResponseViaActivity(R_327_RESP_A);
];
[ SAVE_THE_GAME_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_106;
        'B': str = TX_R_107;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_107 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_107_R;
[ TX_R_107_R ;
    ResponseViaActivity(R_327_RESP_B);
];
Array TX_R_108 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_108_R;
[ TX_R_108_R ;
    ResponseViaActivity(R_328_RESP_A);
];
[ RESTORE_THE_GAME_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_108;
        'B': str = TX_R_109;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_109 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_109_R;
[ TX_R_109_R ;
    ResponseViaActivity(R_328_RESP_B);
];
Array TX_R_110 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_110_R;
[ TX_R_110_R ;
    ResponseViaActivity(R_329_RESP_A);
];
[ RESTART_THE_GAME_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_110;
        'B': str = TX_R_111;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_111 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_111_R;
[ TX_R_111_R ;
    ResponseViaActivity(R_329_RESP_B);
];
Array TX_R_112 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_112_R;
[ TX_R_112_R ;
    ResponseViaActivity(R_330_RESP_A);
];
[ VERIFY_THE_STORY_FILE_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_112;
        'B': str = TX_R_113;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_113 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_113_R;
[ TX_R_113_R ;
    ResponseViaActivity(R_330_RESP_B);
];
Array TX_R_114 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_114_R;
[ TX_R_114_R ;
    ResponseViaActivity(R_331_RESP_A);
];
[ SWITCH_TRANSCRIPT_ON_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_114;
        'B': str = TX_R_115;
        'C': str = TX_R_116;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_115 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_115_R;
[ TX_R_115_R ;
    ResponseViaActivity(R_331_RESP_B);
];
Array TX_R_116 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_116_R;
[ TX_R_116_R ;
    ResponseViaActivity(R_331_RESP_C);
];
Array TX_R_117 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_117_R;
[ TX_R_117_R ;
    ResponseViaActivity(R_332_RESP_A);
];
[ SWITCH_TRANSCRIPT_OFF_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_117;
        'B': str = TX_R_118;
        'C': str = TX_R_119;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_118 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_118_R;
[ TX_R_118_R ;
    ResponseViaActivity(R_332_RESP_B);
];
Array TX_R_119 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_119_R;
[ TX_R_119_R ;
    ResponseViaActivity(R_332_RESP_C);
];
Array TX_R_120 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_120_R;
[ TX_R_120_R ;
    ResponseViaActivity(R_334_RESP_A);
];
[ ANNOUNCE_SCORE_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_120;
        'B': str = TX_R_121;
        'C': str = TX_R_122;
        'D': str = TX_R_123;
        'E': str = TX_R_124;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_121 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_121_R;
[ TX_R_121_R ;
    ResponseViaActivity(R_334_RESP_B);
];
Array TX_R_122 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_122_R;
[ TX_R_122_R ;
    ResponseViaActivity(R_334_RESP_C);
];
Array TX_R_123 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_123_R;
[ TX_R_123_R ;
    ResponseViaActivity(R_334_RESP_D);
];
Array TX_R_124 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_124_R;
[ TX_R_124_R ;
    ResponseViaActivity(R_334_RESP_E);
];
Array TX_R_125 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_125_R;
[ TX_R_125_R ;
    ResponseViaActivity(R_336_RESP_A);
];
[ REP_PREFER_ABBREVIATED_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_125;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_126 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_126_R;
[ TX_R_126_R ;
    ResponseViaActivity(R_338_RESP_A);
];
[ REP_PREFER_UNABBREVIATED_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_126;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_127 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_127_R;
[ TX_R_127_R ;
    ResponseViaActivity(R_340_RESP_A);
];
[ REP_PREFER_SOMETIMES_ABBR_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_127;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_128 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_128_R;
[ TX_R_128_R ;
    ResponseViaActivity(R_342_RESP_A);
];
[ REP_SWITCH_NOTIFY_ON_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_128;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_129 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_129_R;
[ TX_R_129_R ;
    ResponseViaActivity(R_344_RESP_A);
];
[ REP_SWITCH_NOTIFY_OFF_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_129;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_130 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_130_R;
[ TX_R_130_R ;
    ResponseViaActivity(R_345_RESP_A);
];
[ ANNOUNCE_PRONOUN_MEANINGS_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_130;
        'B': str = TX_R_131;
        'C': str = TX_R_132;
        'D': str = TX_R_133;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_131 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_131_R;
[ TX_R_131_R ;
    ResponseViaActivity(R_345_RESP_B);
];
Array TX_R_132 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_132_R;
[ TX_R_132_R ;
    ResponseViaActivity(R_345_RESP_C);
];
Array TX_R_133 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_133_R;
[ TX_R_133_R ;
    ResponseViaActivity(R_345_RESP_D);
];
Array TX_R_134 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_134_R;
[ TX_R_134_R ;
    ResponseViaActivity(R_11_RESP_A);
];
Array TX_R_135 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_135_R;
[ TX_R_135_R ;
    ResponseViaActivity(R_39_RESP_A);
];
Array TX_R_136 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_136_R;
[ TX_R_136_R ;
    ResponseViaActivity(R_41_RESP_A);
];
Array TX_R_137 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_137_R;
[ TX_R_137_R ;
    ResponseViaActivity(R_41_RESP_B);
];
Array TX_R_138 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_138_R;
[ TX_R_138_R ;
    ResponseViaActivity(R_40_RESP_A);
];
Array TX_R_139 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_139_R;
[ TX_R_139_R ;
    ResponseViaActivity(R_42_RESP_A);
];
Array TX_R_140 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_140_R;
[ TX_R_140_R ;
    ResponseViaActivity(R_46_RESP_A);
];
Array TX_R_141 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_141_R;
[ TX_R_141_R ;
    ResponseViaActivity(R_46_RESP_B);
];
Array TX_R_142 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_142_R;
[ TX_R_142_R ;
    ResponseViaActivity(R_46_RESP_C);
];
Array TX_R_143 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_143_R;
[ TX_R_143_R ;
    ResponseViaActivity(R_46_RESP_D);
];
Array TX_R_144 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_144_R;
[ TX_R_144_R ;
    ResponseViaActivity(R_46_RESP_E);
];
Array TX_R_145 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_145_R;
[ TX_R_145_R ;
    ResponseViaActivity(R_46_RESP_F);
];
Array TX_R_146 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_146_R;
[ TX_R_146_R ;
    ResponseViaActivity(R_53_RESP_A);
];
Array TX_R_147 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_147_R;
[ TX_R_147_R ;
    ResponseViaActivity(R_55_RESP_A);
];
Array TX_R_148 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_148_R;
[ TX_R_148_R ;
    ResponseViaActivity(R_56_RESP_A);
];
Array TX_R_149 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_149_R;
[ TX_R_149_R ;
    ResponseViaActivity(R_57_RESP_A);
];
Array TX_R_150 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_150_R;
[ TX_R_150_R ;
    ResponseViaActivity(R_58_RESP_A);
];
Array TX_R_151 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_151_R;
[ TX_R_151_R ;
    ResponseViaActivity(R_59_RESP_A);
];
Array TX_R_152 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_152_R;
[ TX_R_152_R ;
    ResponseViaActivity(R_60_RESP_A);
];
Array TX_R_153 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_153_R;
[ TX_R_153_R ;
    ResponseViaActivity(R_61_RESP_A);
];
Array TX_R_154 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_154_R;
[ TX_R_154_R ;
    ResponseViaActivity(R_62_RESP_A);
];
Array TX_R_155 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_155_R;
[ TX_R_155_R ;
    ResponseViaActivity(R_63_RESP_A);
];
Array TX_R_156 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_156_R;
[ TX_R_156_R ;
    ResponseViaActivity(R_64_RESP_A);
];
Array TX_R_157 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_157_R;
[ TX_R_157_R ;
    ResponseViaActivity(R_65_RESP_A);
];
Array TX_R_158 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_158_R;
[ TX_R_158_R ;
    ResponseViaActivity(R_66_RESP_A);
];
Array TX_R_159 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_159_R;
[ TX_R_159_R ;
    ResponseViaActivity(R_67_RESP_A);
];
Array TX_R_160 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_160_R;
[ TX_R_160_R ;
    ResponseViaActivity(R_68_RESP_A);
];
Array TX_R_161 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_161_R;
[ TX_R_161_R ;
    ResponseViaActivity(R_69_RESP_A);
];
Array TX_R_162 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_162_R;
[ TX_R_162_R ;
    ResponseViaActivity(R_70_RESP_A);
];
Array TX_R_163 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_163_R;
[ TX_R_163_R ;
    ResponseViaActivity(R_71_RESP_A);
];
Array TX_R_164 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_164_R;
[ TX_R_164_R ;
    ResponseViaActivity(R_73_RESP_A);
];
Array TX_R_165 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_165_R;
[ TX_R_165_R ;
    ResponseViaActivity(R_73_RESP_B);
];
Array TX_R_166 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_166_R;
[ TX_R_166_R ;
    ResponseViaActivity(R_74_RESP_A);
];
Array TX_R_167 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_167_R;
[ TX_R_167_R ;
    ResponseViaActivity(R_75_RESP_A);
];
Array TX_R_168 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_168_R;
[ TX_R_168_R ;
    ResponseViaActivity(R_78_RESP_A);
];
Array TX_R_169 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_169_R;
[ TX_R_169_R ;
    ResponseViaActivity(R_77_RESP_A);
];
Array TX_R_170 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_170_R;
[ TX_R_170_R ;
    ResponseViaActivity(R_79_RESP_A);
];
Array TX_R_171 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_171_R;
[ TX_R_171_R ;
    ResponseViaActivity(R_80_RESP_A);
];
Array TX_R_172 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_172_R;
[ TX_R_172_R ;
    ResponseViaActivity(R_81_RESP_A);
];
Array TX_R_173 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_173_R;
[ TX_R_173_R ;
    ResponseViaActivity(R_82_RESP_A);
];
Array TX_R_174 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_174_R;
[ TX_R_174_R ;
    ResponseViaActivity(R_82_RESP_B);
];
Array TX_R_175 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_175_R;
[ TX_R_175_R ;
    ResponseViaActivity(R_84_RESP_A);
];
Array TX_R_176 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_176_R;
[ TX_R_176_R ;
    ResponseViaActivity(R_84_RESP_B);
];
Array TX_R_177 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_177_R;
[ TX_R_177_R ;
    ResponseViaActivity(R_87_RESP_A);
];
Array TX_R_178 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_178_R;
[ TX_R_178_R ;
    ResponseViaActivity(R_88_RESP_A);
];
Array TX_R_179 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_179_R;
[ TX_R_179_R ;
    ResponseViaActivity(R_89_RESP_A);
];
Array TX_R_180 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_180_R;
[ TX_R_180_R ;
    ResponseViaActivity(R_90_RESP_A);
];
Array TX_R_181 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_181_R;
[ TX_R_181_R ;
    ResponseViaActivity(R_92_RESP_A);
];
Array TX_R_182 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_182_R;
[ TX_R_182_R ;
    ResponseViaActivity(R_93_RESP_A);
];
Array TX_R_183 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_183_R;
[ TX_R_183_R ;
    ResponseViaActivity(R_96_RESP_A);
];
Array TX_R_184 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_184_R;
[ TX_R_184_R ;
    ResponseViaActivity(R_97_RESP_A);
];
Array TX_R_185 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_185_R;
[ TX_R_185_R ;
    ResponseViaActivity(R_98_RESP_A);
];
Array TX_R_186 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_186_R;
[ TX_R_186_R ;
    ResponseViaActivity(R_99_RESP_A);
];
Array TX_R_187 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_187_R;
[ TX_R_187_R ;
    ResponseViaActivity(R_100_RESP_A);
];
Array TX_R_188 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_188_R;
[ TX_R_188_R ;
    ResponseViaActivity(R_102_RESP_A);
];
Array TX_R_189 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_189_R;
[ TX_R_189_R ;
    ResponseViaActivity(R_103_RESP_A);
];
Array TX_R_190 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_190_R;
[ TX_R_190_R ;
    ResponseViaActivity(R_104_RESP_A);
];
Array TX_R_191 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_191_R;
[ TX_R_191_R ;
    ResponseViaActivity(R_105_RESP_A);
];
Array TX_R_192 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_192_R;
[ TX_R_192_R ;
    ResponseViaActivity(R_106_RESP_A);
];
Array TX_R_193 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_193_R;
[ TX_R_193_R ;
    ResponseViaActivity(R_109_RESP_A);
];
Array TX_R_194 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_194_R;
[ TX_R_194_R ;
    ResponseViaActivity(R_109_RESP_B);
];
Array TX_R_195 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_195_R;
[ TX_R_195_R ;
    ResponseViaActivity(R_111_RESP_A);
];
Array TX_R_196 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_196_R;
[ TX_R_196_R ;
    ResponseViaActivity(R_112_RESP_A);
];
Array TX_R_197 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_197_R;
[ TX_R_197_R ;
    ResponseViaActivity(R_112_RESP_B);
];
Array TX_R_198 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_198_R;
[ TX_R_198_R ;
    ResponseViaActivity(R_113_RESP_A);
];
Array TX_R_199 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_199_R;
[ TX_R_199_R ;
    ResponseViaActivity(R_114_RESP_A);
];
Array TX_R_200 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_200_R;
[ TX_R_200_R ;
    ResponseViaActivity(R_116_RESP_A);
];
Array TX_R_201 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_201_R;
[ TX_R_201_R ;
    ResponseViaActivity(R_116_RESP_B);
];
Array TX_R_202 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_202_R;
[ TX_R_202_R ;
    ResponseViaActivity(R_120_RESP_A);
];
Array TX_R_203 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_203_R;
[ TX_R_203_R ;
    ResponseViaActivity(R_120_RESP_B);
];
Array TX_R_204 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_204_R;
[ TX_R_204_R ;
    ResponseViaActivity(R_120_RESP_C);
];
Array TX_R_205 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_205_R;
[ TX_R_205_R ;
    ResponseViaActivity(R_120_RESP_D);
];
Array TX_R_206 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_206_R;
[ TX_R_206_R ;
    ResponseViaActivity(R_120_RESP_E);
];
Array TX_R_207 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_207_R;
[ TX_R_207_R ;
    ResponseViaActivity(R_120_RESP_F);
];
Array TX_R_208 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_208_R;
[ TX_R_208_R ;
    ResponseViaActivity(R_120_RESP_G);
];
Array TX_R_209 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_209_R;
[ TX_R_209_R ;
    ResponseViaActivity(R_120_RESP_H);
];
Array TX_R_210 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_210_R;
[ TX_R_210_R ;
    ResponseViaActivity(R_120_RESP_I);
];
Array TX_R_211 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_211_R;
[ TX_R_211_R ;
    ResponseViaActivity(R_120_RESP_J);
];
Array TX_R_212 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_212_R;
[ TX_R_212_R ;
    ResponseViaActivity(R_120_RESP_K);
];
Array TX_R_213 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_213_R;
[ TX_R_213_R ;
    ResponseViaActivity(R_120_RESP_L);
];
Array TX_R_214 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_214_R;
[ TX_R_214_R ;
    ResponseViaActivity(R_120_RESP_M);
];
Array TX_R_215 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_215_R;
[ TX_R_215_R ;
    ResponseViaActivity(R_120_RESP_N);
];
Array TX_R_216 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_216_R;
[ TX_R_216_R ;
    ResponseViaActivity(R_120_RESP_O);
];
Array TX_R_217 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_217_R;
[ TX_R_217_R ;
    ResponseViaActivity(R_120_RESP_P);
];
Array TX_R_218 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_218_R;
[ TX_R_218_R ;
    ResponseViaActivity(R_120_RESP_Q);
];
Array TX_R_219 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_219_R;
[ TX_R_219_R ;
    ResponseViaActivity(R_120_RESP_R);
];
Array TX_R_220 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_220_R;
[ TX_R_220_R ;
    ResponseViaActivity(R_120_RESP_S);
];
Array TX_R_221 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_221_R;
[ TX_R_221_R ;
    ResponseViaActivity(R_124_RESP_A);
];
Array TX_R_222 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_222_R;
[ TX_R_222_R ;
    ResponseViaActivity(R_124_RESP_B);
];
Array TX_R_223 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_223_R;
[ TX_R_223_R ;
    ResponseViaActivity(R_125_RESP_A);
];
Array TX_R_224 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_224_R;
[ TX_R_224_R ;
    ResponseViaActivity(R_125_RESP_B);
];
Array TX_R_225 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_225_R;
[ TX_R_225_R ;
    ResponseViaActivity(R_125_RESP_C);
];
Array TX_R_226 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_226_R;
[ TX_R_226_R ;
    ResponseViaActivity(R_125_RESP_D);
];
Array TX_R_227 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_227_R;
[ TX_R_227_R ;
    ResponseViaActivity(R_126_RESP_A);
];
Array TX_R_228 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_228_R;
[ TX_R_228_R ;
    ResponseViaActivity(R_127_RESP_A);
];
Array TX_R_229 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_229_R;
[ TX_R_229_R ;
    ResponseViaActivity(R_127_RESP_B);
];
Array TX_R_230 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_230_R;
[ TX_R_230_R ;
    ResponseViaActivity(R_128_RESP_A);
];
Array TX_R_231 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_231_R;
[ TX_R_231_R ;
    ResponseViaActivity(R_129_RESP_A);
];
Array TX_R_232 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_232_R;
[ TX_R_232_R ;
    ResponseViaActivity(R_129_RESP_B);
];
Array TX_R_233 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_233_R;
[ TX_R_233_R ;
    ResponseViaActivity(R_129_RESP_C);
];
Array TX_R_234 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_234_R;
[ TX_R_234_R ;
    ResponseViaActivity(R_129_RESP_D);
];
Array TX_R_235 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_235_R;
[ TX_R_235_R ;
    ResponseViaActivity(R_129_RESP_E);
];
Array TX_R_236 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_236_R;
[ TX_R_236_R ;
    ResponseViaActivity(R_131_RESP_A);
];
Array TX_R_237 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_237_R;
[ TX_R_237_R ;
    ResponseViaActivity(R_131_RESP_B);
];
Array TX_R_238 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_238_R;
[ TX_R_238_R ;
    ResponseViaActivity(R_131_RESP_C);
];
Array TX_R_239 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_239_R;
[ TX_R_239_R ;
    ResponseViaActivity(R_131_RESP_D);
];
Array TX_R_240 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_240_R;
[ TX_R_240_R ;
    ResponseViaActivity(R_134_RESP_A);
];
Array TX_R_241 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_241_R;
[ TX_R_241_R ;
    ResponseViaActivity(R_135_RESP_A);
];
Array TX_R_242 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_242_R;
[ TX_R_242_R ;
    ResponseViaActivity(R_138_RESP_A);
];
Array TX_R_243 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_243_R;
[ TX_R_243_R ;
    ResponseViaActivity(R_138_RESP_B);
];
Array TX_R_244 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_244_R;
[ TX_R_244_R ;
    ResponseViaActivity(R_138_RESP_C);
];
Array TX_R_245 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_245_R;
[ TX_R_245_R ;
    ResponseViaActivity(R_140_RESP_A);
];
Array TX_R_246 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_246_R;
[ TX_R_246_R ;
    ResponseViaActivity(R_142_RESP_A);
];
Array TX_R_247 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_247_R;
[ TX_R_247_R ;
    ResponseViaActivity(R_146_RESP_A);
];
Array TX_R_248 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_248_R;
[ TX_R_248_R ;
    ResponseViaActivity(R_146_RESP_B);
];
Array TX_R_249 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_249_R;
[ TX_R_249_R ;
    ResponseViaActivity(R_146_RESP_C);
];
Array TX_R_250 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_250_R;
[ TX_R_250_R ;
    ResponseViaActivity(R_147_RESP_A);
];
Array TX_R_251 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_251_R;
[ TX_R_251_R ;
    ResponseViaActivity(R_150_RESP_A);
];
Array TX_R_252 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_252_R;
[ TX_R_252_R ;
    ResponseViaActivity(R_152_RESP_A);
];
Array TX_R_253 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_253_R;
[ TX_R_253_R ;
    ResponseViaActivity(R_153_RESP_A);
];
Array TX_R_254 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_254_R;
[ TX_R_254_R ;
    ResponseViaActivity(R_153_RESP_B);
];
Array TX_R_255 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_255_R;
[ TX_R_255_R ;
    ResponseViaActivity(R_154_RESP_A);
];
Array TX_R_256 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_256_R;
[ TX_R_256_R ;
    ResponseViaActivity(R_155_RESP_A);
];
Array TX_R_257 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_257_R;
[ TX_R_257_R ;
    ResponseViaActivity(R_156_RESP_A);
];
Array TX_R_258 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_258_R;
[ TX_R_258_R ;
    ResponseViaActivity(R_157_RESP_A);
];
Array TX_R_259 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_259_R;
[ TX_R_259_R ;
    ResponseViaActivity(R_158_RESP_A);
];
Array TX_R_260 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_260_R;
[ TX_R_260_R ;
    ResponseViaActivity(R_159_RESP_A);
];
Array TX_R_261 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_261_R;
[ TX_R_261_R ;
    ResponseViaActivity(R_160_RESP_A);
];
Array TX_R_262 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_262_R;
[ TX_R_262_R ;
    ResponseViaActivity(R_161_RESP_A);
];
Array TX_R_263 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_263_R;
[ TX_R_263_R ;
    ResponseViaActivity(R_162_RESP_A);
];
Array TX_R_264 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_264_R;
[ TX_R_264_R ;
    ResponseViaActivity(R_162_RESP_B);
];
Array TX_R_265 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_265_R;
[ TX_R_265_R ;
    ResponseViaActivity(R_163_RESP_A);
];
Array TX_R_266 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_266_R;
[ TX_R_266_R ;
    ResponseViaActivity(R_163_RESP_B);
];
Array TX_R_267 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_267_R;
[ TX_R_267_R ;
    ResponseViaActivity(R_164_RESP_A);
];
Array TX_R_268 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_268_R;
[ TX_R_268_R ;
    ResponseViaActivity(R_165_RESP_A);
];
Array TX_R_269 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_269_R;
[ TX_R_269_R ;
    ResponseViaActivity(R_165_RESP_B);
];
Array TX_R_270 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_270_R;
[ TX_R_270_R ;
    ResponseViaActivity(R_166_RESP_A);
];
Array TX_R_271 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_271_R;
[ TX_R_271_R ;
    ResponseViaActivity(R_167_RESP_A);
];
Array TX_R_272 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_272_R;
[ TX_R_272_R ;
    ResponseViaActivity(R_168_RESP_A);
];
Array TX_R_273 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_273_R;
[ TX_R_273_R ;
    ResponseViaActivity(R_169_RESP_A);
];
Array TX_R_274 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_274_R;
[ TX_R_274_R ;
    ResponseViaActivity(R_171_RESP_A);
];
Array TX_R_275 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_275_R;
[ TX_R_275_R ;
    ResponseViaActivity(R_171_RESP_B);
];
Array TX_R_276 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_276_R;
[ TX_R_276_R ;
    ResponseViaActivity(R_172_RESP_A);
];
Array TX_R_277 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_277_R;
[ TX_R_277_R ;
    ResponseViaActivity(R_173_RESP_A);
];
Array TX_R_278 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_278_R;
[ TX_R_278_R ;
    ResponseViaActivity(R_174_RESP_A);
];
Array TX_R_279 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_279_R;
[ TX_R_279_R ;
    ResponseViaActivity(R_176_RESP_A);
];
Array TX_R_280 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_280_R;
[ TX_R_280_R ;
    ResponseViaActivity(R_176_RESP_B);
];
Array TX_R_281 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_281_R;
[ TX_R_281_R ;
    ResponseViaActivity(R_177_RESP_A);
];
Array TX_R_282 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_282_R;
[ TX_R_282_R ;
    ResponseViaActivity(R_178_RESP_A);
];
Array TX_R_283 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_283_R;
[ TX_R_283_R ;
    ResponseViaActivity(R_180_RESP_A);
];
Array TX_R_284 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_284_R;
[ TX_R_284_R ;
    ResponseViaActivity(R_181_RESP_A);
];
Array TX_R_285 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_285_R;
[ TX_R_285_R ;
    ResponseViaActivity(R_182_RESP_A);
];
Array TX_R_286 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_286_R;
[ TX_R_286_R ;
    ResponseViaActivity(R_184_RESP_A);
];
Array TX_R_287 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_287_R;
[ TX_R_287_R ;
    ResponseViaActivity(R_185_RESP_A);
];
Array TX_R_288 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_288_R;
[ TX_R_288_R ;
    ResponseViaActivity(R_186_RESP_A);
];
Array TX_R_289 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_289_R;
[ TX_R_289_R ;
    ResponseViaActivity(R_187_RESP_A);
];
Array TX_R_290 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_290_R;
[ TX_R_290_R ;
    ResponseViaActivity(R_189_RESP_A);
];
Array TX_R_291 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_291_R;
[ TX_R_291_R ;
    ResponseViaActivity(R_190_RESP_A);
];
Array TX_R_292 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_292_R;
[ TX_R_292_R ;
    ResponseViaActivity(R_190_RESP_B);
];
Array TX_R_293 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_293_R;
[ TX_R_293_R ;
    ResponseViaActivity(R_190_RESP_C);
];
Array TX_R_294 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_294_R;
[ TX_R_294_R ;
    ResponseViaActivity(R_191_RESP_A);
];
Array TX_R_295 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_295_R;
[ TX_R_295_R ;
    ResponseViaActivity(R_192_RESP_A);
];
Array TX_R_296 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_296_R;
[ TX_R_296_R ;
    ResponseViaActivity(R_194_RESP_A);
];
Array TX_R_297 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_297_R;
[ TX_R_297_R ;
    ResponseViaActivity(R_194_RESP_B);
];
Array TX_R_298 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_298_R;
[ TX_R_298_R ;
    ResponseViaActivity(R_194_RESP_C);
];
Array TX_R_299 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_299_R;
[ TX_R_299_R ;
    ResponseViaActivity(R_195_RESP_A);
];
Array TX_R_300 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_300_R;
[ TX_R_300_R ;
    ResponseViaActivity(R_196_RESP_A);
];
Array TX_R_301 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_301_R;
[ TX_R_301_R ;
    ResponseViaActivity(R_197_RESP_A);
];
Array TX_R_302 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_302_R;
[ TX_R_302_R ;
    ResponseViaActivity(R_199_RESP_A);
];
Array TX_R_303 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_303_R;
[ TX_R_303_R ;
    ResponseViaActivity(R_199_RESP_B);
];
Array TX_R_304 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_304_R;
[ TX_R_304_R ;
    ResponseViaActivity(R_200_RESP_A);
];
Array TX_R_305 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_305_R;
[ TX_R_305_R ;
    ResponseViaActivity(R_201_RESP_A);
];
Array TX_R_306 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_306_R;
[ TX_R_306_R ;
    ResponseViaActivity(R_203_RESP_A);
];
Array TX_R_307 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_307_R;
[ TX_R_307_R ;
    ResponseViaActivity(R_203_RESP_B);
];
Array TX_R_308 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_308_R;
[ TX_R_308_R ;
    ResponseViaActivity(R_204_RESP_A);
];
Array TX_R_309 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_309_R;
[ TX_R_309_R ;
    ResponseViaActivity(R_205_RESP_A);
];
Array TX_R_310 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_310_R;
[ TX_R_310_R ;
    ResponseViaActivity(R_206_RESP_A);
];
Array TX_R_311 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_311_R;
[ TX_R_311_R ;
    ResponseViaActivity(R_207_RESP_A);
];
Array TX_R_312 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_312_R;
[ TX_R_312_R ;
    ResponseViaActivity(R_208_RESP_A);
];
Array TX_R_313 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_313_R;
[ TX_R_313_R ;
    ResponseViaActivity(R_209_RESP_A);
];
Array TX_R_314 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_314_R;
[ TX_R_314_R ;
    ResponseViaActivity(R_211_RESP_A);
];
Array TX_R_315 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_315_R;
[ TX_R_315_R ;
    ResponseViaActivity(R_211_RESP_B);
];
Array TX_R_316 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_316_R;
[ TX_R_316_R ;
    ResponseViaActivity(R_211_RESP_C);
];
Array TX_R_317 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_317_R;
[ TX_R_317_R ;
    ResponseViaActivity(R_212_RESP_A);
];
Array TX_R_318 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_318_R;
[ TX_R_318_R ;
    ResponseViaActivity(R_214_RESP_A);
];
Array TX_R_319 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_319_R;
[ TX_R_319_R ;
    ResponseViaActivity(R_215_RESP_A);
];
Array TX_R_320 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_320_R;
[ TX_R_320_R ;
    ResponseViaActivity(R_216_RESP_A);
];
Array TX_R_321 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_321_R;
[ TX_R_321_R ;
    ResponseViaActivity(R_217_RESP_A);
];
Array TX_R_322 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_322_R;
[ TX_R_322_R ;
    ResponseViaActivity(R_218_RESP_A);
];
Array TX_R_323 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_323_R;
[ TX_R_323_R ;
    ResponseViaActivity(R_219_RESP_A);
];
Array TX_R_324 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_324_R;
[ TX_R_324_R ;
    ResponseViaActivity(R_220_RESP_A);
];
Array TX_R_325 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_325_R;
[ TX_R_325_R ;
    ResponseViaActivity(R_221_RESP_A);
];
Array TX_R_326 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_326_R;
[ TX_R_326_R ;
    ResponseViaActivity(R_222_RESP_A);
];
Array TX_R_327 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_327_R;
[ TX_R_327_R ;
    ResponseViaActivity(R_223_RESP_A);
];
Array TX_R_328 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_328_R;
[ TX_R_328_R ;
    ResponseViaActivity(R_224_RESP_A);
];
Array TX_R_329 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_329_R;
[ TX_R_329_R ;
    ResponseViaActivity(R_225_RESP_A);
];
Array TX_R_330 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_330_R;
[ TX_R_330_R ;
    ResponseViaActivity(R_228_RESP_A);
];
Array TX_R_331 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_331_R;
[ TX_R_331_R ;
    ResponseViaActivity(R_228_RESP_B);
];
Array TX_R_332 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_332_R;
[ TX_R_332_R ;
    ResponseViaActivity(R_229_RESP_A);
];
Array TX_R_333 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_333_R;
[ TX_R_333_R ;
    ResponseViaActivity(R_229_RESP_B);
];
Array TX_R_334 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_334_R;
[ TX_R_334_R ;
    ResponseViaActivity(R_230_RESP_A);
];
Array TX_R_335 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_335_R;
[ TX_R_335_R ;
    ResponseViaActivity(R_230_RESP_B);
];
Array TX_R_336 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_336_R;
[ TX_R_336_R ;
    ResponseViaActivity(R_230_RESP_C);
];
Array TX_R_337 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_337_R;
[ TX_R_337_R ;
    ResponseViaActivity(R_231_RESP_A);
];
Array TX_R_338 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_338_R;
[ TX_R_338_R ;
    ResponseViaActivity(R_231_RESP_B);
];
Array TX_R_339 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_339_R;
[ TX_R_339_R ;
    ResponseViaActivity(R_232_RESP_A);
];
Array TX_R_340 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_340_R;
[ TX_R_340_R ;
    ResponseViaActivity(R_233_RESP_A);
];
Array TX_R_341 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_341_R;
[ TX_R_341_R ;
    ResponseViaActivity(R_233_RESP_B);
];
Array TX_R_342 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_342_R;
[ TX_R_342_R ;
    ResponseViaActivity(R_234_RESP_A);
];
Array TX_R_343 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_343_R;
[ TX_R_343_R ;
    ResponseViaActivity(R_235_RESP_A);
];
Array TX_R_344 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_344_R;
[ TX_R_344_R ;
    ResponseViaActivity(R_236_RESP_A);
];
Array TX_R_345 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_345_R;
[ TX_R_345_R ;
    ResponseViaActivity(R_237_RESP_A);
];
Array TX_R_346 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_346_R;
[ TX_R_346_R ;
    ResponseViaActivity(R_237_RESP_B);
];
Array TX_R_347 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_347_R;
[ TX_R_347_R ;
    ResponseViaActivity(R_238_RESP_A);
];
Array TX_R_348 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_348_R;
[ TX_R_348_R ;
    ResponseViaActivity(R_239_RESP_A);
];
Array TX_R_349 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_349_R;
[ TX_R_349_R ;
    ResponseViaActivity(R_240_RESP_A);
];
Array TX_R_350 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_350_R;
[ TX_R_350_R ;
    ResponseViaActivity(R_241_RESP_A);
];
Array TX_R_351 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_351_R;
[ TX_R_351_R ;
    ResponseViaActivity(R_241_RESP_B);
];
Array TX_R_352 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_352_R;
[ TX_R_352_R ;
    ResponseViaActivity(R_242_RESP_A);
];
Array TX_R_353 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_353_R;
[ TX_R_353_R ;
    ResponseViaActivity(R_243_RESP_A);
];
Array TX_R_354 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_354_R;
[ TX_R_354_R ;
    ResponseViaActivity(R_244_RESP_A);
];
Array TX_R_355 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_355_R;
[ TX_R_355_R ;
    ResponseViaActivity(R_245_RESP_A);
];
Array TX_R_356 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_356_R;
[ TX_R_356_R ;
    ResponseViaActivity(R_245_RESP_B);
];
Array TX_R_357 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_357_R;
[ TX_R_357_R ;
    ResponseViaActivity(R_246_RESP_A);
];
Array TX_R_358 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_358_R;
[ TX_R_358_R ;
    ResponseViaActivity(R_247_RESP_A);
];
Array TX_R_359 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_359_R;
[ TX_R_359_R ;
    ResponseViaActivity(R_248_RESP_A);
];
Array TX_R_360 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_360_R;
[ TX_R_360_R ;
    ResponseViaActivity(R_249_RESP_A);
];
Array TX_R_361 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_361_R;
[ TX_R_361_R ;
    ResponseViaActivity(R_251_RESP_A);
];
Array TX_R_362 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_362_R;
[ TX_R_362_R ;
    ResponseViaActivity(R_252_RESP_A);
];
Array TX_R_363 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_363_R;
[ TX_R_363_R ;
    ResponseViaActivity(R_253_RESP_A);
];
Array TX_R_364 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_364_R;
[ TX_R_364_R ;
    ResponseViaActivity(R_253_RESP_B);
];
Array TX_R_365 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_365_R;
[ TX_R_365_R ;
    ResponseViaActivity(R_254_RESP_A);
];
Array TX_R_366 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_366_R;
[ TX_R_366_R ;
    ResponseViaActivity(R_255_RESP_A);
];
Array TX_R_367 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_367_R;
[ TX_R_367_R ;
    ResponseViaActivity(R_256_RESP_A);
];
Array TX_R_368 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_368_R;
[ TX_R_368_R ;
    ResponseViaActivity(R_257_RESP_A);
];
Array TX_R_369 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_369_R;
[ TX_R_369_R ;
    ResponseViaActivity(R_258_RESP_A);
];
Array TX_R_370 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_370_R;
[ TX_R_370_R ;
    ResponseViaActivity(R_259_RESP_A);
];
Array TX_R_371 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_371_R;
[ TX_R_371_R ;
    ResponseViaActivity(R_259_RESP_B);
];
Array TX_R_372 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_372_R;
[ TX_R_372_R ;
    ResponseViaActivity(R_260_RESP_A);
];
Array TX_R_373 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_373_R;
[ TX_R_373_R ;
    ResponseViaActivity(R_260_RESP_B);
];
Array TX_R_374 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_374_R;
[ TX_R_374_R ;
    ResponseViaActivity(R_261_RESP_A);
];
Array TX_R_375 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_375_R;
[ TX_R_375_R ;
    ResponseViaActivity(R_261_RESP_B);
];
Array TX_R_376 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_376_R;
[ TX_R_376_R ;
    ResponseViaActivity(R_262_RESP_A);
];
Array TX_R_377 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_377_R;
[ TX_R_377_R ;
    ResponseViaActivity(R_263_RESP_A);
];
Array TX_R_378 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_378_R;
[ TX_R_378_R ;
    ResponseViaActivity(R_263_RESP_B);
];
Array TX_R_379 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_379_R;
[ TX_R_379_R ;
    ResponseViaActivity(R_264_RESP_A);
];
Array TX_R_380 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_380_R;
[ TX_R_380_R ;
    ResponseViaActivity(R_265_RESP_A);
];
Array TX_R_381 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_381_R;
[ TX_R_381_R ;
    ResponseViaActivity(R_266_RESP_A);
];
Array TX_R_382 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_382_R;
[ TX_R_382_R ;
    ResponseViaActivity(R_267_RESP_A);
];
Array TX_R_383 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_383_R;
[ TX_R_383_R ;
    ResponseViaActivity(R_268_RESP_A);
];
Array TX_R_384 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_384_R;
[ TX_R_384_R ;
    ResponseViaActivity(R_269_RESP_A);
];
Array TX_R_385 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_385_R;
[ TX_R_385_R ;
    ResponseViaActivity(R_269_RESP_B);
];
Array TX_R_386 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_386_R;
[ TX_R_386_R ;
    ResponseViaActivity(R_270_RESP_A);
];
Array TX_R_387 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_387_R;
[ TX_R_387_R ;
    ResponseViaActivity(R_271_RESP_A);
];
Array TX_R_388 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_388_R;
[ TX_R_388_R ;
    ResponseViaActivity(R_271_RESP_B);
];
Array TX_R_389 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_389_R;
[ TX_R_389_R ;
    ResponseViaActivity(R_272_RESP_A);
];
Array TX_R_390 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_390_R;
[ TX_R_390_R ;
    ResponseViaActivity(R_273_RESP_A);
];
Array TX_R_391 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_391_R;
[ TX_R_391_R ;
    ResponseViaActivity(R_274_RESP_A);
];
[ R_TX_S_134 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if toasted]A piece of toast - scrumptious![else]A slice of bread.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if toasted]A piece of toast - scrumptious![else]A slice of bread.[end if]~]
    say__p=1;! [2: if toasted]

    	if (~~(((((Adj_90_t1_v10(self))))))) jump L_Say768;! [3: ~A piece of toast - scrumptious!~]
    ParaContent(); print "A piece of toast - scrumptious!";! [4: else]

    	jump L_SayX764; .L_Say768;! [5: ~A slice of bread.~]
    ParaContent(); print "A slice of bread.";! [6: end if]

    	.L_Say769; .L_SayX764; .L_Say770; .L_SayX765;rtrue;
];
[ R_TX_S_135 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You look like you could be in a cartoon. You're wearing [a list of things worn by the player].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You look like you could be in a cartoon. You're wearing [a list of things worn by the player].~]
    say__p=1;! [2: ~You look like you could be in a cartoon. You're wearing ~]
    ParaContent(); print "You look like you could be in a cartoon. You're wearing ";! [3: a list of things worn by the player]
    ParaContent(); objectloop(tmp_0 ofclass Object)
    			if (((tmp_0 ofclass K2_thing) && (player == WearerOf(tmp_0))))
    				give tmp_0 workflag2;
    			else
    				give tmp_0 ~workflag2;
    		WriteListOfMarkedObjects(ENGLISH_BIT);! [4: ~.~]
    ParaContent(); print "."; .L_Say771; .L_SayX766;rtrue;
];
[ R_TX_S_136 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~This tutorial has lots of built-in help on how to play text adventures. To read more, type [help-style]help[/help-style] followed by whatever it is you want to get help on, and then hit enter[if not visited]. For example, you can type [help-style]help basics[/help-style] to see the most important IF commands[end if].[para]Topics you can get help on:
    [para][help-style]help basics[/help-style]: The most important IF commands
    [br][help-style]help commands[/help-style]: Some more common commands
    [br][help-style]help talking[/help-style]: Commands for talking to other characters
    [br][help-style]help system[/help-style]: Saving and loading games, quitting, and other system commands
    [br][help-style]help special[/help-style]: Useful odds and ends (which may work differently in different games)
    [br][help-style]help strategy[/help-style]: Figuring out what to do, when you're stuck
    [para][game-specific help]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~This tutorial has lots of built-in help on how to play text adventures. To read more, type [help-style]help[/help-style] followed by whatever it is you want to get help on, and then hit enter[if not visited]. For example, you can type [help-style]help basics[/help-style] to see the most important IF commands[end if].[para]Topics you can get help on: [para][help-style]help basics[/help-style]: The most important IF commands [br][help-style]help commands[/help-style]: Some more common commands [br][help-style]help talking[/help-style]: Commands for talking to other characters [br][help-style]help system[/help-style]: Saving and loading games, quitting, and other system commands [br][help-style]help special[/help-style]: Useful odds and ends (which may work differently in different games) [br][help-style]help strategy[/help-style]: Figuring out what to do, when you're stuck [para][game-specific help]~]
    say__p=1;! [2: ~This tutorial has lots of built-in help on how to play text adventures. To read more, type ~]
    ParaContent(); print "This tutorial has lots of built-in help on how to play text adventures. To read more, type ";! [3: help-style]
    ParaContent(); print "~"; style bold;! [4: ~help~]
    ParaContent(); print "help";! [5: /help-style]
    ParaContent(); style roman; print "~";! [6: ~ followed by whatever it is you want to get help on, and then hit enter~]
    ParaContent(); print " followed by whatever it is you want to get help on, and then hit enter";! [7: if not visited]

    	if (~~((((~~((Adj_51_t1_v10(self)))))))) jump L_Say772;! [8: ~. For example, you can type ~]
    ParaContent(); print ". For example, you can type ";! [9: help-style]
    ParaContent(); print "~"; style bold;! [10: ~help basics~]
    ParaContent(); print "help basics";! [11: /help-style]
    ParaContent(); style roman; print "~";! [12: ~ to see the most important IF commands~]
    ParaContent(); print " to see the most important IF commands";! [13: end if]

    	.L_Say772; .L_SayX767;! [14: ~.~]
    ParaContent(); print ".";! [15: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [16: ~Topics you can get help on: ~]
    ParaContent(); print "Topics you can get help on: ";! [17: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [18: help-style]
    ParaContent(); print "~"; style bold;! [19: ~help basics~]
    ParaContent(); print "help basics";! [20: /help-style]
    ParaContent(); style roman; print "~";! [21: ~: The most important IF commands ~]
    ParaContent(); print ": The most important IF commands ";! [22: br]
    ParaContent(); new_line;! [23: help-style]
    ParaContent(); print "~"; style bold;! [24: ~help commands~]
    ParaContent(); print "help commands";! [25: /help-style]
    ParaContent(); style roman; print "~";! [26: ~: Some more common commands ~]
    ParaContent(); print ": Some more common commands ";! [27: br]
    ParaContent(); new_line;! [28: help-style]
    ParaContent(); print "~"; style bold;! [29: ~help talking~]
    ParaContent(); print "help talking";! [30: /help-style]
    ParaContent(); style roman; print "~";! [31: ~: Commands for talking to other characters ~]
    ParaContent(); print ": Commands for talking to other characters ";! [32: br]
    ParaContent(); new_line;! [33: help-style]
    ParaContent(); print "~"; style bold;! [34: ~help system~]
    ParaContent(); print "help system";! [35: /help-style]
    ParaContent(); style roman; print "~";! [36: ~: Saving and loading games, quitting, and other system commands ~]
    ParaContent(); print ": Saving and loading games, quitting, and other system commands ";! [37: br]
    ParaContent(); new_line;! [38: help-style]
    ParaContent(); print "~"; style bold;! [39: ~help special~]
    ParaContent(); print "help special";! [40: /help-style]
    ParaContent(); style roman; print "~";! [41: ~: Useful odds and ends (which may work differently in different games) ~]
    ParaContent(); print ": Useful odds and ends (which may work differently in different games) ";! [42: br]
    ParaContent(); new_line;! [43: help-style]
    ParaContent(); print "~"; style bold;! [44: ~help strategy~]
    ParaContent(); print "help strategy";! [45: /help-style]
    ParaContent(); style roman; print "~";! [46: ~: Figuring out what to do, when you're stuck ~]
    ParaContent(); print ": Figuring out what to do, when you're stuck ";! [47: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [48: game-specific help]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(OBJECT_TY, self=self,p15_game_specific_help);@pull self;  .L_Say773; .L_SayX768;rtrue;
];
[ R_TX_S_137 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~All of these topics are [italic type]general[roman type] information on playing IF. If you are stuck on a particular puzzle in [italic type][story title][roman type], you're on your own.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~All of these topics are [italic type]general[roman type] information on playing IF. If you are stuck on a particular puzzle in [italic type][story title][roman type], you're on your own.~]
    say__p=1;! [2: ~All of these topics are ~]
    ParaContent(); print "All of these topics are ";! [3: italic type]
    ParaContent(); style underline;! [4: ~general~]
    ParaContent(); print "general";! [5: roman type]
    ParaContent(); style roman;! [6: ~ information on playing IF. If you are stuck on a particular puzzle in ~]
    ParaContent(); print " information on playing IF. If you are stuck on a particular puzzle in ";! [7: italic type]
    ParaContent(); style underline;! [8: story title]
    ParaContent(); print (TEXT_TY_Say) TX_L_2;! [9: roman type]
    ParaContent(); style roman;! [10: ~, you're on your own.~]
    ParaContent(); print ", you're on your own."; .L_Say774; .L_SayX769;rtrue;
];
[ R_TX_S_138 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~These are the commands you will use most often.
    [para][help-style]look[/help-style] or [help-style]l[/help-style]: Look around the room -- repeat the description of everything you see.
    [br][help-style]examine[/help-style] or [help-style]x[/help-style]: Look more closely at something -- learn more about it.
    [br][help-style]inventory[/help-style] or [help-style]i[/help-style]: List everything you're carrying.
    [br][help-style]north[/help-style], [help-style]south[/help-style], [help-style]east[/help-style], [help-style]west[/help-style], etc., or [help-style]n[/help-style], [help-style]s[/help-style], [help-style]e[/help-style], [help-style]w[/help-style], etc.: Walk in some direction.
    [para]For more about these commands -- or any command used in this game -- type [help-style]help[/help-style] followed by the command word. For example, [help-style]help look[/help-style][if not visited]. You might want to start by looking at the help information for all of these basic commands.[para]For even more help topics and commands, just type [help-style]help[/help-style][end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~These are the commands you will use most often. [para][help-style]look[/help-style] or [help-style]l[/help-style]: Look around the room -- repeat the description of everything you see. [br][help-style]examine[/help-style] or [help-style]x[/help-style]: Look more closely at something -- learn more about it. [br][help-style]inventory[/help-style] or [help-style]i[/help-style]: List everything you're carrying. [br][help-style]north[/help-style], [help-style]south[/help-style], [help-style]east[/help-style], [help-style]west[/help-style], etc., or [help-style]n[/help-style], [help-style]s[/help-style], [help-style]e[/help-style], [help-style]w[/help-style], etc.: Walk in some direction. [para]For more about these commands -- or any command used in this game -- type [help-style]help[/help-style] followed by the command word. For example, [help-style]help look[/help-style][if not visited]. You might want to start by looking at the help information for all of these basic commands.[para]For even more help topics and commands, just type [help-style]help[/help-style][end if].~]
    say__p=1;! [2: ~These are the commands you will use most often. ~]
    ParaContent(); print "These are the commands you will use most often. ";! [3: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [4: help-style]
    ParaContent(); print "~"; style bold;! [5: ~look~]
    ParaContent(); print "look";! [6: /help-style]
    ParaContent(); style roman; print "~";! [7: ~ or ~]
    ParaContent(); print " or ";! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~l~]
    ParaContent(); print "l";! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~: Look around the room -- repeat the description of everything you see. ~]
    ParaContent(); print ": Look around the room -- repeat the description of everything you see. ";! [12: br]
    ParaContent(); new_line;! [13: help-style]
    ParaContent(); print "~"; style bold;! [14: ~examine~]
    ParaContent(); print "examine";! [15: /help-style]
    ParaContent(); style roman; print "~";! [16: ~ or ~]
    ParaContent(); print " or ";! [17: help-style]
    ParaContent(); print "~"; style bold;! [18: ~x~]
    ParaContent(); print "x";! [19: /help-style]
    ParaContent(); style roman; print "~";! [20: ~: Look more closely at something -- learn more about it. ~]
    ParaContent(); print ": Look more closely at something -- learn more about it. ";! [21: br]
    ParaContent(); new_line;! [22: help-style]
    ParaContent(); print "~"; style bold;! [23: ~inventory~]
    ParaContent(); print "inventory";! [24: /help-style]
    ParaContent(); style roman; print "~";! [25: ~ or ~]
    ParaContent(); print " or ";! [26: help-style]
    ParaContent(); print "~"; style bold;! [27: ~i~]
    ParaContent(); print "i";! [28: /help-style]
    ParaContent(); style roman; print "~";! [29: ~: List everything you're carrying. ~]
    ParaContent(); print ": List everything you're carrying. ";! [30: br]
    ParaContent(); new_line;! [31: help-style]
    ParaContent(); print "~"; style bold;! [32: ~north~]
    ParaContent(); print "north";! [33: /help-style]
    ParaContent(); style roman; print "~";! [34: ~, ~]
    ParaContent(); print ", ";! [35: help-style]
    ParaContent(); print "~"; style bold;! [36: ~south~]
    ParaContent(); print "south";! [37: /help-style]
    ParaContent(); style roman; print "~";! [38: ~, ~]
    ParaContent(); print ", ";! [39: help-style]
    ParaContent(); print "~"; style bold;! [40: ~east~]
    ParaContent(); print "east";! [41: /help-style]
    ParaContent(); style roman; print "~";! [42: ~, ~]
    ParaContent(); print ", ";! [43: help-style]
    ParaContent(); print "~"; style bold;! [44: ~west~]
    ParaContent(); print "west";! [45: /help-style]
    ParaContent(); style roman; print "~";! [46: ~, etc., or ~]
    ParaContent(); print ", etc., or ";! [47: help-style]
    ParaContent(); print "~"; style bold;! [48: ~n~]
    ParaContent(); print "n";! [49: /help-style]
    ParaContent(); style roman; print "~";! [50: ~, ~]
    ParaContent(); print ", ";! [51: help-style]
    ParaContent(); print "~"; style bold;! [52: ~s~]
    ParaContent(); print "s";! [53: /help-style]
    ParaContent(); style roman; print "~";! [54: ~, ~]
    ParaContent(); print ", ";! [55: help-style]
    ParaContent(); print "~"; style bold;! [56: ~e~]
    ParaContent(); print "e";! [57: /help-style]
    ParaContent(); style roman; print "~";! [58: ~, ~]
    ParaContent(); print ", ";! [59: help-style]
    ParaContent(); print "~"; style bold;! [60: ~w~]
    ParaContent(); print "w";! [61: /help-style]
    ParaContent(); style roman; print "~";! [62: ~, etc.: Walk in some direction. ~]
    ParaContent(); print ", etc.: Walk in some direction. ";! [63: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [64: ~For more about these commands -- or any command used in this game -- type ~]
    ParaContent(); print "For more about these commands -- or any command used in this game -- type ";! [65: help-style]
    ParaContent(); print "~"; style bold;! [66: ~help~]
    ParaContent(); print "help";! [67: /help-style]
    ParaContent(); style roman; print "~";! [68: ~ followed by the command word. For example, ~]
    ParaContent(); print " followed by the command word. For example, ";! [69: help-style]
    ParaContent(); print "~"; style bold;! [70: ~help look~]
    ParaContent(); print "help look";! [71: /help-style]
    ParaContent(); style roman; print "~";! [72: if not visited]

    	if (~~((((~~((Adj_51_t1_v10(self)))))))) jump L_Say775;! [73: ~. You might want to start by looking at the help information for all of these basic commands.~]
    ParaContent(); print ". You might want to start by looking at the help information for all of these basic commands.";! [74: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [75: ~For even more help topics and commands, just type ~]
    ParaContent(); print "For even more help topics and commands, just type ";! [76: help-style]
    ParaContent(); print "~"; style bold;! [77: ~help~]
    ParaContent(); print "help";! [78: /help-style]
    ParaContent(); style roman; print "~";! [79: end if]

    	.L_Say775; .L_SayX770;! [80: ~.~]
    ParaContent(); print "."; .L_Say776; .L_SayX771;rtrue;
];
[ R_TX_S_139 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]north[/help-style], [help-style]south[/help-style], [help-style]east[/help-style], [help-style]west[/help-style], [help-style]up[/help-style], [help-style]down[/help-style], [help-style]northeast[/help-style], [help-style]northwest[/help-style], [help-style]southeast[/help-style], [help-style]southwest[/help-style]: Move around.
    [para]You can abbreviate these movement commands to one or two letters: [help-style]n[/help-style], [help-style]s[/help-style], [help-style]e[/help-style], [help-style]w[/help-style], [help-style]u[/help-style], [help-style]d[/help-style], [help-style]ne[/help-style], [help-style]nw[/help-style], [help-style]se[/help-style], [help-style]nw[/help-style].
    [para]These commands let you move around. You will walk out of the room, and into a nearby room, in the given direction.
    [para]If the game replies 'You can't go that way,' then there is no exit in that direction. Try [help-style]look[/help-style] to see what directions you can go.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]north[/help-style], [help-style]south[/help-style], [help-style]east[/help-style], [help-style]west[/help-style], [help-style]up[/help-style], [help-style]down[/help-style], [help-style]northeast[/help-style], [help-style]northwest[/help-style], [help-style]southeast[/help-style], [help-style]southwest[/help-style]: Move around. [para]You can abbreviate these movement commands to one or two letters: [help-style]n[/help-style], [help-style]s[/help-style], [help-style]e[/help-style], [help-style]w[/help-style], [help-style]u[/help-style], [help-style]d[/help-style], [help-style]ne[/help-style], [help-style]nw[/help-style], [help-style]se[/help-style], [help-style]nw[/help-style]. [para]These commands let you move around. You will walk out of the room, and into a nearby room, in the given direction. [para]If the game replies 'You can't go that way,' then there is no exit in that direction. Try [help-style]look[/help-style] to see what directions you can go.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~north~]
    ParaContent(); print "north";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~, ~]
    ParaContent(); print ", ";! [6: help-style]
    ParaContent(); print "~"; style bold;! [7: ~south~]
    ParaContent(); print "south";! [8: /help-style]
    ParaContent(); style roman; print "~";! [9: ~, ~]
    ParaContent(); print ", ";! [10: help-style]
    ParaContent(); print "~"; style bold;! [11: ~east~]
    ParaContent(); print "east";! [12: /help-style]
    ParaContent(); style roman; print "~";! [13: ~, ~]
    ParaContent(); print ", ";! [14: help-style]
    ParaContent(); print "~"; style bold;! [15: ~west~]
    ParaContent(); print "west";! [16: /help-style]
    ParaContent(); style roman; print "~";! [17: ~, ~]
    ParaContent(); print ", ";! [18: help-style]
    ParaContent(); print "~"; style bold;! [19: ~up~]
    ParaContent(); print "up";! [20: /help-style]
    ParaContent(); style roman; print "~";! [21: ~, ~]
    ParaContent(); print ", ";! [22: help-style]
    ParaContent(); print "~"; style bold;! [23: ~down~]
    ParaContent(); print "down";! [24: /help-style]
    ParaContent(); style roman; print "~";! [25: ~, ~]
    ParaContent(); print ", ";! [26: help-style]
    ParaContent(); print "~"; style bold;! [27: ~northeast~]
    ParaContent(); print "northeast";! [28: /help-style]
    ParaContent(); style roman; print "~";! [29: ~, ~]
    ParaContent(); print ", ";! [30: help-style]
    ParaContent(); print "~"; style bold;! [31: ~northwest~]
    ParaContent(); print "northwest";! [32: /help-style]
    ParaContent(); style roman; print "~";! [33: ~, ~]
    ParaContent(); print ", ";! [34: help-style]
    ParaContent(); print "~"; style bold;! [35: ~southeast~]
    ParaContent(); print "southeast";! [36: /help-style]
    ParaContent(); style roman; print "~";! [37: ~, ~]
    ParaContent(); print ", ";! [38: help-style]
    ParaContent(); print "~"; style bold;! [39: ~southwest~]
    ParaContent(); print "southwest";! [40: /help-style]
    ParaContent(); style roman; print "~";! [41: ~: Move around. ~]
    ParaContent(); print ": Move around. ";! [42: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [43: ~You can abbreviate these movement commands to one or two letters: ~]
    ParaContent(); print "You can abbreviate these movement commands to one or two letters: ";! [44: help-style]
    ParaContent(); print "~"; style bold;! [45: ~n~]
    ParaContent(); print "n";! [46: /help-style]
    ParaContent(); style roman; print "~";! [47: ~, ~]
    ParaContent(); print ", ";! [48: help-style]
    ParaContent(); print "~"; style bold;! [49: ~s~]
    ParaContent(); print "s";! [50: /help-style]
    ParaContent(); style roman; print "~";! [51: ~, ~]
    ParaContent(); print ", ";! [52: help-style]
    ParaContent(); print "~"; style bold;! [53: ~e~]
    ParaContent(); print "e";! [54: /help-style]
    ParaContent(); style roman; print "~";! [55: ~, ~]
    ParaContent(); print ", ";! [56: help-style]
    ParaContent(); print "~"; style bold;! [57: ~w~]
    ParaContent(); print "w";! [58: /help-style]
    ParaContent(); style roman; print "~";! [59: ~, ~]
    ParaContent(); print ", ";! [60: help-style]
    ParaContent(); print "~"; style bold;! [61: ~u~]
    ParaContent(); print "u";! [62: /help-style]
    ParaContent(); style roman; print "~";! [63: ~, ~]
    ParaContent(); print ", ";! [64: help-style]
    ParaContent(); print "~"; style bold;! [65: ~d~]
    ParaContent(); print "d";! [66: /help-style]
    ParaContent(); style roman; print "~";! [67: ~, ~]
    ParaContent(); print ", ";! [68: help-style]
    ParaContent(); print "~"; style bold;! [69: ~ne~]
    ParaContent(); print "ne";! [70: /help-style]
    ParaContent(); style roman; print "~";! [71: ~, ~]
    ParaContent(); print ", ";! [72: help-style]
    ParaContent(); print "~"; style bold;! [73: ~nw~]
    ParaContent(); print "nw";! [74: /help-style]
    ParaContent(); style roman; print "~";! [75: ~, ~]
    ParaContent(); print ", ";! [76: help-style]
    ParaContent(); print "~"; style bold;! [77: ~se~]
    ParaContent(); print "se";! [78: /help-style]
    ParaContent(); style roman; print "~";! [79: ~, ~]
    ParaContent(); print ", ";! [80: help-style]
    ParaContent(); print "~"; style bold;! [81: ~nw~]
    ParaContent(); print "nw";! [82: /help-style]
    ParaContent(); style roman; print "~";! [83: ~. ~]
    ParaContent(); print ". ";! [84: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [85: ~These commands let you move around. You will walk out of the room, and into a nearby room, in the given direction. ~]
    ParaContent(); print "These commands let you move around. You will walk out of the room, and into a nearby room, in the given direction. ";! [86: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [87: ~If the game replies 'You can't go that way,' then there is no exit in that direction. Try ~]
    ParaContent(); print "If the game replies ~You can't go that way,~ then there is no exit in that direction. Try ";! [88: help-style]
    ParaContent(); print "~"; style bold;! [89: ~look~]
    ParaContent(); print "look";! [90: /help-style]
    ParaContent(); style roman; print "~";! [91: ~ to see what directions you can go.~]
    ParaContent(); print " to see what directions you can go."; .L_Say777; .L_SayX772;rtrue;
];
[ R_TX_S_140 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]look[/help-style]: Look around the room.
    [para](You can abbreviate this as [help-style]l[/help-style].)
    [para]Take a look around. This repeats the description of the room, and lists everything you see nearby.
    [para]If you are having trouble understanding where you are, or what's going on in the game, it never hurts to [help-style]look[/help-style].
    [para]Remember, you also can [help-style]examine[/help-style] anything you see, to inspect it in more detail.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]look[/help-style]: Look around the room. [para](You can abbreviate this as [help-style]l[/help-style].) [para]Take a look around. This repeats the description of the room, and lists everything you see nearby. [para]If you are having trouble understanding where you are, or what's going on in the game, it never hurts to [help-style]look[/help-style]. [para]Remember, you also can [help-style]examine[/help-style] anything you see, to inspect it in more detail.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~look~]
    ParaContent(); print "look";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: Look around the room. ~]
    ParaContent(); print ": Look around the room. ";! [6: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [7: ~(You can abbreviate this as ~]
    ParaContent(); print "(You can abbreviate this as ";! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~l~]
    ParaContent(); print "l";! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~.) ~]
    ParaContent(); print ".) ";! [12: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [13: ~Take a look around. This repeats the description of the room, and lists everything you see nearby. ~]
    ParaContent(); print "Take a look around. This repeats the description of the room, and lists everything you see nearby. ";! [14: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [15: ~If you are having trouble understanding where you are, or what's going on in the game, it never hurts to ~]
    ParaContent(); print "If you are having trouble understanding where you are, or what's going on in the game, it never hurts to ";! [16: help-style]
    ParaContent(); print "~"; style bold;! [17: ~look~]
    ParaContent(); print "look";! [18: /help-style]
    ParaContent(); style roman; print "~";! [19: ~. ~]
    ParaContent(); print ". ";! [20: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [21: ~Remember, you also can ~]
    ParaContent(); print "Remember, you also can ";! [22: help-style]
    ParaContent(); print "~"; style bold;! [23: ~examine~]
    ParaContent(); print "examine";! [24: /help-style]
    ParaContent(); style roman; print "~";! [25: ~ anything you see, to inspect it in more detail.~]
    ParaContent(); print " anything you see, to inspect it in more detail."; .L_Say778; .L_SayX773;rtrue;
];
[ R_TX_S_141 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]examine[/help-style]: Look more closely at something.
    [para](You can abbreviate this as [help-style]x[/help-style].)
    [para]Inspect an object carefully. You can do this to anything you're carrying, and anything nearby -- most anything you encounter in the game.
    [para]You will often learn more about things if you [help-style]examine[/help-style] them. However, if the game replies 'You see nothing special about that,' then it's probably not important. If the game replies 'You can't see any such thing,' then it's definitely not important.
    [para]You can even examine yourself: [help-style]x myself[/help-style] or [help-style]x me[/help-style]. This may tell you more about yourself -- information to help you understand the character you are playing. Then again, it may not.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]examine[/help-style]: Look more closely at something. [para](You can abbreviate this as [help-style]x[/help-style].) [para]Inspect an object carefully. You can do this to anything you're carrying, and anything nearby -- most anything you encounter in the game. [para]You will often learn more about things if you [help-style]examine[/help-style] them. However, if the game replies 'You see nothing special about that,' then it's probably not important. If the game replies 'You can't see any such thing,' then it's definitely not important. [para]You can even examine yourself: [help-style]x myself[/help-style] or [help-style]x me[/help-style]. This may tell you more about yourself -- information to help you understand the character you are playing. Then again, it may not.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~examine~]
    ParaContent(); print "examine";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: Look more closely at something. ~]
    ParaContent(); print ": Look more closely at something. ";! [6: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [7: ~(You can abbreviate this as ~]
    ParaContent(); print "(You can abbreviate this as ";! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~x~]
    ParaContent(); print "x";! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~.) ~]
    ParaContent(); print ".) ";! [12: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [13: ~Inspect an object carefully. You can do this to anything you're carrying, and anything nearby -- most anything you encounter in the game. ~]
    ParaContent(); print "Inspect an object carefully. You can do this to anything you're carrying, and anything nearby -- most anything you encounter in the game. ";! [14: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [15: ~You will often learn more about things if you ~]
    ParaContent(); print "You will often learn more about things if you ";! [16: help-style]
    ParaContent(); print "~"; style bold;! [17: ~examine~]
    ParaContent(); print "examine";! [18: /help-style]
    ParaContent(); style roman; print "~";! [19: ~ them. However, if the game replies 'You see nothing special about that,' then it's probably not important. If the game replies 'You can't see any such thing,' then it's definitely not important. ~]
    ParaContent(); print " them. However, if the game replies ~You see nothing special about that,~ then it's probably not important. If the game replies ~You can't see any such thing,~ then it's definitely not important. ";! [20: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [21: ~You can even examine yourself: ~]
    ParaContent(); print "You can even examine yourself: ";! [22: help-style]
    ParaContent(); print "~"; style bold;! [23: ~x myself~]
    ParaContent(); print "x myself";! [24: /help-style]
    ParaContent(); style roman; print "~";! [25: ~ or ~]
    ParaContent(); print " or ";! [26: help-style]
    ParaContent(); print "~"; style bold;! [27: ~x me~]
    ParaContent(); print "x me";! [28: /help-style]
    ParaContent(); style roman; print "~";! [29: ~. This may tell you more about yourself -- information to help you understand the character you are playing. Then again, it may not.~]
    ParaContent(); print ". This may tell you more about yourself -- information to help you understand the character you are playing. Then again, it may not."; .L_Say779; .L_SayX774;rtrue;
];
[ R_TX_S_142 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]inventory[/help-style]: List everything you're carrying.
    [para](You can abbreviate this as [help-style]i[/help-style].)
    [para]In some games, you start out empty-handed. In others, you are already holding things when you begin. It's a good idea to look these over; they will almost certainly be important later.
    [para]And, of course, if you forget what you're holding, you can always repeat this command, to remind yourself.
    [para]Remember, you also can [help-style]examine[/help-style] the objects you're carrying, to inspect them in more detail.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]inventory[/help-style]: List everything you're carrying. [para](You can abbreviate this as [help-style]i[/help-style].) [para]In some games, you start out empty-handed. In others, you are already holding things when you begin. It's a good idea to look these over; they will almost certainly be important later. [para]And, of course, if you forget what you're holding, you can always repeat this command, to remind yourself. [para]Remember, you also can [help-style]examine[/help-style] the objects you're carrying, to inspect them in more detail.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~inventory~]
    ParaContent(); print "inventory";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: List everything you're carrying. ~]
    ParaContent(); print ": List everything you're carrying. ";! [6: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [7: ~(You can abbreviate this as ~]
    ParaContent(); print "(You can abbreviate this as ";! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~i~]
    ParaContent(); print "i";! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~.) ~]
    ParaContent(); print ".) ";! [12: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [13: ~In some games, you start out empty-handed. In others, you are already holding things when you begin. It's a good idea to look these over; they will almost certainly be important later. ~]
    ParaContent(); print "In some games, you start out empty-handed. In others, you are already holding things when you begin. It's a good idea to look these over; they will almost certainly be important later. ";! [14: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [15: ~And, of course, if you forget what you're holding, you can always repeat this command, to remind yourself. ~]
    ParaContent(); print "And, of course, if you forget what you're holding, you can always repeat this command, to remind yourself. ";! [16: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [17: ~Remember, you also can ~]
    ParaContent(); print "Remember, you also can ";! [18: help-style]
    ParaContent(); print "~"; style bold;! [19: ~examine~]
    ParaContent(); print "examine";! [20: /help-style]
    ParaContent(); style roman; print "~";! [21: ~ the objects you're carrying, to inspect them in more detail.~]
    ParaContent(); print " the objects you're carrying, to inspect them in more detail."; .L_Say780; .L_SayX775;rtrue;
];
[ R_TX_S_143 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~These commands help you manage your playing experience. (They're not actions you take [italic type]inside[roman type] the game world.)
    [para]For more about these commands, type [help-style]help[/help-style] followed by the command word.
    [para][help-style]save[/help-style] Save a file containing your current game position.
    [br][help-style]restore[/help-style]: Restore a saved game; return to the saved position.
    [br][help-style]quit[/help-style]: End the game.
    [br][help-style]restart[/help-style]: Start the game over from the beginning.
    [br][help-style]undo[/help-style]: Take back your last move.
    [br][help-style]again[/help-style]: Repeat your last move.
    [br][help-style]script[/help-style]: Begin saving a transcript file of your game session.
    [br][help-style]script off[/help-style]: Turn off [help-style]script[/help-style] mode.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~These commands help you manage your playing experience. (They're not actions you take [italic type]inside[roman type] the game world.) [para]For more about these commands, type [help-style]help[/help-style] followed by the command word. [para][help-style]save[/help-style] Save a file containing your current game position. [br][help-style]restore[/help-style]: Restore a saved game; return to the saved position. [br][help-style]quit[/help-style]: End the game. [br][help-style]restart[/help-style]: Start the game over from the beginning. [br][help-style]undo[/help-style]: Take back your last move. [br][help-style]again[/help-style]: Repeat your last move. [br][help-style]script[/help-style]: Begin saving a transcript file of your game session. [br][help-style]script off[/help-style]: Turn off [help-style]script[/help-style] mode.~]
    say__p=1;! [2: ~These commands help you manage your playing experience. (They're not actions you take ~]
    ParaContent(); print "These commands help you manage your playing experience. (They're not actions you take ";! [3: italic type]
    ParaContent(); style underline;! [4: ~inside~]
    ParaContent(); print "inside";! [5: roman type]
    ParaContent(); style roman;! [6: ~ the game world.) ~]
    ParaContent(); print " the game world.) ";! [7: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [8: ~For more about these commands, type ~]
    ParaContent(); print "For more about these commands, type ";! [9: help-style]
    ParaContent(); print "~"; style bold;! [10: ~help~]
    ParaContent(); print "help";! [11: /help-style]
    ParaContent(); style roman; print "~";! [12: ~ followed by the command word. ~]
    ParaContent(); print " followed by the command word. ";! [13: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [14: help-style]
    ParaContent(); print "~"; style bold;! [15: ~save~]
    ParaContent(); print "save";! [16: /help-style]
    ParaContent(); style roman; print "~";! [17: ~ Save a file containing your current game position. ~]
    ParaContent(); print " Save a file containing your current game position. ";! [18: br]
    ParaContent(); new_line;! [19: help-style]
    ParaContent(); print "~"; style bold;! [20: ~restore~]
    ParaContent(); print "restore";! [21: /help-style]
    ParaContent(); style roman; print "~";! [22: ~: Restore a saved game; return to the saved position. ~]
    ParaContent(); print ": Restore a saved game; return to the saved position. ";! [23: br]
    ParaContent(); new_line;! [24: help-style]
    ParaContent(); print "~"; style bold;! [25: ~quit~]
    ParaContent(); print "quit";! [26: /help-style]
    ParaContent(); style roman; print "~";! [27: ~: End the game. ~]
    ParaContent(); print ": End the game. ";! [28: br]
    ParaContent(); new_line;! [29: help-style]
    ParaContent(); print "~"; style bold;! [30: ~restart~]
    ParaContent(); print "restart";! [31: /help-style]
    ParaContent(); style roman; print "~";! [32: ~: Start the game over from the beginning. ~]
    ParaContent(); print ": Start the game over from the beginning. ";! [33: br]
    ParaContent(); new_line;! [34: help-style]
    ParaContent(); print "~"; style bold;! [35: ~undo~]
    ParaContent(); print "undo";! [36: /help-style]
    ParaContent(); style roman; print "~";! [37: ~: Take back your last move. ~]
    ParaContent(); print ": Take back your last move. ";! [38: br]
    ParaContent(); new_line;! [39: help-style]
    ParaContent(); print "~"; style bold;! [40: ~again~]
    ParaContent(); print "again";! [41: /help-style]
    ParaContent(); style roman; print "~";! [42: ~: Repeat your last move. ~]
    ParaContent(); print ": Repeat your last move. ";! [43: br]
    ParaContent(); new_line;! [44: help-style]
    ParaContent(); print "~"; style bold;! [45: ~script~]
    ParaContent(); print "script";! [46: /help-style]
    ParaContent(); style roman; print "~";! [47: ~: Begin saving a transcript file of your game session. ~]
    ParaContent(); print ": Begin saving a transcript file of your game session. ";! [48: br]
    ParaContent(); new_line;! [49: help-style]
    ParaContent(); print "~"; style bold;! [50: ~script off~]
    ParaContent(); print "script off";! [51: /help-style]
    ParaContent(); style roman; print "~";! [52: ~: Turn off ~]
    ParaContent(); print ": Turn off ";! [53: help-style]
    ParaContent(); print "~"; style bold;! [54: ~script~]
    ParaContent(); print "script";! [55: /help-style]
    ParaContent(); style roman; print "~";! [56: ~ mode.~]
    ParaContent(); print " mode."; .L_Say781; .L_SayX776;rtrue;
];
[ R_TX_S_144 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]quit[/help-style]: End the game.
    [para](You can abbreviate this as [help-style]q[/help-style].)
    [para]The game will ask you whether you mean it. (Type [help-style]y[/help-style] or [help-style]n[/help-style] and hit enter.) If you answer 'yes', the game will end and the program will shut down.
    [para]You should type [help-style]save[/help-style] to save your progress before you [help-style]quit[/help-style]!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]quit[/help-style]: End the game. [para](You can abbreviate this as [help-style]q[/help-style].) [para]The game will ask you whether you mean it. (Type [help-style]y[/help-style] or [help-style]n[/help-style] and hit enter.) If you answer 'yes', the game will end and the program will shut down. [para]You should type [help-style]save[/help-style] to save your progress before you [help-style]quit[/help-style]!~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~quit~]
    ParaContent(); print "quit";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: End the game. ~]
    ParaContent(); print ": End the game. ";! [6: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [7: ~(You can abbreviate this as ~]
    ParaContent(); print "(You can abbreviate this as ";! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~q~]
    ParaContent(); print "q";! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~.) ~]
    ParaContent(); print ".) ";! [12: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [13: ~The game will ask you whether you mean it. (Type ~]
    ParaContent(); print "The game will ask you whether you mean it. (Type ";! [14: help-style]
    ParaContent(); print "~"; style bold;! [15: ~y~]
    ParaContent(); print "y";! [16: /help-style]
    ParaContent(); style roman; print "~";! [17: ~ or ~]
    ParaContent(); print " or ";! [18: help-style]
    ParaContent(); print "~"; style bold;! [19: ~n~]
    ParaContent(); print "n";! [20: /help-style]
    ParaContent(); style roman; print "~";! [21: ~ and hit enter.) If you answer 'yes', the game will end and the program will shut down. ~]
    ParaContent(); print " and hit enter.) If you answer ~yes~, the game will end and the program will shut down. ";! [22: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [23: ~You should type ~]
    ParaContent(); print "You should type ";! [24: help-style]
    ParaContent(); print "~"; style bold;! [25: ~save~]
    ParaContent(); print "save";! [26: /help-style]
    ParaContent(); style roman; print "~";! [27: ~ to save your progress before you ~]
    ParaContent(); print " to save your progress before you ";! [28: help-style]
    ParaContent(); print "~"; style bold;! [29: ~quit~]
    ParaContent(); print "quit";! [30: /help-style]
    ParaContent(); style roman; print "~";! [31: ~!~]
    ParaContent(); print "!"; .L_Say782; .L_SayX777;rtrue;
];
[ R_TX_S_145 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]restart[/help-style]: Start the game over from the beginning.
    [para]The game will ask you whether you mean it. (Type [help-style]y[/help-style] or [help-style]n[/help-style] and hit enter.) If you answer 'yes', the game will start over. You will find yourself back at the beginning, carrying only those items you had when the game started.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]restart[/help-style]: Start the game over from the beginning. [para]The game will ask you whether you mean it. (Type [help-style]y[/help-style] or [help-style]n[/help-style] and hit enter.) If you answer 'yes', the game will start over. You will find yourself back at the beginning, carrying only those items you had when the game started.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~restart~]
    ParaContent(); print "restart";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: Start the game over from the beginning. ~]
    ParaContent(); print ": Start the game over from the beginning. ";! [6: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [7: ~The game will ask you whether you mean it. (Type ~]
    ParaContent(); print "The game will ask you whether you mean it. (Type ";! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~y~]
    ParaContent(); print "y";! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~ or ~]
    ParaContent(); print " or ";! [12: help-style]
    ParaContent(); print "~"; style bold;! [13: ~n~]
    ParaContent(); print "n";! [14: /help-style]
    ParaContent(); style roman; print "~";! [15: ~ and hit enter.) If you answer 'yes', the game will start over. You will find yourself back at the beginning, carrying only those items you had when the game started.~]
    ParaContent(); print " and hit enter.) If you answer ~yes~, the game will start over. You will find yourself back at the beginning, carrying only those items you had when the game started."; .L_Say783; .L_SayX778;rtrue;
];
[ R_TX_S_146 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]save[/help-style]: Save a file containing your current game position.
    [br][help-style]restore[/help-style]: Restore a saved game; return to the saved position.
    [para]When you type [help-style]save[/help-style], the game will prompt you to create a save file. (You can put this anywhere on your computer.) A save file contains the entire state of the game -- your position, your possessions, all the progress you have made.
    [para]When you type [help-style]restore[/help-style], the game will prompt you to load a save file back in. This restores you to the exact position of the save file. You will find everything just as you left it.
    [para]You can [help-style]save[/help-style] as many different files as you want. You can also [help-style]restore[/help-style] from a given file as many times as you want.
    [para]You will probably want to [help-style]save[/help-style] before you [help-style]quit[/help-style] (say, if you're about to shut down your computer). You might also want to [help-style]save[/help-style] before you try something dangerous or uncertain in a game. (If a dragon gnaws your arm off, it's nice to be able to [help-style]restore[/help-style] a file that you saved before you walked into its lair.)~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]save[/help-style]: Save a file containing your current game position. [br][help-style]restore[/help-style]: Restore a saved game; return to the saved position. [para]When you type [help-style]save[/help-style], the game will prompt you to create a save file. (You can put this anywhere on your computer.) A save file contains the entire state of the game -- your position, your possessions, all the progress you have made. [para]When you type [help-style]restore[/help-style], the game will prompt you to load a save file back in. This restores you to the exact position of the save file. You will find everything just as you left it. [para]You can [help-style]save[/help-style] as many different files as you want. You can also [help-style]restore[/help-style] from a given file as many times as you want. [para]You will probably want to [help-style]save[/help-style] before you [help-style]quit[/help-style] (say, if you're about to shut down your computer). You might also want to [help-style]save[/help-style] before you try something dangerous or uncertain in a game. (If a dragon gnaws your arm off, it's nice to be able to [help-style]restore[/help-style] a file that you saved before you walked into its lair.)~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~save~]
    ParaContent(); print "save";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: Save a file containing your current game position. ~]
    ParaContent(); print ": Save a file containing your current game position. ";! [6: br]
    ParaContent(); new_line;! [7: help-style]
    ParaContent(); print "~"; style bold;! [8: ~restore~]
    ParaContent(); print "restore";! [9: /help-style]
    ParaContent(); style roman; print "~";! [10: ~: Restore a saved game; return to the saved position. ~]
    ParaContent(); print ": Restore a saved game; return to the saved position. ";! [11: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [12: ~When you type ~]
    ParaContent(); print "When you type ";! [13: help-style]
    ParaContent(); print "~"; style bold;! [14: ~save~]
    ParaContent(); print "save";! [15: /help-style]
    ParaContent(); style roman; print "~";! [16: ~, the game will prompt you to create a save file. (You can put this anywhere on your computer.) A save file contains the entire state of the game -- your position, your possessions, all the progress you have made. ~]
    ParaContent(); print ", the game will prompt you to create a save file. (You can put this anywhere on your computer.) A save file contains the entire state of the game -- your position, your possessions, all the progress you have made. ";! [17: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [18: ~When you type ~]
    ParaContent(); print "When you type ";! [19: help-style]
    ParaContent(); print "~"; style bold;! [20: ~restore~]
    ParaContent(); print "restore";! [21: /help-style]
    ParaContent(); style roman; print "~";! [22: ~, the game will prompt you to load a save file back in. This restores you to the exact position of the save file. You will find everything just as you left it. ~]
    ParaContent(); print ", the game will prompt you to load a save file back in. This restores you to the exact position of the save file. You will find everything just as you left it. ";! [23: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [24: ~You can ~]
    ParaContent(); print "You can ";! [25: help-style]
    ParaContent(); print "~"; style bold;! [26: ~save~]
    ParaContent(); print "save";! [27: /help-style]
    ParaContent(); style roman; print "~";! [28: ~ as many different files as you want. You can also ~]
    ParaContent(); print " as many different files as you want. You can also ";! [29: help-style]
    ParaContent(); print "~"; style bold;! [30: ~restore~]
    ParaContent(); print "restore";! [31: /help-style]
    ParaContent(); style roman; print "~";! [32: ~ from a given file as many times as you want. ~]
    ParaContent(); print " from a given file as many times as you want. ";! [33: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [34: ~You will probably want to ~]
    ParaContent(); print "You will probably want to ";! [35: help-style]
    ParaContent(); print "~"; style bold;! [36: ~save~]
    ParaContent(); print "save";! [37: /help-style]
    ParaContent(); style roman; print "~";! [38: ~ before you ~]
    ParaContent(); print " before you ";! [39: help-style]
    ParaContent(); print "~"; style bold;! [40: ~quit~]
    ParaContent(); print "quit";! [41: /help-style]
    ParaContent(); style roman; print "~";! [42: ~ (say, if you're about to shut down your computer). You might also want to ~]
    ParaContent(); print " (say, if you're about to shut down your computer). You might also want to ";! [43: help-style]
    ParaContent(); print "~"; style bold;! [44: ~save~]
    ParaContent(); print "save";! [45: /help-style]
    ParaContent(); style roman; print "~";! [46: ~ before you try something dangerous or uncertain in a game. (If a dragon gnaws your arm off, it's nice to be able to ~]
    ParaContent(); print " before you try something dangerous or uncertain in a game. (If a dragon gnaws your arm off, it's nice to be able to ";! [47: help-style]
    ParaContent(); print "~"; style bold;! [48: ~restore~]
    ParaContent(); print "restore";! [49: /help-style]
    ParaContent(); style roman; print "~";! [50: ~ a file that you saved before you walked into its lair.)~]
    ParaContent(); print " a file that you saved before you walked into its lair.)"; .L_Say784; .L_SayX779;rtrue;
];
[ R_TX_S_147 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]undo[/help-style]: Take back your last move.
    [para]When you type [help-style]undo[/help-style], the game un-does your last move. Your position, your possessions, and all the rest of the game are restored just as they were before your previous command.
    [para]Depending on the capabilities of your IF interpreter, you may not be able to [help-style]undo[/help-style] more than one move in a row. If you want to go back to an earlier point in the game, you'll have to use [help-style]save[/help-style] and [help-style]restore[/help-style], instead of [help-style]undo[/help-style].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]undo[/help-style]: Take back your last move. [para]When you type [help-style]undo[/help-style], the game un-does your last move. Your position, your possessions, and all the rest of the game are restored just as they were before your previous command. [para]Depending on the capabilities of your IF interpreter, you may not be able to [help-style]undo[/help-style] more than one move in a row. If you want to go back to an earlier point in the game, you'll have to use [help-style]save[/help-style] and [help-style]restore[/help-style], instead of [help-style]undo[/help-style].~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~undo~]
    ParaContent(); print "undo";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: Take back your last move. ~]
    ParaContent(); print ": Take back your last move. ";! [6: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [7: ~When you type ~]
    ParaContent(); print "When you type ";! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~undo~]
    ParaContent(); print "undo";! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~, the game un-does your last move. Your position, your possessions, and all the rest of the game are restored just as they were before your previous command. ~]
    ParaContent(); print ", the game un-does your last move. Your position, your possessions, and all the rest of the game are restored just as they were before your previous command. ";! [12: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [13: ~Depending on the capabilities of your IF interpreter, you may not be able to ~]
    ParaContent(); print "Depending on the capabilities of your IF interpreter, you may not be able to ";! [14: help-style]
    ParaContent(); print "~"; style bold;! [15: ~undo~]
    ParaContent(); print "undo";! [16: /help-style]
    ParaContent(); style roman; print "~";! [17: ~ more than one move in a row. If you want to go back to an earlier point in the game, you'll have to use ~]
    ParaContent(); print " more than one move in a row. If you want to go back to an earlier point in the game, you'll have to use ";! [18: help-style]
    ParaContent(); print "~"; style bold;! [19: ~save~]
    ParaContent(); print "save";! [20: /help-style]
    ParaContent(); style roman; print "~";! [21: ~ and ~]
    ParaContent(); print " and ";! [22: help-style]
    ParaContent(); print "~"; style bold;! [23: ~restore~]
    ParaContent(); print "restore";! [24: /help-style]
    ParaContent(); style roman; print "~";! [25: ~, instead of ~]
    ParaContent(); print ", instead of ";! [26: help-style]
    ParaContent(); print "~"; style bold;! [27: ~undo~]
    ParaContent(); print "undo";! [28: /help-style]
    ParaContent(); style roman; print "~";! [29: ~.~]
    ParaContent(); print "."; .L_Say785; .L_SayX780;rtrue;
];
[ R_TX_S_148 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]again[/help-style]: Repeat your last move.
    [para](You can abbreviate this as [help-style]g[/help-style].)
    [para]Repeat your last move, just as if you'd typed it again.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]again[/help-style]: Repeat your last move. [para](You can abbreviate this as [help-style]g[/help-style].) [para]Repeat your last move, just as if you'd typed it again.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~again~]
    ParaContent(); print "again";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: Repeat your last move. ~]
    ParaContent(); print ": Repeat your last move. ";! [6: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [7: ~(You can abbreviate this as ~]
    ParaContent(); print "(You can abbreviate this as ";! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~g~]
    ParaContent(); print "g";! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~.) ~]
    ParaContent(); print ".) ";! [12: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [13: ~Repeat your last move, just as if you'd typed it again.~]
    ParaContent(); print "Repeat your last move, just as if you'd typed it again."; .L_Say786; .L_SayX781;rtrue;
];
[ R_TX_S_149 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]script[/help-style]: Begin saving a transcript file of your game session.
    [br][help-style]restore[/help-style]: Turn off [help-style]script[/help-style] mode.
    [para]When you type [help-style]script[/help-style], the game will prompt you to create a transcript file. (You can put this anywhere on your computer.)
    [para]The transcript is a text file. As you play, everything that the game displays -- your commands and the game's responses -- are logged to the transcript. (The transcript begins at the point you typed [help-style]script[/help-style], not at the beginning of the game.)
    [para]Type [help-style]script off[/help-style] to stop the logging and close the transcript file. You can then view it with any text editor.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]script[/help-style]: Begin saving a transcript file of your game session. [br][help-style]restore[/help-style]: Turn off [help-style]script[/help-style] mode. [para]When you type [help-style]script[/help-style], the game will prompt you to create a transcript file. (You can put this anywhere on your computer.) [para]The transcript is a text file. As you play, everything that the game displays -- your commands and the game's responses -- are logged to the transcript. (The transcript begins at the point you typed [help-style]script[/help-style], not at the beginning of the game.) [para]Type [help-style]script off[/help-style] to stop the logging and close the transcript file. You can then view it with any text editor.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~script~]
    ParaContent(); print "script";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: Begin saving a transcript file of your game session. ~]
    ParaContent(); print ": Begin saving a transcript file of your game session. ";! [6: br]
    ParaContent(); new_line;! [7: help-style]
    ParaContent(); print "~"; style bold;! [8: ~restore~]
    ParaContent(); print "restore";! [9: /help-style]
    ParaContent(); style roman; print "~";! [10: ~: Turn off ~]
    ParaContent(); print ": Turn off ";! [11: help-style]
    ParaContent(); print "~"; style bold;! [12: ~script~]
    ParaContent(); print "script";! [13: /help-style]
    ParaContent(); style roman; print "~";! [14: ~ mode. ~]
    ParaContent(); print " mode. ";! [15: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [16: ~When you type ~]
    ParaContent(); print "When you type ";! [17: help-style]
    ParaContent(); print "~"; style bold;! [18: ~script~]
    ParaContent(); print "script";! [19: /help-style]
    ParaContent(); style roman; print "~";! [20: ~, the game will prompt you to create a transcript file. (You can put this anywhere on your computer.) ~]
    ParaContent(); print ", the game will prompt you to create a transcript file. (You can put this anywhere on your computer.) ";! [21: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [22: ~The transcript is a text file. As you play, everything that the game displays -- your commands and the game's responses -- are logged to the transcript. (The transcript begins at the point you typed ~]
    ParaContent(); print "The transcript is a text file. As you play, everything that the game displays -- your commands and the game's responses -- are logged to the transcript. (The transcript begins at the point you typed ";! [23: help-style]
    ParaContent(); print "~"; style bold;! [24: ~script~]
    ParaContent(); print "script";! [25: /help-style]
    ParaContent(); style roman; print "~";! [26: ~, not at the beginning of the game.) ~]
    ParaContent(); print ", not at the beginning of the game.) ";! [27: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [28: ~Type ~]
    ParaContent(); print "Type ";! [29: help-style]
    ParaContent(); print "~"; style bold;! [30: ~script off~]
    ParaContent(); print "script off";! [31: /help-style]
    ParaContent(); style roman; print "~";! [32: ~ to stop the logging and close the transcript file. You can then view it with any text editor.~]
    ParaContent(); print " to stop the logging and close the transcript file. You can then view it with any text editor."; .L_Say787; .L_SayX782;rtrue;
];
[ R_TX_S_150 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~These are the most common ways of interacting with the game's world. It's usually worth trying these, in almost any situation. You never know what might happen -- or what you might learn.
    [para]These commands do what they say. Common sense applies. There are many more possibilities -- every game has its own variations, depending on what actions make sense in a particular situation. For more information, type [help-style]help[/help-style] followed by any command word.
    [para][help-style]get[help-thing][/help-style],
    [help-style]drop[help-thing][/help-style]
    [br][help-style]put[help-this]in[help-that][/help-style],
    [help-style]put[help-this]on[help-that][/help-style],
    [help-style]throw[help-this]at[help-that][/help-style]
    [br][help-style]push[help-thing][/help-style],
    [help-style]pull[help-thing][/help-style],
    [help-style]turn[help-thing][/help-style]
    [br][help-style]open[help-thing][/help-style],
    [help-style]close[help-thing][/help-style]
    [br][help-style]lock[help-this]with[help-that][/help-style],
    [help-style]unlock[help-this]with[help-that][/help-style]
    [br][help-style]touch[help-thing][/help-style],
    [help-style]smell[help-thing][/help-style],
    [help-style]listen to[help-thing][/help-style]
    [br][help-style]eat[help-thing][/help-style],
    [help-style]drink[help-thing][/help-style]
    [br][help-style]wear[help-thing][/help-style],
    [help-style]remove[help-thing][/help-style]
    [br][help-style]search[help-thing][/help-style],
    [help-style]look in[help-thing][/help-style]
    [help-style]look under[help-thing][/help-style],
    [help-style]look behind[help-thing][/help-style]
    [br][help-style]enter[help-thing][/help-style],
    [help-style]sit on[help-thing][/help-style],
    [help-style]climb[help-thing][/help-style]
    [br][help-style]get in[help-thing][/help-style],
    [help-style]get off[help-thing][/help-style],
    [help-style]get out of[help-thing][/help-style]
    [br][help-style]break[help-thing][/help-style],
    [help-style]cut[help-thing][/help-style],
    [help-style]crush[help-thing][/help-style]
    [br][help-style]wait[/help-style]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~These are the most common ways of interacting with the game's world. It's usually worth trying these, in almost any situation. You never know what might happen -- or what you might learn. [para]These commands do what they say. Common sense applies. There are many more possibilities -- every game has its own variations, depending on what actions make sense in a particular situation. For more information, type [help-style]help[/help-style] followed by any command word. [para][help-style]get[help-thing][/help-style], [help-style]drop[help-thing][/help-style] [br][help-style]put[help-this]in[help-that][/help-style], [help-style]put[help-this]on[help-that][/help-style], [help-style]throw[help-this]at[help-that][/help-style] [br][help-style]push[help-thing][/help-style], [help-style]pull[help-thing][/help-style], [help-style]turn[help-thing][/help-style] [br][help-style]open[help-thing][/help-style], [help-style]close[help-thing][/help-style] [br][help-style]lock[help-this]with[help-that][/help-style], [help-style]unlock[help-this]with[help-that][/help-style] [br][help-style]touch[help-thing][/help-style], [help-style]smell[help-thing][/help-style], [help-style]listen to[help-thing][/help-style] [br][help-style]eat[help-thing][/help-style], [help-style]drink[help-thing][/help-style] [br][help-style]wear[help-thing][/help-style], [help-style]remove[help-thing][/help-style] [br][help-style]search[help-thing][/help-style], [help-style]look in[help-thing][/help-style] [help-style]look under[help-thing][/help-style], [help-style]look behind[help-thing][/help-style] [br][help-style]enter[help-thing][/help-style], [help-style]sit on[help-thing][/help-style], [help-style]climb[help-thing][/help-style] [br][help-style]get in[help-thing][/help-style], [help-style]get off[help-thing][/help-style], [help-style]get out of[help-thing][/help-style] [br][help-style]break[help-thing][/help-style], [help-style]cut[help-thing][/help-style], [help-style]crush[help-thing][/help-style] [br][help-style]wait[/help-style]~]
    say__p=1;! [2: ~These are the most common ways of interacting with the game's world. It's usually worth trying these, in almost any situation. You never know what might happen -- or what you might learn. ~]
    ParaContent(); print "These are the most common ways of interacting with the game's world. It's usually worth trying these, in almost any situation. You never know what might happen -- or what you might learn. ";! [3: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [4: ~These commands do what they say. Common sense applies. There are many more possibilities -- every game has its own variations, depending on what actions make sense in a particular situation. For more information, type ~]
    ParaContent(); print "These commands do what they say. Common sense applies. There are many more possibilities -- every game has its own variations, depending on what actions make sense in a particular situation. For more information, type ";! [5: help-style]
    ParaContent(); print "~"; style bold;! [6: ~help~]
    ParaContent(); print "help";! [7: /help-style]
    ParaContent(); style roman; print "~";! [8: ~ followed by any command word. ~]
    ParaContent(); print " followed by any command word. ";! [9: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [10: help-style]
    ParaContent(); print "~"; style bold;! [11: ~get~]
    ParaContent(); print "get";! [12: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [13: /help-style]
    ParaContent(); style roman; print "~";! [14: ~, ~]
    ParaContent(); print ", ";! [15: help-style]
    ParaContent(); print "~"; style bold;! [16: ~drop~]
    ParaContent(); print "drop";! [17: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [18: /help-style]
    ParaContent(); style roman; print "~";! [19: ~ ~]
    ParaContent(); print " ";! [20: br]
    ParaContent(); new_line;! [21: help-style]
    ParaContent(); print "~"; style bold;! [22: ~put~]
    ParaContent(); print "put";! [23: help-this]
    ParaContent(); style roman; print " "; style underline; print "this"; style roman; print " "; style bold;! [24: ~in~]
    ParaContent(); print "in";! [25: help-that]
    ParaContent(); style roman; print " "; style underline; print "that"; style roman;! [26: /help-style]
    ParaContent(); style roman; print "~";! [27: ~, ~]
    ParaContent(); print ", ";! [28: help-style]
    ParaContent(); print "~"; style bold;! [29: ~put~]
    ParaContent(); print "put";! [30: help-this]
    ParaContent(); style roman; print " "; style underline; print "this"; style roman; print " "; style bold;! [31: ~on~]
    ParaContent(); print "on";! [32: help-that]
    ParaContent(); style roman; print " "; style underline; print "that"; style roman;! [33: /help-style]
    ParaContent(); style roman; print "~";! [34: ~, ~]
    ParaContent(); print ", ";! [35: help-style]
    ParaContent(); print "~"; style bold;! [36: ~throw~]
    ParaContent(); print "throw";! [37: help-this]
    ParaContent(); style roman; print " "; style underline; print "this"; style roman; print " "; style bold;! [38: ~at~]
    ParaContent(); print "at";! [39: help-that]
    ParaContent(); style roman; print " "; style underline; print "that"; style roman;! [40: /help-style]
    ParaContent(); style roman; print "~";! [41: ~ ~]
    ParaContent(); print " ";! [42: br]
    ParaContent(); new_line;! [43: help-style]
    ParaContent(); print "~"; style bold;! [44: ~push~]
    ParaContent(); print "push";! [45: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [46: /help-style]
    ParaContent(); style roman; print "~";! [47: ~, ~]
    ParaContent(); print ", ";! [48: help-style]
    ParaContent(); print "~"; style bold;! [49: ~pull~]
    ParaContent(); print "pull";! [50: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [51: /help-style]
    ParaContent(); style roman; print "~";! [52: ~, ~]
    ParaContent(); print ", ";! [53: help-style]
    ParaContent(); print "~"; style bold;! [54: ~turn~]
    ParaContent(); print "turn";! [55: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [56: /help-style]
    ParaContent(); style roman; print "~";! [57: ~ ~]
    ParaContent(); print " ";! [58: br]
    ParaContent(); new_line;! [59: help-style]
    ParaContent(); print "~"; style bold;! [60: ~open~]
    ParaContent(); print "open";! [61: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [62: /help-style]
    ParaContent(); style roman; print "~";! [63: ~, ~]
    ParaContent(); print ", ";! [64: help-style]
    ParaContent(); print "~"; style bold;! [65: ~close~]
    ParaContent(); print "close";! [66: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [67: /help-style]
    ParaContent(); style roman; print "~";! [68: ~ ~]
    ParaContent(); print " ";! [69: br]
    ParaContent(); new_line;! [70: help-style]
    ParaContent(); print "~"; style bold;! [71: ~lock~]
    ParaContent(); print "lock";! [72: help-this]
    ParaContent(); style roman; print " "; style underline; print "this"; style roman; print " "; style bold;! [73: ~with~]
    ParaContent(); print "with";! [74: help-that]
    ParaContent(); style roman; print " "; style underline; print "that"; style roman;! [75: /help-style]
    ParaContent(); style roman; print "~";! [76: ~, ~]
    ParaContent(); print ", ";! [77: help-style]
    ParaContent(); print "~"; style bold;! [78: ~unlock~]
    ParaContent(); print "unlock";! [79: help-this]
    ParaContent(); style roman; print " "; style underline; print "this"; style roman; print " "; style bold;! [80: ~with~]
    ParaContent(); print "with";! [81: help-that]
    ParaContent(); style roman; print " "; style underline; print "that"; style roman;! [82: /help-style]
    ParaContent(); style roman; print "~";! [83: ~ ~]
    ParaContent(); print " ";! [84: br]
    ParaContent(); new_line;! [85: help-style]
    ParaContent(); print "~"; style bold;! [86: ~touch~]
    ParaContent(); print "touch";! [87: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [88: /help-style]
    ParaContent(); style roman; print "~";! [89: ~, ~]
    ParaContent(); print ", ";! [90: help-style]
    ParaContent(); print "~"; style bold;! [91: ~smell~]
    ParaContent(); print "smell";! [92: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [93: /help-style]
    ParaContent(); style roman; print "~";! [94: ~, ~]
    ParaContent(); print ", ";! [95: help-style]
    ParaContent(); print "~"; style bold;! [96: ~listen to~]
    ParaContent(); print "listen to";! [97: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [98: /help-style]
    ParaContent(); style roman; print "~";! [99: ~ ~]
    ParaContent(); print " ";! [100: br]
    ParaContent(); new_line;! [101: help-style]
    ParaContent(); print "~"; style bold;! [102: ~eat~]
    ParaContent(); print "eat";! [103: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [104: /help-style]
    ParaContent(); style roman; print "~";! [105: ~, ~]
    ParaContent(); print ", ";! [106: help-style]
    ParaContent(); print "~"; style bold;! [107: ~drink~]
    ParaContent(); print "drink";! [108: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [109: /help-style]
    ParaContent(); style roman; print "~";! [110: ~ ~]
    ParaContent(); print " ";! [111: br]
    ParaContent(); new_line;! [112: help-style]
    ParaContent(); print "~"; style bold;! [113: ~wear~]
    ParaContent(); print "wear";! [114: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [115: /help-style]
    ParaContent(); style roman; print "~";! [116: ~, ~]
    ParaContent(); print ", ";! [117: help-style]
    ParaContent(); print "~"; style bold;! [118: ~remove~]
    ParaContent(); print "remove";! [119: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [120: /help-style]
    ParaContent(); style roman; print "~";! [121: ~ ~]
    ParaContent(); print " ";! [122: br]
    ParaContent(); new_line;! [123: help-style]
    ParaContent(); print "~"; style bold;! [124: ~search~]
    ParaContent(); print "search";! [125: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [126: /help-style]
    ParaContent(); style roman; print "~";! [127: ~, ~]
    ParaContent(); print ", ";! [128: help-style]
    ParaContent(); print "~"; style bold;! [129: ~look in~]
    ParaContent(); print "look in";! [130: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [131: /help-style]
    ParaContent(); style roman; print "~";! [132: ~ ~]
    ParaContent(); print " ";! [133: help-style]
    ParaContent(); print "~"; style bold;! [134: ~look under~]
    ParaContent(); print "look under";! [135: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [136: /help-style]
    ParaContent(); style roman; print "~";! [137: ~, ~]
    ParaContent(); print ", ";! [138: help-style]
    ParaContent(); print "~"; style bold;! [139: ~look behind~]
    ParaContent(); print "look behind";! [140: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [141: /help-style]
    ParaContent(); style roman; print "~";! [142: ~ ~]
    ParaContent(); print " ";! [143: br]
    ParaContent(); new_line;! [144: help-style]
    ParaContent(); print "~"; style bold;! [145: ~enter~]
    ParaContent(); print "enter";! [146: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [147: /help-style]
    ParaContent(); style roman; print "~";! [148: ~, ~]
    ParaContent(); print ", ";! [149: help-style]
    ParaContent(); print "~"; style bold;! [150: ~sit on~]
    ParaContent(); print "sit on";! [151: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [152: /help-style]
    ParaContent(); style roman; print "~";! [153: ~, ~]
    ParaContent(); print ", ";! [154: help-style]
    ParaContent(); print "~"; style bold;! [155: ~climb~]
    ParaContent(); print "climb";! [156: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [157: /help-style]
    ParaContent(); style roman; print "~";! [158: ~ ~]
    ParaContent(); print " ";! [159: br]
    ParaContent(); new_line;! [160: help-style]
    ParaContent(); print "~"; style bold;! [161: ~get in~]
    ParaContent(); print "get in";! [162: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [163: /help-style]
    ParaContent(); style roman; print "~";! [164: ~, ~]
    ParaContent(); print ", ";! [165: help-style]
    ParaContent(); print "~"; style bold;! [166: ~get off~]
    ParaContent(); print "get off";! [167: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [168: /help-style]
    ParaContent(); style roman; print "~";! [169: ~, ~]
    ParaContent(); print ", ";! [170: help-style]
    ParaContent(); print "~"; style bold;! [171: ~get out of~]
    ParaContent(); print "get out of";! [172: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [173: /help-style]
    ParaContent(); style roman; print "~";! [174: ~ ~]
    ParaContent(); print " ";! [175: br]
    ParaContent(); new_line;! [176: help-style]
    ParaContent(); print "~"; style bold;! [177: ~break~]
    ParaContent(); print "break";! [178: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [179: /help-style]
    ParaContent(); style roman; print "~";! [180: ~, ~]
    ParaContent(); print ", ";! [181: help-style]
    ParaContent(); print "~"; style bold;! [182: ~cut~]
    ParaContent(); print "cut";! [183: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [184: /help-style]
    ParaContent(); style roman; print "~";! [185: ~, ~]
    ParaContent(); print ", ";! [186: help-style]
    ParaContent(); print "~"; style bold;! [187: ~crush~]
    ParaContent(); print "crush";! [188: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [189: /help-style]
    ParaContent(); style roman; print "~";! [190: ~ ~]
    ParaContent(); print " ";! [191: br]
    ParaContent(); new_line;! [192: help-style]
    ParaContent(); print "~"; style bold;! [193: ~wait~]
    ParaContent(); print "wait";! [194: /help-style]
    ParaContent(); style roman; print "~"; .L_Say788; .L_SayX783;rtrue;
];
[ R_TX_S_151 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]get[/help-style] or [help-style]take[/help-style]: Pick something up.
    [br][help-style]drop[/help-style]: Put something down.
    [para]You will certainly encounter objects which you'll want to take with you. Every adventurer is a collector at heart. Type [help-style]get[/help-style] (followed by the object's name) to pick it up.
    [para]Of course, many things are anchored in place, or too large to carry.
    [para]To put things down again, use the [help-style]drop[/help-style] command. (This generally puts an item down on the floor. To place it somewhere special, try [help-style]put[help-this]in[help-that][/help-style] or [help-style]put[help-this]on[help-that][/help-style].)
    [para]To see what you're carrying, type [help-style]inventory[/help-style], or just [help-style]i[/help-style].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]get[/help-style] or [help-style]take[/help-style]: Pick something up. [br][help-style]drop[/help-style]: Put something down. [para]You will certainly encounter objects which you'll want to take with you. Every adventurer is a collector at heart. Type [help-style]get[/help-style] (followed by the object's name) to pick it up. [para]Of course, many things are anchored in place, or too large to carry. [para]To put things down again, use the [help-style]drop[/help-style] command. (This generally puts an item down on the floor. To place it somewhere special, try [help-style]put[help-this]in[help-that][/help-style] or [help-style]put[help-this]on[help-that][/help-style].) [para]To see what you're carrying, type [help-style]inventory[/help-style], or just [help-style]i[/help-style].~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~get~]
    ParaContent(); print "get";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~ or ~]
    ParaContent(); print " or ";! [6: help-style]
    ParaContent(); print "~"; style bold;! [7: ~take~]
    ParaContent(); print "take";! [8: /help-style]
    ParaContent(); style roman; print "~";! [9: ~: Pick something up. ~]
    ParaContent(); print ": Pick something up. ";! [10: br]
    ParaContent(); new_line;! [11: help-style]
    ParaContent(); print "~"; style bold;! [12: ~drop~]
    ParaContent(); print "drop";! [13: /help-style]
    ParaContent(); style roman; print "~";! [14: ~: Put something down. ~]
    ParaContent(); print ": Put something down. ";! [15: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [16: ~You will certainly encounter objects which you'll want to take with you. Every adventurer is a collector at heart. Type ~]
    ParaContent(); print "You will certainly encounter objects which you'll want to take with you. Every adventurer is a collector at heart. Type ";! [17: help-style]
    ParaContent(); print "~"; style bold;! [18: ~get~]
    ParaContent(); print "get";! [19: /help-style]
    ParaContent(); style roman; print "~";! [20: ~ (followed by the object's name) to pick it up. ~]
    ParaContent(); print " (followed by the object's name) to pick it up. ";! [21: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [22: ~Of course, many things are anchored in place, or too large to carry. ~]
    ParaContent(); print "Of course, many things are anchored in place, or too large to carry. ";! [23: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [24: ~To put things down again, use the ~]
    ParaContent(); print "To put things down again, use the ";! [25: help-style]
    ParaContent(); print "~"; style bold;! [26: ~drop~]
    ParaContent(); print "drop";! [27: /help-style]
    ParaContent(); style roman; print "~";! [28: ~ command. (This generally puts an item down on the floor. To place it somewhere special, try ~]
    ParaContent(); print " command. (This generally puts an item down on the floor. To place it somewhere special, try ";! [29: help-style]
    ParaContent(); print "~"; style bold;! [30: ~put~]
    ParaContent(); print "put";! [31: help-this]
    ParaContent(); style roman; print " "; style underline; print "this"; style roman; print " "; style bold;! [32: ~in~]
    ParaContent(); print "in";! [33: help-that]
    ParaContent(); style roman; print " "; style underline; print "that"; style roman;! [34: /help-style]
    ParaContent(); style roman; print "~";! [35: ~ or ~]
    ParaContent(); print " or ";! [36: help-style]
    ParaContent(); print "~"; style bold;! [37: ~put~]
    ParaContent(); print "put";! [38: help-this]
    ParaContent(); style roman; print " "; style underline; print "this"; style roman; print " "; style bold;! [39: ~on~]
    ParaContent(); print "on";! [40: help-that]
    ParaContent(); style roman; print " "; style underline; print "that"; style roman;! [41: /help-style]
    ParaContent(); style roman; print "~";! [42: ~.) ~]
    ParaContent(); print ".) ";! [43: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [44: ~To see what you're carrying, type ~]
    ParaContent(); print "To see what you're carrying, type ";! [45: help-style]
    ParaContent(); print "~"; style bold;! [46: ~inventory~]
    ParaContent(); print "inventory";! [47: /help-style]
    ParaContent(); style roman; print "~";! [48: ~, or just ~]
    ParaContent(); print ", or just ";! [49: help-style]
    ParaContent(); print "~"; style bold;! [50: ~i~]
    ParaContent(); print "i";! [51: /help-style]
    ParaContent(); style roman; print "~";! [52: ~.~]
    ParaContent(); print "."; .L_Say789; .L_SayX784;rtrue;
];
[ R_TX_S_152 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]put[help-this]in[help-that][/help-style]: Place something into a container.
    [br][help-style]put[help-this]on[help-that][/help-style]: Place something onto a surface.
    [br][help-style]throw[help-this]at[help-that][/help-style]: Hurl something at a target.
    [para]When you discover a container, such as a sack or chest or drawer, you can say [help-style]put object in container[/help-style] to place something into it. (Of course, if the container has a lid, you'd want to [help-style]open[/help-style] it first.)
    [para]For tables, pedestals, and other such pieces of flat-on-top furniture, the command [help-style]put object on supporter[/help-style] is more appropriate.
    [para]And for targets out of reach, you may occasionally want to try [help-style]throw object at target[/help-style]. This is less commonly used; you tend to miss.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]put[help-this]in[help-that][/help-style]: Place something into a container. [br][help-style]put[help-this]on[help-that][/help-style]: Place something onto a surface. [br][help-style]throw[help-this]at[help-that][/help-style]: Hurl something at a target. [para]When you discover a container, such as a sack or chest or drawer, you can say [help-style]put object in container[/help-style] to place something into it. (Of course, if the container has a lid, you'd want to [help-style]open[/help-style] it first.) [para]For tables, pedestals, and other such pieces of flat-on-top furniture, the command [help-style]put object on supporter[/help-style] is more appropriate. [para]And for targets out of reach, you may occasionally want to try [help-style]throw object at target[/help-style]. This is less commonly used; you tend to miss.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~put~]
    ParaContent(); print "put";! [4: help-this]
    ParaContent(); style roman; print " "; style underline; print "this"; style roman; print " "; style bold;! [5: ~in~]
    ParaContent(); print "in";! [6: help-that]
    ParaContent(); style roman; print " "; style underline; print "that"; style roman;! [7: /help-style]
    ParaContent(); style roman; print "~";! [8: ~: Place something into a container. ~]
    ParaContent(); print ": Place something into a container. ";! [9: br]
    ParaContent(); new_line;! [10: help-style]
    ParaContent(); print "~"; style bold;! [11: ~put~]
    ParaContent(); print "put";! [12: help-this]
    ParaContent(); style roman; print " "; style underline; print "this"; style roman; print " "; style bold;! [13: ~on~]
    ParaContent(); print "on";! [14: help-that]
    ParaContent(); style roman; print " "; style underline; print "that"; style roman;! [15: /help-style]
    ParaContent(); style roman; print "~";! [16: ~: Place something onto a surface. ~]
    ParaContent(); print ": Place something onto a surface. ";! [17: br]
    ParaContent(); new_line;! [18: help-style]
    ParaContent(); print "~"; style bold;! [19: ~throw~]
    ParaContent(); print "throw";! [20: help-this]
    ParaContent(); style roman; print " "; style underline; print "this"; style roman; print " "; style bold;! [21: ~at~]
    ParaContent(); print "at";! [22: help-that]
    ParaContent(); style roman; print " "; style underline; print "that"; style roman;! [23: /help-style]
    ParaContent(); style roman; print "~";! [24: ~: Hurl something at a target. ~]
    ParaContent(); print ": Hurl something at a target. ";! [25: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [26: ~When you discover a container, such as a sack or chest or drawer, you can say ~]
    ParaContent(); print "When you discover a container, such as a sack or chest or drawer, you can say ";! [27: help-style]
    ParaContent(); print "~"; style bold;! [28: ~put object in container~]
    ParaContent(); print "put object in container";! [29: /help-style]
    ParaContent(); style roman; print "~";! [30: ~ to place something into it. (Of course, if the container has a lid, you'd want to ~]
    ParaContent(); print " to place something into it. (Of course, if the container has a lid, you'd want to ";! [31: help-style]
    ParaContent(); print "~"; style bold;! [32: ~open~]
    ParaContent(); print "open";! [33: /help-style]
    ParaContent(); style roman; print "~";! [34: ~ it first.) ~]
    ParaContent(); print " it first.) ";! [35: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [36: ~For tables, pedestals, and other such pieces of flat-on-top furniture, the command ~]
    ParaContent(); print "For tables, pedestals, and other such pieces of flat-on-top furniture, the command ";! [37: help-style]
    ParaContent(); print "~"; style bold;! [38: ~put object on supporter~]
    ParaContent(); print "put object on supporter";! [39: /help-style]
    ParaContent(); style roman; print "~";! [40: ~ is more appropriate. ~]
    ParaContent(); print " is more appropriate. ";! [41: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [42: ~And for targets out of reach, you may occasionally want to try ~]
    ParaContent(); print "And for targets out of reach, you may occasionally want to try ";! [43: help-style]
    ParaContent(); print "~"; style bold;! [44: ~throw object at target~]
    ParaContent(); print "throw object at target";! [45: /help-style]
    ParaContent(); style roman; print "~";! [46: ~. This is less commonly used; you tend to miss.~]
    ParaContent(); print ". This is less commonly used; you tend to miss."; .L_Say790; .L_SayX785;rtrue;
];
[ R_TX_S_153 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]push[help-thing][/help-style]: Give it a shove.
    [br][help-style]pull[help-thing][/help-style]: Give it a yank.
    [br][help-style]turn[help-thing][/help-style]: Give it a twist.
    [para]All sorts of things can be pushed, pulled, turned, or moved. Levers, buttons, and heavy crates are for pushing. Ropes and levers can be pulled. (Yes, some levers go both ways.) Knobs and dials and wheels are frequently turned.
    [para]Sometimes you'll want to use variations of these commands. If you find a lightswitch, you could type [help-style]turn on switch[/help-style] or [help-style]turn switch on[/help-style]. If a dial has numbers on it, like a combination lock, it may be helpful to say [help-style]turn dial to 8[/help-style] or [help-style]set dial to 8[/help-style].
    [para]Occasionally you find an object which is too heavy to lift, but not too heavy to be pushed around. Try [help-style]push object north[/help-style] to direct it.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]push[help-thing][/help-style]: Give it a shove. [br][help-style]pull[help-thing][/help-style]: Give it a yank. [br][help-style]turn[help-thing][/help-style]: Give it a twist. [para]All sorts of things can be pushed, pulled, turned, or moved. Levers, buttons, and heavy crates are for pushing. Ropes and levers can be pulled. (Yes, some levers go both ways.) Knobs and dials and wheels are frequently turned. [para]Sometimes you'll want to use variations of these commands. If you find a lightswitch, you could type [help-style]turn on switch[/help-style] or [help-style]turn switch on[/help-style]. If a dial has numbers on it, like a combination lock, it may be helpful to say [help-style]turn dial to 8[/help-style] or [help-style]set dial to 8[/help-style]. [para]Occasionally you find an object which is too heavy to lift, but not too heavy to be pushed around. Try [help-style]push object north[/help-style] to direct it.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~push~]
    ParaContent(); print "push";! [4: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [5: /help-style]
    ParaContent(); style roman; print "~";! [6: ~: Give it a shove. ~]
    ParaContent(); print ": Give it a shove. ";! [7: br]
    ParaContent(); new_line;! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~pull~]
    ParaContent(); print "pull";! [10: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [11: /help-style]
    ParaContent(); style roman; print "~";! [12: ~: Give it a yank. ~]
    ParaContent(); print ": Give it a yank. ";! [13: br]
    ParaContent(); new_line;! [14: help-style]
    ParaContent(); print "~"; style bold;! [15: ~turn~]
    ParaContent(); print "turn";! [16: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [17: /help-style]
    ParaContent(); style roman; print "~";! [18: ~: Give it a twist. ~]
    ParaContent(); print ": Give it a twist. ";! [19: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [20: ~All sorts of things can be pushed, pulled, turned, or moved. Levers, buttons, and heavy crates are for pushing. Ropes and levers can be pulled. (Yes, some levers go both ways.) Knobs and dials and wheels are frequently turned. ~]
    ParaContent(); print "All sorts of things can be pushed, pulled, turned, or moved. Levers, buttons, and heavy crates are for pushing. Ropes and levers can be pulled. (Yes, some levers go both ways.) Knobs and dials and wheels are frequently turned. ";! [21: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [22: ~Sometimes you'll want to use variations of these commands. If you find a lightswitch, you could type ~]
    ParaContent(); print "Sometimes you'll want to use variations of these commands. If you find a lightswitch, you could type ";! [23: help-style]
    ParaContent(); print "~"; style bold;! [24: ~turn on switch~]
    ParaContent(); print "turn on switch";! [25: /help-style]
    ParaContent(); style roman; print "~";! [26: ~ or ~]
    ParaContent(); print " or ";! [27: help-style]
    ParaContent(); print "~"; style bold;! [28: ~turn switch on~]
    ParaContent(); print "turn switch on";! [29: /help-style]
    ParaContent(); style roman; print "~";! [30: ~. If a dial has numbers on it, like a combination lock, it may be helpful to say ~]
    ParaContent(); print ". If a dial has numbers on it, like a combination lock, it may be helpful to say ";! [31: help-style]
    ParaContent(); print "~"; style bold;! [32: ~turn dial to 8~]
    ParaContent(); print "turn dial to 8";! [33: /help-style]
    ParaContent(); style roman; print "~";! [34: ~ or ~]
    ParaContent(); print " or ";! [35: help-style]
    ParaContent(); print "~"; style bold;! [36: ~set dial to 8~]
    ParaContent(); print "set dial to 8";! [37: /help-style]
    ParaContent(); style roman; print "~";! [38: ~. ~]
    ParaContent(); print ". ";! [39: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [40: ~Occasionally you find an object which is too heavy to lift, but not too heavy to be pushed around. Try ~]
    ParaContent(); print "Occasionally you find an object which is too heavy to lift, but not too heavy to be pushed around. Try ";! [41: help-style]
    ParaContent(); print "~"; style bold;! [42: ~push object north~]
    ParaContent(); print "push object north";! [43: /help-style]
    ParaContent(); style roman; print "~";! [44: ~ to direct it.~]
    ParaContent(); print " to direct it."; .L_Say791; .L_SayX786;rtrue;
];
[ R_TX_S_154 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]enter[help-thing][/help-style] or [help-style]get in[help-thing][/help-style]: Get into, say, a car.
    [br][help-style]sit on[help-thing][/help-style]: Sit down on, for example, a chair.
    [br][help-style]climb[help-thing][/help-style]: Climb, perhaps, a ladder.
    [br][help-style]get off[help-thing][/help-style] or [help-style]get out of[help-thing][/help-style]: Leave, e.g., a car or a chair. Or a cage. Or a chasm. Or...
    [para]These commands are good for moving around, if the simple directions ([help-style]north[/help-style], [help-style]south[/help-style], etc.) aren't what you want.
    [para]Don't be intimidated by the many variations. If you encounter an automobile, you can probably type [help-style]enter car[/help-style], [help-style]get in car[/help-style], [help-style]sit in car[/help-style], or [help-style]climb into car[/help-style]. In a well-written text game, any of the obvious possibilities will work.
    [para](However, for a car or a cage, you might have to use the [help-style]open[/help-style] command first.)
    [para]You can often abbreviate [help-style]get out of[help-thing][/help-style] as [help-style]exit[/help-style] or [help-style]out[/help-style]. Similarly, if you're standing outside a building, [help-style]in[/help-style] may work.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]enter[help-thing][/help-style] or [help-style]get in[help-thing][/help-style]: Get into, say, a car. [br][help-style]sit on[help-thing][/help-style]: Sit down on, for example, a chair. [br][help-style]climb[help-thing][/help-style]: Climb, perhaps, a ladder. [br][help-style]get off[help-thing][/help-style] or [help-style]get out of[help-thing][/help-style]: Leave, e.g., a car or a chair. Or a cage. Or a chasm. Or... [para]These commands are good for moving around, if the simple directions ([help-style]north[/help-style], [help-style]south[/help-style], etc.) aren't what you want. [para]Don't be intimidated by the many variations. If you encounter an automobile, you can probably type [help-style]enter car[/help-style], [help-style]get in car[/help-style], [help-style]sit in car[/help-style], or [help-style]climb into car[/help-style]. In a well-written text game, any of the obvious possibilities will work. [para](However, for a car or a cage, you might have to use the [help-style]open[/help-style] command first.) [para]You can often abbreviate [help-style]get out of[help-thing][/help-style] as [help-style]exit[/help-style] or [help-style]out[/help-style]. Similarly, if you're standing outside a building, [help-style]in[/help-style] may work.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~enter~]
    ParaContent(); print "enter";! [4: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [5: /help-style]
    ParaContent(); style roman; print "~";! [6: ~ or ~]
    ParaContent(); print " or ";! [7: help-style]
    ParaContent(); print "~"; style bold;! [8: ~get in~]
    ParaContent(); print "get in";! [9: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~: Get into, say, a car. ~]
    ParaContent(); print ": Get into, say, a car. ";! [12: br]
    ParaContent(); new_line;! [13: help-style]
    ParaContent(); print "~"; style bold;! [14: ~sit on~]
    ParaContent(); print "sit on";! [15: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [16: /help-style]
    ParaContent(); style roman; print "~";! [17: ~: Sit down on, for example, a chair. ~]
    ParaContent(); print ": Sit down on, for example, a chair. ";! [18: br]
    ParaContent(); new_line;! [19: help-style]
    ParaContent(); print "~"; style bold;! [20: ~climb~]
    ParaContent(); print "climb";! [21: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [22: /help-style]
    ParaContent(); style roman; print "~";! [23: ~: Climb, perhaps, a ladder. ~]
    ParaContent(); print ": Climb, perhaps, a ladder. ";! [24: br]
    ParaContent(); new_line;! [25: help-style]
    ParaContent(); print "~"; style bold;! [26: ~get off~]
    ParaContent(); print "get off";! [27: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [28: /help-style]
    ParaContent(); style roman; print "~";! [29: ~ or ~]
    ParaContent(); print " or ";! [30: help-style]
    ParaContent(); print "~"; style bold;! [31: ~get out of~]
    ParaContent(); print "get out of";! [32: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [33: /help-style]
    ParaContent(); style roman; print "~";! [34: ~: Leave, e.g., a car or a chair. Or a cage. Or a chasm. Or... ~]
    ParaContent(); print ": Leave, e.g., a car or a chair. Or a cage. Or a chasm. Or... ";! [35: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [36: ~These commands are good for moving around, if the simple directions (~]
    ParaContent(); print "These commands are good for moving around, if the simple directions (";! [37: help-style]
    ParaContent(); print "~"; style bold;! [38: ~north~]
    ParaContent(); print "north";! [39: /help-style]
    ParaContent(); style roman; print "~";! [40: ~, ~]
    ParaContent(); print ", ";! [41: help-style]
    ParaContent(); print "~"; style bold;! [42: ~south~]
    ParaContent(); print "south";! [43: /help-style]
    ParaContent(); style roman; print "~";! [44: ~, etc.) aren't what you want. ~]
    ParaContent(); print ", etc.) aren't what you want. ";! [45: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [46: ~Don't be intimidated by the many variations. If you encounter an automobile, you can probably type ~]
    ParaContent(); print "Don't be intimidated by the many variations. If you encounter an automobile, you can probably type ";! [47: help-style]
    ParaContent(); print "~"; style bold;! [48: ~enter car~]
    ParaContent(); print "enter car";! [49: /help-style]
    ParaContent(); style roman; print "~";! [50: ~, ~]
    ParaContent(); print ", ";! [51: help-style]
    ParaContent(); print "~"; style bold;! [52: ~get in car~]
    ParaContent(); print "get in car";! [53: /help-style]
    ParaContent(); style roman; print "~";! [54: ~, ~]
    ParaContent(); print ", ";! [55: help-style]
    ParaContent(); print "~"; style bold;! [56: ~sit in car~]
    ParaContent(); print "sit in car";! [57: /help-style]
    ParaContent(); style roman; print "~";! [58: ~, or ~]
    ParaContent(); print ", or ";! [59: help-style]
    ParaContent(); print "~"; style bold;! [60: ~climb into car~]
    ParaContent(); print "climb into car";! [61: /help-style]
    ParaContent(); style roman; print "~";! [62: ~. In a well-written text game, any of the obvious possibilities will work. ~]
    ParaContent(); print ". In a well-written text game, any of the obvious possibilities will work. ";! [63: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [64: ~(However, for a car or a cage, you might have to use the ~]
    ParaContent(); print "(However, for a car or a cage, you might have to use the ";! [65: help-style]
    ParaContent(); print "~"; style bold;! [66: ~open~]
    ParaContent(); print "open";! [67: /help-style]
    ParaContent(); style roman; print "~";! [68: ~ command first.) ~]
    ParaContent(); print " command first.) ";! [69: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [70: ~You can often abbreviate ~]
    ParaContent(); print "You can often abbreviate ";! [71: help-style]
    ParaContent(); print "~"; style bold;! [72: ~get out of~]
    ParaContent(); print "get out of";! [73: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [74: /help-style]
    ParaContent(); style roman; print "~";! [75: ~ as ~]
    ParaContent(); print " as ";! [76: help-style]
    ParaContent(); print "~"; style bold;! [77: ~exit~]
    ParaContent(); print "exit";! [78: /help-style]
    ParaContent(); style roman; print "~";! [79: ~ or ~]
    ParaContent(); print " or ";! [80: help-style]
    ParaContent(); print "~"; style bold;! [81: ~out~]
    ParaContent(); print "out";! [82: /help-style]
    ParaContent(); style roman; print "~";! [83: ~. Similarly, if you're standing outside a building, ~]
    ParaContent(); print ". Similarly, if you're standing outside a building, ";! [84: help-style]
    ParaContent(); print "~"; style bold;! [85: ~in~]
    ParaContent(); print "in";! [86: /help-style]
    ParaContent(); style roman; print "~";! [87: ~ may work.~]
    ParaContent(); print " may work."; .L_Say792; .L_SayX787;rtrue;
];
[ R_TX_S_155 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]open[help-thing][/help-style]: Open something.
    [br][help-style]close[help-thing][/help-style]: Close something.
    [para]These commands are good for boxes, doors, wardrobes, windows, wallets, and dozens of other exciting uses.
    [para]If you not sure whether something is opened or closed, [help-style]examine[/help-style] it. If a container is open, you can probably [help-style]search[/help-style] or [help-style]look into[/help-style] it.
    [para]In some circumstances, [help-style]open[/help-style] will happen automatically. If there is a closed door to the north, and you type [help-style]north[/help-style], the game may tell you that you have opened the door and walked through. Or not -- you may have to type [help-style]open door[/help-style]. It depends on the style of the game, the nature of the door, and the mood of the author.
    [para]On the other hand, you may find that the door is locked. If so, consider the [help-style]unlock[/help-style] command.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]open[help-thing][/help-style]: Open something. [br][help-style]close[help-thing][/help-style]: Close something. [para]These commands are good for boxes, doors, wardrobes, windows, wallets, and dozens of other exciting uses. [para]If you not sure whether something is opened or closed, [help-style]examine[/help-style] it. If a container is open, you can probably [help-style]search[/help-style] or [help-style]look into[/help-style] it. [para]In some circumstances, [help-style]open[/help-style] will happen automatically. If there is a closed door to the north, and you type [help-style]north[/help-style], the game may tell you that you have opened the door and walked through. Or not -- you may have to type [help-style]open door[/help-style]. It depends on the style of the game, the nature of the door, and the mood of the author. [para]On the other hand, you may find that the door is locked. If so, consider the [help-style]unlock[/help-style] command.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~open~]
    ParaContent(); print "open";! [4: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [5: /help-style]
    ParaContent(); style roman; print "~";! [6: ~: Open something. ~]
    ParaContent(); print ": Open something. ";! [7: br]
    ParaContent(); new_line;! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~close~]
    ParaContent(); print "close";! [10: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [11: /help-style]
    ParaContent(); style roman; print "~";! [12: ~: Close something. ~]
    ParaContent(); print ": Close something. ";! [13: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [14: ~These commands are good for boxes, doors, wardrobes, windows, wallets, and dozens of other exciting uses. ~]
    ParaContent(); print "These commands are good for boxes, doors, wardrobes, windows, wallets, and dozens of other exciting uses. ";! [15: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [16: ~If you not sure whether something is opened or closed, ~]
    ParaContent(); print "If you not sure whether something is opened or closed, ";! [17: help-style]
    ParaContent(); print "~"; style bold;! [18: ~examine~]
    ParaContent(); print "examine";! [19: /help-style]
    ParaContent(); style roman; print "~";! [20: ~ it. If a container is open, you can probably ~]
    ParaContent(); print " it. If a container is open, you can probably ";! [21: help-style]
    ParaContent(); print "~"; style bold;! [22: ~search~]
    ParaContent(); print "search";! [23: /help-style]
    ParaContent(); style roman; print "~";! [24: ~ or ~]
    ParaContent(); print " or ";! [25: help-style]
    ParaContent(); print "~"; style bold;! [26: ~look into~]
    ParaContent(); print "look into";! [27: /help-style]
    ParaContent(); style roman; print "~";! [28: ~ it. ~]
    ParaContent(); print " it. ";! [29: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [30: ~In some circumstances, ~]
    ParaContent(); print "In some circumstances, ";! [31: help-style]
    ParaContent(); print "~"; style bold;! [32: ~open~]
    ParaContent(); print "open";! [33: /help-style]
    ParaContent(); style roman; print "~";! [34: ~ will happen automatically. If there is a closed door to the north, and you type ~]
    ParaContent(); print " will happen automatically. If there is a closed door to the north, and you type ";! [35: help-style]
    ParaContent(); print "~"; style bold;! [36: ~north~]
    ParaContent(); print "north";! [37: /help-style]
    ParaContent(); style roman; print "~";! [38: ~, the game may tell you that you have opened the door and walked through. Or not -- you may have to type ~]
    ParaContent(); print ", the game may tell you that you have opened the door and walked through. Or not -- you may have to type ";! [39: help-style]
    ParaContent(); print "~"; style bold;! [40: ~open door~]
    ParaContent(); print "open door";! [41: /help-style]
    ParaContent(); style roman; print "~";! [42: ~. It depends on the style of the game, the nature of the door, and the mood of the author. ~]
    ParaContent(); print ". It depends on the style of the game, the nature of the door, and the mood of the author. ";! [43: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [44: ~On the other hand, you may find that the door is locked. If so, consider the ~]
    ParaContent(); print "On the other hand, you may find that the door is locked. If so, consider the ";! [45: help-style]
    ParaContent(); print "~"; style bold;! [46: ~unlock~]
    ParaContent(); print "unlock";! [47: /help-style]
    ParaContent(); style roman; print "~";! [48: ~ command.~]
    ParaContent(); print " command."; .L_Say793; .L_SayX788;rtrue;
];
[ R_TX_S_156 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]lock[help-this]with[help-that][/help-style]: Secure what is free.
    [br][help-style]unlock[help-this]with[help-that][/help-style]: Loose what is bound.
    [para]Many things can be opened and closed; some can also be locked and unlocked. You will meet a lot of locked doors in adventure games. They are hazards of the course.
    [para]Typically a lock requires a key. (Although you never know.) Usually you have to [help-style]close[/help-style] a door or box before you [help-style]lock[/help-style] it -- although, again, there may be exceptions. Always examine what you find, and consider well its nature.
    [para]In some games, you can just type [help-style]unlock door[/help-style] instead of [help-style]unlock door with key[/help-style]. If you have the correct key, the game will probably understand that you mean to use it.
    [para]On the other hand, if you don't [italic type]know[roman type] which key is correct, the game may leave it up to you. Trial and error, too, is a hazard of the course.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]lock[help-this]with[help-that][/help-style]: Secure what is free. [br][help-style]unlock[help-this]with[help-that][/help-style]: Loose what is bound. [para]Many things can be opened and closed; some can also be locked and unlocked. You will meet a lot of locked doors in adventure games. They are hazards of the course. [para]Typically a lock requires a key. (Although you never know.) Usually you have to [help-style]close[/help-style] a door or box before you [help-style]lock[/help-style] it -- although, again, there may be exceptions. Always examine what you find, and consider well its nature. [para]In some games, you can just type [help-style]unlock door[/help-style] instead of [help-style]unlock door with key[/help-style]. If you have the correct key, the game will probably understand that you mean to use it. [para]On the other hand, if you don't [italic type]know[roman type] which key is correct, the game may leave it up to you. Trial and error, too, is a hazard of the course.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~lock~]
    ParaContent(); print "lock";! [4: help-this]
    ParaContent(); style roman; print " "; style underline; print "this"; style roman; print " "; style bold;! [5: ~with~]
    ParaContent(); print "with";! [6: help-that]
    ParaContent(); style roman; print " "; style underline; print "that"; style roman;! [7: /help-style]
    ParaContent(); style roman; print "~";! [8: ~: Secure what is free. ~]
    ParaContent(); print ": Secure what is free. ";! [9: br]
    ParaContent(); new_line;! [10: help-style]
    ParaContent(); print "~"; style bold;! [11: ~unlock~]
    ParaContent(); print "unlock";! [12: help-this]
    ParaContent(); style roman; print " "; style underline; print "this"; style roman; print " "; style bold;! [13: ~with~]
    ParaContent(); print "with";! [14: help-that]
    ParaContent(); style roman; print " "; style underline; print "that"; style roman;! [15: /help-style]
    ParaContent(); style roman; print "~";! [16: ~: Loose what is bound. ~]
    ParaContent(); print ": Loose what is bound. ";! [17: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [18: ~Many things can be opened and closed; some can also be locked and unlocked. You will meet a lot of locked doors in adventure games. They are hazards of the course. ~]
    ParaContent(); print "Many things can be opened and closed; some can also be locked and unlocked. You will meet a lot of locked doors in adventure games. They are hazards of the course. ";! [19: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [20: ~Typically a lock requires a key. (Although you never know.) Usually you have to ~]
    ParaContent(); print "Typically a lock requires a key. (Although you never know.) Usually you have to ";! [21: help-style]
    ParaContent(); print "~"; style bold;! [22: ~close~]
    ParaContent(); print "close";! [23: /help-style]
    ParaContent(); style roman; print "~";! [24: ~ a door or box before you ~]
    ParaContent(); print " a door or box before you ";! [25: help-style]
    ParaContent(); print "~"; style bold;! [26: ~lock~]
    ParaContent(); print "lock";! [27: /help-style]
    ParaContent(); style roman; print "~";! [28: ~ it -- although, again, there may be exceptions. Always examine what you find, and consider well its nature. ~]
    ParaContent(); print " it -- although, again, there may be exceptions. Always examine what you find, and consider well its nature. ";! [29: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [30: ~In some games, you can just type ~]
    ParaContent(); print "In some games, you can just type ";! [31: help-style]
    ParaContent(); print "~"; style bold;! [32: ~unlock door~]
    ParaContent(); print "unlock door";! [33: /help-style]
    ParaContent(); style roman; print "~";! [34: ~ instead of ~]
    ParaContent(); print " instead of ";! [35: help-style]
    ParaContent(); print "~"; style bold;! [36: ~unlock door with key~]
    ParaContent(); print "unlock door with key";! [37: /help-style]
    ParaContent(); style roman; print "~";! [38: ~. If you have the correct key, the game will probably understand that you mean to use it. ~]
    ParaContent(); print ". If you have the correct key, the game will probably understand that you mean to use it. ";! [39: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [40: ~On the other hand, if you don't ~]
    ParaContent(); print "On the other hand, if you don't ";! [41: italic type]
    ParaContent(); style underline;! [42: ~know~]
    ParaContent(); print "know";! [43: roman type]
    ParaContent(); style roman;! [44: ~ which key is correct, the game may leave it up to you. Trial and error, too, is a hazard of the course.~]
    ParaContent(); print " which key is correct, the game may leave it up to you. Trial and error, too, is a hazard of the course."; .L_Say794; .L_SayX789;rtrue;
];
[ R_TX_S_157 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]touch[help-thing][/help-style]: Feel something gently.
    [br][help-style]smell[help-thing][/help-style]: Consider its scent.
    [br][help-style]listen to[help-thing][/help-style]: What does it sound like?
    [para]A close investigation is often rewarded. You've already used [help-style]examine[/help-style] on everything in sight; but perhaps you haven't tried [help-style]touch[/help-style] or [help-style]feel[/help-style] on everything in reach; or [help-style]listen to[/help-style] on everything in earshot; or [help-style]smell[/help-style] on everything in... er... noseblow?
    [para](You can even try [help-style]taste[/help-style], although this may wind up being the same as [help-style]eat[/help-style].)
    [para]You can also try just [help-style]listen[/help-style] or [help-style]smell[/help-style], with no nouns, to get a general sense of your surroundings.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]touch[help-thing][/help-style]: Feel something gently. [br][help-style]smell[help-thing][/help-style]: Consider its scent. [br][help-style]listen to[help-thing][/help-style]: What does it sound like? [para]A close investigation is often rewarded. You've already used [help-style]examine[/help-style] on everything in sight; but perhaps you haven't tried [help-style]touch[/help-style] or [help-style]feel[/help-style] on everything in reach; or [help-style]listen to[/help-style] on everything in earshot; or [help-style]smell[/help-style] on everything in... er... noseblow? [para](You can even try [help-style]taste[/help-style], although this may wind up being the same as [help-style]eat[/help-style].) [para]You can also try just [help-style]listen[/help-style] or [help-style]smell[/help-style], with no nouns, to get a general sense of your surroundings.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~touch~]
    ParaContent(); print "touch";! [4: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [5: /help-style]
    ParaContent(); style roman; print "~";! [6: ~: Feel something gently. ~]
    ParaContent(); print ": Feel something gently. ";! [7: br]
    ParaContent(); new_line;! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~smell~]
    ParaContent(); print "smell";! [10: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [11: /help-style]
    ParaContent(); style roman; print "~";! [12: ~: Consider its scent. ~]
    ParaContent(); print ": Consider its scent. ";! [13: br]
    ParaContent(); new_line;! [14: help-style]
    ParaContent(); print "~"; style bold;! [15: ~listen to~]
    ParaContent(); print "listen to";! [16: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [17: /help-style]
    ParaContent(); style roman; print "~";! [18: ~: What does it sound like? ~]
    ParaContent(); print ": What does it sound like? ";! [19: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [20: ~A close investigation is often rewarded. You've already used ~]
    ParaContent(); print "A close investigation is often rewarded. You've already used ";! [21: help-style]
    ParaContent(); print "~"; style bold;! [22: ~examine~]
    ParaContent(); print "examine";! [23: /help-style]
    ParaContent(); style roman; print "~";! [24: ~ on everything in sight; but perhaps you haven't tried ~]
    ParaContent(); print " on everything in sight; but perhaps you haven't tried ";! [25: help-style]
    ParaContent(); print "~"; style bold;! [26: ~touch~]
    ParaContent(); print "touch";! [27: /help-style]
    ParaContent(); style roman; print "~";! [28: ~ or ~]
    ParaContent(); print " or ";! [29: help-style]
    ParaContent(); print "~"; style bold;! [30: ~feel~]
    ParaContent(); print "feel";! [31: /help-style]
    ParaContent(); style roman; print "~";! [32: ~ on everything in reach; or ~]
    ParaContent(); print " on everything in reach; or ";! [33: help-style]
    ParaContent(); print "~"; style bold;! [34: ~listen to~]
    ParaContent(); print "listen to";! [35: /help-style]
    ParaContent(); style roman; print "~";! [36: ~ on everything in earshot; or ~]
    ParaContent(); print " on everything in earshot; or ";! [37: help-style]
    ParaContent(); print "~"; style bold;! [38: ~smell~]
    ParaContent(); print "smell";! [39: /help-style]
    ParaContent(); style roman; print "~";! [40: ~ on everything in... er... noseblow? ~]
    ParaContent(); print " on everything in... er... noseblow? ";! [41: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [42: ~(You can even try ~]
    ParaContent(); print "(You can even try ";! [43: help-style]
    ParaContent(); print "~"; style bold;! [44: ~taste~]
    ParaContent(); print "taste";! [45: /help-style]
    ParaContent(); style roman; print "~";! [46: ~, although this may wind up being the same as ~]
    ParaContent(); print ", although this may wind up being the same as ";! [47: help-style]
    ParaContent(); print "~"; style bold;! [48: ~eat~]
    ParaContent(); print "eat";! [49: /help-style]
    ParaContent(); style roman; print "~";! [50: ~.) ~]
    ParaContent(); print ".) ";! [51: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [52: ~You can also try just ~]
    ParaContent(); print "You can also try just ";! [53: help-style]
    ParaContent(); print "~"; style bold;! [54: ~listen~]
    ParaContent(); print "listen";! [55: /help-style]
    ParaContent(); style roman; print "~";! [56: ~ or ~]
    ParaContent(); print " or ";! [57: help-style]
    ParaContent(); print "~"; style bold;! [58: ~smell~]
    ParaContent(); print "smell";! [59: /help-style]
    ParaContent(); style roman; print "~";! [60: ~, with no nouns, to get a general sense of your surroundings.~]
    ParaContent(); print ", with no nouns, to get a general sense of your surroundings."; .L_Say795; .L_SayX790;rtrue;
];
[ R_TX_S_158 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]eat[help-thing][/help-style]: Consume food.
    [br][help-style]drink[help-thing][/help-style]: Consume a beverage.
    [para]Just what you think. Whether it's a tasty sandwich or a moldy old mushroom, you can try to [help-style]eat[/help-style] it. (Whether this is a good idea is another question entirely. Remember what happened to Alice.)
    [para]Similarly, you can [help-style]drink[/help-style] a glass of water, a flagon of wine, or a vial of quintessential potion. Potions may have strange and magical effects. Then again, so may the mushrooms.
    [para]You may have to [help-style]get[/help-style] something before you can eat or drink it.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]eat[help-thing][/help-style]: Consume food. [br][help-style]drink[help-thing][/help-style]: Consume a beverage. [para]Just what you think. Whether it's a tasty sandwich or a moldy old mushroom, you can try to [help-style]eat[/help-style] it. (Whether this is a good idea is another question entirely. Remember what happened to Alice.) [para]Similarly, you can [help-style]drink[/help-style] a glass of water, a flagon of wine, or a vial of quintessential potion. Potions may have strange and magical effects. Then again, so may the mushrooms. [para]You may have to [help-style]get[/help-style] something before you can eat or drink it.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~eat~]
    ParaContent(); print "eat";! [4: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [5: /help-style]
    ParaContent(); style roman; print "~";! [6: ~: Consume food. ~]
    ParaContent(); print ": Consume food. ";! [7: br]
    ParaContent(); new_line;! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~drink~]
    ParaContent(); print "drink";! [10: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [11: /help-style]
    ParaContent(); style roman; print "~";! [12: ~: Consume a beverage. ~]
    ParaContent(); print ": Consume a beverage. ";! [13: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [14: ~Just what you think. Whether it's a tasty sandwich or a moldy old mushroom, you can try to ~]
    ParaContent(); print "Just what you think. Whether it's a tasty sandwich or a moldy old mushroom, you can try to ";! [15: help-style]
    ParaContent(); print "~"; style bold;! [16: ~eat~]
    ParaContent(); print "eat";! [17: /help-style]
    ParaContent(); style roman; print "~";! [18: ~ it. (Whether this is a good idea is another question entirely. Remember what happened to Alice.) ~]
    ParaContent(); print " it. (Whether this is a good idea is another question entirely. Remember what happened to Alice.) ";! [19: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [20: ~Similarly, you can ~]
    ParaContent(); print "Similarly, you can ";! [21: help-style]
    ParaContent(); print "~"; style bold;! [22: ~drink~]
    ParaContent(); print "drink";! [23: /help-style]
    ParaContent(); style roman; print "~";! [24: ~ a glass of water, a flagon of wine, or a vial of quintessential potion. Potions may have strange and magical effects. Then again, so may the mushrooms. ~]
    ParaContent(); print " a glass of water, a flagon of wine, or a vial of quintessential potion. Potions may have strange and magical effects. Then again, so may the mushrooms. ";! [25: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [26: ~You may have to ~]
    ParaContent(); print "You may have to ";! [27: help-style]
    ParaContent(); print "~"; style bold;! [28: ~get~]
    ParaContent(); print "get";! [29: /help-style]
    ParaContent(); style roman; print "~";! [30: ~ something before you can eat or drink it.~]
    ParaContent(); print " something before you can eat or drink it."; .L_Say796; .L_SayX791;rtrue;
];
[ R_TX_S_159 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]wear[help-thing][/help-style] or [help-style]put on[help-thing][/help-style]: Put on an article of clothing.
    [br][help-style]remove[help-thing][/help-style] or [help-style]take off[help-thing][/help-style]: Take it off again.
    [para]Clothing is meant to be worn -- be it a dinner jacket or a space suit. Then there are items of personal adornment, like helmets, crowns, necklaces, and rings. (Magical? Who can tell?) Use the [help-style]wear[/help-style] and [help-style]remove[/help-style] commands. You can also [help-style]drop[/help-style] something you're wearing, which will both remove it and drop it on the floor.
    [para](Type [help-style]inventory[/help-style] or [help-style]i[/help-style] to see if you're wearing something or just carrying it around.)
    [para]Your ordinary everyday clothes are usually [italic type]not[roman type] listed in your inventory; and you can't take them off or discard them. Don't worry about them unless the game specifically refers to them.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]wear[help-thing][/help-style] or [help-style]put on[help-thing][/help-style]: Put on an article of clothing. [br][help-style]remove[help-thing][/help-style] or [help-style]take off[help-thing][/help-style]: Take it off again. [para]Clothing is meant to be worn -- be it a dinner jacket or a space suit. Then there are items of personal adornment, like helmets, crowns, necklaces, and rings. (Magical? Who can tell?) Use the [help-style]wear[/help-style] and [help-style]remove[/help-style] commands. You can also [help-style]drop[/help-style] something you're wearing, which will both remove it and drop it on the floor. [para](Type [help-style]inventory[/help-style] or [help-style]i[/help-style] to see if you're wearing something or just carrying it around.) [para]Your ordinary everyday clothes are usually [italic type]not[roman type] listed in your inventory; and you can't take them off or discard them. Don't worry about them unless the game specifically refers to them.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~wear~]
    ParaContent(); print "wear";! [4: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [5: /help-style]
    ParaContent(); style roman; print "~";! [6: ~ or ~]
    ParaContent(); print " or ";! [7: help-style]
    ParaContent(); print "~"; style bold;! [8: ~put on~]
    ParaContent(); print "put on";! [9: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~: Put on an article of clothing. ~]
    ParaContent(); print ": Put on an article of clothing. ";! [12: br]
    ParaContent(); new_line;! [13: help-style]
    ParaContent(); print "~"; style bold;! [14: ~remove~]
    ParaContent(); print "remove";! [15: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [16: /help-style]
    ParaContent(); style roman; print "~";! [17: ~ or ~]
    ParaContent(); print " or ";! [18: help-style]
    ParaContent(); print "~"; style bold;! [19: ~take off~]
    ParaContent(); print "take off";! [20: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [21: /help-style]
    ParaContent(); style roman; print "~";! [22: ~: Take it off again. ~]
    ParaContent(); print ": Take it off again. ";! [23: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [24: ~Clothing is meant to be worn -- be it a dinner jacket or a space suit. Then there are items of personal adornment, like helmets, crowns, necklaces, and rings. (Magical? Who can tell?) Use the ~]
    ParaContent(); print "Clothing is meant to be worn -- be it a dinner jacket or a space suit. Then there are items of personal adornment, like helmets, crowns, necklaces, and rings. (Magical? Who can tell?) Use the ";! [25: help-style]
    ParaContent(); print "~"; style bold;! [26: ~wear~]
    ParaContent(); print "wear";! [27: /help-style]
    ParaContent(); style roman; print "~";! [28: ~ and ~]
    ParaContent(); print " and ";! [29: help-style]
    ParaContent(); print "~"; style bold;! [30: ~remove~]
    ParaContent(); print "remove";! [31: /help-style]
    ParaContent(); style roman; print "~";! [32: ~ commands. You can also ~]
    ParaContent(); print " commands. You can also ";! [33: help-style]
    ParaContent(); print "~"; style bold;! [34: ~drop~]
    ParaContent(); print "drop";! [35: /help-style]
    ParaContent(); style roman; print "~";! [36: ~ something you're wearing, which will both remove it and drop it on the floor. ~]
    ParaContent(); print " something you're wearing, which will both remove it and drop it on the floor. ";! [37: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [38: ~(Type ~]
    ParaContent(); print "(Type ";! [39: help-style]
    ParaContent(); print "~"; style bold;! [40: ~inventory~]
    ParaContent(); print "inventory";! [41: /help-style]
    ParaContent(); style roman; print "~";! [42: ~ or ~]
    ParaContent(); print " or ";! [43: help-style]
    ParaContent(); print "~"; style bold;! [44: ~i~]
    ParaContent(); print "i";! [45: /help-style]
    ParaContent(); style roman; print "~";! [46: ~ to see if you're wearing something or just carrying it around.) ~]
    ParaContent(); print " to see if you're wearing something or just carrying it around.) ";! [47: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [48: ~Your ordinary everyday clothes are usually ~]
    ParaContent(); print "Your ordinary everyday clothes are usually ";! [49: italic type]
    ParaContent(); style underline;! [50: ~not~]
    ParaContent(); print "not";! [51: roman type]
    ParaContent(); style roman;! [52: ~ listed in your inventory; and you can't take them off or discard them. Don't worry about them unless the game specifically refers to them.~]
    ParaContent(); print " listed in your inventory; and you can't take them off or discard them. Don't worry about them unless the game specifically refers to them."; .L_Say797; .L_SayX792;rtrue;
];
[ R_TX_S_160 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]search[help-thing][/help-style] or [help-style]look in[help-thing][/help-style]: Look through the contents of something.
    [br][help-style]look under[help-thing][/help-style]: Check underneath it.
    [br][help-style]look behind[help-thing][/help-style]: Check behind it.
    [para]The [help-style]search[/help-style] command is an extremely thorough version of [help-style]examine[/help-style]. Searching something may reveal nothing more than examining it; but if you see a drawer full of papers, or a heap of junk, a careful [help-style]search[/help-style] can turn up hidden secrets. It may even be worth searching several times in a row.
    [para]The [help-style]look under[/help-style] and [help-style]look behind[/help-style] commands are less commonly used, but they are helpful now and then.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]search[help-thing][/help-style] or [help-style]look in[help-thing][/help-style]: Look through the contents of something. [br][help-style]look under[help-thing][/help-style]: Check underneath it. [br][help-style]look behind[help-thing][/help-style]: Check behind it. [para]The [help-style]search[/help-style] command is an extremely thorough version of [help-style]examine[/help-style]. Searching something may reveal nothing more than examining it; but if you see a drawer full of papers, or a heap of junk, a careful [help-style]search[/help-style] can turn up hidden secrets. It may even be worth searching several times in a row. [para]The [help-style]look under[/help-style] and [help-style]look behind[/help-style] commands are less commonly used, but they are helpful now and then.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~search~]
    ParaContent(); print "search";! [4: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [5: /help-style]
    ParaContent(); style roman; print "~";! [6: ~ or ~]
    ParaContent(); print " or ";! [7: help-style]
    ParaContent(); print "~"; style bold;! [8: ~look in~]
    ParaContent(); print "look in";! [9: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~: Look through the contents of something. ~]
    ParaContent(); print ": Look through the contents of something. ";! [12: br]
    ParaContent(); new_line;! [13: help-style]
    ParaContent(); print "~"; style bold;! [14: ~look under~]
    ParaContent(); print "look under";! [15: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [16: /help-style]
    ParaContent(); style roman; print "~";! [17: ~: Check underneath it. ~]
    ParaContent(); print ": Check underneath it. ";! [18: br]
    ParaContent(); new_line;! [19: help-style]
    ParaContent(); print "~"; style bold;! [20: ~look behind~]
    ParaContent(); print "look behind";! [21: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [22: /help-style]
    ParaContent(); style roman; print "~";! [23: ~: Check behind it. ~]
    ParaContent(); print ": Check behind it. ";! [24: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [25: ~The ~]
    ParaContent(); print "The ";! [26: help-style]
    ParaContent(); print "~"; style bold;! [27: ~search~]
    ParaContent(); print "search";! [28: /help-style]
    ParaContent(); style roman; print "~";! [29: ~ command is an extremely thorough version of ~]
    ParaContent(); print " command is an extremely thorough version of ";! [30: help-style]
    ParaContent(); print "~"; style bold;! [31: ~examine~]
    ParaContent(); print "examine";! [32: /help-style]
    ParaContent(); style roman; print "~";! [33: ~. Searching something may reveal nothing more than examining it; but if you see a drawer full of papers, or a heap of junk, a careful ~]
    ParaContent(); print ". Searching something may reveal nothing more than examining it; but if you see a drawer full of papers, or a heap of junk, a careful ";! [34: help-style]
    ParaContent(); print "~"; style bold;! [35: ~search~]
    ParaContent(); print "search";! [36: /help-style]
    ParaContent(); style roman; print "~";! [37: ~ can turn up hidden secrets. It may even be worth searching several times in a row. ~]
    ParaContent(); print " can turn up hidden secrets. It may even be worth searching several times in a row. ";! [38: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [39: ~The ~]
    ParaContent(); print "The ";! [40: help-style]
    ParaContent(); print "~"; style bold;! [41: ~look under~]
    ParaContent(); print "look under";! [42: /help-style]
    ParaContent(); style roman; print "~";! [43: ~ and ~]
    ParaContent(); print " and ";! [44: help-style]
    ParaContent(); print "~"; style bold;! [45: ~look behind~]
    ParaContent(); print "look behind";! [46: /help-style]
    ParaContent(); style roman; print "~";! [47: ~ commands are less commonly used, but they are helpful now and then.~]
    ParaContent(); print " commands are less commonly used, but they are helpful now and then."; .L_Say798; .L_SayX793;rtrue;
];
[ R_TX_S_161 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]hit[help-thing][/help-style]: Employ violence.
    [br][help-style]hit[help-this]with[help-that][/help-style]: Employ violence with a particular tool.
    [para]There are many things you might want to destroy, in IF, and many reasons to destroy them. The window, to break; the rope, to cut; the magical crystal, to shatter; the foul monster, to stab and slice and attack.
    [para]These commands vary from game to game. All the words mentioned above can work. They tend to be somewhat interchangeable: the game will not quibble about whether you want to [help-style]fight[/help-style] or [help-style]attack[/help-style] the troll. And you'll certainly get the same result whether you [help-style]break[/help-style] the delicate vase or [help-style]hit[/help-style] it.
    [para]In some games, you may need to specify a weapon: [help-style]hit troll with sword[/help-style]. In others, the game may assume you intend to use whatever sharp pointy thing you're carrying around. If you have none, you'd better be good with your fists.
    [para]Sometimes, though, it matters which tool you use. [help-style]break wall with pickaxe[/help-style] is more likely to work than [help-style]break wall with dagger[/help-style]. If you just type [help-style]break wall[/help-style] the game may not guess correctly. Be specific, if you think it matters.
    [para]In some games, by the way, violence is frowned on. A warrior in a goblins['] lair is going to be hitting a lot of goblins. But if the game is set in your home, you probably don't want to smash everything in sight. Look for other solutions.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]hit[help-thing][/help-style]: Employ violence. [br][help-style]hit[help-this]with[help-that][/help-style]: Employ violence with a particular tool. [para]There are many things you might want to destroy, in IF, and many reasons to destroy them. The window, to break; the rope, to cut; the magical crystal, to shatter; the foul monster, to stab and slice and attack. [para]These commands vary from game to game. All the words mentioned above can work. They tend to be somewhat interchangeable: the game will not quibble about whether you want to [help-style]fight[/help-style] or [help-style]attack[/help-style] the troll. And you'll certainly get the same result whether you [help-style]break[/help-style] the delicate vase or [help-style]hit[/help-style] it. [para]In some games, you may need to specify a weapon: [help-style]hit troll with sword[/help-style]. In others, the game may assume you intend to use whatever sharp pointy thing you're carrying around. If you have none, you'd better be good with your fists. [para]Sometimes, though, it matters which tool you use. [help-style]break wall with pickaxe[/help-style] is more likely to work than [help-style]break wall with dagger[/help-style]. If you just type [help-style]break wall[/help-style] the game may not guess correctly. Be specific, if you think it matters. [para]In some games, by the way, violence is frowned on. A warrior in a goblins['] lair is going to be hitting a lot of goblins. But if the game is set in your home, you probably don't want to smash everything in sight. Look for other solutions.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~hit~]
    ParaContent(); print "hit";! [4: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [5: /help-style]
    ParaContent(); style roman; print "~";! [6: ~: Employ violence. ~]
    ParaContent(); print ": Employ violence. ";! [7: br]
    ParaContent(); new_line;! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~hit~]
    ParaContent(); print "hit";! [10: help-this]
    ParaContent(); style roman; print " "; style underline; print "this"; style roman; print " "; style bold;! [11: ~with~]
    ParaContent(); print "with";! [12: help-that]
    ParaContent(); style roman; print " "; style underline; print "that"; style roman;! [13: /help-style]
    ParaContent(); style roman; print "~";! [14: ~: Employ violence with a particular tool. ~]
    ParaContent(); print ": Employ violence with a particular tool. ";! [15: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [16: ~There are many things you might want to destroy, in IF, and many reasons to destroy them. The window, to break; the rope, to cut; the magical crystal, to shatter; the foul monster, to stab and slice and attack. ~]
    ParaContent(); print "There are many things you might want to destroy, in IF, and many reasons to destroy them. The window, to break; the rope, to cut; the magical crystal, to shatter; the foul monster, to stab and slice and attack. ";! [17: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [18: ~These commands vary from game to game. All the words mentioned above can work. They tend to be somewhat interchangeable: the game will not quibble about whether you want to ~]
    ParaContent(); print "These commands vary from game to game. All the words mentioned above can work. They tend to be somewhat interchangeable: the game will not quibble about whether you want to ";! [19: help-style]
    ParaContent(); print "~"; style bold;! [20: ~fight~]
    ParaContent(); print "fight";! [21: /help-style]
    ParaContent(); style roman; print "~";! [22: ~ or ~]
    ParaContent(); print " or ";! [23: help-style]
    ParaContent(); print "~"; style bold;! [24: ~attack~]
    ParaContent(); print "attack";! [25: /help-style]
    ParaContent(); style roman; print "~";! [26: ~ the troll. And you'll certainly get the same result whether you ~]
    ParaContent(); print " the troll. And you'll certainly get the same result whether you ";! [27: help-style]
    ParaContent(); print "~"; style bold;! [28: ~break~]
    ParaContent(); print "break";! [29: /help-style]
    ParaContent(); style roman; print "~";! [30: ~ the delicate vase or ~]
    ParaContent(); print " the delicate vase or ";! [31: help-style]
    ParaContent(); print "~"; style bold;! [32: ~hit~]
    ParaContent(); print "hit";! [33: /help-style]
    ParaContent(); style roman; print "~";! [34: ~ it. ~]
    ParaContent(); print " it. ";! [35: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [36: ~In some games, you may need to specify a weapon: ~]
    ParaContent(); print "In some games, you may need to specify a weapon: ";! [37: help-style]
    ParaContent(); print "~"; style bold;! [38: ~hit troll with sword~]
    ParaContent(); print "hit troll with sword";! [39: /help-style]
    ParaContent(); style roman; print "~";! [40: ~. In others, the game may assume you intend to use whatever sharp pointy thing you're carrying around. If you have none, you'd better be good with your fists. ~]
    ParaContent(); print ". In others, the game may assume you intend to use whatever sharp pointy thing you're carrying around. If you have none, you'd better be good with your fists. ";! [41: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [42: ~Sometimes, though, it matters which tool you use. ~]
    ParaContent(); print "Sometimes, though, it matters which tool you use. ";! [43: help-style]
    ParaContent(); print "~"; style bold;! [44: ~break wall with pickaxe~]
    ParaContent(); print "break wall with pickaxe";! [45: /help-style]
    ParaContent(); style roman; print "~";! [46: ~ is more likely to work than ~]
    ParaContent(); print " is more likely to work than ";! [47: help-style]
    ParaContent(); print "~"; style bold;! [48: ~break wall with dagger~]
    ParaContent(); print "break wall with dagger";! [49: /help-style]
    ParaContent(); style roman; print "~";! [50: ~. If you just type ~]
    ParaContent(); print ". If you just type ";! [51: help-style]
    ParaContent(); print "~"; style bold;! [52: ~break wall~]
    ParaContent(); print "break wall";! [53: /help-style]
    ParaContent(); style roman; print "~";! [54: ~ the game may not guess correctly. Be specific, if you think it matters. ~]
    ParaContent(); print " the game may not guess correctly. Be specific, if you think it matters. ";! [55: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [56: ~In some games, by the way, violence is frowned on. A warrior in a goblins~]
    ParaContent(); print "In some games, by the way, violence is frowned on. A warrior in a goblins";! [57: ']
    ParaContent(); print "'";! [58: ~ lair is going to be hitting a lot of goblins. But if the game is set in your home, you probably don't want to smash everything in sight. Look for other solutions.~]
    ParaContent(); print " lair is going to be hitting a lot of goblins. But if the game is set in your home, you probably don't want to smash everything in sight. Look for other solutions."; .L_Say799; .L_SayX794;rtrue;
];
[ R_TX_S_162 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]wait[/help-style]: Do nothing.
    [para](You can abbreviate this as [help-style]z[/help-style].)
    [para]A text adventure is played in turns. You can think (and read) for as long as you want, while you're entering your command. The game only progresses when you hit enter.
    [para]If you want to actually [italic type]do nothing,[roman type] and let the game progress on its own, type [help-style]wait[/help-style]. One turn will pass.
    [para]Is it ever useful to do nothing? Certainly. You may meet people, animals, or machines which act on their own. Waiting and watching may be the key to understanding how they behave.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]wait[/help-style]: Do nothing. [para](You can abbreviate this as [help-style]z[/help-style].) [para]A text adventure is played in turns. You can think (and read) for as long as you want, while you're entering your command. The game only progresses when you hit enter. [para]If you want to actually [italic type]do nothing,[roman type] and let the game progress on its own, type [help-style]wait[/help-style]. One turn will pass. [para]Is it ever useful to do nothing? Certainly. You may meet people, animals, or machines which act on their own. Waiting and watching may be the key to understanding how they behave.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~wait~]
    ParaContent(); print "wait";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: Do nothing. ~]
    ParaContent(); print ": Do nothing. ";! [6: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [7: ~(You can abbreviate this as ~]
    ParaContent(); print "(You can abbreviate this as ";! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~z~]
    ParaContent(); print "z";! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~.) ~]
    ParaContent(); print ".) ";! [12: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [13: ~A text adventure is played in turns. You can think (and read) for as long as you want, while you're entering your command. The game only progresses when you hit enter. ~]
    ParaContent(); print "A text adventure is played in turns. You can think (and read) for as long as you want, while you're entering your command. The game only progresses when you hit enter. ";! [14: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [15: ~If you want to actually ~]
    ParaContent(); print "If you want to actually ";! [16: italic type]
    ParaContent(); style underline;! [17: ~do nothing,~]
    ParaContent(); print "do nothing,";! [18: roman type]
    ParaContent(); style roman;! [19: ~ and let the game progress on its own, type ~]
    ParaContent(); print " and let the game progress on its own, type ";! [20: help-style]
    ParaContent(); print "~"; style bold;! [21: ~wait~]
    ParaContent(); print "wait";! [22: /help-style]
    ParaContent(); style roman; print "~";! [23: ~. One turn will pass. ~]
    ParaContent(); print ". One turn will pass. ";! [24: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [25: ~Is it ever useful to do nothing? Certainly. You may meet people, animals, or machines which act on their own. Waiting and watching may be the key to understanding how they behave.~]
    ParaContent(); print "Is it ever useful to do nothing? Certainly. You may meet people, animals, or machines which act on their own. Waiting and watching may be the key to understanding how they behave."; .L_Say800; .L_SayX795;rtrue;
];
[ R_TX_S_163 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~This is a somewhat miscellaneous grab-bag of commands which help you in playing a game. Not all games will support all of them, or handle them all the same way!
    [para]For more information on any of these commands, type [help-style]help[/help-style] followed by the command word.
    [para][help-style]about[/help-style]: Read a brief introduction to the game.
    [br][help-style]verbose[/help-style]: See a detailed description of each room you enter, every time.
    [br][help-style]brief[/help-style]: Abbreviate room descriptions that you've seen before.
    [br][help-style]score[/help-style]: Measure your progress in the game.
    [br][help-style]help[/help-style]: Learn about playing interactive fiction.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~This is a somewhat miscellaneous grab-bag of commands which help you in playing a game. Not all games will support all of them, or handle them all the same way! [para]For more information on any of these commands, type [help-style]help[/help-style] followed by the command word. [para][help-style]about[/help-style]: Read a brief introduction to the game. [br][help-style]verbose[/help-style]: See a detailed description of each room you enter, every time. [br][help-style]brief[/help-style]: Abbreviate room descriptions that you've seen before. [br][help-style]score[/help-style]: Measure your progress in the game. [br][help-style]help[/help-style]: Learn about playing interactive fiction.~]
    say__p=1;! [2: ~This is a somewhat miscellaneous grab-bag of commands which help you in playing a game. Not all games will support all of them, or handle them all the same way! ~]
    ParaContent(); print "This is a somewhat miscellaneous grab-bag of commands which help you in playing a game. Not all games will support all of them, or handle them all the same way! ";! [3: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [4: ~For more information on any of these commands, type ~]
    ParaContent(); print "For more information on any of these commands, type ";! [5: help-style]
    ParaContent(); print "~"; style bold;! [6: ~help~]
    ParaContent(); print "help";! [7: /help-style]
    ParaContent(); style roman; print "~";! [8: ~ followed by the command word. ~]
    ParaContent(); print " followed by the command word. ";! [9: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [10: help-style]
    ParaContent(); print "~"; style bold;! [11: ~about~]
    ParaContent(); print "about";! [12: /help-style]
    ParaContent(); style roman; print "~";! [13: ~: Read a brief introduction to the game. ~]
    ParaContent(); print ": Read a brief introduction to the game. ";! [14: br]
    ParaContent(); new_line;! [15: help-style]
    ParaContent(); print "~"; style bold;! [16: ~verbose~]
    ParaContent(); print "verbose";! [17: /help-style]
    ParaContent(); style roman; print "~";! [18: ~: See a detailed description of each room you enter, every time. ~]
    ParaContent(); print ": See a detailed description of each room you enter, every time. ";! [19: br]
    ParaContent(); new_line;! [20: help-style]
    ParaContent(); print "~"; style bold;! [21: ~brief~]
    ParaContent(); print "brief";! [22: /help-style]
    ParaContent(); style roman; print "~";! [23: ~: Abbreviate room descriptions that you've seen before. ~]
    ParaContent(); print ": Abbreviate room descriptions that you've seen before. ";! [24: br]
    ParaContent(); new_line;! [25: help-style]
    ParaContent(); print "~"; style bold;! [26: ~score~]
    ParaContent(); print "score";! [27: /help-style]
    ParaContent(); style roman; print "~";! [28: ~: Measure your progress in the game. ~]
    ParaContent(); print ": Measure your progress in the game. ";! [29: br]
    ParaContent(); new_line;! [30: help-style]
    ParaContent(); print "~"; style bold;! [31: ~help~]
    ParaContent(); print "help";! [32: /help-style]
    ParaContent(); style roman; print "~";! [33: ~: Learn about playing interactive fiction.~]
    ParaContent(); print ": Learn about playing interactive fiction."; .L_Say801; .L_SayX796;rtrue;
];
[ R_TX_S_164 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]about[/help-style]: Read a brief introduction to the game.
    [para]In some games[game-specific help] typing [help-style]about[/help-style] will give you a short blurb about the game. It might introduce the game, give a few notes from the author, or tell you about special commands which are different -- or important -- in the game.
    [para]Even if you're familiar with IF, it's a good idea to try [help-style]about[/help-style] when you start a game you've never played before.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]about[/help-style]: Read a brief introduction to the game. [para]In some games[game-specific help] typing [help-style]about[/help-style] will give you a short blurb about the game. It might introduce the game, give a few notes from the author, or tell you about special commands which are different -- or important -- in the game. [para]Even if you're familiar with IF, it's a good idea to try [help-style]about[/help-style] when you start a game you've never played before.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~about~]
    ParaContent(); print "about";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: Read a brief introduction to the game. ~]
    ParaContent(); print ": Read a brief introduction to the game. ";! [6: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [7: ~In some games~]
    ParaContent(); print "In some games";! [8: game-specific help]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(OBJECT_TY, self=self,p15_game_specific_help);@pull self; ! [9: ~ typing ~]
    ParaContent(); print " typing ";! [10: help-style]
    ParaContent(); print "~"; style bold;! [11: ~about~]
    ParaContent(); print "about";! [12: /help-style]
    ParaContent(); style roman; print "~";! [13: ~ will give you a short blurb about the game. It might introduce the game, give a few notes from the author, or tell you about special commands which are different -- or important -- in the game. ~]
    ParaContent(); print " will give you a short blurb about the game. It might introduce the game, give a few notes from the author, or tell you about special commands which are different -- or important -- in the game. ";! [14: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [15: ~Even if you're familiar with IF, it's a good idea to try ~]
    ParaContent(); print "Even if you're familiar with IF, it's a good idea to try ";! [16: help-style]
    ParaContent(); print "~"; style bold;! [17: ~about~]
    ParaContent(); print "about";! [18: /help-style]
    ParaContent(); style roman; print "~";! [19: ~ when you start a game you've never played before.~]
    ParaContent(); print " when you start a game you've never played before."; .L_Say802; .L_SayX797;rtrue;
];
[ R_TX_S_165 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if game-available] (including this one!)[else],[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if game-available] (including this one!)[else],[end if]~]
    say__p=1;! [2: if game-available]

    	if (~~(((((Adj_86_t1_v10(self))))))) jump L_Say803;! [3: ~ (including this one!)~]
    ParaContent(); print " (including this one!)";! [4: else]

    	jump L_SayX798; .L_Say803;! [5: ~,~]
    ParaContent(); print ",";! [6: end if]

    	.L_Say804; .L_SayX798; .L_Say805; .L_SayX799;rtrue;
];
[ R_TX_S_166 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]verbose[/help-style]: See a detailed description of each room you enter, every time.
    [br][help-style]brief[/help-style]: Abbreviate room descriptions that you've seen before.
    [para]Some text games start in [help-style]brief[/help-style] mode. This means that when you enter a room for the first time, you will see a full description of the room and its contents. But if you leave the room and come back, you will only see a brief description. This consists of the room's name, and a list of portable objects -- but no description, nor major room features such as exits.
    [para]If you want, you can type [help-style]verbose[/help-style] to change this. In [help-style]verbose[/help-style] mode, you will see a complete description every time you enter a room.
    [para](Of course, you can type [help-style]look[/help-style] or [help-style]l[/help-style] at any time to repeat the complete room description. But [help-style]verbose[/help-style] is very convenient. I recommend you use it whenever you play IF.)
    [para]The [help-style]verbose[/help-style] mode remains in place for the rest of the game, unless you turn it off by typing [help-style]brief[/help-style]. It is also saved in [help-style]save[/help-style] files. However, if you [help-style]restart[/help-style] the game, it will be reset.
    [para]Note that many games (including this one) start out in [help-style]verbose[/help-style] mode automatically.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]verbose[/help-style]: See a detailed description of each room you enter, every time. [br][help-style]brief[/help-style]: Abbreviate room descriptions that you've seen before. [para]Some text games start in [help-style]brief[/help-style] mode. This means that when you enter a room for the first time, you will see a full description of the room and its contents. But if you leave the room and come back, you will only see a brief description. This consists of the room's name, and a list of portable objects -- but no description, nor major room features such as exits. [para]If you want, you can type [help-style]verbose[/help-style] to change this. In [help-style]verbose[/help-style] mode, you will see a complete description every time you enter a room. [para](Of course, you can type [help-style]look[/help-style] or [help-style]l[/help-style] at any time to repeat the complete room description. But [help-style]verbose[/help-style] is very convenient. I recommend you use it whenever you play IF.) [para]The [help-style]verbose[/help-style] mode remains in place for the rest of the game, unless you turn it off by typing [help-style]brief[/help-style]. It is also saved in [help-style]save[/help-style] files. However, if you [help-style]restart[/help-style] the game, it will be reset. [para]Note that many games (including this one) start out in [help-style]verbose[/help-style] mode automatically.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~verbose~]
    ParaContent(); print "verbose";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: See a detailed description of each room you enter, every time. ~]
    ParaContent(); print ": See a detailed description of each room you enter, every time. ";! [6: br]
    ParaContent(); new_line;! [7: help-style]
    ParaContent(); print "~"; style bold;! [8: ~brief~]
    ParaContent(); print "brief";! [9: /help-style]
    ParaContent(); style roman; print "~";! [10: ~: Abbreviate room descriptions that you've seen before. ~]
    ParaContent(); print ": Abbreviate room descriptions that you've seen before. ";! [11: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [12: ~Some text games start in ~]
    ParaContent(); print "Some text games start in ";! [13: help-style]
    ParaContent(); print "~"; style bold;! [14: ~brief~]
    ParaContent(); print "brief";! [15: /help-style]
    ParaContent(); style roman; print "~";! [16: ~ mode. This means that when you enter a room for the first time, you will see a full description of the room and its contents. But if you leave the room and come back, you will only see a brief description. This consists of the room's name, and a list of portable objects -- but no description, nor major room features such as exits. ~]
    ParaContent(); print " mode. This means that when you enter a room for the first time, you will see a full description of the room and its contents. But if you leave the room and come back, you will only see a brief description. This consists of the room's name, and a list of portable objects -- but no description, nor major room features such as exits. ";! [17: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [18: ~If you want, you can type ~]
    ParaContent(); print "If you want, you can type ";! [19: help-style]
    ParaContent(); print "~"; style bold;! [20: ~verbose~]
    ParaContent(); print "verbose";! [21: /help-style]
    ParaContent(); style roman; print "~";! [22: ~ to change this. In ~]
    ParaContent(); print " to change this. In ";! [23: help-style]
    ParaContent(); print "~"; style bold;! [24: ~verbose~]
    ParaContent(); print "verbose";! [25: /help-style]
    ParaContent(); style roman; print "~";! [26: ~ mode, you will see a complete description every time you enter a room. ~]
    ParaContent(); print " mode, you will see a complete description every time you enter a room. ";! [27: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [28: ~(Of course, you can type ~]
    ParaContent(); print "(Of course, you can type ";! [29: help-style]
    ParaContent(); print "~"; style bold;! [30: ~look~]
    ParaContent(); print "look";! [31: /help-style]
    ParaContent(); style roman; print "~";! [32: ~ or ~]
    ParaContent(); print " or ";! [33: help-style]
    ParaContent(); print "~"; style bold;! [34: ~l~]
    ParaContent(); print "l";! [35: /help-style]
    ParaContent(); style roman; print "~";! [36: ~ at any time to repeat the complete room description. But ~]
    ParaContent(); print " at any time to repeat the complete room description. But ";! [37: help-style]
    ParaContent(); print "~"; style bold;! [38: ~verbose~]
    ParaContent(); print "verbose";! [39: /help-style]
    ParaContent(); style roman; print "~";! [40: ~ is very convenient. I recommend you use it whenever you play IF.) ~]
    ParaContent(); print " is very convenient. I recommend you use it whenever you play IF.) ";! [41: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [42: ~The ~]
    ParaContent(); print "The ";! [43: help-style]
    ParaContent(); print "~"; style bold;! [44: ~verbose~]
    ParaContent(); print "verbose";! [45: /help-style]
    ParaContent(); style roman; print "~";! [46: ~ mode remains in place for the rest of the game, unless you turn it off by typing ~]
    ParaContent(); print " mode remains in place for the rest of the game, unless you turn it off by typing ";! [47: help-style]
    ParaContent(); print "~"; style bold;! [48: ~brief~]
    ParaContent(); print "brief";! [49: /help-style]
    ParaContent(); style roman; print "~";! [50: ~. It is also saved in ~]
    ParaContent(); print ". It is also saved in ";! [51: help-style]
    ParaContent(); print "~"; style bold;! [52: ~save~]
    ParaContent(); print "save";! [53: /help-style]
    ParaContent(); style roman; print "~";! [54: ~ files. However, if you ~]
    ParaContent(); print " files. However, if you ";! [55: help-style]
    ParaContent(); print "~"; style bold;! [56: ~restart~]
    ParaContent(); print "restart";! [57: /help-style]
    ParaContent(); style roman; print "~";! [58: ~ the game, it will be reset. ~]
    ParaContent(); print " the game, it will be reset. ";! [59: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [60: ~Note that many games (including this one) start out in ~]
    ParaContent(); print "Note that many games (including this one) start out in ";! [61: help-style]
    ParaContent(); print "~"; style bold;! [62: ~verbose~]
    ParaContent(); print "verbose";! [63: /help-style]
    ParaContent(); style roman; print "~";! [64: ~ mode automatically.~]
    ParaContent(); print " mode automatically."; .L_Say806; .L_SayX800;rtrue;
];
[ R_TX_S_167 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]score[/help-style]: Measure your progress in the game.
    [para]In some games, [help-style]score[/help-style] will tell you how far you've advanced through the game. This is usually measured in points -- although different games will report your progress differently.
    [para]Some games also let you type [help-style]full score[/help-style] to see a detailed list of your achievements.
    [para][game-specific help]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]score[/help-style]: Measure your progress in the game. [para]In some games, [help-style]score[/help-style] will tell you how far you've advanced through the game. This is usually measured in points -- although different games will report your progress differently. [para]Some games also let you type [help-style]full score[/help-style] to see a detailed list of your achievements. [para][game-specific help]~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~score~]
    ParaContent(); print "score";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: Measure your progress in the game. ~]
    ParaContent(); print ": Measure your progress in the game. ";! [6: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [7: ~In some games, ~]
    ParaContent(); print "In some games, ";! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~score~]
    ParaContent(); print "score";! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~ will tell you how far you've advanced through the game. This is usually measured in points -- although different games will report your progress differently. ~]
    ParaContent(); print " will tell you how far you've advanced through the game. This is usually measured in points -- although different games will report your progress differently. ";! [12: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [13: ~Some games also let you type ~]
    ParaContent(); print "Some games also let you type ";! [14: help-style]
    ParaContent(); print "~"; style bold;! [15: ~full score~]
    ParaContent(); print "full score";! [16: /help-style]
    ParaContent(); style roman; print "~";! [17: ~ to see a detailed list of your achievements. ~]
    ParaContent(); print " to see a detailed list of your achievements. ";! [18: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [19: game-specific help]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(OBJECT_TY, self=self,p15_game_specific_help);@pull self;  .L_Say807; .L_SayX801;rtrue;
];
[ R_TX_S_168 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[italic type][story title][roman type] [if the no scoring option is active]does not have[else]has[end if] a [help-style]score[/help-style] command.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[italic type][story title][roman type] [if the no scoring option is active]does not have[else]has[end if] a [help-style]score[/help-style] command.~]
    say__p=1;! [2: italic type]
    ParaContent(); style underline;! [3: story title]
    ParaContent(); print (TEXT_TY_Say) TX_L_2;! [4: roman type]
    ParaContent(); style roman;! [5: ~ ~]
    ParaContent(); print " ";! [6: if the no scoring option is active]

    	if (~~(((((Adj_25_t1_v16(12))))))) jump L_Say808;! [7: ~does not have~]
    ParaContent(); print "does not have";! [8: else]

    	jump L_SayX802; .L_Say808;! [9: ~has~]
    ParaContent(); print "has";! [10: end if]

    	.L_Say809; .L_SayX802;! [11: ~ a ~]
    ParaContent(); print " a ";! [12: help-style]
    ParaContent(); print "~"; style bold;! [13: ~score~]
    ParaContent(); print "score";! [14: /help-style]
    ParaContent(); style roman; print "~";! [15: ~ command.~]
    ParaContent(); print " command."; .L_Say810; .L_SayX803;rtrue;
];
[ R_TX_S_169 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]help[/help-style]: Learn about playing interactive fiction.
    [para]The [help-style]help[/help-style] command gives you general help on playing IF. For example, typing [help-style]help command[/help-style] will describe the [help-style]command[/help-style] command. For example, typing [help-style]help help[/help-style] will show you this very message!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]help[/help-style]: Learn about playing interactive fiction. [para]The [help-style]help[/help-style] command gives you general help on playing IF. For example, typing [help-style]help command[/help-style] will describe the [help-style]command[/help-style] command. For example, typing [help-style]help help[/help-style] will show you this very message!~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~help~]
    ParaContent(); print "help";! [4: /help-style]
    ParaContent(); style roman; print "~";! [5: ~: Learn about playing interactive fiction. ~]
    ParaContent(); print ": Learn about playing interactive fiction. ";! [6: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [7: ~The ~]
    ParaContent(); print "The ";! [8: help-style]
    ParaContent(); print "~"; style bold;! [9: ~help~]
    ParaContent(); print "help";! [10: /help-style]
    ParaContent(); style roman; print "~";! [11: ~ command gives you general help on playing IF. For example, typing ~]
    ParaContent(); print " command gives you general help on playing IF. For example, typing ";! [12: help-style]
    ParaContent(); print "~"; style bold;! [13: ~help command~]
    ParaContent(); print "help command";! [14: /help-style]
    ParaContent(); style roman; print "~";! [15: ~ will describe the ~]
    ParaContent(); print " will describe the ";! [16: help-style]
    ParaContent(); print "~"; style bold;! [17: ~command~]
    ParaContent(); print "command";! [18: /help-style]
    ParaContent(); style roman; print "~";! [19: ~ command. For example, typing ~]
    ParaContent(); print " command. For example, typing ";! [20: help-style]
    ParaContent(); print "~"; style bold;! [21: ~help help~]
    ParaContent(); print "help help";! [22: /help-style]
    ParaContent(); style roman; print "~";! [23: ~ will show you this very message!~]
    ParaContent(); print " will show you this very message!"; .L_Say811; .L_SayX804;rtrue;
];
[ R_TX_S_170 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Communicating with other characters is a tricky topic. Different games handle it in different ways. One approach is to present you with a menu -- when you meet someone, you can choose what to say from a list of phrases or questions.
    [para]Other games leave the interaction up to you. The game tells you that there's another person in the room, and then presents you with the usual command prompt. The possible commands will vary from game to game, but these are usually available:
    [para][help-style]talk to[help-person][/help-style]
    [br][help-style]ask[help-person-]about[help-topic][/help-style]
    [br][help-style]tell[help-person-]about[help-topic][/help-style]
    [br][help-style]say[help-word-]to[help-person][/help-style]
    [br][help-style]ask[help-person-]for[help-thing][/help-style]
    [br][help-style]give[help-thing-]to[help-person][/help-style]
    [br][help-style]show[help-thing-]to[help-person][/help-style]
    [para]You can also talk to a person by typing [help-style]person, phrase[/help-style]. (The comma is important.) For example, to answer a question, you could type [help-style]morgan, yes[/help-style] or [help-style]morgan, no[/help-style]. Saying [help-style]pirate, hello[/help-style] can begin an interesting conversation -- or a deadly one. To order someone around, you could use a command like [help-style]jeeves, get my umbrella[/help-style] or [help-style]ensign rosen, stop the ship[/help-style]. (Naturally, not everyone will be willing to obey your commands!)~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Communicating with other characters is a tricky topic. Different games handle it in different ways. One approach is to present you with a menu -- when you meet someone, you can choose what to say from a list of phrases or questions. [para]Other games leave the interaction up to you. The game tells you that there's another person in the room, and then presents you with the usual command prompt. The possible commands will vary from game to game, but these are usually available: [para][help-style]talk to[help-person][/help-style] [br][help-style]ask[help-person-]about[help-topic][/help-style] [br][help-style]tell[help-person-]about[help-topic][/help-style] [br][help-style]say[help-word-]to[help-person][/help-style] [br][help-style]ask[help-person-]for[help-thing][/help-style] [br][help-style]give[help-thing-]to[help-person][/help-style] [br][help-style]show[help-thing-]to[help-person][/help-style] [para]You can also talk to a person by typing [help-style]person, phrase[/help-style]. (The comma is important.) For example, to answer a question, you could type [help-style]morgan, yes[/help-style] or [help-style]morgan, no[/help-style]. Saying [help-style]pirate, hello[/help-style] can begin an interesting conversation -- or a deadly one. To order someone around, you could use a command like [help-style]jeeves, get my umbrella[/help-style] or [help-style]ensign rosen, stop the ship[/help-style]. (Naturally, not everyone will be willing to obey your commands!)~]
    say__p=1;! [2: ~Communicating with other characters is a tricky topic. Different games handle it in different ways. One approach is to present you with a menu -- when you meet someone, you can choose what to say from a list of phrases or questions. ~]
    ParaContent(); print "Communicating with other characters is a tricky topic. Different games handle it in different ways. One approach is to present you with a menu -- when you meet someone, you can choose what to say from a list of phrases or questions. ";! [3: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [4: ~Other games leave the interaction up to you. The game tells you that there's another person in the room, and then presents you with the usual command prompt. The possible commands will vary from game to game, but these are usually available: ~]
    ParaContent(); print "Other games leave the interaction up to you. The game tells you that there's another person in the room, and then presents you with the usual command prompt. The possible commands will vary from game to game, but these are usually available: ";! [5: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [6: help-style]
    ParaContent(); print "~"; style bold;! [7: ~talk to~]
    ParaContent(); print "talk to";! [8: help-person]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman;! [9: /help-style]
    ParaContent(); style roman; print "~";! [10: ~ ~]
    ParaContent(); print " ";! [11: br]
    ParaContent(); new_line;! [12: help-style]
    ParaContent(); print "~"; style bold;! [13: ~ask~]
    ParaContent(); print "ask";! [14: help-person-]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman; print " "; style bold;! [15: ~about~]
    ParaContent(); print "about";! [16: help-topic]
    ParaContent(); style roman; print " "; style underline; print "topic"; style roman;! [17: /help-style]
    ParaContent(); style roman; print "~";! [18: ~ ~]
    ParaContent(); print " ";! [19: br]
    ParaContent(); new_line;! [20: help-style]
    ParaContent(); print "~"; style bold;! [21: ~tell~]
    ParaContent(); print "tell";! [22: help-person-]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman; print " "; style bold;! [23: ~about~]
    ParaContent(); print "about";! [24: help-topic]
    ParaContent(); style roman; print " "; style underline; print "topic"; style roman;! [25: /help-style]
    ParaContent(); style roman; print "~";! [26: ~ ~]
    ParaContent(); print " ";! [27: br]
    ParaContent(); new_line;! [28: help-style]
    ParaContent(); print "~"; style bold;! [29: ~say~]
    ParaContent(); print "say";! [30: help-word-]
    ParaContent(); style roman; print " "; style underline; print "word"; style roman; print " "; style bold;! [31: ~to~]
    ParaContent(); print "to";! [32: help-person]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman;! [33: /help-style]
    ParaContent(); style roman; print "~";! [34: ~ ~]
    ParaContent(); print " ";! [35: br]
    ParaContent(); new_line;! [36: help-style]
    ParaContent(); print "~"; style bold;! [37: ~ask~]
    ParaContent(); print "ask";! [38: help-person-]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman; print " "; style bold;! [39: ~for~]
    ParaContent(); print "for";! [40: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [41: /help-style]
    ParaContent(); style roman; print "~";! [42: ~ ~]
    ParaContent(); print " ";! [43: br]
    ParaContent(); new_line;! [44: help-style]
    ParaContent(); print "~"; style bold;! [45: ~give~]
    ParaContent(); print "give";! [46: help-thing-]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman; print " "; style bold;! [47: ~to~]
    ParaContent(); print "to";! [48: help-person]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman;! [49: /help-style]
    ParaContent(); style roman; print "~";! [50: ~ ~]
    ParaContent(); print " ";! [51: br]
    ParaContent(); new_line;! [52: help-style]
    ParaContent(); print "~"; style bold;! [53: ~show~]
    ParaContent(); print "show";! [54: help-thing-]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman; print " "; style bold;! [55: ~to~]
    ParaContent(); print "to";! [56: help-person]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman;! [57: /help-style]
    ParaContent(); style roman; print "~";! [58: ~ ~]
    ParaContent(); print " ";! [59: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [60: ~You can also talk to a person by typing ~]
    ParaContent(); print "You can also talk to a person by typing ";! [61: help-style]
    ParaContent(); print "~"; style bold;! [62: ~person, phrase~]
    ParaContent(); print "person, phrase";! [63: /help-style]
    ParaContent(); style roman; print "~";! [64: ~. (The comma is important.) For example, to answer a question, you could type ~]
    ParaContent(); print ". (The comma is important.) For example, to answer a question, you could type ";! [65: help-style]
    ParaContent(); print "~"; style bold;! [66: ~morgan, yes~]
    ParaContent(); print "morgan, yes";! [67: /help-style]
    ParaContent(); style roman; print "~";! [68: ~ or ~]
    ParaContent(); print " or ";! [69: help-style]
    ParaContent(); print "~"; style bold;! [70: ~morgan, no~]
    ParaContent(); print "morgan, no";! [71: /help-style]
    ParaContent(); style roman; print "~";! [72: ~. Saying ~]
    ParaContent(); print ". Saying ";! [73: help-style]
    ParaContent(); print "~"; style bold;! [74: ~pirate, hello~]
    ParaContent(); print "pirate, hello";! [75: /help-style]
    ParaContent(); style roman; print "~";! [76: ~ can begin an interesting conversation -- or a deadly one. To order someone around, you could use a command like ~]
    ParaContent(); print " can begin an interesting conversation -- or a deadly one. To order someone around, you could use a command like ";! [77: help-style]
    ParaContent(); print "~"; style bold;! [78: ~jeeves, get my umbrella~]
    ParaContent(); print "jeeves, get my umbrella";! [79: /help-style]
    ParaContent(); style roman; print "~";! [80: ~ or ~]
    ParaContent(); print " or ";! [81: help-style]
    ParaContent(); print "~"; style bold;! [82: ~ensign rosen, stop the ship~]
    ParaContent(); print "ensign rosen, stop the ship";! [83: /help-style]
    ParaContent(); style roman; print "~";! [84: ~. (Naturally, not everyone will be willing to obey your commands!)~]
    ParaContent(); print ". (Naturally, not everyone will be willing to obey your commands!)"; .L_Say812; .L_SayX805;rtrue;
];
[ R_TX_S_171 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]talk to[help-person][/help-style]: Begin a conversation.
    [para]This command indicates that you want to talk, without specifying a topic. The game may choose an inoffensive opening gambit, or it may present you with a menu of choices to talk about.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]talk to[help-person][/help-style]: Begin a conversation. [para]This command indicates that you want to talk, without specifying a topic. The game may choose an inoffensive opening gambit, or it may present you with a menu of choices to talk about.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~talk to~]
    ParaContent(); print "talk to";! [4: help-person]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman;! [5: /help-style]
    ParaContent(); style roman; print "~";! [6: ~: Begin a conversation. ~]
    ParaContent(); print ": Begin a conversation. ";! [7: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [8: ~This command indicates that you want to talk, without specifying a topic. The game may choose an inoffensive opening gambit, or it may present you with a menu of choices to talk about.~]
    ParaContent(); print "This command indicates that you want to talk, without specifying a topic. The game may choose an inoffensive opening gambit, or it may present you with a menu of choices to talk about."; .L_Say813; .L_SayX806;rtrue;
];
[ R_TX_S_172 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]ask[help-person-]about[help-topic][/help-style]: Inquire about a topic.
    [br][help-style]ask[help-person-]for[help-thing][/help-style]: Request a gift.
    [para]Not all games incorporate the [help-style]ask about[/help-style] command, but if it works, you will want to use it often. The topic can be anything you've seen, heard, or read about in the game -- anything the character might know about. You can gather a lot of information this way.
    [para]The [help-style]ask for[/help-style] command is different. You would use this to request a particular object which the other person is holding. (Another way to phrase this is [help-style]jeeves, give umbrella to me[/help-style].)~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]ask[help-person-]about[help-topic][/help-style]: Inquire about a topic. [br][help-style]ask[help-person-]for[help-thing][/help-style]: Request a gift. [para]Not all games incorporate the [help-style]ask about[/help-style] command, but if it works, you will want to use it often. The topic can be anything you've seen, heard, or read about in the game -- anything the character might know about. You can gather a lot of information this way. [para]The [help-style]ask for[/help-style] command is different. You would use this to request a particular object which the other person is holding. (Another way to phrase this is [help-style]jeeves, give umbrella to me[/help-style].)~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~ask~]
    ParaContent(); print "ask";! [4: help-person-]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman; print " "; style bold;! [5: ~about~]
    ParaContent(); print "about";! [6: help-topic]
    ParaContent(); style roman; print " "; style underline; print "topic"; style roman;! [7: /help-style]
    ParaContent(); style roman; print "~";! [8: ~: Inquire about a topic. ~]
    ParaContent(); print ": Inquire about a topic. ";! [9: br]
    ParaContent(); new_line;! [10: help-style]
    ParaContent(); print "~"; style bold;! [11: ~ask~]
    ParaContent(); print "ask";! [12: help-person-]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman; print " "; style bold;! [13: ~for~]
    ParaContent(); print "for";! [14: help-thing]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman;! [15: /help-style]
    ParaContent(); style roman; print "~";! [16: ~: Request a gift. ~]
    ParaContent(); print ": Request a gift. ";! [17: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [18: ~Not all games incorporate the ~]
    ParaContent(); print "Not all games incorporate the ";! [19: help-style]
    ParaContent(); print "~"; style bold;! [20: ~ask about~]
    ParaContent(); print "ask about";! [21: /help-style]
    ParaContent(); style roman; print "~";! [22: ~ command, but if it works, you will want to use it often. The topic can be anything you've seen, heard, or read about in the game -- anything the character might know about. You can gather a lot of information this way. ~]
    ParaContent(); print " command, but if it works, you will want to use it often. The topic can be anything you've seen, heard, or read about in the game -- anything the character might know about. You can gather a lot of information this way. ";! [23: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [24: ~The ~]
    ParaContent(); print "The ";! [25: help-style]
    ParaContent(); print "~"; style bold;! [26: ~ask for~]
    ParaContent(); print "ask for";! [27: /help-style]
    ParaContent(); style roman; print "~";! [28: ~ command is different. You would use this to request a particular object which the other person is holding. (Another way to phrase this is ~]
    ParaContent(); print " command is different. You would use this to request a particular object which the other person is holding. (Another way to phrase this is ";! [29: help-style]
    ParaContent(); print "~"; style bold;! [30: ~jeeves, give umbrella to me~]
    ParaContent(); print "jeeves, give umbrella to me";! [31: /help-style]
    ParaContent(); style roman; print "~";! [32: ~.)~]
    ParaContent(); print ".)"; .L_Say814; .L_SayX807;rtrue;
];
[ R_TX_S_173 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]tell[help-person-]about[help-topic][/help-style]: Impart information about a topic.
    [para]This command lets you offer information about a topic to another character. Obviously, it should be a topic that person cares about -- something he does not know, but would want to learn. If you go around telling random things to arbitrary people, they likely won't care.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]tell[help-person-]about[help-topic][/help-style]: Impart information about a topic. [para]This command lets you offer information about a topic to another character. Obviously, it should be a topic that person cares about -- something he does not know, but would want to learn. If you go around telling random things to arbitrary people, they likely won't care.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~tell~]
    ParaContent(); print "tell";! [4: help-person-]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman; print " "; style bold;! [5: ~about~]
    ParaContent(); print "about";! [6: help-topic]
    ParaContent(); style roman; print " "; style underline; print "topic"; style roman;! [7: /help-style]
    ParaContent(); style roman; print "~";! [8: ~: Impart information about a topic. ~]
    ParaContent(); print ": Impart information about a topic. ";! [9: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [10: ~This command lets you offer information about a topic to another character. Obviously, it should be a topic that person cares about -- something he does not know, but would want to learn. If you go around telling random things to arbitrary people, they likely won't care.~]
    ParaContent(); print "This command lets you offer information about a topic to another character. Obviously, it should be a topic that person cares about -- something he does not know, but would want to learn. If you go around telling random things to arbitrary people, they likely won't care."; .L_Say815; .L_SayX808;rtrue;
];
[ R_TX_S_174 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]say[help-word][/help-style] or [help-style]say[help-word-]to[help-person][/help-style]: Say a particular word.
    [para]This command allows you to say a specific word. You can greet someone by saying 'hello'; you can answer questions with 'yes' or 'no'. This command is also handy for passwords, magic words, voice-activated code words, and other such speech acts.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]say[help-word][/help-style] or [help-style]say[help-word-]to[help-person][/help-style]: Say a particular word. [para]This command allows you to say a specific word. You can greet someone by saying 'hello'; you can answer questions with 'yes' or 'no'. This command is also handy for passwords, magic words, voice-activated code words, and other such speech acts.~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~say~]
    ParaContent(); print "say";! [4: help-word]
    ParaContent(); style roman; print " "; style underline; print "word"; style roman;! [5: /help-style]
    ParaContent(); style roman; print "~";! [6: ~ or ~]
    ParaContent(); print " or ";! [7: help-style]
    ParaContent(); print "~"; style bold;! [8: ~say~]
    ParaContent(); print "say";! [9: help-word-]
    ParaContent(); style roman; print " "; style underline; print "word"; style roman; print " "; style bold;! [10: ~to~]
    ParaContent(); print "to";! [11: help-person]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman;! [12: /help-style]
    ParaContent(); style roman; print "~";! [13: ~: Say a particular word. ~]
    ParaContent(); print ": Say a particular word. ";! [14: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [15: ~This command allows you to say a specific word. You can greet someone by saying 'hello'; you can answer questions with 'yes' or 'no'. This command is also handy for passwords, magic words, voice-activated code words, and other such speech acts.~]
    ParaContent(); print "This command allows you to say a specific word. You can greet someone by saying ~hello~; you can answer questions with ~yes~ or ~no~. This command is also handy for passwords, magic words, voice-activated code words, and other such speech acts."; .L_Say816; .L_SayX809;rtrue;
];
[ R_TX_S_175 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]give[help-thing-]to[help-person][/help-style]: Offer a gift to someone.
    [para]This simply hands an object -- something you're holding -- over to someone else. The recipient may be delighted, disgusted, or apathetic.
    [para](If you want to display something, without necessarily giving it away, use the [help-style]show[/help-style] command.)~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]give[help-thing-]to[help-person][/help-style]: Offer a gift to someone. [para]This simply hands an object -- something you're holding -- over to someone else. The recipient may be delighted, disgusted, or apathetic. [para](If you want to display something, without necessarily giving it away, use the [help-style]show[/help-style] command.)~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~give~]
    ParaContent(); print "give";! [4: help-thing-]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman; print " "; style bold;! [5: ~to~]
    ParaContent(); print "to";! [6: help-person]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman;! [7: /help-style]
    ParaContent(); style roman; print "~";! [8: ~: Offer a gift to someone. ~]
    ParaContent(); print ": Offer a gift to someone. ";! [9: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [10: ~This simply hands an object -- something you're holding -- over to someone else. The recipient may be delighted, disgusted, or apathetic. ~]
    ParaContent(); print "This simply hands an object -- something you're holding -- over to someone else. The recipient may be delighted, disgusted, or apathetic. ";! [11: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [12: ~(If you want to display something, without necessarily giving it away, use the ~]
    ParaContent(); print "(If you want to display something, without necessarily giving it away, use the ";! [13: help-style]
    ParaContent(); print "~"; style bold;! [14: ~show~]
    ParaContent(); print "show";! [15: /help-style]
    ParaContent(); style roman; print "~";! [16: ~ command.)~]
    ParaContent(); print " command.)"; .L_Say817; .L_SayX810;rtrue;
];
[ R_TX_S_176 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[help-style]show[help-thing-]to[help-person][/help-style]: Display a possession to someone.
    [para]This lets you show off something you're holding. You're not necessarily handing it over. (Use the [help-style]give[/help-style] command to do that.)~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[help-style]show[help-thing-]to[help-person][/help-style]: Display a possession to someone. [para]This lets you show off something you're holding. You're not necessarily handing it over. (Use the [help-style]give[/help-style] command to do that.)~]
    say__p=1;! [2: help-style]
    ParaContent(); print "~"; style bold;! [3: ~show~]
    ParaContent(); print "show";! [4: help-thing-]
    ParaContent(); style roman; print " "; style underline; print "thing"; style roman; print " "; style bold;! [5: ~to~]
    ParaContent(); print "to";! [6: help-person]
    ParaContent(); style roman; print " "; style underline; print "person"; style roman;! [7: /help-style]
    ParaContent(); style roman; print "~";! [8: ~: Display a possession to someone. ~]
    ParaContent(); print ": Display a possession to someone. ";! [9: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [10: ~This lets you show off something you're holding. You're not necessarily handing it over. (Use the ~]
    ParaContent(); print "This lets you show off something you're holding. You're not necessarily handing it over. (Use the ";! [11: help-style]
    ParaContent(); print "~"; style bold;! [12: ~give~]
    ParaContent(); print "give";! [13: /help-style]
    ParaContent(); style roman; print "~";! [14: ~ command to do that.)~]
    ParaContent(); print " command to do that.)"; .L_Say818; .L_SayX811;rtrue;
];
[ R_TX_S_177 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Every text adventure is different. But here are some simple ideas which will help you in nearly any game.
    [para]* Examine everything. (Type [help-style]examine[/help-style] for more on this command.) Even if there are many things in the room, try to examine each one, at least once. Be systematic.
    [para]* Notice which objects the game is focussing your attention on, and which seem to be background or scenery. (If it looks like the most important thing in the room, it probably is. If the game says it's not important, it probably isn't.)
    [para]* Try to interact with things. Use common sense. If you see a button, push it. If you find a flute, play it. And [help-style]take[/help-style] anything that you can possibly lift.
    [para]* If you try a command on an object, and you get a distinctive response, your ears should perk up. It means you're on the right track. Maybe you have to try a related command, or change something else in the environment, or bring a second object in somehow. Maybe you won't be able to complete the action until later in the game. But it's important.
    [para]* Notice when the game is leading you towards a specific command. If the game says 'You could probably bend the bars,' then [help-style]bend bars[/help-style] is worth trying.
    [para]* Pay attention to common elements. If you find rubies and emeralds, look for red and green places to sell, put, or drop them. If a machine is made of brass, look for a brass part to add to it. If a door is barred by shimmering silver light, look for anything that magically glows with a similar light.
    [para]* When you find something which moves by itself, hang out and watch it for a while. You may need to understand its entire range of movement.
    [para]And remember, the game world is a [italic type]world[roman type]. It has its own logic -- whimsy or dream logic perhaps, but still sense. Find the game's time and reason, and follow it. You will find a way through.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Every text adventure is different. But here are some simple ideas which will help you in nearly any game. [para]* Examine everything. (Type [help-style]examine[/help-style] for more on this command.) Even if there are many things in the room, try to examine each one, at least once. Be systematic. [para]* Notice which objects the game is focussing your attention on, and which seem to be background or scenery. (If it looks like the most important thing in the room, it probably is. If the game says it's not important, it probably isn't.) [para]* Try to interact with things. Use common sense. If you see a button, push it. If you find a flute, play it. And [help-style]take[/help-style] anything that you can possibly lift. [para]* If you try a command on an object, and you get a distinctive response, your ears should perk up. It means you're on the right track. Maybe you have to try a related command, or change something else in the environment, or bring a second object in somehow. Maybe you won't be able to complete the action until later in the game. But it's important. [para]* Notice when the game is leading you towards a specific command. If the game says 'You could probably bend the bars,' then [help-style]bend bars[/help-style] is worth trying. [para]* Pay attention to common elements. If you find rubies and emeralds, look for red and green places to sell, put, or drop them. If a machine is made of brass, look for a brass part to add to it. If a door is barred by shimmering silver light, look for anything that magically glows with a similar light. [para]* When you find something which moves by itself, hang out and watch it for a while. You may need to understand its entire range of movement. [para]And remember, the game world is a [italic type]world[roman type]. It has its own logic -- whimsy or dream logic perhaps, but still sense. Find the game's time and reason, and follow it. You will find a way through.~]
    say__p=1;! [2: ~Every text adventure is different. But here are some simple ideas which will help you in nearly any game. ~]
    ParaContent(); print "Every text adventure is different. But here are some simple ideas which will help you in nearly any game. ";! [3: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [4: ~* Examine everything. (Type ~]
    ParaContent(); print "* Examine everything. (Type ";! [5: help-style]
    ParaContent(); print "~"; style bold;! [6: ~examine~]
    ParaContent(); print "examine";! [7: /help-style]
    ParaContent(); style roman; print "~";! [8: ~ for more on this command.) Even if there are many things in the room, try to examine each one, at least once. Be systematic. ~]
    ParaContent(); print " for more on this command.) Even if there are many things in the room, try to examine each one, at least once. Be systematic. ";! [9: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [10: ~* Notice which objects the game is focussing your attention on, and which seem to be background or scenery. (If it looks like the most important thing in the room, it probably is. If the game says it's not important, it probably isn't.) ~]
    ParaContent(); print "* Notice which objects the game is focussing your attention on, and which seem to be background or scenery. (If it looks like the most important thing in the room, it probably is. If the game says it's not important, it probably isn't.) ";! [11: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [12: ~* Try to interact with things. Use common sense. If you see a button, push it. If you find a flute, play it. And ~]
    ParaContent(); print "* Try to interact with things. Use common sense. If you see a button, push it. If you find a flute, play it. And ";! [13: help-style]
    ParaContent(); print "~"; style bold;! [14: ~take~]
    ParaContent(); print "take";! [15: /help-style]
    ParaContent(); style roman; print "~";! [16: ~ anything that you can possibly lift. ~]
    ParaContent(); print " anything that you can possibly lift. ";! [17: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [18: ~* If you try a command on an object, and you get a distinctive response, your ears should perk up. It means you're on the right track. Maybe you have to try a related command, or change something else in the environment, or bring a second object in somehow. Maybe you won't be able to complete the action until later in the game. But it's important. ~]
    ParaContent(); print "* If you try a command on an object, and you get a distinctive response, your ears should perk up. It means you're on the right track. Maybe you have to try a related command, or change something else in the environment, or bring a second object in somehow. Maybe you won't be able to complete the action until later in the game. But it's important. ";! [19: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [20: ~* Notice when the game is leading you towards a specific command. If the game says 'You could probably bend the bars,' then ~]
    ParaContent(); print "* Notice when the game is leading you towards a specific command. If the game says ~You could probably bend the bars,~ then ";! [21: help-style]
    ParaContent(); print "~"; style bold;! [22: ~bend bars~]
    ParaContent(); print "bend bars";! [23: /help-style]
    ParaContent(); style roman; print "~";! [24: ~ is worth trying. ~]
    ParaContent(); print " is worth trying. ";! [25: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [26: ~* Pay attention to common elements. If you find rubies and emeralds, look for red and green places to sell, put, or drop them. If a machine is made of brass, look for a brass part to add to it. If a door is barred by shimmering silver light, look for anything that magically glows with a similar light. ~]
    ParaContent(); print "* Pay attention to common elements. If you find rubies and emeralds, look for red and green places to sell, put, or drop them. If a machine is made of brass, look for a brass part to add to it. If a door is barred by shimmering silver light, look for anything that magically glows with a similar light. ";! [27: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [28: ~* When you find something which moves by itself, hang out and watch it for a while. You may need to understand its entire range of movement. ~]
    ParaContent(); print "* When you find something which moves by itself, hang out and watch it for a while. You may need to understand its entire range of movement. ";! [29: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [30: ~And remember, the game world is a ~]
    ParaContent(); print "And remember, the game world is a ";! [31: italic type]
    ParaContent(); style underline;! [32: ~world~]
    ParaContent(); print "world";! [33: roman type]
    ParaContent(); style roman;! [34: ~. It has its own logic -- whimsy or dream logic perhaps, but still sense. Find the game's time and reason, and follow it. You will find a way through.~]
    ParaContent(); print ". It has its own logic -- whimsy or dream logic perhaps, but still sense. Find the game's time and reason, and follow it. You will find a way through."; .L_Say819; .L_SayX812;rtrue;
];
[ R_TX_S_178 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~There is no 'use' command in most text adventures. (If there were, what would be the point in providing any other commands?) Instead, try a command which is appropriate to whatever you're doing. If you have a key, try [help-style]unlock[/help-style] something. If you have a book, try to [help-style]read[/help-style] it. If you find a lever, try to [help-style]pull[/help-style] or [help-style]push[/help-style] it.
    [para]If you have no idea what to try, start with [help-style]examine[/help-style]. Then [help-style]feel[/help-style], and perhaps [help-style]listen to[/help-style] or [help-style]smell[/help-style] it. If that doesn't give you any leads, it can't hurt to [help-style]push[/help-style], [help-style]pull[/help-style], or [help-style]move[/help-style] it. Well -- it might hurt. But probably not too much.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~There is no 'use' command in most text adventures. (If there were, what would be the point in providing any other commands?) Instead, try a command which is appropriate to whatever you're doing. If you have a key, try [help-style]unlock[/help-style] something. If you have a book, try to [help-style]read[/help-style] it. If you find a lever, try to [help-style]pull[/help-style] or [help-style]push[/help-style] it. [para]If you have no idea what to try, start with [help-style]examine[/help-style]. Then [help-style]feel[/help-style], and perhaps [help-style]listen to[/help-style] or [help-style]smell[/help-style] it. If that doesn't give you any leads, it can't hurt to [help-style]push[/help-style], [help-style]pull[/help-style], or [help-style]move[/help-style] it. Well -- it might hurt. But probably not too much.~]
    say__p=1;! [2: ~There is no 'use' command in most text adventures. (If there were, what would be the point in providing any other commands?) Instead, try a command which is appropriate to whatever you're doing. If you have a key, try ~]
    ParaContent(); print "There is no ~use~ command in most text adventures. (If there were, what would be the point in providing any other commands?) Instead, try a command which is appropriate to whatever you're doing. If you have a key, try ";! [3: help-style]
    ParaContent(); print "~"; style bold;! [4: ~unlock~]
    ParaContent(); print "unlock";! [5: /help-style]
    ParaContent(); style roman; print "~";! [6: ~ something. If you have a book, try to ~]
    ParaContent(); print " something. If you have a book, try to ";! [7: help-style]
    ParaContent(); print "~"; style bold;! [8: ~read~]
    ParaContent(); print "read";! [9: /help-style]
    ParaContent(); style roman; print "~";! [10: ~ it. If you find a lever, try to ~]
    ParaContent(); print " it. If you find a lever, try to ";! [11: help-style]
    ParaContent(); print "~"; style bold;! [12: ~pull~]
    ParaContent(); print "pull";! [13: /help-style]
    ParaContent(); style roman; print "~";! [14: ~ or ~]
    ParaContent(); print " or ";! [15: help-style]
    ParaContent(); print "~"; style bold;! [16: ~push~]
    ParaContent(); print "push";! [17: /help-style]
    ParaContent(); style roman; print "~";! [18: ~ it. ~]
    ParaContent(); print " it. ";! [19: para]
    ParaContent(); DivideParagraphPoint(); new_line;! [20: ~If you have no idea what to try, start with ~]
    ParaContent(); print "If you have no idea what to try, start with ";! [21: help-style]
    ParaContent(); print "~"; style bold;! [22: ~examine~]
    ParaContent(); print "examine";! [23: /help-style]
    ParaContent(); style roman; print "~";! [24: ~. Then ~]
    ParaContent(); print ". Then ";! [25: help-style]
    ParaContent(); print "~"; style bold;! [26: ~feel~]
    ParaContent(); print "feel";! [27: /help-style]
    ParaContent(); style roman; print "~";! [28: ~, and perhaps ~]
    ParaContent(); print ", and perhaps ";! [29: help-style]
    ParaContent(); print "~"; style bold;! [30: ~listen to~]
    ParaContent(); print "listen to";! [31: /help-style]
    ParaContent(); style roman; print "~";! [32: ~ or ~]
    ParaContent(); print " or ";! [33: help-style]
    ParaContent(); print "~"; style bold;! [34: ~smell~]
    ParaContent(); print "smell";! [35: /help-style]
    ParaContent(); style roman; print "~";! [36: ~ it. If that doesn't give you any leads, it can't hurt to ~]
    ParaContent(); print " it. If that doesn't give you any leads, it can't hurt to ";! [37: help-style]
    ParaContent(); print "~"; style bold;! [38: ~push~]
    ParaContent(); print "push";! [39: /help-style]
    ParaContent(); style roman; print "~";! [40: ~, ~]
    ParaContent(); print ", ";! [41: help-style]
    ParaContent(); print "~"; style bold;! [42: ~pull~]
    ParaContent(); print "pull";! [43: /help-style]
    ParaContent(); style roman; print "~";! [44: ~, or ~]
    ParaContent(); print ", or ";! [45: help-style]
    ParaContent(); print "~"; style bold;! [46: ~move~]
    ParaContent(); print "move";! [47: /help-style]
    ParaContent(); style roman; print "~";! [48: ~ it. Well -- it might hurt. But probably not too much.~]
    ParaContent(); print " it. Well -- it might hurt. But probably not too much."; .L_Say820; .L_SayX813;rtrue;
];
[ R_TX_S_179 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~It's your bedroom. It's not very interesting. The hall is to the East. The side door ([if the side door is open]open[else]closed[end if]) leads out of the house to the West. [first time][paragraph break]You've just gotten out of your bed, having woken up from a nap.[only]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~It's your bedroom. It's not very interesting. The hall is to the East. The side door ([if the side door is open]open[else]closed[end if]) leads out of the house to the West. [first time][paragraph break]You've just gotten out of your bed, having woken up from a nap.[only]~]
    say__p=1;! [2: ~It's your bedroom. It's not very interesting. The hall is to the East. The side door (~]
    ParaContent(); print "It's your bedroom. It's not very interesting. The hall is to the East. The side door (";! [3: if the side door is open]

    	if (~~(((((Adj_72_t1_v10(I277_side_door))))))) jump L_Say821;! [4: ~open~]
    ParaContent(); print "open";! [5: else]

    	jump L_SayX814; .L_Say821;! [6: ~closed~]
    ParaContent(); print "closed";! [7: end if]

    	.L_Say822; .L_SayX814;! [8: ~) leads out of the house to the West. ~]
    ParaContent(); print ") leads out of the house to the West. ";! [9: first time]
    ParaContent(); 
    	if ((say__comp == false) && ((I7_ST_say_first_time-->0)++ == 0)) {! [10: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line;! [11: ~You've just gotten out of your bed, having woken up from a nap.~]
    ParaContent(); print "You've just gotten out of your bed, having woken up from a nap.";! [12: only]
    ParaContent(); } .L_Say823; .L_SayX815;rtrue;
];
[ R_TX_S_180 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~It's an iPod touch, third-generation, maybe? [if playing]It's playing your favorite song.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~It's an iPod touch, third-generation, maybe? [if playing]It's playing your favorite song.[end if]~]
    say__p=1;! [2: ~It's an iPod touch, third-generation, maybe? ~]
    ParaContent(); print "It's an iPod touch, third-generation, maybe? ";! [3: if playing]

    	if (~~(((((Adj_87_t1_v10(self))))))) jump L_Say824;! [4: ~It's playing your favorite song.~]
    ParaContent(); print "It's playing your favorite song.";! [5: end if]

    	.L_Say824; .L_SayX816; .L_Say825; .L_SayX817;rtrue;
];
[ R_TX_S_181 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The hall in the middle of your house. Your bedroom is to the West. The staircase leading upwards is to the North. The back entryway is to the South. The kitchen is to the East. You can also go down to the basement from here.[if the brown key is in the hall][paragraph break]There is a muddy brown key hanging from a hook on the wall.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The hall in the middle of your house. Your bedroom is to the West. The staircase leading upwards is to the North. The back entryway is to the South. The kitchen is to the East. You can also go down to the basement from here.[if the brown key is in the hall][paragraph break]There is a muddy brown key hanging from a hook on the wall.[end if]~]
    say__p=1;! [2: ~The hall in the middle of your house. Your bedroom is to the West. The staircase leading upwards is to the North. The back entryway is to the South. The kitchen is to the East. You can also go down to the basement from here.~]
    ParaContent(); print "The hall in the middle of your house. Your bedroom is to the West. The staircase leading upwards is to the North. The back entryway is to the South. The kitchen is to the East. You can also go down to the basement from here.";! [3: if the brown key is in the hall]
    ParaContent(); 
    	if (~~((((I201_hall == ContainerOf(I202_muddy_brown_key)))))) jump L_Say826;! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line;! [5: ~There is a muddy brown key hanging from a hook on the wall.~]
    ParaContent(); print "There is a muddy brown key hanging from a hook on the wall.";! [6: end if]

    	.L_Say826; .L_SayX818; .L_Say827; .L_SayX819;rtrue;
];
[ R_TX_S_182 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The toaster turns bread into toast. There is a button on the front of the toaster labelled 'TOAST'. [line break]The toaster [if the toaster is plugged in]is plugged in.[else]is unplugged.[end if][if the toaster's slice count is greater than 0] It has [the toaster's slice count] slice[s] of [the toaster's content] in it.[end if][if the toaster is done] The toast is ready to be eaten, should you be able to remove it.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The toaster turns bread into toast. There is a button on the front of the toaster labelled 'TOAST'. [line break]The toaster [if the toaster is plugged in]is plugged in.[else]is unplugged.[end if][if the toaster's slice count is greater than 0] It has [the toaster's slice count] slice[s] of [the toaster's content] in it.[end if][if the toaster is done] The toast is ready to be eaten, should you be able to remove it.[end if]~]
    say__p=1;! [2: ~The toaster turns bread into toast. There is a button on the front of the toaster labelled 'TOAST'. ~]
    ParaContent(); print "The toaster turns bread into toast. There is a button on the front of the toaster labelled ~TOAST~. ";! [3: line break]
    ParaContent(); new_line;! [4: ~The toaster ~]
    ParaContent(); print "The toaster ";! [5: if the toaster is plugged in]

    	if (~~(((((Adj_91_t1_v10(I205_toaster))))))) jump L_Say828;! [6: ~is plugged in.~]
    ParaContent(); print "is plugged in.";! [7: else]

    	jump L_SayX820; .L_Say828;! [8: ~is unplugged.~]
    ParaContent(); print "is unplugged.";! [9: end if]

    	.L_Say829; .L_SayX820;! [10: if the toaster's slice count is greater than 0]

    	if (~~(((((Global_Vars-->10) > 0))))) jump L_Say830;! [11: ~ It has ~]
    ParaContent(); print " It has ";! [12: the toaster's slice count]
    ParaContent(); print (say__n=(Global_Vars-->10));! [13: ~ slice~]
    ParaContent(); print " slice";! [14: s]
    ParaContent(); STextSubstitution();! [15: ~ of ~]
    ParaContent(); print " of ";! [16: the toaster's content]
    ParaContent(); (PHR_888_r54 ());! [17: ~ in it.~]
    ParaContent(); print " in it.";! [18: end if]

    	.L_Say830; .L_SayX821;! [19: if the toaster is done]

    	if (~~(((((Adj_93_t1_v10(I205_toaster))))))) jump L_Say831;! [20: ~ The toast is ready to be eaten, should you be able to remove it.~]
    ParaContent(); print " The toast is ready to be eaten, should you be able to remove it.";! [21: end if]

    	.L_Say831; .L_SayX822; .L_Say832; .L_SayX823;rtrue;
];
[ R_TX_S_183 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~A loaf of bread, whole grain and fresh from the bakery. It's pre-sliced! [if the bread is wrapped]It's tightly wrapped in plastic[else]It smells delicious[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~A loaf of bread, whole grain and fresh from the bakery. It's pre-sliced! [if the bread is wrapped]It's tightly wrapped in plastic[else]It smells delicious[end if].~]
    say__p=1;! [2: ~A loaf of bread, whole grain and fresh from the bakery. It's pre-sliced! ~]
    ParaContent(); print "A loaf of bread, whole grain and fresh from the bakery. It's pre-sliced! ";! [3: if the bread is wrapped]

    	if (~~(((((Adj_88_t1_v10(I214_loaf_of_bread))))))) jump L_Say833;! [4: ~It's tightly wrapped in plastic~]
    ParaContent(); print "It's tightly wrapped in plastic";! [5: else]

    	jump L_SayX824; .L_Say833;! [6: ~It smells delicious~]
    ParaContent(); print "It smells delicious";! [7: end if]

    	.L_Say834; .L_SayX824;! [8: ~.~]
    ParaContent(); print "."; .L_Say835; .L_SayX825;rtrue;
];
[ R_TX_S_184 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if the pie is not aged]A meat pie that looks like it came out of the oven just this morning.[else]A meat pie that looks like it has been sitting out for a while. Maybe a bad idea to eat it.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if the pie is not aged]A meat pie that looks like it came out of the oven just this morning.[else]A meat pie that looks like it has been sitting out for a while. Maybe a bad idea to eat it.[end if]~]
    say__p=1;! [2: if the pie is not aged]

    	if (~~((((~~(((Adj_120_t1_v10(I219_pie))))))))) jump L_Say836;! [3: ~A meat pie that looks like it came out of the oven just this morning.~]
    ParaContent(); print "A meat pie that looks like it came out of the oven just this morning.";! [4: else]

    	jump L_SayX826; .L_Say836;! [5: ~A meat pie that looks like it has been sitting out for a while. Maybe a bad idea to eat it.~]
    ParaContent(); print "A meat pie that looks like it has been sitting out for a while. Maybe a bad idea to eat it.";! [6: end if]

    	.L_Say837; .L_SayX826; .L_Say838; .L_SayX827;rtrue;
];
[ R_TX_S_185 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The back entryway to your house. It's a tiny room with a coat rack and a trash can being the most notable scenery. [if the Toyota key is tied]There is a Toyota key tied to the coat rack. [end if]The hall is to the North, the backyard to the South.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The back entryway to your house. It's a tiny room with a coat rack and a trash can being the most notable scenery. [if the Toyota key is tied]There is a Toyota key tied to the coat rack. [end if]The hall is to the North, the backyard to the South.~]
    say__p=1;! [2: ~The back entryway to your house. It's a tiny room with a coat rack and a trash can being the most notable scenery. ~]
    ParaContent(); print "The back entryway to your house. It's a tiny room with a coat rack and a trash can being the most notable scenery. ";! [3: if the toyota key is tied]

    	if (~~(((((Adj_94_t1_v10(I228_toyota_key))))))) jump L_Say839;! [4: ~There is a Toyota key tied to the coat rack. ~]
    ParaContent(); print "There is a Toyota key tied to the coat rack. ";! [5: end if]

    	.L_Say839; .L_SayX828;! [6: ~The hall is to the North, the backyard to the South.~]
    ParaContent(); print "The hall is to the North, the backyard to the South."; .L_Say840; .L_SayX829;rtrue;
];
[ R_TX_S_186 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~It's an old wooden chest with 5 drawers.[if the first drawer is open] The top drawer is open.[end if][if the second drawer is open] The second drawer is open.[end if][if the third drawer is open] The third drawer is open.[end if][if the fourth drawer is open] The fourth drawer is open.[end if][if the fifth drawer is open] The bottom drawer is open.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~It's an old wooden chest with 5 drawers.[if the first drawer is open] The top drawer is open.[end if][if the second drawer is open] The second drawer is open.[end if][if the third drawer is open] The third drawer is open.[end if][if the fourth drawer is open] The fourth drawer is open.[end if][if the fifth drawer is open] The bottom drawer is open.[end if]~]
    say__p=1;! [2: ~It's an old wooden chest with 5 drawers.~]
    ParaContent(); print "It's an old wooden chest with 5 drawers.";! [3: if the first drawer is open]

    	if (~~(((((Adj_72_t1_v10(I244_first_drawer))))))) jump L_Say841;! [4: ~ The top drawer is open.~]
    ParaContent(); print " The top drawer is open.";! [5: end if]

    	.L_Say841; .L_SayX830;! [6: if the second drawer is open]

    	if (~~(((((Adj_72_t1_v10(I246_second_drawer))))))) jump L_Say842;! [7: ~ The second drawer is open.~]
    ParaContent(); print " The second drawer is open.";! [8: end if]

    	.L_Say842; .L_SayX831;! [9: if the third drawer is open]

    	if (~~(((((Adj_72_t1_v10(I248_third_drawer))))))) jump L_Say843;! [10: ~ The third drawer is open.~]
    ParaContent(); print " The third drawer is open.";! [11: end if]

    	.L_Say843; .L_SayX832;! [12: if the fourth drawer is open]

    	if (~~(((((Adj_72_t1_v10(I250_fourth_drawer))))))) jump L_Say844;! [13: ~ The fourth drawer is open.~]
    ParaContent(); print " The fourth drawer is open.";! [14: end if]

    	.L_Say844; .L_SayX833;! [15: if the fifth drawer is open]

    	if (~~(((((Adj_72_t1_v10(I252_fifth_drawer))))))) jump L_Say845;! [16: ~ The bottom drawer is open.~]
    ParaContent(); print " The bottom drawer is open.";! [17: end if]

    	.L_Say845; .L_SayX834; .L_Say846; .L_SayX835;rtrue;
];
[ R_TX_S_187 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can see your own reflection in the mirror. [if the player is wearing some hair gel]Your hair looks awesome with the hair gel on it.[else]You look the same as always.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can see your own reflection in the mirror. [if the player is wearing some hair gel]Your hair looks awesome with the hair gel on it.[else]You look the same as always.[end if]~]
    say__p=1;! [2: ~You can see your own reflection in the mirror. ~]
    ParaContent(); print "You can see your own reflection in the mirror. ";! [3: if the player is wearing some hair gel]

    	if (~~((((player == WearerOf(I257_can_of_hair_gel)))))) jump L_Say847;! [4: ~Your hair looks awesome with the hair gel on it.~]
    ParaContent(); print "Your hair looks awesome with the hair gel on it.";! [5: else]

    	jump L_SayX836; .L_Say847;! [6: ~You look the same as always.~]
    ParaContent(); print "You look the same as always.";! [7: end if]

    	.L_Say848; .L_SayX836; .L_Say849; .L_SayX837;rtrue;
];
[ R_TX_S_188 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~It's a bathtub. Big enough to sit in comfortably or lie down in uncomfortably. [paragraph break][the water status]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~It's a bathtub. Big enough to sit in comfortably or lie down in uncomfortably. [paragraph break][the water status]~]
    say__p=1;! [2: ~It's a bathtub. Big enough to sit in comfortably or lie down in uncomfortably. ~]
    ParaContent(); print "It's a bathtub. Big enough to sit in comfortably or lie down in uncomfortably. ";! [3: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line;! [4: the water status]
    ParaContent(); (PHR_912_r55 ()); .L_Say850; .L_SayX838;rtrue;
];
[ R_TX_S_189 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~A large vat holding a greenish liquid. The lid is [if the vat is open]open[else]tightly sealed[end if]. Who knows how long it's been here?~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~A large vat holding a greenish liquid. The lid is [if the vat is open]open[else]tightly sealed[end if]. Who knows how long it's been here?~]
    say__p=1;! [2: ~A large vat holding a greenish liquid. The lid is ~]
    ParaContent(); print "A large vat holding a greenish liquid. The lid is ";! [3: if the vat is open]

    	if (~~(((((Adj_72_t1_v10(I264_vat))))))) jump L_Say851;! [4: ~open~]
    ParaContent(); print "open";! [5: else]

    	jump L_SayX839; .L_Say851;! [6: ~tightly sealed~]
    ParaContent(); print "tightly sealed";! [7: end if]

    	.L_Say852; .L_SayX839;! [8: ~. Who knows how long it's been here?~]
    ParaContent(); print ". Who knows how long it's been here?"; .L_Say853; .L_SayX840;rtrue;
];
[ R_TX_S_190 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~A small cabinet that looks like it once held keys for all the rooms in the house.[if open] Now it looks like there aren't very many keys in it at all.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~A small cabinet that looks like it once held keys for all the rooms in the house.[if open] Now it looks like there aren't very many keys in it at all.[end if]~]
    say__p=1;! [2: ~A small cabinet that looks like it once held keys for all the rooms in the house.~]
    ParaContent(); print "A small cabinet that looks like it once held keys for all the rooms in the house.";! [3: if open]

    	if (~~(((((Adj_72_t1_v10(self))))))) jump L_Say854;! [4: ~ Now it looks like there aren't very many keys in it at all.~]
    ParaContent(); print " Now it looks like there aren't very many keys in it at all.";! [5: end if]

    	.L_Say854; .L_SayX841; .L_Say855; .L_SayX842;rtrue;
];
[ R_TX_S_191 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~A high-up shelf that you imagine stores the mad scientist's secrets.  [if the player is on the stool]On the tool shelf, you can see [a list of the things on the shelf]. That's disappointing[else]It's so high up that you can't see on it[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~A high-up shelf that you imagine stores the mad scientist's secrets.  [if the player is on the stool]On the tool shelf, you can see [a list of the things on the shelf]. That's disappointing[else]It's so high up that you can't see on it[end if].~]
    say__p=1;! [2: ~A high-up shelf that you imagine stores the mad scientist's secrets.  ~]
    ParaContent(); print "A high-up shelf that you imagine stores the mad scientist's secrets.  ";! [3: if the player is on the stool]

    	if (~~((((I208_stool == SupporterOf(player)))))) jump L_Say856;! [4: ~On the tool shelf, you can see ~]
    ParaContent(); print "On the tool shelf, you can see ";! [5: a list of the things on the shelf]
    ParaContent(); objectloop(tmp_0 ofclass Object)
    			if (((tmp_0 ofclass K2_thing) && (I357_tool_shelf == SupporterOf(tmp_0))))
    				give tmp_0 workflag2;
    			else
    				give tmp_0 ~workflag2;
    		WriteListOfMarkedObjects(ENGLISH_BIT);! [6: ~. That's disappointing~]
    ParaContent(); print ". That's disappointing";! [7: else]

    	jump L_SayX843; .L_Say856;! [8: ~It's so high up that you can't see on it~]
    ParaContent(); print "It's so high up that you can't see on it";! [9: end if]

    	.L_Say857; .L_SayX843;! [10: ~.~]
    ParaContent(); print "."; .L_Say858; .L_SayX844;rtrue;
];
[ R_TX_S_192 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~A tube of super glue. It has a warning: EXTREMELY STICKY. [if the glue is whole]Unfortunately, the cap seems to be super glued on, so it's not going to be much use to you.[else]It has been cut, and glue is slowly seeping out of the tube.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~A tube of super glue. It has a warning: EXTREMELY STICKY. [if the glue is whole]Unfortunately, the cap seems to be super glued on, so it's not going to be much use to you.[else]It has been cut, and glue is slowly seeping out of the tube.[end if]~]
    say__p=1;! [2: ~A tube of super glue. It has a warning: EXTREMELY STICKY. ~]
    ParaContent(); print "A tube of super glue. It has a warning: EXTREMELY STICKY. ";! [3: if the glue is whole]

    	if (~~(((((Adj_118_t1_v10(I362_super_glue))))))) jump L_Say859;! [4: ~Unfortunately, the cap seems to be super glued on, so it's not going to be much use to you.~]
    ParaContent(); print "Unfortunately, the cap seems to be super glued on, so it's not going to be much use to you.";! [5: else]

    	jump L_SayX845; .L_Say859;! [6: ~It has been cut, and glue is slowly seeping out of the tube.~]
    ParaContent(); print "It has been cut, and glue is slowly seeping out of the tube.";! [7: end if]

    	.L_Say860; .L_SayX845; .L_Say861; .L_SayX846;rtrue;
];
[ R_TX_S_193 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~A poster reading '[if it is hunting season]Hunting Season is Now[else]Hunting season begins in [the poster weeks] weeks![end if]'~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~A poster reading '[if it is hunting season]Hunting Season is Now[else]Hunting season begins in [the poster weeks] weeks![end if]'~]
    say__p=1;! [2: ~A poster reading '~]
    ParaContent(); print "A poster reading ~";! [3: if it is hunting season]

    	if (~~((((PHR_999_r3 ()))))) jump L_Say862;! [4: ~Hunting Season is Now~]
    ParaContent(); print "Hunting Season is Now";! [5: else]

    	jump L_SayX847; .L_Say862;! [6: ~Hunting season begins in ~]
    ParaContent(); print "Hunting season begins in ";! [7: the poster weeks]
    ParaContent(); print (say__n=(Global_Vars-->13));! [8: ~ weeks!~]
    ParaContent(); print " weeks!";! [9: end if]

    	.L_Say863; .L_SayX847;! [10: ~'~]
    ParaContent(); print "~"; .L_Say864; .L_SayX848;rtrue;
];
[ R_TX_S_194 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~A small garden. There are a few different kinds of flowers and a few different kinds of squash[if the time machine's use count is greater than 1], which are looking mighty tasty[end if]. It's a peaceful place. A spigot on the wall sits above a circular indent in the dirt.[if the bucket is hidden] You could swear there used to be a bucket somewhere around here, but you don't see it anywhere...[end if][paragraph break]The side door to your house is East, and a path leads off towards town to the West.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~A small garden. There are a few different kinds of flowers and a few different kinds of squash[if the time machine's use count is greater than 1], which are looking mighty tasty[end if]. It's a peaceful place. A spigot on the wall sits above a circular indent in the dirt.[if the bucket is hidden] You could swear there used to be a bucket somewhere around here, but you don't see it anywhere...[end if][paragraph break]The side door to your house is East, and a path leads off towards town to the West.~]
    say__p=1;! [2: ~A small garden. There are a few different kinds of flowers and a few different kinds of squash~]
    ParaContent(); print "A small garden. There are a few different kinds of flowers and a few different kinds of squash";! [3: if the time machine's use count is greater than 1]

    	if (~~(((((Global_Vars-->14) > 1))))) jump L_Say865;! [4: ~, which are looking mighty tasty~]
    ParaContent(); print ", which are looking mighty tasty";! [5: end if]

    	.L_Say865; .L_SayX849;! [6: ~. It's a peaceful place. A spigot on the wall sits above a circular indent in the dirt.~]
    ParaContent(); print ". It's a peaceful place. A spigot on the wall sits above a circular indent in the dirt.";! [7: if the bucket is hidden]

    	if (~~(((((Adj_100_t1_v10(I284_bucket))))))) jump L_Say866;! [8: ~ You could swear there used to be a bucket somewhere around here, but you don't see it anywhere...~]
    ParaContent(); print " You could swear there used to be a bucket somewhere around here, but you don't see it anywhere...";! [9: end if]

    	.L_Say866; .L_SayX850;! [10: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line;! [11: ~The side door to your house is East, and a path leads off towards town to the West.~]
    ParaContent(); print "The side door to your house is East, and a path leads off towards town to the West."; .L_Say867; .L_SayX851;rtrue;
];
[ R_TX_S_195 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~A narrow rusty shed. [if the player is on the stool]On the shed's roof, you can see [a list of the things on the roof of the shed].[else]The shed is really tall and you can't see above it.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~A narrow rusty shed. [if the player is on the stool]On the shed's roof, you can see [a list of the things on the roof of the shed].[else]The shed is really tall and you can't see above it.[end if]~]
    say__p=1;! [2: ~A narrow rusty shed. ~]
    ParaContent(); print "A narrow rusty shed. ";! [3: if the player is on the stool]

    	if (~~((((I208_stool == SupporterOf(player)))))) jump L_Say868;! [4: ~On the shed's roof, you can see ~]
    ParaContent(); print "On the shed's roof, you can see ";! [5: a list of the things on the roof of the shed]
    ParaContent(); objectloop(tmp_0 ofclass Object)
    			if (((tmp_0 ofclass K2_thing) && (I283_roof_of_the_shed == SupporterOf(tmp_0))))
    				give tmp_0 workflag2;
    			else
    				give tmp_0 ~workflag2;
    		WriteListOfMarkedObjects(ENGLISH_BIT);! [6: ~.~]
    ParaContent(); print ".";! [7: else]

    	jump L_SayX852; .L_Say868;! [8: ~The shed is really tall and you can't see above it.~]
    ParaContent(); print "The shed is really tall and you can't see above it.";! [9: end if]

    	.L_Say869; .L_SayX852; .L_Say870; .L_SayX853;rtrue;
];
[ R_TX_S_196 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~A [if the spaceship is on]glowing [end if]purple button labelled LAUNCH~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~A [if the spaceship is on]glowing [end if]purple button labelled LAUNCH~]
    say__p=1;! [2: ~A ~]
    ParaContent(); print "A ";! [3: if the spaceship is on]

    	if (~~(((((Adj_97_t1_v10(I288_spaceship))))))) jump L_Say871;! [4: ~glowing ~]
    ParaContent(); print "glowing ";! [5: end if]

    	.L_Say871; .L_SayX854;! [6: ~purple button labelled LAUNCH~]
    ParaContent(); print "purple button labelled LAUNCH"; .L_Say872; .L_SayX855;rtrue;
];
[ R_TX_S_197 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~More road! [If the fork is stuck]There's a fork in the road here. [end if]The main road goes North and South. To the West there's a parking lot.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~More road! [If the fork is stuck]There's a fork in the road here. [end if]The main road goes North and South. To the West there's a parking lot.~]
    say__p=1;! [2: ~More road! ~]
    ParaContent(); print "More road! ";! [3: if the fork is stuck]

    	if (~~(((((Adj_106_t1_v10(I300_fork))))))) jump L_Say873;! [4: ~There's a fork in the road here. ~]
    ParaContent(); print "There's a fork in the road here. ";! [5: end if]

    	.L_Say873; .L_SayX856;! [6: ~The main road goes North and South. To the West there's a parking lot.~]
    ParaContent(); print "The main road goes North and South. To the West there's a parking lot."; .L_Say874; .L_SayX857;rtrue;
];
[ R_TX_S_198 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Where cars park[if the car is in the lot]. You see your boxy blue-gray Toyota in the corner of the lot.[else], except there aren't any today.[end if] The road is to the East.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Where cars park[if the car is in the lot]. You see your boxy blue-gray Toyota in the corner of the lot.[else], except there aren't any today.[end if] The road is to the East.~]
    say__p=1;! [2: ~Where cars park~]
    ParaContent(); print "Where cars park";! [3: if the car is in the lot]
    ParaContent(); 
    	if (~~((((I301_parking_lot == ContainerOf(I302_blue_car)))))) jump L_Say875;! [4: ~. You see your boxy blue-gray Toyota in the corner of the lot.~]
    ParaContent(); print ". You see your boxy blue-gray Toyota in the corner of the lot.";! [5: else]

    	jump L_SayX858; .L_Say875;! [6: ~, except there aren't any today.~]
    ParaContent(); print ", except there aren't any today.";! [7: end if]

    	.L_Say876; .L_SayX858;! [8: ~ The road is to the East.~]
    ParaContent(); print " The road is to the East."; .L_Say877; .L_SayX859;rtrue;
];
[ R_TX_S_199 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~No trains.[paragraph break][if the map is examined]There are exits to the South and East.[else]The road leads South back toward town.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~No trains.[paragraph break][if the map is examined]There are exits to the South and East.[else]The road leads South back toward town.[end if]~]
    say__p=1;! [2: ~No trains.~]
    ParaContent(); print "No trains.";! [3: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line;! [4: if the map is examined]

    	if (~~(((((Adj_109_t1_v10(I304_map))))))) jump L_Say878;! [5: ~There are exits to the South and East.~]
    ParaContent(); print "There are exits to the South and East.";! [6: else]

    	jump L_SayX860; .L_Say878;! [7: ~The road leads South back toward town.~]
    ParaContent(); print "The road leads South back toward town.";! [8: end if]

    	.L_Say879; .L_SayX860; .L_Say880; .L_SayX861;rtrue;
];
[ R_TX_S_200 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~There's lots of trees, in particular, an ash tree, an elm tree, and a pine tree. The edge of the woods is to the East. Going South, you can see signs for a hunting lodge.[if the nest is not found] You can hear a faint sound from above.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~There's lots of trees, in particular, an ash tree, an elm tree, and a pine tree. The edge of the woods is to the East. Going South, you can see signs for a hunting lodge.[if the nest is not found] You can hear a faint sound from above.[end if]~]
    say__p=1;! [2: ~There's lots of trees, in particular, an ash tree, an elm tree, and a pine tree. The edge of the woods is to the East. Going South, you can see signs for a hunting lodge.~]
    ParaContent(); print "There's lots of trees, in particular, an ash tree, an elm tree, and a pine tree. The edge of the woods is to the East. Going South, you can see signs for a hunting lodge.";! [3: if the nest is not found]

    	if (~~((((~~(((Adj_113_t1_v10(I337_wasps__nest))))))))) jump L_Say881;! [4: ~ You can hear a faint sound from above.~]
    ParaContent(); print " You can hear a faint sound from above.";! [5: end if]

    	.L_Say881; .L_SayX862; .L_Say882; .L_SayX863;rtrue;
];
[ R_TX_S_201 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~A light brown nest of wasps[if the nest is not found] in the tree's branches[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~A light brown nest of wasps[if the nest is not found] in the tree's branches[end if].~]
    say__p=1;! [2: ~A light brown nest of wasps~]
    ParaContent(); print "A light brown nest of wasps";! [3: if the nest is not found]

    	if (~~((((~~(((Adj_113_t1_v10(I337_wasps__nest))))))))) jump L_Say883;! [4: ~ in the tree's branches~]
    ParaContent(); print " in the tree's branches";! [5: end if]

    	.L_Say883; .L_SayX864;! [6: ~.~]
    ParaContent(); print "."; .L_Say884; .L_SayX865;rtrue;
];
[ R_TX_S_202 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Moves: [turn count - 1]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Moves: [turn count - 1]~]
    say__p=1;! [2: ~Moves: ~]
    ParaContent(); print "Moves: ";! [3: turn count - 1]
    ParaContent(); print (say__n=(turns - 1)); .L_Say885; .L_SayX866;rtrue;
];
Array TX_S_202 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_202;
[ R_TX_S_461 
    t_0 ! Call parameter 'par': number
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Moves: [turn count]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Moves: [turn count]~]
    say__p=1;! [2: ~Moves: ~]
    ParaContent(); print "Moves: ";! [3: turn count]
    ParaContent(); print (say__n=turns); .L_Say886; .L_SayX867;rtrue;
];
Array TX_S_461 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_461;
! Find next x satisfying:
! [ thing(x) ]
[ Prop_0 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK2_First: x: x=x.IK2_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! True or false?
! [ Exists x : thing(x) & 'tub-relevant'(x) & is('the player', WearerOf(x)) ]
[ Prop_1 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in player) if (WearerOf(x)==parent(x)){
        if ((x ofclass K2_thing) && ((Adj_99_t1_v10(x)))){
            rtrue;
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : mouse(x) & encloses('the player', x) ]
[ Prop_2 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=IK21_First: x: x=x.IK21_Link){
        if ((IndirectlyContains(player,x))){
            rtrue;
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & 'enterable'(x) & called='box'(thing)(x) & is('the location', ContainerOf(x)) ]
[ Prop_3 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(real_location): x: x=TestContainmentRange(real_location,x)){
        if ((x ofclass K2_thing) && ((Adj_69_t1_v10(x)))){
            deferred_calling_list-->0 = x;
            rtrue;
        }
    }
    rfalse;
];
! Find next x satisfying:
! [ thing(x) ]
[ Prop_4 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK2_First: x: x=x.IK2_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ thing(x) ]
[ Prop_5 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK2_First: x: x=x.IK2_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! How many x satisfy this?
! [ thing(x) & 'marked for listing'(x) ]
[ Prop_6 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    for (x=IK2_First: x: x=x.IK2_Link){
        if (((Adj_65_t1_v10(x)))){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! Find next x satisfying:
! [ thing(x) & 'marked for listing'(x) ]
[ Prop_7 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK2_First: x: x=x.IK2_Link){
        if (((Adj_65_t1_v10(x)))){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! Abstraction for set of x such that:
! [ thing(x) & thing(x) & 'unmentioned'(x) ]
[ Prop_8 
    reason ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    total ! internal use only
    counter ! internal use only
    selection ! internal use only
    best ! internal use only
    best_with ! internal use only
    ;
    ;
    if (reason >= 0) { x = reason; reason = -1; }
    switch (reason) {
        -6: ! Find the extremal x satisfying:
            if (property_loop_sign>0) best=MIN_NEGATIVE_NUMBER;
            else best=MAX_POSITIVE_NUMBER;
            for (x=IK2_First: x: x=x.IK2_Link){
                if ((x ofclass K2_thing) && ((Adj_68_t1_v10(x)))){
                    if (property_loop_sign>0) {
                        if (x.property_to_be_totalled >= best) {
                            best = x.property_to_be_totalled;
                            best_with = x;
                        }
                    } else {
                        if (x.property_to_be_totalled <= best) {
                            best = x.property_to_be_totalled;
                            best_with = x;
                        }
                    }
                }
                .NextOuterLoop_3;
            }
            return best_with;
        -5: ! Find a total property value over all x satisfying:
            for (x=IK2_First: x: x=x.IK2_Link){
                if ((x ofclass K2_thing) && ((Adj_68_t1_v10(x)))){
                    total = total + x.property_to_be_totalled;
                    jump NextOuterLoop_6;
                }
                .NextOuterLoop_6;
            }
            return total;
        -4: ! Find a random x satisfying:
            selection = -1;
            while (true) {
                counter = 0;
                for (x=IK2_First: x: x=x.IK2_Link){
                    if ((x ofclass K2_thing) && ((Adj_68_t1_v10(x)))){
                        counter++;
                        if (counter == selection) return x;
                        jump NextOuterLoop_7;
                    }
                    .NextOuterLoop_7;
                }
                if ((counter == 0) || (selection >= 0)) return nothing;
                selection = random(counter);
            }
        -3: ! How many x satisfy this?
            for (x=IK2_First: x: x=x.IK2_Link){
                if ((x ofclass K2_thing) && ((Adj_68_t1_v10(x)))){
                    counter++;
                    jump NextOuterLoop_5;
                }
                .NextOuterLoop_5;
            }
            return counter;
        -2: ! Find next x satisfying:
            if (x_ix > 0) {
                x_ix--;
                jump NextOuterLoop_4;
            }
            if (x) jump NextOuterLoop_4;
            for (x=IK2_First: x: x=x.IK2_Link){
                if ((x ofclass K2_thing) && ((Adj_68_t1_v10(x)))){
                    return x;
                }
                .NextOuterLoop_4;
            }
            return nothing;
        -1: ! True or false?
            if ((x ofclass K2_thing) && (x ofclass K2_thing) && ((Adj_68_t1_v10(x)))){
                rtrue;
            }
            rfalse;
    }
];
! Find next x satisfying:
! [ thing(x) & not-'handled'(x) & supporter(const_0) & provides(const_1, 'the property initial appearance') & is(const_2, SupporterOf(x)) ]
[ Prop_9 
    const_0 ! Implied call parameter
    const_1 ! Implied call parameter
    const_2 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in const_2) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing) && (~~((Adj_62_t1_v10(x)))) && (const_0 ofclass K6_supporter) && (WhetherProvides(const_1, false, initial))){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! True or false?
! [ Exists x : thing(x) & 'locale-supportable'(x) & is(const_0, SupporterOf(x)) ]
[ Prop_10 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing) && ((Adj_41_t1_v10(x)))){
            rtrue;
        }
    }
    rfalse;
];
! Find next x satisfying:
! [ thing(x) & is(const_0, SupporterOf(x)) ]
[ Prop_11 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! True or false?
! [ Exists x : thing(x) & 'locale-supportable'(x) & is(const_0, SupporterOf(x)) ]
[ Prop_12 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing) && ((Adj_41_t1_v10(x)))){
            rtrue;
        }
    }
    rfalse;
];
! Find next x satisfying:
! [ thing(x) & is(const_0, SupporterOf(x)) ]
[ Prop_13 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! True or false?
! [ Exists x : thing(x) & 'locale-supportable'(x) & is(const_0, SupporterOf(x)) ]
[ Prop_14 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing) && ((Adj_41_t1_v10(x)))){
            rtrue;
        }
    }
    rfalse;
];
! Find next x satisfying:
! [ thing(x) & is(const_0, SupporterOf(x)) ]
[ Prop_15 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! How many x satisfy this?
! [ thing(x) & is('the actor', CarrierOf(x)) ]
[ Prop_16 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in actor) if (CarrierOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! True or false?
! [ Exists x : player's holdall(x) & called='current working sack'(player's holdall)(x) & is('actor', HolderOf(x)) ]
[ Prop_17 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=nothing: false: ){
        if ((actor == HolderOf(x))){
            deferred_calling_list-->0 = x;
            rtrue;
        }
    }
    rfalse;
];
! Find next x satisfying:
! [ thing(x) & is('the actor', CarrierOf(x)) ]
[ Prop_18 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in actor) if (CarrierOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! How many x satisfy this?
! [ thing(x) & is('the actor', CarrierOf(x)) ]
[ Prop_19 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in actor) if (CarrierOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! How many x satisfy this?
! [ thing(x) & is(const_0, SupporterOf(x)) ]
[ Prop_20 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! How many x satisfy this?
! [ thing(x) & is(const_0, ContainerOf(x)) ]
[ Prop_21 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    for (x=TestContainmentRange(const_0): x: x=TestContainmentRange(const_0,x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! How many x satisfy this?
! [ thing(x) & is('the second noun', SupporterOf(x)) ]
[ Prop_22 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in second) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! How many x satisfy this?
! [ thing(x) & is('the second noun', ContainerOf(x)) ]
[ Prop_23 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    for (x=TestContainmentRange(second): x: x=TestContainmentRange(second,x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! True or false?
! [ Exists x : person(x) & called='owner'(person)(x) & NOT[ is(x, 'the actor') NOT] & encloses(x, 'noun') ]
[ Prop_24 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=IK8_First: x: x=x.IK8_Link){
        if (~~((x == actor))){
            if ((IndirectlyContains(x,noun))){
                deferred_calling_list-->0 = x;
                rtrue;
            }
        }
    }
    rfalse;
];
! How many x satisfy this?
! [ thing(x) & is('the noun', SupporterOf(x)) ]
[ Prop_25 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in noun) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! How many x satisfy this?
! [ thing(x) & is('the noun', ContainerOf(x)) ]
[ Prop_26 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    for (x=TestContainmentRange(noun): x: x=TestContainmentRange(noun,x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! Find next x satisfying:
! [ thing(x) ]
[ Prop_27 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK2_First: x: x=x.IK2_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! True or false?
! [ Exists x : thing(x) & 'described'(x) & NOT[ 'scenery'(x) NOT] & is('the noun', ContainerOf(x)) ]
[ Prop_28 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(noun): x: x=TestContainmentRange(noun,x)){
        if ((x ofclass K2_thing) && ((Adj_63_t1_v10(x)))){
            if (~~(((Adj_59_t1_v10(x))))){
                rtrue;
            }
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & NOT[ is(x, 'the player') NOT] & is('the noun', ContainerOf(x)) ]
[ Prop_29 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(noun): x: x=TestContainmentRange(noun,x)){
        if ((x ofclass K2_thing)){
            if (~~((x == player))){
                rtrue;
            }
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & 'described'(x) & NOT[ 'scenery'(x) NOT] & is('the noun', SupporterOf(x)) ]
[ Prop_30 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in noun) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing) && ((Adj_63_t1_v10(x)))){
            if (~~(((Adj_59_t1_v10(x))))){
                rtrue;
            }
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & NOT[ is(x, 'the player') NOT] & is('the noun', SupporterOf(x)) ]
[ Prop_31 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in noun) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            if (~~((x == player))){
                rtrue;
            }
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & 'described'(x) & NOT[ 'scenery'(x) NOT] & is('noun', ContainerOf(x)) ]
[ Prop_32 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(noun): x: x=TestContainmentRange(noun,x)){
        if ((x ofclass K2_thing) && ((Adj_63_t1_v10(x)))){
            if (~~(((Adj_59_t1_v10(x))))){
                rtrue;
            }
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & 'described'(x) & NOT[ 'scenery'(x) NOT] & is('noun', SupporterOf(x)) ]
[ Prop_33 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in noun) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing) && ((Adj_63_t1_v10(x)))){
            if (~~(((Adj_59_t1_v10(x))))){
                rtrue;
            }
        }
    }
    rfalse;
];
! How many x satisfy this?
! [ thing(x) & is('the actor', CarrierOf(x)) ]
[ Prop_34 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in actor) if (CarrierOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! How many x satisfy this?
! [ thing(x) & is('the second noun', CarrierOf(x)) ]
[ Prop_35 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in second) if (CarrierOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];

Constant R_11_RESP_A = 1;
Constant R_39_RESP_A = 2;
Constant R_40_RESP_A = 3;
Constant R_41_RESP_A = 4;
Constant R_41_RESP_B = 5;
Constant R_42_RESP_A = 6;
Constant R_46_RESP_A = 7;
Constant R_46_RESP_B = 8;
Constant R_46_RESP_C = 9;
Constant R_46_RESP_D = 10;
Constant R_46_RESP_E = 11;
Constant R_46_RESP_F = 12;
Constant R_53_RESP_A = 13;
Constant R_55_RESP_A = 14;
Constant R_56_RESP_A = 15;
Constant R_57_RESP_A = 16;
Constant R_58_RESP_A = 17;
Constant R_59_RESP_A = 18;
Constant R_60_RESP_A = 19;
Constant R_61_RESP_A = 20;
Constant R_62_RESP_A = 21;
Constant R_63_RESP_A = 22;
Constant R_64_RESP_A = 23;
Constant R_65_RESP_A = 24;
Constant R_66_RESP_A = 25;
Constant R_67_RESP_A = 26;
Constant R_68_RESP_A = 27;
Constant R_69_RESP_A = 28;
Constant R_70_RESP_A = 29;
Constant R_71_RESP_A = 30;
Constant R_73_RESP_A = 31;
Constant R_73_RESP_B = 32;
Constant R_74_RESP_A = 33;
Constant R_75_RESP_A = 34;
Constant R_77_RESP_A = 35;
Constant R_78_RESP_A = 36;
Constant R_79_RESP_A = 37;
Constant R_80_RESP_A = 38;
Constant R_81_RESP_A = 39;
Constant R_82_RESP_A = 40;
Constant R_82_RESP_B = 41;
Constant R_84_RESP_A = 42;
Constant R_84_RESP_B = 43;
Constant R_87_RESP_A = 44;
Constant R_88_RESP_A = 45;
Constant R_89_RESP_A = 46;
Constant R_90_RESP_A = 47;
Constant R_92_RESP_A = 48;
Constant R_93_RESP_A = 49;
Constant R_96_RESP_A = 50;
Constant R_97_RESP_A = 51;
Constant R_98_RESP_A = 52;
Constant R_99_RESP_A = 53;
Constant R_100_RESP_A = 54;
Constant R_102_RESP_A = 55;
Constant R_103_RESP_A = 56;
Constant R_104_RESP_A = 57;
Constant R_105_RESP_A = 58;
Constant R_106_RESP_A = 59;
Constant R_109_RESP_A = 60;
Constant R_109_RESP_B = 61;
Constant R_111_RESP_A = 62;
Constant R_112_RESP_A = 63;
Constant R_112_RESP_B = 64;
Constant R_113_RESP_A = 65;
Constant R_114_RESP_A = 66;
Constant R_116_RESP_A = 67;
Constant R_116_RESP_B = 68;
Constant R_120_RESP_A = 69;
Constant R_120_RESP_B = 70;
Constant R_120_RESP_C = 71;
Constant R_120_RESP_D = 72;
Constant R_120_RESP_E = 73;
Constant R_120_RESP_F = 74;
Constant R_120_RESP_G = 75;
Constant R_120_RESP_H = 76;
Constant R_120_RESP_I = 77;
Constant R_120_RESP_J = 78;
Constant R_120_RESP_K = 79;
Constant R_120_RESP_L = 80;
Constant R_120_RESP_M = 81;
Constant R_120_RESP_N = 82;
Constant R_120_RESP_O = 83;
Constant R_120_RESP_P = 84;
Constant R_120_RESP_Q = 85;
Constant R_120_RESP_R = 86;
Constant R_120_RESP_S = 87;
Constant R_124_RESP_A = 88;
Constant R_124_RESP_B = 89;
Constant R_125_RESP_A = 90;
Constant R_125_RESP_B = 91;
Constant R_125_RESP_C = 92;
Constant R_125_RESP_D = 93;
Constant R_126_RESP_A = 94;
Constant R_127_RESP_A = 95;
Constant R_127_RESP_B = 96;
Constant R_128_RESP_A = 97;
Constant R_129_RESP_A = 98;
Constant R_129_RESP_B = 99;
Constant R_129_RESP_C = 100;
Constant R_129_RESP_D = 101;
Constant R_129_RESP_E = 102;
Constant R_131_RESP_A = 103;
Constant R_131_RESP_B = 104;
Constant R_131_RESP_C = 105;
Constant R_131_RESP_D = 106;
Constant R_134_RESP_A = 107;
Constant R_135_RESP_A = 108;
Constant R_138_RESP_A = 109;
Constant R_138_RESP_B = 110;
Constant R_138_RESP_C = 111;
Constant R_140_RESP_A = 112;
Constant R_142_RESP_A = 113;
Constant R_146_RESP_A = 114;
Constant R_146_RESP_B = 115;
Constant R_146_RESP_C = 116;
Constant R_147_RESP_A = 117;
Constant R_150_RESP_A = 118;
Constant R_152_RESP_A = 119;
Constant R_153_RESP_A = 120;
Constant R_153_RESP_B = 121;
Constant R_154_RESP_A = 122;
Constant R_155_RESP_A = 123;
Constant R_156_RESP_A = 124;
Constant R_157_RESP_A = 125;
Constant R_158_RESP_A = 126;
Constant R_159_RESP_A = 127;
Constant R_160_RESP_A = 128;
Constant R_161_RESP_A = 129;
Constant R_162_RESP_A = 130;
Constant R_162_RESP_B = 131;
Constant R_163_RESP_A = 132;
Constant R_163_RESP_B = 133;
Constant R_164_RESP_A = 134;
Constant R_165_RESP_A = 135;
Constant R_165_RESP_B = 136;
Constant R_166_RESP_A = 137;
Constant R_167_RESP_A = 138;
Constant R_168_RESP_A = 139;
Constant R_169_RESP_A = 140;
Constant R_171_RESP_A = 141;
Constant R_171_RESP_B = 142;
Constant R_172_RESP_A = 143;
Constant R_173_RESP_A = 144;
Constant R_174_RESP_A = 145;
Constant R_176_RESP_A = 146;
Constant R_176_RESP_B = 147;
Constant R_177_RESP_A = 148;
Constant R_178_RESP_A = 149;
Constant R_180_RESP_A = 150;
Constant R_181_RESP_A = 151;
Constant R_182_RESP_A = 152;
Constant R_184_RESP_A = 153;
Constant R_185_RESP_A = 154;
Constant R_186_RESP_A = 155;
Constant R_187_RESP_A = 156;
Constant R_189_RESP_A = 157;
Constant R_190_RESP_A = 158;
Constant R_190_RESP_B = 159;
Constant R_190_RESP_C = 160;
Constant R_191_RESP_A = 161;
Constant R_192_RESP_A = 162;
Constant R_194_RESP_A = 163;
Constant R_194_RESP_B = 164;
Constant R_194_RESP_C = 165;
Constant R_195_RESP_A = 166;
Constant R_196_RESP_A = 167;
Constant R_197_RESP_A = 168;
Constant R_199_RESP_A = 169;
Constant R_199_RESP_B = 170;
Constant R_200_RESP_A = 171;
Constant R_201_RESP_A = 172;
Constant R_203_RESP_A = 173;
Constant R_203_RESP_B = 174;
Constant R_204_RESP_A = 175;
Constant R_205_RESP_A = 176;
Constant R_206_RESP_A = 177;
Constant R_207_RESP_A = 178;
Constant R_208_RESP_A = 179;
Constant R_209_RESP_A = 180;
Constant R_211_RESP_A = 181;
Constant R_211_RESP_B = 182;
Constant R_211_RESP_C = 183;
Constant R_212_RESP_A = 184;
Constant R_214_RESP_A = 185;
Constant R_215_RESP_A = 186;
Constant R_216_RESP_A = 187;
Constant R_217_RESP_A = 188;
Constant R_218_RESP_A = 189;
Constant R_219_RESP_A = 190;
Constant R_220_RESP_A = 191;
Constant R_221_RESP_A = 192;
Constant R_222_RESP_A = 193;
Constant R_223_RESP_A = 194;
Constant R_224_RESP_A = 195;
Constant R_225_RESP_A = 196;
Constant R_228_RESP_A = 197;
Constant R_228_RESP_B = 198;
Constant R_229_RESP_A = 199;
Constant R_229_RESP_B = 200;
Constant R_230_RESP_A = 201;
Constant R_230_RESP_B = 202;
Constant R_230_RESP_C = 203;
Constant R_231_RESP_A = 204;
Constant R_231_RESP_B = 205;
Constant R_232_RESP_A = 206;
Constant R_233_RESP_A = 207;
Constant R_233_RESP_B = 208;
Constant R_234_RESP_A = 209;
Constant R_235_RESP_A = 210;
Constant R_236_RESP_A = 211;
Constant R_237_RESP_A = 212;
Constant R_237_RESP_B = 213;
Constant R_238_RESP_A = 214;
Constant R_239_RESP_A = 215;
Constant R_240_RESP_A = 216;
Constant R_241_RESP_A = 217;
Constant R_241_RESP_B = 218;
Constant R_242_RESP_A = 219;
Constant R_243_RESP_A = 220;
Constant R_244_RESP_A = 221;
Constant R_245_RESP_A = 222;
Constant R_245_RESP_B = 223;
Constant R_246_RESP_A = 224;
Constant R_247_RESP_A = 225;
Constant R_248_RESP_A = 226;
Constant R_249_RESP_A = 227;
Constant R_251_RESP_A = 228;
Constant R_252_RESP_A = 229;
Constant R_253_RESP_A = 230;
Constant R_253_RESP_B = 231;
Constant R_254_RESP_A = 232;
Constant R_255_RESP_A = 233;
Constant R_256_RESP_A = 234;
Constant R_257_RESP_A = 235;
Constant R_258_RESP_A = 236;
Constant R_259_RESP_A = 237;
Constant R_259_RESP_B = 238;
Constant R_260_RESP_A = 239;
Constant R_260_RESP_B = 240;
Constant R_261_RESP_A = 241;
Constant R_261_RESP_B = 242;
Constant R_262_RESP_A = 243;
Constant R_263_RESP_A = 244;
Constant R_263_RESP_B = 245;
Constant R_264_RESP_A = 246;
Constant R_265_RESP_A = 247;
Constant R_266_RESP_A = 248;
Constant R_267_RESP_A = 249;
Constant R_268_RESP_A = 250;
Constant R_269_RESP_A = 251;
Constant R_269_RESP_B = 252;
Constant R_270_RESP_A = 253;
Constant R_271_RESP_A = 254;
Constant R_271_RESP_B = 255;
Constant R_272_RESP_A = 256;
Constant R_273_RESP_A = 257;
Constant R_274_RESP_A = 258;
Constant R_284_RESP_A = 259;
Constant R_286_RESP_A = 260;
Constant R_286_RESP_B = 261;
Constant R_293_RESP_A = 262;
Constant R_294_RESP_A = 263;
Constant R_296_RESP_A = 264;
Constant R_297_RESP_A = 265;
Constant R_300_RESP_A = 266;
Constant R_301_RESP_A = 267;
Constant R_302_RESP_A = 268;
Constant R_303_RESP_A = 269;
Constant R_304_RESP_A = 270;
Constant R_304_RESP_B = 271;
Constant R_304_RESP_C = 272;
Constant R_304_RESP_D = 273;
Constant R_304_RESP_E = 274;
Constant R_304_RESP_F = 275;
Constant R_304_RESP_G = 276;
Constant R_304_RESP_H = 277;
Constant R_304_RESP_I = 278;
Constant R_304_RESP_J = 279;
Constant R_304_RESP_K = 280;
Constant R_304_RESP_L = 281;
Constant R_304_RESP_M = 282;
Constant R_304_RESP_N = 283;
Constant R_304_RESP_O = 284;
Constant R_304_RESP_P = 285;
Constant R_304_RESP_Q = 286;
Constant R_304_RESP_R = 287;
Constant R_304_RESP_S = 288;
Constant R_304_RESP_T = 289;
Constant R_304_RESP_U = 290;
Constant R_304_RESP_V = 291;
Constant R_304_RESP_W = 292;
Constant R_304_RESP_X = 293;
Constant R_304_RESP_Y = 294;
Constant R_305_RESP_A = 295;
Constant R_305_RESP_B = 296;
Constant R_305_RESP_C = 297;
Constant R_305_RESP_D = 298;
Constant R_305_RESP_E = 299;
Constant R_305_RESP_F = 300;
Constant R_305_RESP_G = 301;
Constant R_305_RESP_H = 302;
Constant R_305_RESP_I = 303;
Constant R_305_RESP_J = 304;
Constant R_305_RESP_K = 305;
Constant R_306_RESP_A = 306;
Constant R_306_RESP_B = 307;
Constant R_306_RESP_C = 308;
Constant R_306_RESP_D = 309;
Constant R_306_RESP_E = 310;
Constant R_306_RESP_F = 311;
Constant R_306_RESP_G = 312;
Constant R_306_RESP_H = 313;
Constant R_306_RESP_I = 314;
Constant R_306_RESP_J = 315;
Constant R_306_RESP_K = 316;
Constant R_306_RESP_L = 317;
Constant R_306_RESP_M = 318;
Constant R_306_RESP_N = 319;
Constant R_306_RESP_O = 320;
Constant R_306_RESP_P = 321;
Constant R_306_RESP_Q = 322;
Constant R_306_RESP_R = 323;
Constant R_306_RESP_S = 324;
Constant R_306_RESP_T = 325;
Constant R_306_RESP_U = 326;
Constant R_306_RESP_V = 327;
Constant R_306_RESP_W = 328;
Constant R_306_RESP_X = 329;
Constant R_307_RESP_A = 330;
Constant R_307_RESP_B = 331;
Constant R_307_RESP_C = 332;
Constant R_307_RESP_D = 333;
Constant R_307_RESP_E = 334;
Constant R_307_RESP_F = 335;
Constant R_308_RESP_A = 336;
Constant R_309_RESP_A = 337;
Constant R_309_RESP_B = 338;
Constant R_309_RESP_C = 339;
Constant R_309_RESP_D = 340;
Constant R_310_RESP_A = 341;
Constant R_310_RESP_B = 342;
Constant R_310_RESP_C = 343;
Constant R_310_RESP_D = 344;
Constant R_310_RESP_E = 345;
Constant R_310_RESP_F = 346;
Constant R_310_RESP_G = 347;
Constant R_310_RESP_H = 348;
Constant R_311_RESP_A = 349;
Constant R_312_RESP_A = 350;
Constant R_312_RESP_B = 351;
Constant R_312_RESP_C = 352;
Constant R_315_RESP_A = 353;
Constant R_315_RESP_B = 354;
Constant R_317_RESP_A = 355;
Constant R_317_RESP_B = 356;
Constant R_317_RESP_C = 357;
Constant R_323_RESP_A = 358;
Constant R_323_RESP_B = 359;
Constant R_323_RESP_C = 360;
Constant R_323_RESP_D = 361;
Constant R_323_RESP_E = 362;
Constant R_323_RESP_F = 363;
Constant R_326_RESP_A = 364;
Constant R_327_RESP_A = 365;
Constant R_327_RESP_B = 366;
Constant R_328_RESP_A = 367;
Constant R_328_RESP_B = 368;
Constant R_329_RESP_A = 369;
Constant R_329_RESP_B = 370;
Constant R_330_RESP_A = 371;
Constant R_330_RESP_B = 372;
Constant R_331_RESP_A = 373;
Constant R_331_RESP_B = 374;
Constant R_331_RESP_C = 375;
Constant R_332_RESP_A = 376;
Constant R_332_RESP_B = 377;
Constant R_332_RESP_C = 378;
Constant R_334_RESP_A = 379;
Constant R_334_RESP_B = 380;
Constant R_334_RESP_C = 381;
Constant R_334_RESP_D = 382;
Constant R_334_RESP_E = 383;
Constant R_336_RESP_A = 384;
Constant R_338_RESP_A = 385;
Constant R_340_RESP_A = 386;
Constant R_342_RESP_A = 387;
Constant R_344_RESP_A = 388;
Constant R_345_RESP_A = 389;
Constant R_345_RESP_B = 390;
Constant R_345_RESP_C = 391;
Constant R_345_RESP_D = 392;
Constant NO_RESPONSES = 392;
Array ResponseTexts -->
    TX_S_203 TX_S_204 TX_S_207 TX_S_205 TX_S_206 TX_S_208 TX_S_209 TX_S_210 TX_S_211 TX_S_212 TX_S_213 TX_S_214 TX_S_215 TX_S_216 TX_S_217 TX_S_218 TX_S_219 TX_S_220 TX_S_221 TX_S_222 TX_S_223 TX_S_224 TX_S_225 TX_S_226 TX_S_227 TX_S_228 TX_S_229 TX_S_230 TX_S_231 TX_S_232 TX_S_233 TX_S_234 TX_S_235 TX_S_236 TX_S_238 TX_S_237 TX_S_239 TX_S_240 TX_S_241 TX_S_242 TX_S_243 TX_S_244 TX_S_245 TX_S_246 TX_S_247 TX_S_248 TX_S_249 TX_S_250 TX_S_251 TX_S_252 TX_S_253 TX_S_254 TX_S_255 TX_S_256 TX_S_257 TX_S_258 TX_S_259 TX_S_260 TX_S_261 TX_S_262 TX_S_263 TX_S_264 TX_S_265 TX_S_266 TX_S_267 TX_S_268 TX_S_269 TX_S_270 TX_S_271 TX_S_272 TX_S_273 TX_S_274 TX_S_275 TX_S_276 TX_S_277 TX_S_278 TX_S_279 TX_S_280 TX_S_281 TX_S_282 TX_S_283 TX_S_284 TX_S_285 TX_S_286 TX_S_287 TX_S_288 TX_S_289 TX_S_290 TX_S_291 TX_S_292 TX_S_293 TX_S_294 TX_S_295 TX_S_296 TX_S_297 TX_S_298 TX_S_299 TX_S_300 TX_S_301 TX_S_302 TX_S_303 TX_S_304 TX_S_305 TX_S_306 TX_S_307 TX_S_308 TX_S_309 TX_S_310 TX_S_311 TX_S_312 TX_S_313 TX_S_314 TX_S_315 TX_S_316 TX_S_317 TX_S_318 TX_S_319 TX_S_320 TX_S_321 TX_S_322 TX_S_323 TX_S_324 TX_S_325 TX_S_326 TX_S_327 TX_S_328 TX_S_329 TX_S_330 TX_S_331 TX_S_332 TX_S_333 TX_S_334 TX_S_335 TX_S_336 TX_S_337 TX_S_338 TX_S_339 TX_S_340 TX_S_341 TX_S_342 TX_S_343 TX_S_344 TX_S_345 TX_S_346 TX_S_347 TX_S_348 TX_S_349 TX_S_350 TX_S_351 TX_S_352 TX_S_353 TX_S_354 TX_S_355 TX_S_356 TX_S_357 TX_S_358 TX_S_359 TX_S_360 TX_S_361 TX_S_362 TX_S_363 TX_S_364 TX_S_365 TX_S_366 TX_S_367 TX_S_368 TX_S_369 TX_S_370 TX_S_371 TX_S_372 TX_S_373 TX_S_374 TX_S_375 TX_S_376 TX_S_377 TX_S_378 TX_S_379 TX_S_380 TX_S_381 TX_S_382 TX_S_383 TX_S_384 TX_S_385 TX_S_386 TX_S_387 TX_S_388 TX_S_389 TX_S_390 TX_S_391 TX_S_392 TX_S_393 TX_S_394 TX_S_395 TX_S_396 TX_S_397 TX_S_398 TX_S_399 TX_S_400 TX_S_401 TX_S_402 TX_S_403 TX_S_404 TX_S_405 TX_S_406 TX_S_407 TX_S_408 TX_S_409 TX_S_410 TX_S_411 TX_S_412 TX_S_413 TX_S_414 TX_S_415 TX_S_416 TX_S_417 TX_S_418 TX_S_419 TX_S_420 TX_S_421 TX_S_422 TX_S_423 TX_S_424 TX_S_425 TX_S_426 TX_S_427 TX_S_428 TX_S_429 TX_S_430 TX_S_431 TX_S_432 TX_S_433 TX_S_434 TX_S_435 TX_S_436 TX_S_437 TX_S_438 TX_S_439 TX_S_440 TX_S_441 TX_S_442 TX_S_443 TX_S_444 TX_S_445 TX_S_446 TX_S_447 TX_S_448 TX_S_449 TX_S_450 TX_S_451 TX_S_452 TX_S_453 TX_S_454 TX_S_455 TX_S_456 TX_S_457 TX_S_458 TX_S_459 TX_S_460 TX_S_0 TX_S_1 TX_S_2 TX_S_3 TX_S_4 TX_S_5 TX_S_6 TX_S_7 TX_S_8 TX_S_9 TX_S_10 TX_S_11 TX_S_12 TX_S_13 TX_S_14 TX_S_15 TX_S_16 TX_S_17 TX_S_18 TX_S_19 TX_S_20 TX_S_21 TX_S_22 TX_S_23 TX_S_24 TX_S_25 TX_S_26 TX_S_27 TX_S_28 TX_S_29 TX_S_30 TX_S_31 TX_S_32 TX_S_33 TX_S_34 TX_S_35 TX_S_36 TX_S_37 TX_S_38 TX_S_39 TX_S_40 TX_S_41 TX_S_42 TX_S_43 TX_S_44 TX_S_45 TX_S_46 TX_S_47 TX_S_48 TX_S_49 TX_S_50 TX_S_51 TX_S_52 TX_S_53 TX_S_54 TX_S_55 TX_S_56 TX_S_57 TX_S_58 TX_S_59 TX_S_60 TX_S_61 TX_S_62 TX_S_63 TX_S_64 TX_S_65 TX_S_66 TX_S_67 TX_S_68 TX_S_69 TX_S_70 TX_S_71 TX_S_72 TX_S_73 TX_S_74 TX_S_75 TX_S_76 TX_S_77 TX_S_78 TX_S_79 TX_S_80 TX_S_81 TX_S_82 TX_S_83 TX_S_84 TX_S_85 TX_S_86 TX_S_87 TX_S_88 TX_S_89 TX_S_90 TX_S_91 TX_S_92 TX_S_93 TX_S_94 TX_S_95 TX_S_96 TX_S_97 TX_S_98 TX_S_99 TX_S_100 TX_S_101 TX_S_102 TX_S_103 TX_S_104 TX_S_105 TX_S_106 TX_S_107 TX_S_108 TX_S_109 TX_S_110 TX_S_111 TX_S_112 TX_S_113 TX_S_114 TX_S_115 TX_S_116 TX_S_117 TX_S_118 TX_S_119 TX_S_120 TX_S_121 TX_S_122 TX_S_123 TX_S_124 TX_S_125 TX_S_126 TX_S_127 TX_S_128 TX_S_129 TX_S_130 TX_S_131 TX_S_132 TX_S_133 0 0;
[ PrintResponse 
    R ! Implied call parameter
    ;
    if (R == R_284_RESP_A) print (RulePrintingRule) ADJUST_LIGHT_R, " response (A)";
    if (R == R_286_RESP_A) print (RulePrintingRule) GENERATE_ACTION_R, " response (A)";
    if (R == R_286_RESP_B) print (RulePrintingRule) GENERATE_ACTION_R, " response (B)";
    if (R == R_293_RESP_A) print (RulePrintingRule) BASIC_ACCESSIBILITY_R, " response (A)";
    if (R == R_294_RESP_A) print (RulePrintingRule) BASIC_VISIBILITY_R, " response (A)";
    if (R == R_296_RESP_A) print (RulePrintingRule) REQUESTED_ACTIONS_REQUIRE_R, " response (A)";
    if (R == R_297_RESP_A) print (RulePrintingRule) CARRY_OUT_REQUESTED_ACTIONS_R, " response (A)";
    if (R == R_300_RESP_A) print (RulePrintingRule) ACCESS_THROUGH_BARRIERS_R, " response (A)";
    if (R == R_301_RESP_A) print (RulePrintingRule) CANT_REACH_INSIDE_CLOSED_R, " response (A)";
    if (R == R_302_RESP_A) print (RulePrintingRule) CANT_REACH_INSIDE_ROOMS_R, " response (A)";
    if (R == R_303_RESP_A) print (RulePrintingRule) CANT_REACH_OUTSIDE_CLOSED_R, " response (A)";
    if (R == R_304_RESP_A) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (A)";
    if (R == R_304_RESP_B) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (B)";
    if (R == R_304_RESP_C) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (C)";
    if (R == R_304_RESP_D) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (D)";
    if (R == R_304_RESP_E) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (E)";
    if (R == R_304_RESP_F) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (F)";
    if (R == R_304_RESP_G) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (G)";
    if (R == R_304_RESP_H) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (H)";
    if (R == R_304_RESP_I) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (I)";
    if (R == R_304_RESP_J) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (J)";
    if (R == R_304_RESP_K) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (K)";
    if (R == R_304_RESP_L) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (L)";
    if (R == R_304_RESP_M) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (M)";
    if (R == R_304_RESP_N) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (N)";
    if (R == R_304_RESP_O) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (O)";
    if (R == R_304_RESP_P) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (P)";
    if (R == R_304_RESP_Q) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (Q)";
    if (R == R_304_RESP_R) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (R)";
    if (R == R_304_RESP_S) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (S)";
    if (R == R_304_RESP_T) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (T)";
    if (R == R_304_RESP_U) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (U)";
    if (R == R_304_RESP_V) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (V)";
    if (R == R_304_RESP_W) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (W)";
    if (R == R_304_RESP_X) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (X)";
    if (R == R_304_RESP_Y) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (Y)";
    if (R == R_305_RESP_A) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (A)";
    if (R == R_305_RESP_B) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (B)";
    if (R == R_305_RESP_C) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (C)";
    if (R == R_305_RESP_D) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (D)";
    if (R == R_305_RESP_E) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (E)";
    if (R == R_305_RESP_F) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (F)";
    if (R == R_305_RESP_G) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (G)";
    if (R == R_305_RESP_H) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (H)";
    if (R == R_305_RESP_I) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (I)";
    if (R == R_305_RESP_J) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (J)";
    if (R == R_305_RESP_K) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (K)";
    if (R == R_306_RESP_A) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (A)";
    if (R == R_306_RESP_B) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (B)";
    if (R == R_306_RESP_C) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (C)";
    if (R == R_306_RESP_D) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (D)";
    if (R == R_306_RESP_E) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (E)";
    if (R == R_306_RESP_F) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (F)";
    if (R == R_306_RESP_G) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (G)";
    if (R == R_306_RESP_H) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (H)";
    if (R == R_306_RESP_I) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (I)";
    if (R == R_306_RESP_J) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (J)";
    if (R == R_306_RESP_K) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (K)";
    if (R == R_306_RESP_L) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (L)";
    if (R == R_306_RESP_M) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (M)";
    if (R == R_306_RESP_N) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (N)";
    if (R == R_306_RESP_O) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (O)";
    if (R == R_306_RESP_P) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (P)";
    if (R == R_306_RESP_Q) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (Q)";
    if (R == R_306_RESP_R) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (R)";
    if (R == R_306_RESP_S) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (S)";
    if (R == R_306_RESP_T) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (T)";
    if (R == R_306_RESP_U) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (U)";
    if (R == R_306_RESP_V) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (V)";
    if (R == R_306_RESP_W) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (W)";
    if (R == R_306_RESP_X) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (X)";
    if (R == R_307_RESP_A) print (RulePrintingRule) PARSER_N_ERROR_INTERNAL_R, " response (A)";
    if (R == R_307_RESP_B) print (RulePrintingRule) PARSER_N_ERROR_INTERNAL_R, " response (B)";
    if (R == R_307_RESP_C) print (RulePrintingRule) PARSER_N_ERROR_INTERNAL_R, " response (C)";
    if (R == R_307_RESP_D) print (RulePrintingRule) PARSER_N_ERROR_INTERNAL_R, " response (D)";
    if (R == R_307_RESP_E) print (RulePrintingRule) PARSER_N_ERROR_INTERNAL_R, " response (E)";
    if (R == R_307_RESP_F) print (RulePrintingRule) PARSER_N_ERROR_INTERNAL_R, " response (F)";
    if (R == R_308_RESP_A) print (RulePrintingRule) DARKNESS_NAME_INTERNAL_R, " response (A)";
    if (R == R_309_RESP_A) print (RulePrintingRule) PARSER_COMMAND_INTERNAL_R, " response (A)";
    if (R == R_309_RESP_B) print (RulePrintingRule) PARSER_COMMAND_INTERNAL_R, " response (B)";
    if (R == R_309_RESP_C) print (RulePrintingRule) PARSER_COMMAND_INTERNAL_R, " response (C)";
    if (R == R_309_RESP_D) print (RulePrintingRule) PARSER_COMMAND_INTERNAL_R, " response (D)";
    if (R == R_310_RESP_A) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (A)";
    if (R == R_310_RESP_B) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (B)";
    if (R == R_310_RESP_C) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (C)";
    if (R == R_310_RESP_D) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (D)";
    if (R == R_310_RESP_E) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (E)";
    if (R == R_310_RESP_F) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (F)";
    if (R == R_310_RESP_G) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (G)";
    if (R == R_310_RESP_H) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (H)";
    if (R == R_311_RESP_A) print (RulePrintingRule) YES_OR_NO_QUESTION_INTERNAL_R, " response (A)";
    if (R == R_312_RESP_A) print (RulePrintingRule) PRINT_PROTAGONIST_INTERNAL_R, " response (A)";
    if (R == R_312_RESP_B) print (RulePrintingRule) PRINT_PROTAGONIST_INTERNAL_R, " response (B)";
    if (R == R_312_RESP_C) print (RulePrintingRule) PRINT_PROTAGONIST_INTERNAL_R, " response (C)";
    if (R == R_315_RESP_A) print (RulePrintingRule) STANDARD_IMPLICIT_TAKING_R, " response (A)";
    if (R == R_315_RESP_B) print (RulePrintingRule) STANDARD_IMPLICIT_TAKING_R, " response (B)";
    if (R == R_317_RESP_A) print (RulePrintingRule) PRINT_OBITUARY_HEADLINE_R, " response (A)";
    if (R == R_317_RESP_B) print (RulePrintingRule) PRINT_OBITUARY_HEADLINE_R, " response (B)";
    if (R == R_317_RESP_C) print (RulePrintingRule) PRINT_OBITUARY_HEADLINE_R, " response (C)";
    if (R == R_323_RESP_A) print (RulePrintingRule) IMMEDIATELY_UNDO_R, " response (A)";
    if (R == R_323_RESP_B) print (RulePrintingRule) IMMEDIATELY_UNDO_R, " response (B)";
    if (R == R_323_RESP_C) print (RulePrintingRule) IMMEDIATELY_UNDO_R, " response (C)";
    if (R == R_323_RESP_D) print (RulePrintingRule) IMMEDIATELY_UNDO_R, " response (D)";
    if (R == R_323_RESP_E) print (RulePrintingRule) IMMEDIATELY_UNDO_R, " response (E)";
    if (R == R_323_RESP_F) print (RulePrintingRule) IMMEDIATELY_UNDO_R, " response (F)";
    if (R == R_326_RESP_A) print (RulePrintingRule) QUIT_THE_GAME_R, " response (A)";
    if (R == R_327_RESP_A) print (RulePrintingRule) SAVE_THE_GAME_R, " response (A)";
    if (R == R_327_RESP_B) print (RulePrintingRule) SAVE_THE_GAME_R, " response (B)";
    if (R == R_328_RESP_A) print (RulePrintingRule) RESTORE_THE_GAME_R, " response (A)";
    if (R == R_328_RESP_B) print (RulePrintingRule) RESTORE_THE_GAME_R, " response (B)";
    if (R == R_329_RESP_A) print (RulePrintingRule) RESTART_THE_GAME_R, " response (A)";
    if (R == R_329_RESP_B) print (RulePrintingRule) RESTART_THE_GAME_R, " response (B)";
    if (R == R_330_RESP_A) print (RulePrintingRule) VERIFY_THE_STORY_FILE_R, " response (A)";
    if (R == R_330_RESP_B) print (RulePrintingRule) VERIFY_THE_STORY_FILE_R, " response (B)";
    if (R == R_331_RESP_A) print (RulePrintingRule) SWITCH_TRANSCRIPT_ON_R, " response (A)";
    if (R == R_331_RESP_B) print (RulePrintingRule) SWITCH_TRANSCRIPT_ON_R, " response (B)";
    if (R == R_331_RESP_C) print (RulePrintingRule) SWITCH_TRANSCRIPT_ON_R, " response (C)";
    if (R == R_332_RESP_A) print (RulePrintingRule) SWITCH_TRANSCRIPT_OFF_R, " response (A)";
    if (R == R_332_RESP_B) print (RulePrintingRule) SWITCH_TRANSCRIPT_OFF_R, " response (B)";
    if (R == R_332_RESP_C) print (RulePrintingRule) SWITCH_TRANSCRIPT_OFF_R, " response (C)";
    if (R == R_334_RESP_A) print (RulePrintingRule) ANNOUNCE_SCORE_R, " response (A)";
    if (R == R_334_RESP_B) print (RulePrintingRule) ANNOUNCE_SCORE_R, " response (B)";
    if (R == R_334_RESP_C) print (RulePrintingRule) ANNOUNCE_SCORE_R, " response (C)";
    if (R == R_334_RESP_D) print (RulePrintingRule) ANNOUNCE_SCORE_R, " response (D)";
    if (R == R_334_RESP_E) print (RulePrintingRule) ANNOUNCE_SCORE_R, " response (E)";
    if (R == R_336_RESP_A) print (RulePrintingRule) REP_PREFER_ABBREVIATED_R, " response (A)";
    if (R == R_338_RESP_A) print (RulePrintingRule) REP_PREFER_UNABBREVIATED_R, " response (A)";
    if (R == R_340_RESP_A) print (RulePrintingRule) REP_PREFER_SOMETIMES_ABBR_R, " response (A)";
    if (R == R_342_RESP_A) print (RulePrintingRule) REP_SWITCH_NOTIFY_ON_R, " response (A)";
    if (R == R_344_RESP_A) print (RulePrintingRule) REP_SWITCH_NOTIFY_OFF_R, " response (A)";
    if (R == R_345_RESP_A) print (RulePrintingRule) ANNOUNCE_PRONOUN_MEANINGS_R, " response (A)";
    if (R == R_345_RESP_B) print (RulePrintingRule) ANNOUNCE_PRONOUN_MEANINGS_R, " response (B)";
    if (R == R_345_RESP_C) print (RulePrintingRule) ANNOUNCE_PRONOUN_MEANINGS_R, " response (C)";
    if (R == R_345_RESP_D) print (RulePrintingRule) ANNOUNCE_PRONOUN_MEANINGS_R, " response (D)";
    if (R == R_11_RESP_A) print (RulePrintingRule) R_22, " response (A)";
    if (R == R_39_RESP_A) print (RulePrintingRule) R_77, " response (A)";
    if (R == R_41_RESP_A) print (RulePrintingRule) R_79, " response (A)";
    if (R == R_41_RESP_B) print (RulePrintingRule) R_79, " response (B)";
    if (R == R_40_RESP_A) print (RulePrintingRule) R_78, " response (A)";
    if (R == R_42_RESP_A) print (RulePrintingRule) R_80, " response (A)";
    if (R == R_46_RESP_A) print (RulePrintingRule) R_86, " response (A)";
    if (R == R_46_RESP_B) print (RulePrintingRule) R_86, " response (B)";
    if (R == R_46_RESP_C) print (RulePrintingRule) R_86, " response (C)";
    if (R == R_46_RESP_D) print (RulePrintingRule) R_86, " response (D)";
    if (R == R_46_RESP_E) print (RulePrintingRule) R_86, " response (E)";
    if (R == R_46_RESP_F) print (RulePrintingRule) R_86, " response (F)";
    if (R == R_53_RESP_A) print (RulePrintingRule) R_93, " response (A)";
    if (R == R_55_RESP_A) print (RulePrintingRule) R_96, " response (A)";
    if (R == R_56_RESP_A) print (RulePrintingRule) R_97, " response (A)";
    if (R == R_57_RESP_A) print (RulePrintingRule) R_98, " response (A)";
    if (R == R_58_RESP_A) print (RulePrintingRule) R_99, " response (A)";
    if (R == R_59_RESP_A) print (RulePrintingRule) R_100, " response (A)";
    if (R == R_60_RESP_A) print (RulePrintingRule) R_101, " response (A)";
    if (R == R_61_RESP_A) print (RulePrintingRule) R_102, " response (A)";
    if (R == R_62_RESP_A) print (RulePrintingRule) R_103, " response (A)";
    if (R == R_63_RESP_A) print (RulePrintingRule) R_104, " response (A)";
    if (R == R_64_RESP_A) print (RulePrintingRule) R_105, " response (A)";
    if (R == R_65_RESP_A) print (RulePrintingRule) R_106, " response (A)";
    if (R == R_66_RESP_A) print (RulePrintingRule) R_107, " response (A)";
    if (R == R_67_RESP_A) print (RulePrintingRule) R_108, " response (A)";
    if (R == R_68_RESP_A) print (RulePrintingRule) R_109, " response (A)";
    if (R == R_69_RESP_A) print (RulePrintingRule) R_110, " response (A)";
    if (R == R_70_RESP_A) print (RulePrintingRule) R_111, " response (A)";
    if (R == R_71_RESP_A) print (RulePrintingRule) R_112, " response (A)";
    if (R == R_73_RESP_A) print (RulePrintingRule) R_114, " response (A)";
    if (R == R_73_RESP_B) print (RulePrintingRule) R_114, " response (B)";
    if (R == R_74_RESP_A) print (RulePrintingRule) R_115, " response (A)";
    if (R == R_75_RESP_A) print (RulePrintingRule) R_116, " response (A)";
    if (R == R_78_RESP_A) print (RulePrintingRule) R_119, " response (A)";
    if (R == R_77_RESP_A) print (RulePrintingRule) R_118, " response (A)";
    if (R == R_79_RESP_A) print (RulePrintingRule) R_120, " response (A)";
    if (R == R_80_RESP_A) print (RulePrintingRule) R_121, " response (A)";
    if (R == R_81_RESP_A) print (RulePrintingRule) R_122, " response (A)";
    if (R == R_82_RESP_A) print (RulePrintingRule) R_123, " response (A)";
    if (R == R_82_RESP_B) print (RulePrintingRule) R_123, " response (B)";
    if (R == R_84_RESP_A) print (RulePrintingRule) R_125, " response (A)";
    if (R == R_84_RESP_B) print (RulePrintingRule) R_125, " response (B)";
    if (R == R_87_RESP_A) print (RulePrintingRule) R_128, " response (A)";
    if (R == R_88_RESP_A) print (RulePrintingRule) R_129, " response (A)";
    if (R == R_89_RESP_A) print (RulePrintingRule) R_130, " response (A)";
    if (R == R_90_RESP_A) print (RulePrintingRule) R_131, " response (A)";
    if (R == R_92_RESP_A) print (RulePrintingRule) R_133, " response (A)";
    if (R == R_93_RESP_A) print (RulePrintingRule) R_134, " response (A)";
    if (R == R_96_RESP_A) print (RulePrintingRule) R_137, " response (A)";
    if (R == R_97_RESP_A) print (RulePrintingRule) R_138, " response (A)";
    if (R == R_98_RESP_A) print (RulePrintingRule) R_139, " response (A)";
    if (R == R_99_RESP_A) print (RulePrintingRule) R_140, " response (A)";
    if (R == R_100_RESP_A) print (RulePrintingRule) R_141, " response (A)";
    if (R == R_102_RESP_A) print (RulePrintingRule) R_143, " response (A)";
    if (R == R_103_RESP_A) print (RulePrintingRule) R_144, " response (A)";
    if (R == R_104_RESP_A) print (RulePrintingRule) R_145, " response (A)";
    if (R == R_105_RESP_A) print (RulePrintingRule) R_146, " response (A)";
    if (R == R_106_RESP_A) print (RulePrintingRule) R_147, " response (A)";
    if (R == R_109_RESP_A) print (RulePrintingRule) R_150, " response (A)";
    if (R == R_109_RESP_B) print (RulePrintingRule) R_150, " response (B)";
    if (R == R_111_RESP_A) print (RulePrintingRule) R_152, " response (A)";
    if (R == R_112_RESP_A) print (RulePrintingRule) R_153, " response (A)";
    if (R == R_112_RESP_B) print (RulePrintingRule) R_153, " response (B)";
    if (R == R_113_RESP_A) print (RulePrintingRule) R_154, " response (A)";
    if (R == R_114_RESP_A) print (RulePrintingRule) R_155, " response (A)";
    if (R == R_116_RESP_A) print (RulePrintingRule) R_157, " response (A)";
    if (R == R_116_RESP_B) print (RulePrintingRule) R_157, " response (B)";
    if (R == R_120_RESP_A) print (RulePrintingRule) R_161, " response (A)";
    if (R == R_120_RESP_B) print (RulePrintingRule) R_161, " response (B)";
    if (R == R_120_RESP_C) print (RulePrintingRule) R_161, " response (C)";
    if (R == R_120_RESP_D) print (RulePrintingRule) R_161, " response (D)";
    if (R == R_120_RESP_E) print (RulePrintingRule) R_161, " response (E)";
    if (R == R_120_RESP_F) print (RulePrintingRule) R_161, " response (F)";
    if (R == R_120_RESP_G) print (RulePrintingRule) R_161, " response (G)";
    if (R == R_120_RESP_H) print (RulePrintingRule) R_161, " response (H)";
    if (R == R_120_RESP_I) print (RulePrintingRule) R_161, " response (I)";
    if (R == R_120_RESP_J) print (RulePrintingRule) R_161, " response (J)";
    if (R == R_120_RESP_K) print (RulePrintingRule) R_161, " response (K)";
    if (R == R_120_RESP_L) print (RulePrintingRule) R_161, " response (L)";
    if (R == R_120_RESP_M) print (RulePrintingRule) R_161, " response (M)";
    if (R == R_120_RESP_N) print (RulePrintingRule) R_161, " response (N)";
    if (R == R_120_RESP_O) print (RulePrintingRule) R_161, " response (O)";
    if (R == R_120_RESP_P) print (RulePrintingRule) R_161, " response (P)";
    if (R == R_120_RESP_Q) print (RulePrintingRule) R_161, " response (Q)";
    if (R == R_120_RESP_R) print (RulePrintingRule) R_161, " response (R)";
    if (R == R_120_RESP_S) print (RulePrintingRule) R_161, " response (S)";
    if (R == R_124_RESP_A) print (RulePrintingRule) R_165, " response (A)";
    if (R == R_124_RESP_B) print (RulePrintingRule) R_165, " response (B)";
    if (R == R_125_RESP_A) print (RulePrintingRule) R_166, " response (A)";
    if (R == R_125_RESP_B) print (RulePrintingRule) R_166, " response (B)";
    if (R == R_125_RESP_C) print (RulePrintingRule) R_166, " response (C)";
    if (R == R_125_RESP_D) print (RulePrintingRule) R_166, " response (D)";
    if (R == R_126_RESP_A) print (RulePrintingRule) R_167, " response (A)";
    if (R == R_127_RESP_A) print (RulePrintingRule) R_168, " response (A)";
    if (R == R_127_RESP_B) print (RulePrintingRule) R_168, " response (B)";
    if (R == R_128_RESP_A) print (RulePrintingRule) R_169, " response (A)";
    if (R == R_129_RESP_A) print (RulePrintingRule) R_170, " response (A)";
    if (R == R_129_RESP_B) print (RulePrintingRule) R_170, " response (B)";
    if (R == R_129_RESP_C) print (RulePrintingRule) R_170, " response (C)";
    if (R == R_129_RESP_D) print (RulePrintingRule) R_170, " response (D)";
    if (R == R_129_RESP_E) print (RulePrintingRule) R_170, " response (E)";
    if (R == R_131_RESP_A) print (RulePrintingRule) R_172, " response (A)";
    if (R == R_131_RESP_B) print (RulePrintingRule) R_172, " response (B)";
    if (R == R_131_RESP_C) print (RulePrintingRule) R_172, " response (C)";
    if (R == R_131_RESP_D) print (RulePrintingRule) R_172, " response (D)";
    if (R == R_134_RESP_A) print (RulePrintingRule) R_176, " response (A)";
    if (R == R_135_RESP_A) print (RulePrintingRule) R_177, " response (A)";
    if (R == R_138_RESP_A) print (RulePrintingRule) R_180, " response (A)";
    if (R == R_138_RESP_B) print (RulePrintingRule) R_180, " response (B)";
    if (R == R_138_RESP_C) print (RulePrintingRule) R_180, " response (C)";
    if (R == R_140_RESP_A) print (RulePrintingRule) R_182, " response (A)";
    if (R == R_142_RESP_A) print (RulePrintingRule) R_184, " response (A)";
    if (R == R_146_RESP_A) print (RulePrintingRule) R_188, " response (A)";
    if (R == R_146_RESP_B) print (RulePrintingRule) R_188, " response (B)";
    if (R == R_146_RESP_C) print (RulePrintingRule) R_188, " response (C)";
    if (R == R_147_RESP_A) print (RulePrintingRule) R_189, " response (A)";
    if (R == R_150_RESP_A) print (RulePrintingRule) R_192, " response (A)";
    if (R == R_152_RESP_A) print (RulePrintingRule) R_194, " response (A)";
    if (R == R_153_RESP_A) print (RulePrintingRule) R_195, " response (A)";
    if (R == R_153_RESP_B) print (RulePrintingRule) R_195, " response (B)";
    if (R == R_154_RESP_A) print (RulePrintingRule) R_196, " response (A)";
    if (R == R_155_RESP_A) print (RulePrintingRule) R_197, " response (A)";
    if (R == R_156_RESP_A) print (RulePrintingRule) R_198, " response (A)";
    if (R == R_157_RESP_A) print (RulePrintingRule) R_199, " response (A)";
    if (R == R_158_RESP_A) print (RulePrintingRule) R_200, " response (A)";
    if (R == R_159_RESP_A) print (RulePrintingRule) R_201, " response (A)";
    if (R == R_160_RESP_A) print (RulePrintingRule) R_202, " response (A)";
    if (R == R_161_RESP_A) print (RulePrintingRule) R_203, " response (A)";
    if (R == R_162_RESP_A) print (RulePrintingRule) R_204, " response (A)";
    if (R == R_162_RESP_B) print (RulePrintingRule) R_204, " response (B)";
    if (R == R_163_RESP_A) print (RulePrintingRule) R_205, " response (A)";
    if (R == R_163_RESP_B) print (RulePrintingRule) R_205, " response (B)";
    if (R == R_164_RESP_A) print (RulePrintingRule) R_206, " response (A)";
    if (R == R_165_RESP_A) print (RulePrintingRule) R_207, " response (A)";
    if (R == R_165_RESP_B) print (RulePrintingRule) R_207, " response (B)";
    if (R == R_166_RESP_A) print (RulePrintingRule) R_208, " response (A)";
    if (R == R_167_RESP_A) print (RulePrintingRule) R_209, " response (A)";
    if (R == R_168_RESP_A) print (RulePrintingRule) R_210, " response (A)";
    if (R == R_169_RESP_A) print (RulePrintingRule) R_211, " response (A)";
    if (R == R_171_RESP_A) print (RulePrintingRule) R_213, " response (A)";
    if (R == R_171_RESP_B) print (RulePrintingRule) R_213, " response (B)";
    if (R == R_172_RESP_A) print (RulePrintingRule) R_214, " response (A)";
    if (R == R_173_RESP_A) print (RulePrintingRule) R_215, " response (A)";
    if (R == R_174_RESP_A) print (RulePrintingRule) R_216, " response (A)";
    if (R == R_176_RESP_A) print (RulePrintingRule) R_218, " response (A)";
    if (R == R_176_RESP_B) print (RulePrintingRule) R_218, " response (B)";
    if (R == R_177_RESP_A) print (RulePrintingRule) R_219, " response (A)";
    if (R == R_178_RESP_A) print (RulePrintingRule) R_220, " response (A)";
    if (R == R_180_RESP_A) print (RulePrintingRule) R_222, " response (A)";
    if (R == R_181_RESP_A) print (RulePrintingRule) R_223, " response (A)";
    if (R == R_182_RESP_A) print (RulePrintingRule) R_224, " response (A)";
    if (R == R_184_RESP_A) print (RulePrintingRule) R_226, " response (A)";
    if (R == R_185_RESP_A) print (RulePrintingRule) R_227, " response (A)";
    if (R == R_186_RESP_A) print (RulePrintingRule) R_228, " response (A)";
    if (R == R_187_RESP_A) print (RulePrintingRule) R_229, " response (A)";
    if (R == R_189_RESP_A) print (RulePrintingRule) R_231, " response (A)";
    if (R == R_190_RESP_A) print (RulePrintingRule) R_232, " response (A)";
    if (R == R_190_RESP_B) print (RulePrintingRule) R_232, " response (B)";
    if (R == R_190_RESP_C) print (RulePrintingRule) R_232, " response (C)";
    if (R == R_191_RESP_A) print (RulePrintingRule) R_233, " response (A)";
    if (R == R_192_RESP_A) print (RulePrintingRule) R_234, " response (A)";
    if (R == R_194_RESP_A) print (RulePrintingRule) R_236, " response (A)";
    if (R == R_194_RESP_B) print (RulePrintingRule) R_236, " response (B)";
    if (R == R_194_RESP_C) print (RulePrintingRule) R_236, " response (C)";
    if (R == R_195_RESP_A) print (RulePrintingRule) R_237, " response (A)";
    if (R == R_196_RESP_A) print (RulePrintingRule) R_238, " response (A)";
    if (R == R_197_RESP_A) print (RulePrintingRule) R_239, " response (A)";
    if (R == R_199_RESP_A) print (RulePrintingRule) R_241, " response (A)";
    if (R == R_199_RESP_B) print (RulePrintingRule) R_241, " response (B)";
    if (R == R_200_RESP_A) print (RulePrintingRule) R_243, " response (A)";
    if (R == R_201_RESP_A) print (RulePrintingRule) R_244, " response (A)";
    if (R == R_203_RESP_A) print (RulePrintingRule) R_246, " response (A)";
    if (R == R_203_RESP_B) print (RulePrintingRule) R_246, " response (B)";
    if (R == R_204_RESP_A) print (RulePrintingRule) R_247, " response (A)";
    if (R == R_205_RESP_A) print (RulePrintingRule) R_248, " response (A)";
    if (R == R_206_RESP_A) print (RulePrintingRule) R_249, " response (A)";
    if (R == R_207_RESP_A) print (RulePrintingRule) R_250, " response (A)";
    if (R == R_208_RESP_A) print (RulePrintingRule) R_251, " response (A)";
    if (R == R_209_RESP_A) print (RulePrintingRule) R_252, " response (A)";
    if (R == R_211_RESP_A) print (RulePrintingRule) R_254, " response (A)";
    if (R == R_211_RESP_B) print (RulePrintingRule) R_254, " response (B)";
    if (R == R_211_RESP_C) print (RulePrintingRule) R_254, " response (C)";
    if (R == R_212_RESP_A) print (RulePrintingRule) R_255, " response (A)";
    if (R == R_214_RESP_A) print (RulePrintingRule) R_257, " response (A)";
    if (R == R_215_RESP_A) print (RulePrintingRule) R_258, " response (A)";
    if (R == R_216_RESP_A) print (RulePrintingRule) R_259, " response (A)";
    if (R == R_217_RESP_A) print (RulePrintingRule) R_260, " response (A)";
    if (R == R_218_RESP_A) print (RulePrintingRule) R_261, " response (A)";
    if (R == R_219_RESP_A) print (RulePrintingRule) R_262, " response (A)";
    if (R == R_220_RESP_A) print (RulePrintingRule) R_263, " response (A)";
    if (R == R_221_RESP_A) print (RulePrintingRule) R_264, " response (A)";
    if (R == R_222_RESP_A) print (RulePrintingRule) R_265, " response (A)";
    if (R == R_223_RESP_A) print (RulePrintingRule) R_266, " response (A)";
    if (R == R_224_RESP_A) print (RulePrintingRule) R_267, " response (A)";
    if (R == R_225_RESP_A) print (RulePrintingRule) R_268, " response (A)";
    if (R == R_228_RESP_A) print (RulePrintingRule) R_271, " response (A)";
    if (R == R_228_RESP_B) print (RulePrintingRule) R_271, " response (B)";
    if (R == R_229_RESP_A) print (RulePrintingRule) R_272, " response (A)";
    if (R == R_229_RESP_B) print (RulePrintingRule) R_272, " response (B)";
    if (R == R_230_RESP_A) print (RulePrintingRule) R_273, " response (A)";
    if (R == R_230_RESP_B) print (RulePrintingRule) R_273, " response (B)";
    if (R == R_230_RESP_C) print (RulePrintingRule) R_273, " response (C)";
    if (R == R_231_RESP_A) print (RulePrintingRule) R_274, " response (A)";
    if (R == R_231_RESP_B) print (RulePrintingRule) R_274, " response (B)";
    if (R == R_232_RESP_A) print (RulePrintingRule) R_275, " response (A)";
    if (R == R_233_RESP_A) print (RulePrintingRule) R_276, " response (A)";
    if (R == R_233_RESP_B) print (RulePrintingRule) R_276, " response (B)";
    if (R == R_234_RESP_A) print (RulePrintingRule) R_277, " response (A)";
    if (R == R_235_RESP_A) print (RulePrintingRule) R_278, " response (A)";
    if (R == R_236_RESP_A) print (RulePrintingRule) R_279, " response (A)";
    if (R == R_237_RESP_A) print (RulePrintingRule) R_280, " response (A)";
    if (R == R_237_RESP_B) print (RulePrintingRule) R_280, " response (B)";
    if (R == R_238_RESP_A) print (RulePrintingRule) R_281, " response (A)";
    if (R == R_239_RESP_A) print (RulePrintingRule) R_282, " response (A)";
    if (R == R_240_RESP_A) print (RulePrintingRule) R_283, " response (A)";
    if (R == R_241_RESP_A) print (RulePrintingRule) R_284, " response (A)";
    if (R == R_241_RESP_B) print (RulePrintingRule) R_284, " response (B)";
    if (R == R_242_RESP_A) print (RulePrintingRule) R_285, " response (A)";
    if (R == R_243_RESP_A) print (RulePrintingRule) R_286, " response (A)";
    if (R == R_244_RESP_A) print (RulePrintingRule) R_287, " response (A)";
    if (R == R_245_RESP_A) print (RulePrintingRule) R_288, " response (A)";
    if (R == R_245_RESP_B) print (RulePrintingRule) R_288, " response (B)";
    if (R == R_246_RESP_A) print (RulePrintingRule) R_289, " response (A)";
    if (R == R_247_RESP_A) print (RulePrintingRule) R_290, " response (A)";
    if (R == R_248_RESP_A) print (RulePrintingRule) R_291, " response (A)";
    if (R == R_249_RESP_A) print (RulePrintingRule) R_292, " response (A)";
    if (R == R_251_RESP_A) print (RulePrintingRule) R_294, " response (A)";
    if (R == R_252_RESP_A) print (RulePrintingRule) R_295, " response (A)";
    if (R == R_253_RESP_A) print (RulePrintingRule) R_296, " response (A)";
    if (R == R_253_RESP_B) print (RulePrintingRule) R_296, " response (B)";
    if (R == R_254_RESP_A) print (RulePrintingRule) R_297, " response (A)";
    if (R == R_255_RESP_A) print (RulePrintingRule) R_298, " response (A)";
    if (R == R_256_RESP_A) print (RulePrintingRule) R_299, " response (A)";
    if (R == R_257_RESP_A) print (RulePrintingRule) R_300, " response (A)";
    if (R == R_258_RESP_A) print (RulePrintingRule) R_301, " response (A)";
    if (R == R_259_RESP_A) print (RulePrintingRule) R_302, " response (A)";
    if (R == R_259_RESP_B) print (RulePrintingRule) R_302, " response (B)";
    if (R == R_260_RESP_A) print (RulePrintingRule) R_303, " response (A)";
    if (R == R_260_RESP_B) print (RulePrintingRule) R_303, " response (B)";
    if (R == R_261_RESP_A) print (RulePrintingRule) R_304, " response (A)";
    if (R == R_261_RESP_B) print (RulePrintingRule) R_304, " response (B)";
    if (R == R_262_RESP_A) print (RulePrintingRule) R_305, " response (A)";
    if (R == R_263_RESP_A) print (RulePrintingRule) R_306, " response (A)";
    if (R == R_263_RESP_B) print (RulePrintingRule) R_306, " response (B)";
    if (R == R_264_RESP_A) print (RulePrintingRule) R_307, " response (A)";
    if (R == R_265_RESP_A) print (RulePrintingRule) R_308, " response (A)";
    if (R == R_266_RESP_A) print (RulePrintingRule) R_309, " response (A)";
    if (R == R_267_RESP_A) print (RulePrintingRule) R_310, " response (A)";
    if (R == R_268_RESP_A) print (RulePrintingRule) R_311, " response (A)";
    if (R == R_269_RESP_A) print (RulePrintingRule) R_312, " response (A)";
    if (R == R_269_RESP_B) print (RulePrintingRule) R_312, " response (B)";
    if (R == R_270_RESP_A) print (RulePrintingRule) R_313, " response (A)";
    if (R == R_271_RESP_A) print (RulePrintingRule) R_314, " response (A)";
    if (R == R_271_RESP_B) print (RulePrintingRule) R_314, " response (B)";
    if (R == R_272_RESP_A) print (RulePrintingRule) R_315, " response (A)";
    if (R == R_273_RESP_A) print (RulePrintingRule) R_316, " response (A)";
    if (R == R_274_RESP_A) print (RulePrintingRule) R_317, " response (A)";
];
[ STANDARD_RESPONSE_ISSUING_R ;
    RegardingSingleObject(); TEXT_TY_Say(ResponseTexts-->(parameter_value-1));
];
Array ResponseDivisions -->
    "Standard Rules" 1 391
    0 0 0;
[ R_TX_S_0 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[It] [are] [if story tense is present tense]now [end if]pitch dark in
    [if story tense is present tense]here[else]there[end if]!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[It] [are] [if story tense is present tense]now [end if]pitch dark in [if story tense is present tense]here[else]there[end if]!~]
    say__p=1;! [2: it]
    ParaContent(); (PHR_789_r44 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: if story tense is present tense]

    	if (~~((((story_tense == I106_present_tense))))) jump L_Say887;! [7: ~now ~]
    ParaContent(); print "now ";! [8: end if]

    	.L_Say887; .L_SayX868;! [9: ~pitch dark in ~]
    ParaContent(); print "pitch dark in ";! [10: if story tense is present tense]

    	if (~~((((story_tense == I106_present_tense))))) jump L_Say888;! [11: ~here~]
    ParaContent(); print "here";! [12: else]

    	jump L_SayX869; .L_Say888;! [13: ~there~]
    ParaContent(); print "there";! [14: end if]

    	.L_Say889; .L_SayX869;! [15: ~!~]
    ParaContent(); print "!"; .L_Say890; .L_SayX870;rtrue;
];
Array TX_S_0 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_0;
[ R_TX_S_1 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(considering the first sixteen objects only)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(considering the first sixteen objects only)[command clarification break]~]
    say__p=1;! [2: ~(considering the first sixteen objects only)~]
    ParaContent(); print "(considering the first sixteen objects only)";! [3: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say891; .L_SayX871;rtrue;
];
Array TX_S_1 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_1;
[ R_TX_S_2 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing to do!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing to do!~]
    say__p=1;! [2: ~Nothing to do!~]
    ParaContent(); print "Nothing to do!"; .L_Say892; .L_SayX872;rtrue;
];
Array TX_S_2 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_2;
[ R_TX_S_3 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You must name something more substantial.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You must name something more substantial.~]
    say__p=1;! [2: ~You must name something more substantial.~]
    ParaContent(); print "You must name something more substantial."; .L_Say893; .L_SayX873;rtrue;
];
Array TX_S_3 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_3;
[ R_TX_S_4 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[It] [are] pitch dark, and [we] [can't see] a thing.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[It] [are] pitch dark, and [we] [can't see] a thing.~]
    say__p=1;! [2: it]
    ParaContent(); (PHR_789_r44 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ pitch dark, and ~]
    ParaContent(); print " pitch dark, and ";! [6: we]
    ParaContent(); (PHR_763_r18 ());! [7: ~ ~]
    ParaContent(); print " ";! [8: can't see]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_16); say__p=1; ! [9: ~ a thing.~]
    ParaContent(); print " a thing."; .L_Say894; .L_SayX874;rtrue;
];
Array TX_S_4 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_4;
[ R_TX_S_5 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [have] better things to do.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [have] better things to do.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: have]
    ConjugateVerb_2(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ better things to do.~]
    ParaContent(); print " better things to do."; .L_Say895; .L_SayX875;rtrue;
];
Array TX_S_5 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_5;
[ R_TX_S_6 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] unable to do that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] unable to do that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ unable to do that.~]
    ParaContent(); print " unable to do that."; .L_Say896; .L_SayX876;rtrue;
];
Array TX_S_6 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_6;
[ R_TX_S_7 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [aren't] available.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [aren't] available.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_774_r29 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ available.~]
    ParaContent(); print " available."; .L_Say897; .L_SayX877;rtrue;
];
Array TX_S_7 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_7;
[ R_TX_S_8 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [aren't] open.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [aren't] open.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ open.~]
    ParaContent(); print " open."; .L_Say898; .L_SayX878;rtrue;
];
Array TX_S_8 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_8;
[ R_TX_S_9 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't] reach into [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't] reach into [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ reach into ~]
    ParaContent(); print " reach into ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say899; .L_SayX879;rtrue;
];
Array TX_S_9 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_9;
[ R_TX_S_10 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [aren't] open.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [aren't] open.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ open.~]
    ParaContent(); print " open."; .L_Say900; .L_SayX880;rtrue;
];
Array TX_S_10 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_10;
[ R_TX_S_11 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ (~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ (~]
    say__p=1;! [2: ~ (~]
    ParaContent(); print " ("; .L_Say901; .L_SayX881;rtrue;
];
Array TX_S_11 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_11;
[ R_TX_S_12 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~)~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~)~]
    say__p=1;! [2: ~)~]
    ParaContent(); print ")"; .L_Say902; .L_SayX882;rtrue;
];
Array TX_S_12 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_12;
[ R_TX_S_13 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ and ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ and ~]
    say__p=1;! [2: ~ and ~]
    ParaContent(); print " and "; .L_Say903; .L_SayX883;rtrue;
];
Array TX_S_13 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_13;
[ R_TX_S_14 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~providing light~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~providing light~]
    say__p=1;! [2: ~providing light~]
    ParaContent(); print "providing light"; .L_Say904; .L_SayX884;rtrue;
];
Array TX_S_14 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_14;
[ R_TX_S_15 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~closed~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~closed~]
    say__p=1;! [2: ~closed~]
    ParaContent(); print "closed"; .L_Say905; .L_SayX885;rtrue;
];
Array TX_S_15 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_15;
[ R_TX_S_16 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~empty~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~empty~]
    say__p=1;! [2: ~empty~]
    ParaContent(); print "empty"; .L_Say906; .L_SayX886;rtrue;
];
Array TX_S_16 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_16;
[ R_TX_S_17 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~closed and empty~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~closed and empty~]
    say__p=1;! [2: ~closed and empty~]
    ParaContent(); print "closed and empty"; .L_Say907; .L_SayX887;rtrue;
];
Array TX_S_17 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_17;
[ R_TX_S_18 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~closed and providing light~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~closed and providing light~]
    say__p=1;! [2: ~closed and providing light~]
    ParaContent(); print "closed and providing light"; .L_Say908; .L_SayX888;rtrue;
];
Array TX_S_18 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_18;
[ R_TX_S_19 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~empty and providing light~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~empty and providing light~]
    say__p=1;! [2: ~empty and providing light~]
    ParaContent(); print "empty and providing light"; .L_Say909; .L_SayX889;rtrue;
];
Array TX_S_19 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_19;
[ R_TX_S_20 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~closed, empty[if serial comma option is active],[end if] and providing light~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~closed, empty[if serial comma option is active],[end if] and providing light~]
    say__p=1;! [2: ~closed, empty~]
    ParaContent(); print "closed, empty";! [3: if serial comma option is active]

    	if (~~(((((Adj_25_t1_v16(6))))))) jump L_Say910;! [4: ~,~]
    ParaContent(); print ",";! [5: end if]

    	.L_Say910; .L_SayX890;! [6: ~ and providing light~]
    ParaContent(); print " and providing light"; .L_Say911; .L_SayX891;rtrue;
];
Array TX_S_20 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_20;
[ R_TX_S_21 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~providing light and being worn~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~providing light and being worn~]
    say__p=1;! [2: ~providing light and being worn~]
    ParaContent(); print "providing light and being worn"; .L_Say912; .L_SayX892;rtrue;
];
Array TX_S_21 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_21;
[ R_TX_S_22 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~being worn~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~being worn~]
    say__p=1;! [2: ~being worn~]
    ParaContent(); print "being worn"; .L_Say913; .L_SayX893;rtrue;
];
Array TX_S_22 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_22;
[ R_TX_S_23 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~open~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~open~]
    say__p=1;! [2: ~open~]
    ParaContent(); print "open"; .L_Say914; .L_SayX894;rtrue;
];
Array TX_S_23 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_23;
[ R_TX_S_24 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~open but empty~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~open but empty~]
    say__p=1;! [2: ~open but empty~]
    ParaContent(); print "open but empty"; .L_Say915; .L_SayX895;rtrue;
];
Array TX_S_24 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_24;
[ R_TX_S_25 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~closed~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~closed~]
    say__p=1;! [2: ~closed~]
    ParaContent(); print "closed"; .L_Say916; .L_SayX896;rtrue;
];
Array TX_S_25 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_25;
[ R_TX_S_26 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~closed and locked~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~closed and locked~]
    say__p=1;! [2: ~closed and locked~]
    ParaContent(); print "closed and locked"; .L_Say917; .L_SayX897;rtrue;
];
Array TX_S_26 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_26;
[ R_TX_S_27 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~containing~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~containing~]
    say__p=1;! [2: ~containing~]
    ParaContent(); print "containing"; .L_Say918; .L_SayX898;rtrue;
];
Array TX_S_27 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_27;
[ R_TX_S_28 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~on [if the noun is a person]whom[otherwise]which[end if] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~on [if the noun is a person]whom[otherwise]which[end if] ~]
    say__p=1;! [2: ~on ~]
    ParaContent(); print "on ";! [3: if the noun is a person]

    	if (~~((((noun ofclass K8_person))))) jump L_Say919;! [4: ~whom~]
    ParaContent(); print "whom";! [5: otherwise]

    	jump L_SayX899; .L_Say919;! [6: ~which~]
    ParaContent(); print "which";! [7: end if]

    	.L_Say920; .L_SayX899;! [8: ~ ~]
    ParaContent(); print " "; .L_Say921; .L_SayX900;rtrue;
];
Array TX_S_28 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_28;
[ R_TX_S_29 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, on top of [if the noun is a person]whom[otherwise]which[end if] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, on top of [if the noun is a person]whom[otherwise]which[end if] ~]
    say__p=1;! [2: ~, on top of ~]
    ParaContent(); print ", on top of ";! [3: if the noun is a person]

    	if (~~((((noun ofclass K8_person))))) jump L_Say922;! [4: ~whom~]
    ParaContent(); print "whom";! [5: otherwise]

    	jump L_SayX901; .L_Say922;! [6: ~which~]
    ParaContent(); print "which";! [7: end if]

    	.L_Say923; .L_SayX901;! [8: ~ ~]
    ParaContent(); print " "; .L_Say924; .L_SayX902;rtrue;
];
Array TX_S_29 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_29;
[ R_TX_S_30 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~in [if the noun is a person]whom[otherwise]which[end if] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~in [if the noun is a person]whom[otherwise]which[end if] ~]
    say__p=1;! [2: ~in ~]
    ParaContent(); print "in ";! [3: if the noun is a person]

    	if (~~((((noun ofclass K8_person))))) jump L_Say925;! [4: ~whom~]
    ParaContent(); print "whom";! [5: otherwise]

    	jump L_SayX903; .L_Say925;! [6: ~which~]
    ParaContent(); print "which";! [7: end if]

    	.L_Say926; .L_SayX903;! [8: ~ ~]
    ParaContent(); print " "; .L_Say927; .L_SayX904;rtrue;
];
Array TX_S_30 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_30;
[ R_TX_S_31 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, inside [if the noun is a person]whom[otherwise]which[end if] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, inside [if the noun is a person]whom[otherwise]which[end if] ~]
    say__p=1;! [2: ~, inside ~]
    ParaContent(); print ", inside ";! [3: if the noun is a person]

    	if (~~((((noun ofclass K8_person))))) jump L_Say928;! [4: ~whom~]
    ParaContent(); print "whom";! [5: otherwise]

    	jump L_SayX905; .L_Say928;! [6: ~which~]
    ParaContent(); print "which";! [7: end if]

    	.L_Say929; .L_SayX905;! [8: ~ ~]
    ParaContent(); print " "; .L_Say930; .L_SayX906;rtrue;
];
Array TX_S_31 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_31;
[ R_TX_S_32 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding list writer internals][are]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding list writer internals][are]~]
    say__p=1;! [2: regarding list writer internals]
    ParaContent(); RegardingLWI();! [3: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say931; .L_SayX907;rtrue;
];
Array TX_S_32 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_32;
[ R_TX_S_33 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding list writer internals][are] nothing~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding list writer internals][are] nothing~]
    say__p=1;! [2: regarding list writer internals]
    ParaContent(); RegardingLWI();! [3: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ nothing~]
    ParaContent(); print " nothing"; .L_Say932; .L_SayX908;rtrue;
];
Array TX_S_33 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_33;
[ R_TX_S_34 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing~]
    say__p=1;! [2: ~Nothing~]
    ParaContent(); print "Nothing"; .L_Say933; .L_SayX909;rtrue;
];
Array TX_S_34 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_34;
[ R_TX_S_35 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~nothing~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~nothing~]
    say__p=1;! [2: ~nothing~]
    ParaContent(); print "nothing"; .L_Say934; .L_SayX910;rtrue;
];
Array TX_S_35 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_35;
[ R_TX_S_36 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[bracket]That command asks to do something outside of play, so it can
    only make sense from you to me. [The noun] cannot be asked to do this.[close
    bracket]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[bracket]That command asks to do something outside of play, so it can only make sense from you to me. [The noun] cannot be asked to do this.[close bracket]~]
    say__p=1;! [2: bracket]
    ParaContent(); print "[";! [3: ~That command asks to do something outside of play, so it can only make sense from you to me. ~]
    ParaContent(); print "That command asks to do something outside of play, so it can only make sense from you to me. ";! [4: the noun]
    ParaContent(); print (The) noun;! [5: ~ cannot be asked to do this.~]
    ParaContent(); print " cannot be asked to do this.";! [6: close bracket]
    ParaContent(); print "]"; .L_Say935; .L_SayX911;rtrue;
];
Array TX_S_36 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_36;
[ R_TX_S_37 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You must name an object.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You must name an object.~]
    say__p=1;! [2: ~You must name an object.~]
    ParaContent(); print "You must name an object."; .L_Say936; .L_SayX912;rtrue;
];
Array TX_S_37 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_37;
[ R_TX_S_38 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You may not name an object.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You may not name an object.~]
    say__p=1;! [2: ~You may not name an object.~]
    ParaContent(); print "You may not name an object."; .L_Say937; .L_SayX913;rtrue;
];
Array TX_S_38 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_38;
[ R_TX_S_39 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You must supply a noun.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You must supply a noun.~]
    say__p=1;! [2: ~You must supply a noun.~]
    ParaContent(); print "You must supply a noun."; .L_Say938; .L_SayX914;rtrue;
];
Array TX_S_39 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_39;
[ R_TX_S_40 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You may not supply a noun.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You may not supply a noun.~]
    say__p=1;! [2: ~You may not supply a noun.~]
    ParaContent(); print "You may not supply a noun."; .L_Say939; .L_SayX915;rtrue;
];
Array TX_S_40 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_40;
[ R_TX_S_41 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You must name a second object.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You must name a second object.~]
    say__p=1;! [2: ~You must name a second object.~]
    ParaContent(); print "You must name a second object."; .L_Say940; .L_SayX916;rtrue;
];
Array TX_S_41 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_41;
[ R_TX_S_42 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You may not name a second object.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You may not name a second object.~]
    say__p=1;! [2: ~You may not name a second object.~]
    ParaContent(); print "You may not name a second object."; .L_Say941; .L_SayX917;rtrue;
];
Array TX_S_42 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_42;
[ R_TX_S_43 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You must supply a second noun.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You must supply a second noun.~]
    say__p=1;! [2: ~You must supply a second noun.~]
    ParaContent(); print "You must supply a second noun."; .L_Say942; .L_SayX918;rtrue;
];
Array TX_S_43 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_43;
[ R_TX_S_44 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You may not supply a second noun.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You may not supply a second noun.~]
    say__p=1;! [2: ~You may not supply a second noun.~]
    ParaContent(); print "You may not supply a second noun."; .L_Say943; .L_SayX919;rtrue;
];
Array TX_S_44 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_44;
[ R_TX_S_45 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(Since something dramatic has happened, your list of commands has been
    cut short.)~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(Since something dramatic has happened, your list of commands has been cut short.)~]
    say__p=1;! [2: ~(Since something dramatic has happened, your list of commands has been cut short.)~]
    ParaContent(); print "(Since something dramatic has happened, your list of commands has been cut short.)"; .L_Say944; .L_SayX920;rtrue;
];
Array TX_S_45 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_45;
[ R_TX_S_46 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I didn't understand that instruction.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I didn't understand that instruction.~]
    say__p=1;! [2: ~I didn't understand that instruction.~]
    ParaContent(); print "I didn't understand that instruction."; .L_Say945; .L_SayX921;rtrue;
];
Array TX_S_46 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_46;
[ R_TX_S_47 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I didn't understand that sentence.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I didn't understand that sentence.~]
    say__p=1;! [2: ~I didn't understand that sentence.~]
    ParaContent(); print "I didn't understand that sentence."; .L_Say946; .L_SayX922;rtrue;
];
Array TX_S_47 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_47;
[ R_TX_S_48 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I only understood you as far as wanting to ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I only understood you as far as wanting to ~]
    say__p=1;! [2: ~I only understood you as far as wanting to ~]
    ParaContent(); print "I only understood you as far as wanting to "; .L_Say947; .L_SayX923;rtrue;
];
Array TX_S_48 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_48;
[ R_TX_S_49 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I only understood you as far as wanting to (go) ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I only understood you as far as wanting to (go) ~]
    say__p=1;! [2: ~I only understood you as far as wanting to (go) ~]
    ParaContent(); print "I only understood you as far as wanting to (go) "; .L_Say948; .L_SayX924;rtrue;
];
Array TX_S_49 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_49;
[ R_TX_S_50 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I didn't understand that number.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I didn't understand that number.~]
    say__p=1;! [2: ~I didn't understand that number.~]
    ParaContent(); print "I didn't understand that number."; .L_Say949; .L_SayX925;rtrue;
];
Array TX_S_50 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_50;
[ R_TX_S_51 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't] see any such thing.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't] see any such thing.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ see any such thing.~]
    ParaContent(); print " see any such thing."; .L_Say950; .L_SayX926;rtrue;
];
Array TX_S_51 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_51;
[ R_TX_S_52 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You seem to have said too little!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You seem to have said too little!~]
    say__p=1;! [2: ~You seem to have said too little!~]
    ParaContent(); print "You seem to have said too little!"; .L_Say951; .L_SayX927;rtrue;
];
Array TX_S_52 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_52;
[ R_TX_S_53 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] holding that!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] holding that!~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ holding that!~]
    ParaContent(); print " holding that!"; .L_Say952; .L_SayX928;rtrue;
];
Array TX_S_53 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_53;
[ R_TX_S_54 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can't use multiple objects with that verb.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can't use multiple objects with that verb.~]
    say__p=1;! [2: ~You can't use multiple objects with that verb.~]
    ParaContent(); print "You can't use multiple objects with that verb."; .L_Say953; .L_SayX929;rtrue;
];
Array TX_S_54 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_54;
[ R_TX_S_55 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can only use multiple objects once on a line.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can only use multiple objects once on a line.~]
    say__p=1;! [2: ~You can only use multiple objects once on a line.~]
    ParaContent(); print "You can only use multiple objects once on a line."; .L_Say954; .L_SayX930;rtrue;
];
Array TX_S_55 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_55;
[ R_TX_S_56 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I'm not sure what ['][pronoun i6 dictionary word]['] refers to.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I'm not sure what ['][pronoun i6 dictionary word]['] refers to.~]
    say__p=1;! [2: ~I'm not sure what ~]
    ParaContent(); print "I'm not sure what ";! [3: ']
    ParaContent(); print "'";! [4: pronoun i6 dictionary word]
    ParaContent(); print (address) pronoun_word;! [5: ']
    ParaContent(); print "'";! [6: ~ refers to.~]
    ParaContent(); print " refers to."; .L_Say955; .L_SayX931;rtrue;
];
Array TX_S_56 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_56;
[ R_TX_S_57 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't] see ['][pronoun i6 dictionary word]['] ([the noun]) at the moment.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't] see ['][pronoun i6 dictionary word]['] ([the noun]) at the moment.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ see ~]
    ParaContent(); print " see ";! [6: ']
    ParaContent(); print "'";! [7: pronoun i6 dictionary word]
    ParaContent(); print (address) pronoun_word;! [8: ']
    ParaContent(); print "'";! [9: ~ (~]
    ParaContent(); print " (";! [10: the noun]
    ParaContent(); print (the) noun;! [11: ~) at the moment.~]
    ParaContent(); print ") at the moment."; .L_Say956; .L_SayX932;rtrue;
];
Array TX_S_57 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_57;
[ R_TX_S_58 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You excepted something not included anyway!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You excepted something not included anyway!~]
    say__p=1;! [2: ~You excepted something not included anyway!~]
    ParaContent(); print "You excepted something not included anyway!"; .L_Say957; .L_SayX933;rtrue;
];
Array TX_S_58 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_58;
[ R_TX_S_59 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can only do that to something animate.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can only do that to something animate.~]
    say__p=1;! [2: ~You can only do that to something animate.~]
    ParaContent(); print "You can only do that to something animate."; .L_Say958; .L_SayX934;rtrue;
];
Array TX_S_59 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_59;
[ R_TX_S_60 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That's not a verb I [if American dialect option is
    active]recognize[otherwise]recognise[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That's not a verb I [if American dialect option is active]recognize[otherwise]recognise[end if].~]
    say__p=1;! [2: ~That's not a verb I ~]
    ParaContent(); print "That's not a verb I ";! [3: if american dialect option is active]

    	if (~~(((((Adj_25_t1_v16(5))))))) jump L_Say959;! [4: ~recognize~]
    ParaContent(); print "recognize";! [5: otherwise]

    	jump L_SayX935; .L_Say959;! [6: ~recognise~]
    ParaContent(); print "recognise";! [7: end if]

    	.L_Say960; .L_SayX935;! [8: ~.~]
    ParaContent(); print "."; .L_Say961; .L_SayX936;rtrue;
];
Array TX_S_60 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_60;
[ R_TX_S_61 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That's not something you need to refer to in the course of this game.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That's not something you need to refer to in the course of this game.~]
    say__p=1;! [2: ~That's not something you need to refer to in the course of this game.~]
    ParaContent(); print "That's not something you need to refer to in the course of this game."; .L_Say962; .L_SayX937;rtrue;
];
Array TX_S_61 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_61;
[ R_TX_S_62 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I didn't understand the way that finished.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I didn't understand the way that finished.~]
    say__p=1;! [2: ~I didn't understand the way that finished.~]
    ParaContent(); print "I didn't understand the way that finished."; .L_Say963; .L_SayX938;rtrue;
];
Array TX_S_62 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_62;
[ R_TX_S_63 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if number understood is 0]None[otherwise]Only [number understood in words][end if]
    of those [regarding the number understood][are] available.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if number understood is 0]None[otherwise]Only [number understood in words][end if] of those [regarding the number understood][are] available.~]
    say__p=1;! [2: if number understood is 0]

    	if (~~((((parsed_number == 0))))) jump L_Say964;! [3: ~None~]
    ParaContent(); print "None";! [4: otherwise]

    	jump L_SayX939; .L_Say964;! [5: ~Only ~]
    ParaContent(); print "Only ";! [6: number understood in words]
    ParaContent(); print (number) say__n=(parsed_number);! [7: end if]

    	.L_Say965; .L_SayX939;! [8: ~ of those ~]
    ParaContent(); print " of those ";! [9: regarding the number understood]
    ParaContent(); RegardingNumber(parsed_number);! [10: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [11: ~ available.~]
    ParaContent(); print " available."; .L_Say966; .L_SayX940;rtrue;
];
Array TX_S_63 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_63;
[ R_TX_S_64 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That noun did not make sense in this context.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That noun did not make sense in this context.~]
    say__p=1;! [2: ~That noun did not make sense in this context.~]
    ParaContent(); print "That noun did not make sense in this context."; .L_Say967; .L_SayX941;rtrue;
];
Array TX_S_64 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_64;
[ R_TX_S_65 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~To repeat a command like 'frog, jump', just say 'again', not 'frog, again'.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~To repeat a command like 'frog, jump', just say 'again', not 'frog, again'.~]
    say__p=1;! [2: ~To repeat a command like 'frog, jump', just say 'again', not 'frog, again'.~]
    ParaContent(); print "To repeat a command like ~frog, jump~, just say ~again~, not ~frog, again~."; .L_Say968; .L_SayX942;rtrue;
];
Array TX_S_65 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_65;
[ R_TX_S_66 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can't begin with a comma.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can't begin with a comma.~]
    say__p=1;! [2: ~You can't begin with a comma.~]
    ParaContent(); print "You can't begin with a comma."; .L_Say969; .L_SayX943;rtrue;
];
Array TX_S_66 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_66;
[ R_TX_S_67 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You seem to want to talk to someone, but I can't see whom.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You seem to want to talk to someone, but I can't see whom.~]
    say__p=1;! [2: ~You seem to want to talk to someone, but I can't see whom.~]
    ParaContent(); print "You seem to want to talk to someone, but I can't see whom."; .L_Say970; .L_SayX944;rtrue;
];
Array TX_S_67 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_67;
[ R_TX_S_68 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can't talk to [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can't talk to [the noun].~]
    say__p=1;! [2: ~You can't talk to ~]
    ParaContent(); print "You can't talk to ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~.~]
    ParaContent(); print "."; .L_Say971; .L_SayX945;rtrue;
];
Array TX_S_68 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_68;
[ R_TX_S_69 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~To talk to someone, try 'someone, hello' or some such.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~To talk to someone, try 'someone, hello' or some such.~]
    say__p=1;! [2: ~To talk to someone, try 'someone, hello' or some such.~]
    ParaContent(); print "To talk to someone, try ~someone, hello~ or some such."; .L_Say972; .L_SayX946;rtrue;
];
Array TX_S_69 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_69;
[ R_TX_S_70 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I beg your pardon?~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I beg your pardon?~]
    say__p=1;! [2: ~I beg your pardon?~]
    ParaContent(); print "I beg your pardon?"; .L_Say973; .L_SayX947;rtrue;
];
Array TX_S_70 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_70;
[ R_TX_S_71 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing to do!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing to do!~]
    say__p=1;! [2: ~Nothing to do!~]
    ParaContent(); print "Nothing to do!"; .L_Say974; .L_SayX948;rtrue;
];
Array TX_S_71 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_71;
[ R_TX_S_72 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [adapt the verb are from the third person plural] none at all available!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [adapt the verb are from the third person plural] none at all available!~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_790_r45 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: adapt the verb are from the third person plural]
    ParaContent(); ConjugateVerb_0(CV_POS, I117_third_person_plural, story_tense);! [5: ~ none at all available!~]
    ParaContent(); print " none at all available!"; .L_Say975; .L_SayX949;rtrue;
];
Array TX_S_72 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_72;
[ R_TX_S_73 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [seem] to belong to [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [seem] to belong to [the noun].~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_774_r29 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: seem]
    ConjugateVerb_55(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ to belong to ~]
    ParaContent(); print " to belong to ";! [7: the noun]
    ParaContent(); print (the) noun;! [8: ~.~]
    ParaContent(); print "."; .L_Say976; .L_SayX950;rtrue;
];
Array TX_S_73 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_73;
[ R_TX_S_74 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [can't] contain things.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [can't] contain things.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_774_r29 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: can't]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ contain things.~]
    ParaContent(); print " contain things."; .L_Say977; .L_SayX951;rtrue;
];
Array TX_S_74 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_74;
[ R_TX_S_75 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [aren't] open.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [aren't] open.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ open.~]
    ParaContent(); print " open."; .L_Say978; .L_SayX952;rtrue;
];
Array TX_S_75 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_75;
[ R_TX_S_76 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] empty.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] empty.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ empty.~]
    ParaContent(); print " empty."; .L_Say979; .L_SayX953;rtrue;
];
Array TX_S_76 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_76;
[ R_TX_S_77 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Darkness~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Darkness~]
    say__p=1;! [2: ~Darkness~]
    ParaContent(); print "Darkness"; .L_Say980; .L_SayX954;rtrue;
];
Array TX_S_77 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_77;
[ R_TX_S_78 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Sorry, that can't be corrected.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Sorry, that can't be corrected.~]
    say__p=1;! [2: ~Sorry, that can't be corrected.~]
    ParaContent(); print "Sorry, that can't be corrected."; .L_Say981; .L_SayX955;rtrue;
];
Array TX_S_78 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_78;
[ R_TX_S_79 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Think nothing of it.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Think nothing of it.~]
    say__p=1;! [2: ~Think nothing of it.~]
    ParaContent(); print "Think nothing of it."; .L_Say982; .L_SayX956;rtrue;
];
Array TX_S_79 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_79;
[ R_TX_S_80 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Oops' can only correct a single word.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Oops' can only correct a single word.~]
    say__p=1;! [2: ~'Oops' can only correct a single word.~]
    ParaContent(); print "~Oops~ can only correct a single word."; .L_Say983; .L_SayX957;rtrue;
];
Array TX_S_80 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_80;
[ R_TX_S_81 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can hardly repeat that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can hardly repeat that.~]
    say__p=1;! [2: ~You can hardly repeat that.~]
    ParaContent(); print "You can hardly repeat that."; .L_Say984; .L_SayX958;rtrue;
];
Array TX_S_81 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_81;
[ R_TX_S_82 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Who do you mean, ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Who do you mean, ~]
    say__p=1;! [2: ~Who do you mean, ~]
    ParaContent(); print "Who do you mean, "; .L_Say985; .L_SayX959;rtrue;
];
Array TX_S_82 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_82;
[ R_TX_S_83 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Which do you mean, ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Which do you mean, ~]
    say__p=1;! [2: ~Which do you mean, ~]
    ParaContent(); print "Which do you mean, "; .L_Say986; .L_SayX960;rtrue;
];
Array TX_S_83 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_83;
[ R_TX_S_84 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Sorry, you can only have one item here. Which exactly?~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Sorry, you can only have one item here. Which exactly?~]
    say__p=1;! [2: ~Sorry, you can only have one item here. Which exactly?~]
    ParaContent(); print "Sorry, you can only have one item here. Which exactly?"; .L_Say987; .L_SayX961;rtrue;
];
Array TX_S_84 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_84;
[ R_TX_S_85 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Whom do you want [if the noun is not the player][the noun] [end if]to
    [parser command so far]?~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Whom do you want [if the noun is not the player][the noun] [end if]to [parser command so far]?~]
    say__p=1;! [2: ~Whom do you want ~]
    ParaContent(); print "Whom do you want ";! [3: if the noun is not the player]

    	if (~~((((~~((noun == player))))))) jump L_Say988;! [4: the noun]
    ParaContent(); print (the) noun;! [5: ~ ~]
    ParaContent(); print " ";! [6: end if]

    	.L_Say988; .L_SayX962;! [7: ~to ~]
    ParaContent(); print "to ";! [8: parser command so far]
    ParaContent(); PrintCommand();! [9: ~?~]
    ParaContent(); print "?"; .L_Say989; .L_SayX963;rtrue;
];
Array TX_S_85 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_85;
[ R_TX_S_86 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~What do you want [if the noun is not the player][the noun] [end if]to
    [parser command so far]?~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~What do you want [if the noun is not the player][the noun] [end if]to [parser command so far]?~]
    say__p=1;! [2: ~What do you want ~]
    ParaContent(); print "What do you want ";! [3: if the noun is not the player]

    	if (~~((((~~((noun == player))))))) jump L_Say990;! [4: the noun]
    ParaContent(); print (the) noun;! [5: ~ ~]
    ParaContent(); print " ";! [6: end if]

    	.L_Say990; .L_SayX964;! [7: ~to ~]
    ParaContent(); print "to ";! [8: parser command so far]
    ParaContent(); PrintCommand();! [9: ~?~]
    ParaContent(); print "?"; .L_Say991; .L_SayX965;rtrue;
];
Array TX_S_86 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_86;
[ R_TX_S_87 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~those things~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~those things~]
    say__p=1;! [2: ~those things~]
    ParaContent(); print "those things"; .L_Say992; .L_SayX966;rtrue;
];
Array TX_S_87 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_87;
[ R_TX_S_88 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~that~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~that~]
    say__p=1;! [2: ~that~]
    ParaContent(); print "that"; .L_Say993; .L_SayX967;rtrue;
];
Array TX_S_88 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_88;
[ R_TX_S_89 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ or ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ or ~]
    say__p=1;! [2: ~ or ~]
    ParaContent(); print " or "; .L_Say994; .L_SayX968;rtrue;
];
Array TX_S_89 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_89;
[ R_TX_S_90 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Please answer yes or no.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Please answer yes or no.~]
    say__p=1;! [2: ~Please answer yes or no.~]
    ParaContent(); print "Please answer yes or no."; .L_Say995; .L_SayX969;rtrue;
];
Array TX_S_90 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_90;
[ R_TX_S_91 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We]~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ()); .L_Say996; .L_SayX970;rtrue;
];
Array TX_S_91 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_91;
[ R_TX_S_92 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[ourselves]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[ourselves]~]
    say__p=1;! [2: ourselves]
    ParaContent(); (PHR_766_r21 ()); .L_Say997; .L_SayX971;rtrue;
];
Array TX_S_92 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_92;
[ R_TX_S_93 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[our] former self~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[our] former self~]
    say__p=1;! [2: our]
    ParaContent(); (PHR_767_r22 ());! [3: ~ former self~]
    ParaContent(); print " former self"; .L_Say998; .L_SayX972;rtrue;
];
Array TX_S_93 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_93;
[ R_TX_S_94 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [the noun])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [the noun])[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say999; .L_SayX973;rtrue;
];
Array TX_S_94 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_94;
[ R_TX_S_95 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~([the second noun] first taking [the noun])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~([the second noun] first taking [the noun])[command clarification break]~]
    say__p=1;! [2: ~(~]
    ParaContent(); print "(";! [3: the second noun]
    ParaContent(); print (the) second;! [4: ~ first taking ~]
    ParaContent(); print " first taking ";! [5: the noun]
    ParaContent(); print (the) noun;! [6: ~)~]
    ParaContent(); print ")";! [7: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1000; .L_SayX974;rtrue;
];
Array TX_S_95 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_95;
[ R_TX_S_96 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ You have died ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ You have died ~]
    say__p=1;! [2: ~ You have died ~]
    ParaContent(); print " You have died "; .L_Say1001; .L_SayX975;rtrue;
];
Array TX_S_96 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_96;
[ R_TX_S_97 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ You have won ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ You have won ~]
    say__p=1;! [2: ~ You have won ~]
    ParaContent(); print " You have won "; .L_Say1002; .L_SayX976;rtrue;
];
Array TX_S_97 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_97;
[ R_TX_S_98 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ The End ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ The End ~]
    say__p=1;! [2: ~ The End ~]
    ParaContent(); print " The End "; .L_Say1003; .L_SayX977;rtrue;
];
Array TX_S_98 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_98;
[ R_TX_S_99 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The use of 'undo' is forbidden in this story.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The use of 'undo' is forbidden in this story.~]
    say__p=1;! [2: ~The use of 'undo' is forbidden in this story.~]
    ParaContent(); print "The use of ~undo~ is forbidden in this story."; .L_Say1004; .L_SayX978;rtrue;
];
Array TX_S_99 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_99;
[ R_TX_S_100 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can't 'undo' what hasn't been done!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can't 'undo' what hasn't been done!~]
    say__p=1;! [2: ~You can't 'undo' what hasn't been done!~]
    ParaContent(); print "You can't ~undo~ what hasn't been done!"; .L_Say1005; .L_SayX979;rtrue;
];
Array TX_S_100 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_100;
[ R_TX_S_101 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Your interpreter does not provide 'undo'. Sorry!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Your interpreter does not provide 'undo'. Sorry!~]
    say__p=1;! [2: ~Your interpreter does not provide 'undo'. Sorry!~]
    ParaContent(); print "Your interpreter does not provide ~undo~. Sorry!"; .L_Say1006; .L_SayX980;rtrue;
];
Array TX_S_101 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_101;
[ R_TX_S_102 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Undo' failed. Sorry!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Undo' failed. Sorry!~]
    say__p=1;! [2: ~'Undo' failed. Sorry!~]
    ParaContent(); print "~Undo~ failed. Sorry!"; .L_Say1007; .L_SayX981;rtrue;
];
Array TX_S_102 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_102;
[ R_TX_S_103 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[bracket]Previous turn undone.[close bracket]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[bracket]Previous turn undone.[close bracket]~]
    say__p=1;! [2: bracket]
    ParaContent(); print "[";! [3: ~Previous turn undone.~]
    ParaContent(); print "Previous turn undone.";! [4: close bracket]
    ParaContent(); print "]"; .L_Say1008; .L_SayX982;rtrue;
];
Array TX_S_103 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_103;
[ R_TX_S_104 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Undo' capacity exhausted. Sorry!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Undo' capacity exhausted. Sorry!~]
    say__p=1;! [2: ~'Undo' capacity exhausted. Sorry!~]
    ParaContent(); print "~Undo~ capacity exhausted. Sorry!"; .L_Say1009; .L_SayX983;rtrue;
];
Array TX_S_104 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_104;
[ R_TX_S_105 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Are you sure you want to quit? ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Are you sure you want to quit? ~]
    say__p=1;! [2: ~Are you sure you want to quit? ~]
    ParaContent(); print "Are you sure you want to quit? "; .L_Say1010; .L_SayX984;rtrue;
];
Array TX_S_105 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_105;
[ R_TX_S_106 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Save failed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Save failed.~]
    say__p=1;! [2: ~Save failed.~]
    ParaContent(); print "Save failed."; .L_Say1011; .L_SayX985;rtrue;
];
Array TX_S_106 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_106;
[ R_TX_S_107 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Ok.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Ok.~]
    say__p=1;! [2: ~Ok.~]
    ParaContent(); print "Ok."; .L_Say1012; .L_SayX986;rtrue;
];
Array TX_S_107 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_107;
[ R_TX_S_108 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Restore failed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Restore failed.~]
    say__p=1;! [2: ~Restore failed.~]
    ParaContent(); print "Restore failed."; .L_Say1013; .L_SayX987;rtrue;
];
Array TX_S_108 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_108;
[ R_TX_S_109 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Ok.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Ok.~]
    say__p=1;! [2: ~Ok.~]
    ParaContent(); print "Ok."; .L_Say1014; .L_SayX988;rtrue;
];
Array TX_S_109 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_109;
[ R_TX_S_110 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Are you sure you want to restart? ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Are you sure you want to restart? ~]
    say__p=1;! [2: ~Are you sure you want to restart? ~]
    ParaContent(); print "Are you sure you want to restart? "; .L_Say1015; .L_SayX989;rtrue;
];
Array TX_S_110 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_110;
[ R_TX_S_111 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Failed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Failed.~]
    say__p=1;! [2: ~Failed.~]
    ParaContent(); print "Failed."; .L_Say1016; .L_SayX990;rtrue;
];
Array TX_S_111 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_111;
[ R_TX_S_112 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The game file has verified as intact.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The game file has verified as intact.~]
    say__p=1;! [2: ~The game file has verified as intact.~]
    ParaContent(); print "The game file has verified as intact."; .L_Say1017; .L_SayX991;rtrue;
];
Array TX_S_112 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_112;
[ R_TX_S_113 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The game file did not verify as intact, and may be corrupt.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The game file did not verify as intact, and may be corrupt.~]
    say__p=1;! [2: ~The game file did not verify as intact, and may be corrupt.~]
    ParaContent(); print "The game file did not verify as intact, and may be corrupt."; .L_Say1018; .L_SayX992;rtrue;
];
Array TX_S_113 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_113;
[ R_TX_S_114 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Transcripting is already on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Transcripting is already on.~]
    say__p=1;! [2: ~Transcripting is already on.~]
    ParaContent(); print "Transcripting is already on."; .L_Say1019; .L_SayX993;rtrue;
];
Array TX_S_114 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_114;
[ R_TX_S_115 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Start of a transcript of~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Start of a transcript of~]
    say__p=1;! [2: ~Start of a transcript of~]
    ParaContent(); print "Start of a transcript of"; .L_Say1020; .L_SayX994;rtrue;
];
Array TX_S_115 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_115;
[ R_TX_S_116 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Attempt to begin transcript failed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Attempt to begin transcript failed.~]
    say__p=1;! [2: ~Attempt to begin transcript failed.~]
    ParaContent(); print "Attempt to begin transcript failed."; .L_Say1021; .L_SayX995;rtrue;
];
Array TX_S_116 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_116;
[ R_TX_S_117 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Transcripting is already off.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Transcripting is already off.~]
    say__p=1;! [2: ~Transcripting is already off.~]
    ParaContent(); print "Transcripting is already off."; .L_Say1022; .L_SayX996;rtrue;
];
Array TX_S_117 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_117;
[ R_TX_S_118 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[line break]End of transcript.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[line break]End of transcript.~]
    say__p=1;! [2: line break]
    ParaContent(); new_line;! [3: ~End of transcript.~]
    ParaContent(); print "End of transcript."; .L_Say1023; .L_SayX997;rtrue;
];
Array TX_S_118 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_118;
[ R_TX_S_119 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Attempt to end transcript failed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Attempt to end transcript failed.~]
    say__p=1;! [2: ~Attempt to end transcript failed.~]
    ParaContent(); print "Attempt to end transcript failed."; .L_Say1024; .L_SayX998;rtrue;
];
Array TX_S_119 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_119;
[ R_TX_S_120 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if the story has ended]In that game you scored[otherwise]You have so far scored[end if]
    [score] out of a possible [maximum score], in [turn count] turn[s]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if the story has ended]In that game you scored[otherwise]You have so far scored[end if] [score] out of a possible [maximum score], in [turn count] turn[s]~]
    say__p=1;! [2: if the story has ended]

    	if (~~((((deadflag~=0))))) jump L_Say1025;! [3: ~In that game you scored~]
    ParaContent(); print "In that game you scored";! [4: otherwise]

    	jump L_SayX999; .L_Say1025;! [5: ~You have so far scored~]
    ParaContent(); print "You have so far scored";! [6: end if]

    	.L_Say1026; .L_SayX999;! [7: ~ ~]
    ParaContent(); print " ";! [8: score]
    ParaContent(); print (say__n=score);! [9: ~ out of a possible ~]
    ParaContent(); print " out of a possible ";! [10: maximum score]
    ParaContent(); print (say__n=MAX_SCORE);! [11: ~, in ~]
    ParaContent(); print ", in ";! [12: turn count]
    ParaContent(); print (say__n=turns);! [13: ~ turn~]
    ParaContent(); print " turn";! [14: s]
    ParaContent(); STextSubstitution(); .L_Say1027; .L_SayX1000;rtrue;
];
Array TX_S_120 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_120;
[ R_TX_S_121 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, earning you the rank of ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, earning you the rank of ~]
    say__p=1;! [2: ~, earning you the rank of ~]
    ParaContent(); print ", earning you the rank of "; .L_Say1028; .L_SayX1001;rtrue;
];
Array TX_S_121 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_121;
[ R_TX_S_122 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no score in this story.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no score in this story.~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_790_r45 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no score in this story.~]
    ParaContent(); print " no score in this story."; .L_Say1029; .L_SayX1002;rtrue;
];
Array TX_S_122 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_122;
[ R_TX_S_123 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[bracket]Your score has just gone up by [number understood in words]
    point[s].[close bracket]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[bracket]Your score has just gone up by [number understood in words] point[s].[close bracket]~]
    say__p=1;! [2: bracket]
    ParaContent(); print "[";! [3: ~Your score has just gone up by ~]
    ParaContent(); print "Your score has just gone up by ";! [4: number understood in words]
    ParaContent(); print (number) say__n=(parsed_number);! [5: ~ point~]
    ParaContent(); print " point";! [6: s]
    ParaContent(); STextSubstitution();! [7: ~.~]
    ParaContent(); print ".";! [8: close bracket]
    ParaContent(); print "]"; .L_Say1030; .L_SayX1003;rtrue;
];
Array TX_S_123 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_123;
[ R_TX_S_124 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[bracket]Your score has just gone down by [number understood in words]
    point[s].[close bracket]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[bracket]Your score has just gone down by [number understood in words] point[s].[close bracket]~]
    say__p=1;! [2: bracket]
    ParaContent(); print "[";! [3: ~Your score has just gone down by ~]
    ParaContent(); print "Your score has just gone down by ";! [4: number understood in words]
    ParaContent(); print (number) say__n=(parsed_number);! [5: ~ point~]
    ParaContent(); print " point";! [6: s]
    ParaContent(); STextSubstitution();! [7: ~.~]
    ParaContent(); print ".";! [8: close bracket]
    ParaContent(); print "]"; .L_Say1031; .L_SayX1004;rtrue;
];
Array TX_S_124 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_124;
[ R_TX_S_125 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ is now in its 'superbrief' mode, which always gives short descriptions
    of locations (even if you haven't been there before).~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ is now in its 'superbrief' mode, which always gives short descriptions of locations (even if you haven't been there before).~]
    say__p=1;! [2: ~ is now in its 'superbrief' mode, which always gives short descriptions of locations (even if you haven't been there before).~]
    ParaContent(); print " is now in its ~superbrief~ mode, which always gives short descriptions of locations (even if you haven't been there before)."; .L_Say1032; .L_SayX1005;rtrue;
];
Array TX_S_125 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_125;
[ R_TX_S_126 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ is now in its 'verbose' mode, which always gives long descriptions of
    locations (even if you've been there before).~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ is now in its 'verbose' mode, which always gives long descriptions of locations (even if you've been there before).~]
    say__p=1;! [2: ~ is now in its 'verbose' mode, which always gives long descriptions of locations (even if you've been there before).~]
    ParaContent(); print " is now in its ~verbose~ mode, which always gives long descriptions of locations (even if you've been there before)."; .L_Say1033; .L_SayX1006;rtrue;
];
Array TX_S_126 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_126;
[ R_TX_S_127 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ is now in its 'brief' printing mode, which gives long descriptions
    of places never before visited and short descriptions otherwise.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ is now in its 'brief' printing mode, which gives long descriptions of places never before visited and short descriptions otherwise.~]
    say__p=1;! [2: ~ is now in its 'brief' printing mode, which gives long descriptions of places never before visited and short descriptions otherwise.~]
    ParaContent(); print " is now in its ~brief~ printing mode, which gives long descriptions of places never before visited and short descriptions otherwise."; .L_Say1034; .L_SayX1007;rtrue;
];
Array TX_S_127 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_127;
[ R_TX_S_128 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Score notification on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Score notification on.~]
    say__p=1;! [2: ~Score notification on.~]
    ParaContent(); print "Score notification on."; .L_Say1035; .L_SayX1008;rtrue;
];
Array TX_S_128 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_128;
[ R_TX_S_129 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Score notification off.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Score notification off.~]
    say__p=1;! [2: ~Score notification off.~]
    ParaContent(); print "Score notification off."; .L_Say1036; .L_SayX1009;rtrue;
];
Array TX_S_129 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_129;
[ R_TX_S_130 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~At the moment, ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~At the moment, ~]
    say__p=1;! [2: ~At the moment, ~]
    ParaContent(); print "At the moment, "; .L_Say1037; .L_SayX1010;rtrue;
];
Array TX_S_130 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_130;
[ R_TX_S_131 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~means ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~means ~]
    say__p=1;! [2: ~means ~]
    ParaContent(); print "means "; .L_Say1038; .L_SayX1011;rtrue;
];
Array TX_S_131 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_131;
[ R_TX_S_132 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~is unset~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~is unset~]
    say__p=1;! [2: ~is unset~]
    ParaContent(); print "is unset"; .L_Say1039; .L_SayX1012;rtrue;
];
Array TX_S_132 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_132;
[ R_TX_S_133 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~no pronouns are known to the game.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~no pronouns are known to the game.~]
    say__p=1;! [2: ~no pronouns are known to the game.~]
    ParaContent(); print "no pronouns are known to the game."; .L_Say1040; .L_SayX1013;rtrue;
];
Array TX_S_133 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_133;
[ R_TX_S_203 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[current item from the multiple object list]: [run paragraph on]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[current item from the multiple object list]: [run paragraph on]~]
    say__p=1;! [2: current item from the multiple object list]
    ParaContent(); PrintShortName(multiple_object_item);! [3: ~: ~]
    ParaContent(); print ": ";! [4: run paragraph on]
    ParaContent(); RunParagraphOn(); .L_Say1041; .L_SayX1014;rtrue;
];
Array TX_S_203 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_203;
[ R_TX_S_204 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You'll have to say which compass direction to go in.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You'll have to say which compass direction to go in.~]
    say__p=1;! [2: ~You'll have to say which compass direction to go in.~]
    ParaContent(); print "You'll have to say which compass direction to go in."; .L_Say1042; .L_SayX1015;rtrue;
];
Array TX_S_204 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_204;
[ R_TX_S_205 
    tmp_0 ! Let/loop value, e.g., 'named options count': number
    tmp_1 ! Let/loop value: object
    tmp_2 ! Let/loop value: object
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Would you like to ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Would you like to ~]
    say__p=1;! [2: ~Would you like to ~]
    ParaContent(); print "Would you like to "; .L_Say1043; .L_SayX1016;rtrue;
];
Array TX_S_205 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_205;
[ R_TX_S_206 
    tmp_0 ! Let/loop value, e.g., 'named options count': number
    tmp_1 ! Let/loop value: object
    tmp_2 ! Let/loop value: object
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ or ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ or ~]
    say__p=1;! [2: ~ or ~]
    ParaContent(); print " or "; .L_Say1044; .L_SayX1017;rtrue;
];
Array TX_S_206 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_206;
[ R_TX_S_207 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~> [run paragraph on]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~> [run paragraph on]~]
    say__p=1;! [2: ~> ~]
    ParaContent(); print "> ";! [3: run paragraph on]
    ParaContent(); RunParagraphOn(); .L_Say1045; .L_SayX1018;rtrue;
];
Array TX_S_207 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_207;
[ R_TX_S_208 
    tmp_0 ! Let/loop value: object
    tmp_1 ! Let/loop value: object
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Please give one of the answers above.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Please give one of the answers above.~]
    say__p=1;! [2: ~Please give one of the answers above.~]
    ParaContent(); print "Please give one of the answers above."; .L_Say1046; .L_SayX1019;rtrue;
];
Array TX_S_208 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_208;
[ R_TX_S_209 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value: thing
    tmp_3 ! Let/loop value: thing
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] ~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " "; .L_Say1047; .L_SayX1020;rtrue;
];
Array TX_S_209 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_209;
[ R_TX_S_210 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value: thing
    tmp_3 ! Let/loop value: thing
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
tmp_3=LocalParking-->3;
ct_0=LocalParking-->4;
ct_1=LocalParking-->5;
#ifdef DEBUG; if (suppress_text_substitution) { print "~On [the domain] [we] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~On [the domain] [we] ~]
    say__p=1;! [2: ~On ~]
    ParaContent(); print "On ";! [3: the domain]
    ParaContent(); print (the) tmp_0;! [4: ~ ~]
    ParaContent(); print " ";! [5: we]
    ParaContent(); (PHR_763_r18 ());! [6: ~ ~]
    ParaContent(); print " "; .L_Say1048; .L_SayX1021;rtrue;
];
Array TX_S_210 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_210;
[ R_TX_S_211 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value: thing
    tmp_3 ! Let/loop value: thing
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
tmp_3=LocalParking-->3;
ct_0=LocalParking-->4;
ct_1=LocalParking-->5;
#ifdef DEBUG; if (suppress_text_substitution) { print "~In [the domain] [we] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~In [the domain] [we] ~]
    say__p=1;! [2: ~In ~]
    ParaContent(); print "In ";! [3: the domain]
    ParaContent(); print (the) tmp_0;! [4: ~ ~]
    ParaContent(); print " ";! [5: we]
    ParaContent(); (PHR_763_r18 ());! [6: ~ ~]
    ParaContent(); print " "; .L_Say1049; .L_SayX1022;rtrue;
];
Array TX_S_211 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_211;
[ R_TX_S_212 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value: thing
    tmp_3 ! Let/loop value: thing
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the player][can] also see ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the player][can] also see ~]
    say__p=1;! [2: regarding the player]
    ParaContent(); RegardingSingleObject(player);! [3: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ also see ~]
    ParaContent(); print " also see "; .L_Say1050; .L_SayX1023;rtrue;
];
Array TX_S_212 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_212;
[ R_TX_S_213 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value: thing
    tmp_3 ! Let/loop value: thing
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the player][can] see ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the player][can] see ~]
    say__p=1;! [2: regarding the player]
    ParaContent(); RegardingSingleObject(player);! [3: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ see ~]
    ParaContent(); print " see "; .L_Say1051; .L_SayX1024;rtrue;
];
Array TX_S_213 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_213;
[ R_TX_S_214 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value, e.g., 'common holder': object
    tmp_3 ! Let/loop value, e.g., 'contents form of list': truth state
    tmp_4 ! Let/loop value: object
    tmp_5 ! Let/loop value: thing
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ here~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ here~]
    say__p=1;! [2: ~ here~]
    ParaContent(); print " here"; .L_Say1052; .L_SayX1025;rtrue;
];
Array TX_S_214 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_214;
[ R_TX_S_215 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    tmp_1 ! Let/loop value: thing
    tmp_2 ! Let/loop value: thing
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
#ifdef DEBUG; if (suppress_text_substitution) { print "~On [the item] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~On [the item] ~]
    say__p=1;! [2: ~On ~]
    ParaContent(); print "On ";! [3: the item]
    ParaContent(); print (the) tmp_0;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1053; .L_SayX1026;rtrue;
];
Array TX_S_215 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_215;
[ R_TX_S_216 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    tmp_1 ! Let/loop value: thing
    tmp_2 ! Let/loop value: thing
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
#ifdef DEBUG; if (suppress_text_substitution) { print "~On [the item] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~On [the item] ~]
    say__p=1;! [2: ~On ~]
    ParaContent(); print "On ";! [3: the item]
    ParaContent(); print (the) tmp_0;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1054; .L_SayX1027;rtrue;
];
Array TX_S_216 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_216;
[ R_TX_S_217 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    tmp_1 ! Let/loop value: thing
    tmp_2 ! Let/loop value: thing
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
#ifdef DEBUG; if (suppress_text_substitution) { print "~On [the item] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~On [the item] ~]
    say__p=1;! [2: ~On ~]
    ParaContent(); print "On ";! [3: the item]
    ParaContent(); print (the) tmp_0;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1055; .L_SayX1028;rtrue;
];
Array TX_S_217 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_217;
[ R_TX_S_218 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] carrying nothing.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] carrying nothing.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ carrying nothing.~]
    ParaContent(); print " carrying nothing."; .L_Say1056; .L_SayX1029;rtrue;
];
Array TX_S_218 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_218;
[ R_TX_S_219 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] carrying:[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] carrying:[line break]~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ carrying:~]
    ParaContent(); print " carrying:";! [6: line break]
    ParaContent(); new_line; .L_Say1057; .L_SayX1030;rtrue;
];
Array TX_S_219 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_219;
[ R_TX_S_220 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [look] through [their] possessions.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [look] through [their] possessions.~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: look]
    ConjugateVerb_43(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ through ~]
    ParaContent(); print " through ";! [6: their]
    ParaContent(); (PHR_779_r34 ());! [7: ~ possessions.~]
    ParaContent(); print " possessions."; .L_Say1058; .L_SayX1031;rtrue;
];
Array TX_S_220 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_220;
[ R_TX_S_221 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] always self-possessed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] always self-possessed.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ always self-possessed.~]
    ParaContent(); print " always self-possessed."; .L_Say1059; .L_SayX1032;rtrue;
];
Array TX_S_221 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_221;
[ R_TX_S_222 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I don't suppose [the noun] [would care] for that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I don't suppose [the noun] [would care] for that.~]
    say__p=1;! [2: ~I don't suppose ~]
    ParaContent(); print "I don't suppose ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ ~]
    ParaContent(); print " ";! [5: would care]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_24); say__p=1; ! [6: ~ for that.~]
    ParaContent(); print " for that."; .L_Say1060; .L_SayX1033;rtrue;
];
Array TX_S_222 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_222;
[ R_TX_S_223 
    tmp_0 ! Let/loop value, e.g., 'whole': thing
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [seem] to be a part of [the whole].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [seem] to be a part of [the whole].~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_774_r29 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: seem]
    ConjugateVerb_55(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ to be a part of ~]
    ParaContent(); print " to be a part of ";! [7: the whole]
    ParaContent(); print (the) tmp_0;! [8: ~.~]
    ParaContent(); print "."; .L_Say1061; .L_SayX1034;rtrue;
];
Array TX_S_223 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_223;
[ R_TX_S_224 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'owner': object
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [seem] to belong to [the owner].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [seem] to belong to [the owner].~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_774_r29 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: seem]
    ConjugateVerb_55(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ to belong to ~]
    ParaContent(); print " to belong to ";! [7: the owner]
    ParaContent(); print (the) tmp_1;! [8: ~.~]
    ParaContent(); print "."; .L_Say1062; .L_SayX1035;rtrue;
];
Array TX_S_224 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_224;
[ R_TX_S_225 
    tmp_0 ! Let/loop value, e.g., 'H': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [aren't] available.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [aren't] available.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_774_r29 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ available.~]
    ParaContent(); print " available."; .L_Say1063; .L_SayX1036;rtrue;
];
Array TX_S_225 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_225;
[ R_TX_S_226 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [would have] to get
    [if noun is a supporter]off[otherwise]out of[end if] [the noun] first.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [would have] to get [if noun is a supporter]off[otherwise]out of[end if] [the noun] first.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: would have]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_2); say__p=1; ! [5: ~ to get ~]
    ParaContent(); print " to get ";! [6: if noun is a supporter]

    	if (~~((((noun ofclass K6_supporter))))) jump L_Say1064;! [7: ~off~]
    ParaContent(); print "off";! [8: otherwise]

    	jump L_SayX1037; .L_Say1064;! [9: ~out of~]
    ParaContent(); print "out of";! [10: end if]

    	.L_Say1065; .L_SayX1037;! [11: ~ ~]
    ParaContent(); print " ";! [12: the noun]
    ParaContent(); print (the) noun;! [13: ~ first.~]
    ParaContent(); print " first."; .L_Say1066; .L_SayX1038;rtrue;
];
Array TX_S_226 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_226;
[ R_TX_S_227 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] already [have] [regarding the noun][those].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] already [have] [regarding the noun][those].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ already ~]
    ParaContent(); print " already ";! [4: have]
    ConjugateVerb_2(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [7: those]
    ParaContent(); (PHR_773_r28 ());! [8: ~.~]
    ParaContent(); print "."; .L_Say1067; .L_SayX1039;rtrue;
];
Array TX_S_227 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_227;
[ R_TX_S_228 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] hardly portable.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] hardly portable.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_788_r43 ());! [4: ~ hardly portable.~]
    ParaContent(); print " hardly portable."; .L_Say1068; .L_SayX1040;rtrue;
];
Array TX_S_228 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_228;
[ R_TX_S_229 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [cannot] carry [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [cannot] carry [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ carry ~]
    ParaContent(); print " carry ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1069; .L_SayX1041;rtrue;
];
Array TX_S_229 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_229;
[ R_TX_S_230 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] fixed in place.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] fixed in place.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_788_r43 ());! [4: ~ fixed in place.~]
    ParaContent(); print " fixed in place."; .L_Say1070; .L_SayX1042;rtrue;
];
Array TX_S_230 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_230;
[ R_TX_S_231 
    tmp_0 ! Let/loop value, e.g., 'current working sack': player's holdall
    tmp_1 ! Let/loop value, e.g., 'transferred item': object
    tmp_2 ! Let/loop value: thing
    tmp_3 ! Let/loop value: thing
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
tmp_3=LocalParking-->3;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(putting [the transferred item] into [the current working sack]
    to make room)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(putting [the transferred item] into [the current working sack] to make room)[command clarification break]~]
    say__p=1;! [2: ~(putting ~]
    ParaContent(); print "(putting ";! [3: the transferred item]
    ParaContent(); print (the) tmp_1;! [4: ~ into ~]
    ParaContent(); print " into ";! [5: the current working sack]
    ParaContent(); print (the) tmp_0;! [6: ~ to make room)~]
    ParaContent(); print " to make room)";! [7: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1071; .L_SayX1043;rtrue;
];
Array TX_S_231 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_231;
[ R_TX_S_232 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We]['re] carrying too many things already.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We]['re] carrying too many things already.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ carrying too many things already.~]
    ParaContent(); print " carrying too many things already."; .L_Say1072; .L_SayX1044;rtrue;
];
Array TX_S_232 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_232;
[ R_TX_S_233 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Taken.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Taken.~]
    say__p=1;! [2: ~Taken.~]
    ParaContent(); print "Taken."; .L_Say1073; .L_SayX1045;rtrue;
];
Array TX_S_233 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_233;
[ R_TX_S_234 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [pick] up [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [pick] up [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: pick]
    ConjugateVerb_47(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ up ~]
    ParaContent(); print " up ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1074; .L_SayX1046;rtrue;
];
Array TX_S_234 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_234;
[ R_TX_S_235 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~But [regarding the noun][they] [aren't] there now.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~But [regarding the noun][they] [aren't] there now.~]
    say__p=1;! [2: ~But ~]
    ParaContent(); print "But ";! [3: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [4: they]
    ParaContent(); (PHR_777_r32 ());! [5: ~ ~]
    ParaContent(); print " ";! [6: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [7: ~ there now.~]
    ParaContent(); print " there now."; .L_Say1075; .L_SayX1047;rtrue;
];
Array TX_S_235 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_235;
[ R_TX_S_236 
    tmp_0 ! Let/loop value, e.g., 'owner': object
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [seem] to belong to [the owner].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [seem] to belong to [the owner].~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_774_r29 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: seem]
    ConjugateVerb_55(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ to belong to ~]
    ParaContent(); print " to belong to ";! [7: the owner]
    ParaContent(); print (the) tmp_0;! [8: ~.~]
    ParaContent(); print "."; .L_Say1076; .L_SayX1048;rtrue;
];
Array TX_S_236 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_236;
[ R_TX_S_237 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't drop] part of [ourselves].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't drop] part of [ourselves].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't drop]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_28); say__p=1; ! [5: ~ part of ~]
    ParaContent(); print " part of ";! [6: ourselves]
    ParaContent(); (PHR_766_r21 ());! [7: ~.~]
    ParaContent(); print "."; .L_Say1077; .L_SayX1049;rtrue;
];
Array TX_S_237 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_237;
[ R_TX_S_238 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [lack] the dexterity.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [lack] the dexterity.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: lack]
    ConjugateVerb_38(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ the dexterity.~]
    ParaContent(); print " the dexterity."; .L_Say1078; .L_SayX1050;rtrue;
];
Array TX_S_238 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_238;
[ R_TX_S_239 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] already here.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] already here.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ already here.~]
    ParaContent(); print " already here."; .L_Say1079; .L_SayX1051;rtrue;
];
Array TX_S_239 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_239;
[ R_TX_S_240 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [haven't] got [regarding the noun][those].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [haven't] got [regarding the noun][those].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: haven't]
    ConjugateVerb_78(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ got ~]
    ParaContent(); print " got ";! [6: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [7: those]
    ParaContent(); (PHR_773_r28 ());! [8: ~.~]
    ParaContent(); print "."; .L_Say1080; .L_SayX1052;rtrue;
];
Array TX_S_240 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_240;
[ R_TX_S_241 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [the noun] off)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [the noun] off)[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ off)~]
    ParaContent(); print " off)";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1081; .L_SayX1053;rtrue;
];
Array TX_S_241 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_241;
[ R_TX_S_242 
    tmp_0 ! Let/loop value, e.g., 'receptacle': object
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no more room on [the receptacle].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no more room on [the receptacle].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_790_r45 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no more room on ~]
    ParaContent(); print " no more room on ";! [6: the receptacle]
    ParaContent(); print (the) tmp_0;! [7: ~.~]
    ParaContent(); print "."; .L_Say1082; .L_SayX1054;rtrue;
];
Array TX_S_242 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_242;
[ R_TX_S_243 
    tmp_0 ! Let/loop value, e.g., 'receptacle': object
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no more room in [the receptacle].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no more room in [the receptacle].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_790_r45 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no more room in ~]
    ParaContent(); print " no more room in ";! [6: the receptacle]
    ParaContent(); print (the) tmp_0;! [7: ~.~]
    ParaContent(); print "."; .L_Say1083; .L_SayX1055;rtrue;
];
Array TX_S_243 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_243;
[ R_TX_S_244 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Dropped.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Dropped.~]
    say__p=1;! [2: ~Dropped.~]
    ParaContent(); print "Dropped."; .L_Say1084; .L_SayX1056;rtrue;
];
Array TX_S_244 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_244;
[ R_TX_S_245 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [put] down [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [put] down [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: put]
    ConjugateVerb_51(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ down ~]
    ParaContent(); print " down ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1085; .L_SayX1057;rtrue;
];
Array TX_S_245 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_245;
[ R_TX_S_246 
    tmp_0 ! Let/loop value, e.g., 'noun-CPC': object
    tmp_1 ! Let/loop value, e.g., 'second-CPC': object
    tmp_2 ! Let/loop value, e.g., 'transfer ceiling': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't put] something on top of itself.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't put] something on top of itself.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't put]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_51); say__p=1; ! [5: ~ something on top of itself.~]
    ParaContent(); print " something on top of itself."; .L_Say1086; .L_SayX1058;rtrue;
];
Array TX_S_246 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_246;
[ R_TX_S_247 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Putting things on [the second noun] [would achieve] nothing.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Putting things on [the second noun] [would achieve] nothing.~]
    say__p=1;! [2: ~Putting things on ~]
    ParaContent(); print "Putting things on ";! [3: the second noun]
    ParaContent(); print (the) second;! [4: ~ ~]
    ParaContent(); print " ";! [5: would achieve]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_21); say__p=1; ! [6: ~ nothing.~]
    ParaContent(); print " nothing."; .L_Say1087; .L_SayX1059;rtrue;
];
Array TX_S_247 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_247;
[ R_TX_S_248 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [regarding the noun][them] off)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [regarding the noun][them] off)[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [4: them]
    ParaContent(); (PHR_781_r36 ());! [5: ~ off)~]
    ParaContent(); print " off)";! [6: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1088; .L_SayX1060;rtrue;
];
Array TX_S_248 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_248;
[ R_TX_S_249 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no more room on [the second noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no more room on [the second noun].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_790_r45 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no more room on ~]
    ParaContent(); print " no more room on ";! [6: the second noun]
    ParaContent(); print (the) second;! [7: ~.~]
    ParaContent(); print "."; .L_Say1089; .L_SayX1061;rtrue;
];
Array TX_S_249 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_249;
[ R_TX_S_250 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Done.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Done.~]
    say__p=1;! [2: ~Done.~]
    ParaContent(); print "Done."; .L_Say1090; .L_SayX1062;rtrue;
];
Array TX_S_250 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_250;
[ R_TX_S_251 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [put] [the noun] on [the second noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [put] [the noun] on [the second noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: put]
    ConjugateVerb_51(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ on ~]
    ParaContent(); print " on ";! [8: the second noun]
    ParaContent(); print (the) second;! [9: ~.~]
    ParaContent(); print "."; .L_Say1091; .L_SayX1063;rtrue;
];
Array TX_S_251 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_251;
[ R_TX_S_252 
    tmp_0 ! Let/loop value, e.g., 'noun-CPC': object
    tmp_1 ! Let/loop value, e.g., 'second-CPC': object
    tmp_2 ! Let/loop value, e.g., 'transfer ceiling': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't put] something inside itself.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't put] something inside itself.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't put]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_51); say__p=1; ! [5: ~ something inside itself.~]
    ParaContent(); print " something inside itself."; .L_Say1092; .L_SayX1064;rtrue;
];
Array TX_S_252 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_252;
[ R_TX_S_253 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The second noun] [are] closed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The second noun] [are] closed.~]
    say__p=1;! [2: the second noun]
    ParaContent(); print (The) second;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ closed.~]
    ParaContent(); print " closed."; .L_Say1093; .L_SayX1065;rtrue;
];
Array TX_S_253 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_253;
[ R_TX_S_254 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the second noun][Those] [can't contain] things.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the second noun][Those] [can't contain] things.~]
    say__p=1;! [2: regarding the second noun]
    ParaContent(); RegardingSingleObject(second);! [3: those]
    ParaContent(); (PHR_774_r29 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: can't contain]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_7); say__p=1; ! [6: ~ things.~]
    ParaContent(); print " things."; .L_Say1094; .L_SayX1066;rtrue;
];
Array TX_S_254 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_254;
[ R_TX_S_255 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [regarding the noun][them] off)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [regarding the noun][them] off)[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [4: them]
    ParaContent(); (PHR_781_r36 ());! [5: ~ off)~]
    ParaContent(); print " off)";! [6: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1095; .L_SayX1067;rtrue;
];
Array TX_S_255 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_255;
[ R_TX_S_256 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no more room in [the second noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no more room in [the second noun].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_790_r45 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no more room in ~]
    ParaContent(); print " no more room in ";! [6: the second noun]
    ParaContent(); print (the) second;! [7: ~.~]
    ParaContent(); print "."; .L_Say1096; .L_SayX1068;rtrue;
];
Array TX_S_256 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_256;
[ R_TX_S_257 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Done.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Done.~]
    say__p=1;! [2: ~Done.~]
    ParaContent(); print "Done."; .L_Say1097; .L_SayX1069;rtrue;
];
Array TX_S_257 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_257;
[ R_TX_S_258 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [put] [the noun] into [the second noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [put] [the noun] into [the second noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: put]
    ConjugateVerb_51(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ into ~]
    ParaContent(); print " into ";! [8: the second noun]
    ParaContent(); print (the) second;! [9: ~.~]
    ParaContent(); print "."; .L_Say1098; .L_SayX1070;rtrue;
];
Array TX_S_258 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_258;
[ R_TX_S_259 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] plainly inedible.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] plainly inedible.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_788_r43 ());! [4: ~ plainly inedible.~]
    ParaContent(); print " plainly inedible."; .L_Say1099; .L_SayX1071;rtrue;
];
Array TX_S_259 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_259;
[ R_TX_S_260 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [the noun] off)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [the noun] off)[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ off)~]
    ParaContent(); print " off)";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1100; .L_SayX1072;rtrue;
];
Array TX_S_260 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_260;
[ R_TX_S_261 
    tmp_0 ! Let/loop value, e.g., 'owner': person
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[The owner] [might not appreciate] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The owner] [might not appreciate] that.~]
    say__p=1;! [2: the owner]
    ParaContent(); print (The) tmp_0;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not appreciate]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_22); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1101; .L_SayX1073;rtrue;
];
Array TX_S_261 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_261;
[ R_TX_S_262 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [eat] [the noun]. Not bad.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [eat] [the noun]. Not bad.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: eat]
    ConjugateVerb_29(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~. Not bad.~]
    ParaContent(); print ". Not bad."; .L_Say1102; .L_SayX1074;rtrue;
];
Array TX_S_262 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_262;
[ R_TX_S_263 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [eat] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [eat] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: eat]
    ConjugateVerb_29(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1103; .L_SayX1075;rtrue;
];
Array TX_S_263 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_263;
[ R_TX_S_264 
    tmp_0 ! Let/loop value, e.g., 'chaise': supporter
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(first getting off [the chaise])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first getting off [the chaise])[command clarification break]~]
    say__p=1;! [2: ~(first getting off ~]
    ParaContent(); print "(first getting off ";! [3: the chaise]
    ParaContent(); print (the) tmp_0;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1104; .L_SayX1076;rtrue;
];
Array TX_S_264 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_264;
[ R_TX_S_265 
    tmp_0 ! Let/loop value, e.g., 'nonvehicle': object
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [would have] to get off [the nonvehicle] first.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [would have] to get off [the nonvehicle] first.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: would have]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_2); say__p=1; ! [5: ~ to get off ~]
    ParaContent(); print " to get off ";! [6: the nonvehicle]
    ParaContent(); print (the) tmp_0;! [7: ~ first.~]
    ParaContent(); print " first."; .L_Say1105; .L_SayX1077;rtrue;
];
Array TX_S_265 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_265;
[ R_TX_S_266 
    tmp_0 ! Let/loop value, e.g., 'nonvehicle': object
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [would have] to get out of [the nonvehicle] first.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [would have] to get out of [the nonvehicle] first.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: would have]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_2); say__p=1; ! [5: ~ to get out of ~]
    ParaContent(); print " to get out of ";! [6: the nonvehicle]
    ParaContent(); print (the) tmp_0;! [7: ~ first.~]
    ParaContent(); print " first."; .L_Say1106; .L_SayX1078;rtrue;
];
Array TX_S_266 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_266;
[ R_TX_S_267 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't go] that way.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't go] that way.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't go]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_34); say__p=1; ! [5: ~ that way.~]
    ParaContent(); print " that way."; .L_Say1107; .L_SayX1079;rtrue;
];
Array TX_S_267 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_267;
[ R_TX_S_268 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first opening [the door gone through])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first opening [the door gone through])[command clarification break]~]
    say__p=1;! [2: ~(first opening ~]
    ParaContent(); print "(first opening ";! [3: the door gone through]
    ParaContent(); print (the) (MStack-->MstVO(20007,2));! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1108; .L_SayX1080;rtrue;
];
Array TX_S_268 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_268;
[ R_TX_S_269 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't go] that way.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't go] that way.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't go]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_34); say__p=1; ! [5: ~ that way.~]
    ParaContent(); print " that way."; .L_Say1109; .L_SayX1081;rtrue;
];
Array TX_S_269 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_269;
[ R_TX_S_270 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't], since [the door gone through] [lead] nowhere.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't], since [the door gone through] [lead] nowhere.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~, since ~]
    ParaContent(); print ", since ";! [6: the door gone through]
    ParaContent(); print (the) (MStack-->MstVO(20007,2));! [7: ~ ~]
    ParaContent(); print " ";! [8: lead]
    ConjugateVerb_39(CV_POS, PNToVP(), story_tense); say__p=1; ! [9: ~ nowhere.~]
    ParaContent(); print " nowhere."; .L_Say1110; .L_SayX1082;rtrue;
];
Array TX_S_270 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_270;
[ R_TX_S_271 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [go] up~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [go] up~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: go]
    ConjugateVerb_34(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ up~]
    ParaContent(); print " up"; .L_Say1111; .L_SayX1083;rtrue;
];
Array TX_S_271 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_271;
[ R_TX_S_272 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [go] down~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [go] down~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: go]
    ConjugateVerb_34(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ down~]
    ParaContent(); print " down"; .L_Say1112; .L_SayX1084;rtrue;
];
Array TX_S_272 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_272;
[ R_TX_S_273 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [go] [noun]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [go] [noun]~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: go]
    ConjugateVerb_34(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: noun]
    ParaContent(); PrintShortName(noun); .L_Say1113; .L_SayX1085;rtrue;
];
Array TX_S_273 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_273;
[ R_TX_S_274 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value, e.g., 'room back the other way': room
    tmp_2 ! Let/loop value, e.g., 'room normally this way': room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] from above~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] from above~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ from above~]
    ParaContent(); print " from above"; .L_Say1114; .L_SayX1086;rtrue;
];
Array TX_S_274 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_274;
[ R_TX_S_275 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value, e.g., 'room back the other way': room
    tmp_2 ! Let/loop value, e.g., 'room normally this way': room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] from below~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] from below~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ from below~]
    ParaContent(); print " from below"; .L_Say1115; .L_SayX1087;rtrue;
];
Array TX_S_275 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_275;
[ R_TX_S_276 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value, e.g., 'room back the other way': room
    tmp_2 ! Let/loop value, e.g., 'room normally this way': room
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] from [the back way]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] from [the back way]~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the back way]
    ParaContent(); print (the) tmp_0; .L_Say1116; .L_SayX1088;rtrue;
];
Array TX_S_276 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_276;
[ R_TX_S_277 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value, e.g., 'room back the other way': room
    tmp_2 ! Let/loop value, e.g., 'room normally this way': room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive]~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say1117; .L_SayX1089;rtrue;
];
Array TX_S_277 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_277;
[ R_TX_S_278 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] at [the room gone to] from above~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] at [the room gone to] from above~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ at ~]
    ParaContent(); print " at ";! [6: the room gone to]
    ParaContent(); print (the) (MStack-->MstVO(20007,1));! [7: ~ from above~]
    ParaContent(); print " from above"; .L_Say1118; .L_SayX1090;rtrue;
];
Array TX_S_278 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_278;
[ R_TX_S_279 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] at [the room gone to] from below~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] at [the room gone to] from below~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ at ~]
    ParaContent(); print " at ";! [6: the room gone to]
    ParaContent(); print (the) (MStack-->MstVO(20007,1));! [7: ~ from below~]
    ParaContent(); print " from below"; .L_Say1119; .L_SayX1091;rtrue;
];
Array TX_S_279 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_279;
[ R_TX_S_280 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] at [the room gone to] from [the back way]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] at [the room gone to] from [the back way]~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ at ~]
    ParaContent(); print " at ";! [6: the room gone to]
    ParaContent(); print (the) (MStack-->MstVO(20007,1));! [7: ~ from ~]
    ParaContent(); print " from ";! [8: the back way]
    ParaContent(); print (the) tmp_0; .L_Say1120; .L_SayX1092;rtrue;
];
Array TX_S_280 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_280;
[ R_TX_S_281 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [go] through [the noun]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [go] through [the noun]~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: go]
    ConjugateVerb_34(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ through ~]
    ParaContent(); print " through ";! [6: the noun]
    ParaContent(); print (the) noun; .L_Say1121; .L_SayX1093;rtrue;
];
Array TX_S_281 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_281;
[ R_TX_S_282 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] from [the noun]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] from [the noun]~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the noun]
    ParaContent(); print (the) noun; .L_Say1122; .L_SayX1094;rtrue;
];
Array TX_S_282 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_282;
[ R_TX_S_283 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~on [the vehicle gone by]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~on [the vehicle gone by]~]
    say__p=1;! [2: ~on ~]
    ParaContent(); print "on ";! [3: the vehicle gone by]
    ParaContent(); print (the) (MStack-->MstVO(20007,3)); .L_Say1123; .L_SayX1095;rtrue;
];
Array TX_S_283 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_283;
[ R_TX_S_284 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~in [the vehicle gone by]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~in [the vehicle gone by]~]
    say__p=1;! [2: ~in ~]
    ParaContent(); print "in ";! [3: the vehicle gone by]
    ParaContent(); print (the) (MStack-->MstVO(20007,3)); .L_Say1124; .L_SayX1096;rtrue;
];
Array TX_S_284 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_284;
[ R_TX_S_285 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, pushing [the thing gone with] in front, and [us] along too~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, pushing [the thing gone with] in front, and [us] along too~]
    say__p=1;! [2: ~, pushing ~]
    ParaContent(); print ", pushing ";! [3: the thing gone with]
    ParaContent(); print (the) (MStack-->MstVO(20007,4));! [4: ~ in front, and ~]
    ParaContent(); print " in front, and ";! [5: us]
    ParaContent(); (PHR_764_r19 ());! [6: ~ along too~]
    ParaContent(); print " along too"; .L_Say1125; .L_SayX1097;rtrue;
];
Array TX_S_285 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_285;
[ R_TX_S_286 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, pushing [the thing gone with] in front~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, pushing [the thing gone with] in front~]
    say__p=1;! [2: ~, pushing ~]
    ParaContent(); print ", pushing ";! [3: the thing gone with]
    ParaContent(); print (the) (MStack-->MstVO(20007,4));! [4: ~ in front~]
    ParaContent(); print " in front"; .L_Say1126; .L_SayX1098;rtrue;
];
Array TX_S_286 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_286;
[ R_TX_S_287 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, pushing [the thing gone with] away~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, pushing [the thing gone with] away~]
    say__p=1;! [2: ~, pushing ~]
    ParaContent(); print ", pushing ";! [3: the thing gone with]
    ParaContent(); print (the) (MStack-->MstVO(20007,4));! [4: ~ away~]
    ParaContent(); print " away"; .L_Say1127; .L_SayX1099;rtrue;
];
Array TX_S_287 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_287;
[ R_TX_S_288 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, pushing [the thing gone with] in~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, pushing [the thing gone with] in~]
    say__p=1;! [2: ~, pushing ~]
    ParaContent(); print ", pushing ";! [3: the thing gone with]
    ParaContent(); print (the) (MStack-->MstVO(20007,4));! [4: ~ in~]
    ParaContent(); print " in"; .L_Say1128; .L_SayX1100;rtrue;
];
Array TX_S_288 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_288;
[ R_TX_S_289 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, taking [us] along~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, taking [us] along~]
    say__p=1;! [2: ~, taking ~]
    ParaContent(); print ", taking ";! [3: us]
    ParaContent(); (PHR_764_r19 ());! [4: ~ along~]
    ParaContent(); print " along"; .L_Say1129; .L_SayX1101;rtrue;
];
Array TX_S_289 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_289;
[ R_TX_S_290 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~But [we]['re] already on [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~But [we]['re] already on [the noun].~]
    say__p=1;! [2: ~But ~]
    ParaContent(); print "But ";! [3: we]
    ParaContent(); (PHR_763_r18 ());! [4: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ already on ~]
    ParaContent(); print " already on ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1130; .L_SayX1102;rtrue;
];
Array TX_S_290 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_290;
[ R_TX_S_291 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~But [we]['re] already in [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~But [we]['re] already in [the noun].~]
    say__p=1;! [2: ~But ~]
    ParaContent(); print "But ";! [3: we]
    ParaContent(); (PHR_763_r18 ());! [4: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ already in ~]
    ParaContent(); print " already in ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1131; .L_SayX1103;rtrue;
];
Array TX_S_291 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_291;
[ R_TX_S_292 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] not something [we] [can] stand on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] not something [we] [can] stand on.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_788_r43 ());! [4: ~ not something ~]
    ParaContent(); print " not something ";! [5: we]
    ParaContent(); (PHR_763_r18 ());! [6: ~ ~]
    ParaContent(); print " ";! [7: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [8: ~ stand on.~]
    ParaContent(); print " stand on."; .L_Say1132; .L_SayX1104;rtrue;
];
Array TX_S_292 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_292;
[ R_TX_S_293 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] not something [we] [can] sit down on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] not something [we] [can] sit down on.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_788_r43 ());! [4: ~ not something ~]
    ParaContent(); print " not something ";! [5: we]
    ParaContent(); (PHR_763_r18 ());! [6: ~ ~]
    ParaContent(); print " ";! [7: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [8: ~ sit down on.~]
    ParaContent(); print " sit down on."; .L_Say1133; .L_SayX1105;rtrue;
];
Array TX_S_293 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_293;
[ R_TX_S_294 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] not something [we] [can] lie down on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] not something [we] [can] lie down on.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_788_r43 ());! [4: ~ not something ~]
    ParaContent(); print " not something ";! [5: we]
    ParaContent(); (PHR_763_r18 ());! [6: ~ ~]
    ParaContent(); print " ";! [7: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [8: ~ lie down on.~]
    ParaContent(); print " lie down on."; .L_Say1134; .L_SayX1106;rtrue;
];
Array TX_S_294 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_294;
[ R_TX_S_295 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] not something [we] [can] enter.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] not something [we] [can] enter.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_788_r43 ());! [4: ~ not something ~]
    ParaContent(); print " not something ";! [5: we]
    ParaContent(); (PHR_763_r18 ());! [6: ~ ~]
    ParaContent(); print " ";! [7: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [8: ~ enter.~]
    ParaContent(); print " enter."; .L_Say1135; .L_SayX1107;rtrue;
];
Array TX_S_295 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_295;
[ R_TX_S_296 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't get] into the closed [noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't get] into the closed [noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't get]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_32); say__p=1; ! [5: ~ into the closed ~]
    ParaContent(); print " into the closed ";! [6: noun]
    ParaContent(); PrintShortName(noun);! [7: ~.~]
    ParaContent(); print "."; .L_Say1136; .L_SayX1108;rtrue;
];
Array TX_S_296 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_296;
[ R_TX_S_297 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no more room on [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no more room on [the noun].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_790_r45 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no more room on ~]
    ParaContent(); print " no more room on ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1137; .L_SayX1109;rtrue;
];
Array TX_S_297 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_297;
[ R_TX_S_298 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no more room in [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no more room in [the noun].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_790_r45 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no more room in ~]
    ParaContent(); print " no more room in ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1138; .L_SayX1110;rtrue;
];
Array TX_S_298 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_298;
[ R_TX_S_299 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can] only get into something free-standing.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can] only get into something free-standing.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ only get into something free-standing.~]
    ParaContent(); print " only get into something free-standing."; .L_Say1139; .L_SayX1111;rtrue;
];
Array TX_S_299 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_299;
[ R_TX_S_300 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'current home': object
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(getting off [the current home])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(getting off [the current home])[command clarification break]~]
    say__p=1;! [2: ~(getting off ~]
    ParaContent(); print "(getting off ";! [3: the current home]
    ParaContent(); print (the) tmp_1;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1140; .L_SayX1112;rtrue;
];
Array TX_S_300 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_300;
[ R_TX_S_301 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'current home': object
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(getting out of [the current home])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(getting out of [the current home])[command clarification break]~]
    say__p=1;! [2: ~(getting out of ~]
    ParaContent(); print "(getting out of ";! [3: the current home]
    ParaContent(); print (the) tmp_1;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1141; .L_SayX1113;rtrue;
];
Array TX_S_301 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_301;
[ R_TX_S_302 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'target': object
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(getting onto [the target])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(getting onto [the target])[command clarification break]~]
    say__p=1;! [2: ~(getting onto ~]
    ParaContent(); print "(getting onto ";! [3: the target]
    ParaContent(); print (the) tmp_1;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1142; .L_SayX1114;rtrue;
];
Array TX_S_302 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_302;
[ R_TX_S_303 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'target': object
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(getting into [the target])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(getting into [the target])[command clarification break]~]
    say__p=1;! [2: ~(getting into ~]
    ParaContent(); print "(getting into ";! [3: the target]
    ParaContent(); print (the) tmp_1;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1143; .L_SayX1115;rtrue;
];
Array TX_S_303 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_303;
[ R_TX_S_304 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'target': object
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(entering [the target])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(entering [the target])[command clarification break]~]
    say__p=1;! [2: ~(entering ~]
    ParaContent(); print "(entering ";! [3: the target]
    ParaContent(); print (the) tmp_1;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1144; .L_SayX1116;rtrue;
];
Array TX_S_304 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_304;
[ R_TX_S_305 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [get] onto [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [get] onto [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ onto ~]
    ParaContent(); print " onto ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1145; .L_SayX1117;rtrue;
];
Array TX_S_305 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_305;
[ R_TX_S_306 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [get] into [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [get] into [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ into ~]
    ParaContent(); print " into ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1146; .L_SayX1118;rtrue;
];
Array TX_S_306 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_306;
[ R_TX_S_307 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [get] into [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [get] into [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ into ~]
    ParaContent(); print " into ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1147; .L_SayX1119;rtrue;
];
Array TX_S_307 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_307;
[ R_TX_S_308 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [get] onto [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [get] onto [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ onto ~]
    ParaContent(); print " onto ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1148; .L_SayX1120;rtrue;
];
Array TX_S_308 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_308;
[ R_TX_S_309 
    tmp_0 ! Let/loop value, e.g., 'local room': room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~But [we] [aren't] in anything at the [if story tense is present
    tense]moment[otherwise]time[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~But [we] [aren't] in anything at the [if story tense is present tense]moment[otherwise]time[end if].~]
    say__p=1;! [2: ~But ~]
    ParaContent(); print "But ";! [3: we]
    ParaContent(); (PHR_763_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ in anything at the ~]
    ParaContent(); print " in anything at the ";! [7: if story tense is present tense]

    	if (~~((((story_tense == I106_present_tense))))) jump L_Say1149;! [8: ~moment~]
    ParaContent(); print "moment";! [9: otherwise]

    	jump L_SayX1121; .L_Say1149;! [10: ~time~]
    ParaContent(); print "time";! [11: end if]

    	.L_Say1150; .L_SayX1121;! [12: ~.~]
    ParaContent(); print "."; .L_Say1151; .L_SayX1122;rtrue;
];
Array TX_S_309 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_309;
[ R_TX_S_310 
    tmp_0 ! Let/loop value, e.g., 'cage': container
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~You can't get out of the closed [cage].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can't get out of the closed [cage].~]
    say__p=1;! [2: ~You can't get out of the closed ~]
    ParaContent(); print "You can't get out of the closed ";! [3: cage]
    ParaContent(); PrintShortName(tmp_0);! [4: ~.~]
    ParaContent(); print "."; .L_Say1152; .L_SayX1123;rtrue;
];
Array TX_S_310 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_310;
[ R_TX_S_311 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [get] off [the container exited from].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [get] off [the container exited from].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ off ~]
    ParaContent(); print " off ";! [6: the container exited from]
    ParaContent(); print (the) (MStack-->MstVO(20009,0));! [7: ~.~]
    ParaContent(); print "."; .L_Say1153; .L_SayX1124;rtrue;
];
Array TX_S_311 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_311;
[ R_TX_S_312 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [get] out of [the container exited from].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [get] out of [the container exited from].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ out of ~]
    ParaContent(); print " out of ";! [6: the container exited from]
    ParaContent(); print (the) (MStack-->MstVO(20009,0));! [7: ~.~]
    ParaContent(); print "."; .L_Say1154; .L_SayX1125;rtrue;
];
Array TX_S_312 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_312;
[ R_TX_S_313 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [get] out of [the container exited from].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [get] out of [the container exited from].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ out of ~]
    ParaContent(); print " out of ";! [6: the container exited from]
    ParaContent(); print (the) (MStack-->MstVO(20009,0));! [7: ~.~]
    ParaContent(); print "."; .L_Say1155; .L_SayX1126;rtrue;
];
Array TX_S_313 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_313;
[ R_TX_S_314 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~But [we] [aren't] on [the noun] at the [if story tense is present
    tense]moment[otherwise]time[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~But [we] [aren't] on [the noun] at the [if story tense is present tense]moment[otherwise]time[end if].~]
    say__p=1;! [2: ~But ~]
    ParaContent(); print "But ";! [3: we]
    ParaContent(); (PHR_763_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ on ~]
    ParaContent(); print " on ";! [7: the noun]
    ParaContent(); print (the) noun;! [8: ~ at the ~]
    ParaContent(); print " at the ";! [9: if story tense is present tense]

    	if (~~((((story_tense == I106_present_tense))))) jump L_Say1156;! [10: ~moment~]
    ParaContent(); print "moment";! [11: otherwise]

    	jump L_SayX1127; .L_Say1156;! [12: ~time~]
    ParaContent(); print "time";! [13: end if]

    	.L_Say1157; .L_SayX1127;! [14: ~.~]
    ParaContent(); print "."; .L_Say1158; .L_SayX1128;rtrue;
];
Array TX_S_314 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_314;
[ R_TX_S_315 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [get] off [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [get] off [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ off ~]
    ParaContent(); print " off ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1159; .L_SayX1129;rtrue;
];
Array TX_S_315 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_315;
[ R_TX_S_316 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Darkness~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Darkness~]
    say__p=1;! [2: ~Darkness~]
    ParaContent(); print "Darkness"; .L_Say1160; .L_SayX1130;rtrue;
];
Array TX_S_316 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_316;
[ R_TX_S_317 
    tmp_0 ! Let/loop value, e.g., 'intermediate level': object
    tmp_1 ! Let/loop value, e.g., 'intermediate level count': number
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~ (on [the intermediate level])~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ (on [the intermediate level])~]
    say__p=1;! [2: ~ (on ~]
    ParaContent(); print " (on ";! [3: the intermediate level]
    ParaContent(); print (the) tmp_0;! [4: ~)~]
    ParaContent(); print ")"; .L_Say1161; .L_SayX1131;rtrue;
];
Array TX_S_317 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_317;
[ R_TX_S_318 
    tmp_0 ! Let/loop value, e.g., 'intermediate level': object
    tmp_1 ! Let/loop value, e.g., 'intermediate level count': number
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~ (in [the intermediate level])~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ (in [the intermediate level])~]
    say__p=1;! [2: ~ (in ~]
    ParaContent(); print " (in ";! [3: the intermediate level]
    ParaContent(); print (the) tmp_0;! [4: ~)~]
    ParaContent(); print ")"; .L_Say1162; .L_SayX1132;rtrue;
];
Array TX_S_318 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_318;
[ R_TX_S_319 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[It] [are] pitch dark, and [we] [can't see] a thing.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[It] [are] pitch dark, and [we] [can't see] a thing.~]
    say__p=1;! [2: it]
    ParaContent(); (PHR_789_r44 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ pitch dark, and ~]
    ParaContent(); print " pitch dark, and ";! [6: we]
    ParaContent(); (PHR_763_r18 ());! [7: ~ ~]
    ParaContent(); print " ";! [8: can't see]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_16); say__p=1; ! [9: ~ a thing.~]
    ParaContent(); print " a thing."; .L_Say1163; .L_SayX1133;rtrue;
];
Array TX_S_319 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_319;
[ R_TX_S_320 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [look] around.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [look] around.~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: look]
    ConjugateVerb_43(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ around.~]
    ParaContent(); print " around."; .L_Say1164; .L_SayX1134;rtrue;
];
Array TX_S_320 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_320;
[ R_TX_S_321 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [see] nothing unexpected in that direction.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [see] nothing unexpected in that direction.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: see]
    ConjugateVerb_16(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing unexpected in that direction.~]
    ParaContent(); print " nothing unexpected in that direction."; .L_Say1165; .L_SayX1135;rtrue;
];
Array TX_S_321 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_321;
[ R_TX_S_322 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~In [the noun] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~In [the noun] ~]
    say__p=1;! [2: ~In ~]
    ParaContent(); print "In ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1166; .L_SayX1136;rtrue;
];
Array TX_S_322 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_322;
[ R_TX_S_323 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] empty.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] empty.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ empty.~]
    ParaContent(); print " empty."; .L_Say1167; .L_SayX1137;rtrue;
];
Array TX_S_323 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_323;
[ R_TX_S_324 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~On [the noun] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~On [the noun] ~]
    say__p=1;! [2: ~On ~]
    ParaContent(); print "On ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1168; .L_SayX1138;rtrue;
];
Array TX_S_324 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_324;
[ R_TX_S_325 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] [if story tense is present tense]currently [end if]switched
    [if the noun is switched on]on[otherwise]off[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] [if story tense is present tense]currently [end if]switched [if the noun is switched on]on[otherwise]off[end if].~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: if story tense is present tense]

    	if (~~((((story_tense == I106_present_tense))))) jump L_Say1169;! [7: ~currently ~]
    ParaContent(); print "currently ";! [8: end if]

    	.L_Say1169; .L_SayX1139;! [9: ~switched ~]
    ParaContent(); print "switched ";! [10: if the noun is switched on]

    	if (~~(((((Adj_82_t1_v10(noun))))))) jump L_Say1170;! [11: ~on~]
    ParaContent(); print "on";! [12: otherwise]

    	jump L_SayX1140; .L_Say1170;! [13: ~off~]
    ParaContent(); print "off";! [14: end if]

    	.L_Say1171; .L_SayX1140;! [15: ~.~]
    ParaContent(); print "."; .L_Say1172; .L_SayX1141;rtrue;
];
Array TX_S_325 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_325;
[ R_TX_S_326 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [see] nothing special about [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [see] nothing special about [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: see]
    ConjugateVerb_16(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing special about ~]
    ParaContent(); print " nothing special about ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1173; .L_SayX1142;rtrue;
];
Array TX_S_326 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_326;
[ R_TX_S_327 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [look] closely at [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [look] closely at [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: look]
    ConjugateVerb_43(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ closely at ~]
    ParaContent(); print " closely at ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1174; .L_SayX1143;rtrue;
];
Array TX_S_327 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_327;
[ R_TX_S_328 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [find] nothing of interest.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [find] nothing of interest.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: find]
    ConjugateVerb_31(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing of interest.~]
    ParaContent(); print " nothing of interest."; .L_Say1175; .L_SayX1144;rtrue;
];
Array TX_S_328 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_328;
[ R_TX_S_329 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [look] under [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [look] under [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: look]
    ConjugateVerb_43(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ under ~]
    ParaContent(); print " under ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1176; .L_SayX1145;rtrue;
];
Array TX_S_329 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_329;
[ R_TX_S_330 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [find] nothing of interest.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [find] nothing of interest.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: find]
    ConjugateVerb_31(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing of interest.~]
    ParaContent(); print " nothing of interest."; .L_Say1177; .L_SayX1146;rtrue;
];
Array TX_S_330 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_330;
[ R_TX_S_331 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't see] inside, since [the noun] [are] closed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't see] inside, since [the noun] [are] closed.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't see]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_16); say__p=1; ! [5: ~ inside, since ~]
    ParaContent(); print " inside, since ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ ~]
    ParaContent(); print " ";! [8: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [9: ~ closed.~]
    ParaContent(); print " closed."; .L_Say1178; .L_SayX1147;rtrue;
];
Array TX_S_331 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_331;
[ R_TX_S_332 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~In [the noun] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~In [the noun] ~]
    say__p=1;! [2: ~In ~]
    ParaContent(); print "In ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1179; .L_SayX1148;rtrue;
];
Array TX_S_332 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_332;
[ R_TX_S_333 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] empty.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] empty.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ empty.~]
    ParaContent(); print " empty."; .L_Say1180; .L_SayX1149;rtrue;
];
Array TX_S_333 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_333;
[ R_TX_S_334 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~On [the noun] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~On [the noun] ~]
    say__p=1;! [2: ~On ~]
    ParaContent(); print "On ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1181; .L_SayX1150;rtrue;
];
Array TX_S_334 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_334;
[ R_TX_S_335 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] nothing on [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] nothing on [the noun].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_790_r45 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing on ~]
    ParaContent(); print " nothing on ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1182; .L_SayX1151;rtrue;
];
Array TX_S_335 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_335;
[ R_TX_S_336 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [search] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [search] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: search]
    ConjugateVerb_54(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1183; .L_SayX1152;rtrue;
];
Array TX_S_336 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_336;
[ R_TX_S_337 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [discover] nothing of interest in [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [discover] nothing of interest in [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: discover]
    ConjugateVerb_27(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing of interest in ~]
    ParaContent(); print " nothing of interest in ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1184; .L_SayX1153;rtrue;
];
Array TX_S_337 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_337;
[ R_TX_S_338 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [look] at [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [look] at [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: look]
    ConjugateVerb_43(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ at ~]
    ParaContent(); print " at ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1185; .L_SayX1154;rtrue;
];
Array TX_S_338 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_338;
[ R_TX_S_339 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [don't] seem to be something [we] [can] lock.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [don't] seem to be something [we] [can] lock.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_774_r29 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ seem to be something ~]
    ParaContent(); print " seem to be something ";! [7: we]
    ParaContent(); (PHR_763_r18 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ lock.~]
    ParaContent(); print " lock."; .L_Say1186; .L_SayX1155;rtrue;
];
Array TX_S_339 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_339;
[ R_TX_S_340 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] locked at the [if story tense is present
    tense]moment[otherwise]time[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] locked at the [if story tense is present tense]moment[otherwise]time[end if].~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_788_r43 ());! [4: ~ locked at the ~]
    ParaContent(); print " locked at the ";! [5: if story tense is present tense]

    	if (~~((((story_tense == I106_present_tense))))) jump L_Say1187;! [6: ~moment~]
    ParaContent(); print "moment";! [7: otherwise]

    	jump L_SayX1156; .L_Say1187;! [8: ~time~]
    ParaContent(); print "time";! [9: end if]

    	.L_Say1188; .L_SayX1156;! [10: ~.~]
    ParaContent(); print "."; .L_Say1189; .L_SayX1157;rtrue;
];
Array TX_S_340 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_340;
[ R_TX_S_341 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~First [we] [would have] to close [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~First [we] [would have] to close [the noun].~]
    say__p=1;! [2: ~First ~]
    ParaContent(); print "First ";! [3: we]
    ParaContent(); (PHR_763_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: would have]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_2); say__p=1; ! [6: ~ to close ~]
    ParaContent(); print " to close ";! [7: the noun]
    ParaContent(); print (the) noun;! [8: ~.~]
    ParaContent(); print "."; .L_Say1190; .L_SayX1158;rtrue;
];
Array TX_S_341 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_341;
[ R_TX_S_342 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the second noun][Those] [don't] seem to fit the lock.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the second noun][Those] [don't] seem to fit the lock.~]
    say__p=1;! [2: regarding the second noun]
    ParaContent(); RegardingSingleObject(second);! [3: those]
    ParaContent(); (PHR_774_r29 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ seem to fit the lock.~]
    ParaContent(); print " seem to fit the lock."; .L_Say1191; .L_SayX1159;rtrue;
];
Array TX_S_342 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_342;
[ R_TX_S_343 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [lock] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [lock] [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: lock]
    ConjugateVerb_42(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1192; .L_SayX1160;rtrue;
];
Array TX_S_343 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_343;
[ R_TX_S_344 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [lock] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [lock] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: lock]
    ConjugateVerb_42(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1193; .L_SayX1161;rtrue;
];
Array TX_S_344 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_344;
[ R_TX_S_345 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [don't] seem to be something [we] [can] unlock.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [don't] seem to be something [we] [can] unlock.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_774_r29 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ seem to be something ~]
    ParaContent(); print " seem to be something ";! [7: we]
    ParaContent(); (PHR_763_r18 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ unlock.~]
    ParaContent(); print " unlock."; .L_Say1194; .L_SayX1162;rtrue;
];
Array TX_S_345 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_345;
[ R_TX_S_346 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] unlocked at the [if story tense is present
    tense]moment[otherwise]time[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] unlocked at the [if story tense is present tense]moment[otherwise]time[end if].~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_788_r43 ());! [4: ~ unlocked at the ~]
    ParaContent(); print " unlocked at the ";! [5: if story tense is present tense]

    	if (~~((((story_tense == I106_present_tense))))) jump L_Say1195;! [6: ~moment~]
    ParaContent(); print "moment";! [7: otherwise]

    	jump L_SayX1163; .L_Say1195;! [8: ~time~]
    ParaContent(); print "time";! [9: end if]

    	.L_Say1196; .L_SayX1163;! [10: ~.~]
    ParaContent(); print "."; .L_Say1197; .L_SayX1164;rtrue;
];
Array TX_S_346 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_346;
[ R_TX_S_347 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the second noun][Those] [don't] seem to fit the lock.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the second noun][Those] [don't] seem to fit the lock.~]
    say__p=1;! [2: regarding the second noun]
    ParaContent(); RegardingSingleObject(second);! [3: those]
    ParaContent(); (PHR_774_r29 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ seem to fit the lock.~]
    ParaContent(); print " seem to fit the lock."; .L_Say1198; .L_SayX1165;rtrue;
];
Array TX_S_347 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_347;
[ R_TX_S_348 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [unlock] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [unlock] [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: unlock]
    ConjugateVerb_20(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1199; .L_SayX1166;rtrue;
];
Array TX_S_348 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_348;
[ R_TX_S_349 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [unlock] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [unlock] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: unlock]
    ConjugateVerb_20(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1200; .L_SayX1167;rtrue;
];
Array TX_S_349 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_349;
[ R_TX_S_350 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [aren't] something [we] [can] switch.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [aren't] something [we] [can] switch.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_778_r33 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ something ~]
    ParaContent(); print " something ";! [7: we]
    ParaContent(); (PHR_763_r18 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ switch.~]
    ParaContent(); print " switch."; .L_Say1201; .L_SayX1168;rtrue;
];
Array TX_S_350 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_350;
[ R_TX_S_351 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] already on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] already on.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_788_r43 ());! [4: ~ already on.~]
    ParaContent(); print " already on."; .L_Say1202; .L_SayX1169;rtrue;
];
Array TX_S_351 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_351;
[ R_TX_S_352 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [switch] [the noun] on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [switch] [the noun] on.~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: switch]
    ConjugateVerb_60(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ on.~]
    ParaContent(); print " on."; .L_Say1203; .L_SayX1170;rtrue;
];
Array TX_S_352 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_352;
[ R_TX_S_353 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [aren't] something [we] [can] switch.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [aren't] something [we] [can] switch.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_778_r33 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ something ~]
    ParaContent(); print " something ";! [7: we]
    ParaContent(); (PHR_763_r18 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ switch.~]
    ParaContent(); print " switch."; .L_Say1204; .L_SayX1171;rtrue;
];
Array TX_S_353 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_353;
[ R_TX_S_354 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] already off.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] already off.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_788_r43 ());! [4: ~ already off.~]
    ParaContent(); print " already off."; .L_Say1205; .L_SayX1172;rtrue;
];
Array TX_S_354 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_354;
[ R_TX_S_355 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [switch] [the noun] off.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [switch] [the noun] off.~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: switch]
    ConjugateVerb_60(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ off.~]
    ParaContent(); print " off."; .L_Say1206; .L_SayX1173;rtrue;
];
Array TX_S_355 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_355;
[ R_TX_S_356 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [aren't] something [we] [can] open.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [aren't] something [we] [can] open.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_778_r33 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ something ~]
    ParaContent(); print " something ";! [7: we]
    ParaContent(); (PHR_763_r18 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ open.~]
    ParaContent(); print " open."; .L_Say1207; .L_SayX1174;rtrue;
];
Array TX_S_356 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_356;
[ R_TX_S_357 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [seem] to be locked.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [seem] to be locked.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_778_r33 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: seem]
    ConjugateVerb_55(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ to be locked.~]
    ParaContent(); print " to be locked."; .L_Say1208; .L_SayX1175;rtrue;
];
Array TX_S_357 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_357;
[ R_TX_S_358 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] already open.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] already open.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_788_r43 ());! [4: ~ already open.~]
    ParaContent(); print " already open."; .L_Say1209; .L_SayX1176;rtrue;
];
Array TX_S_358 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_358;
[ R_TX_S_359 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [open] [the noun], revealing ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [open] [the noun], revealing ~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: open]
    ConjugateVerb_45(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~, revealing ~]
    ParaContent(); print ", revealing "; .L_Say1210; .L_SayX1177;rtrue;
];
Array TX_S_359 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_359;
[ R_TX_S_360 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [open] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [open] [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: open]
    ConjugateVerb_45(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1211; .L_SayX1178;rtrue;
];
Array TX_S_360 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_360;
[ R_TX_S_361 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [open] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [open] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: open]
    ConjugateVerb_45(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1212; .L_SayX1179;rtrue;
];
Array TX_S_361 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_361;
[ R_TX_S_362 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [open].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [open].~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: open]
    ConjugateVerb_45(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1213; .L_SayX1180;rtrue;
];
Array TX_S_362 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_362;
[ R_TX_S_363 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [aren't] something [we] [can] close.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [aren't] something [we] [can] close.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_778_r33 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ something ~]
    ParaContent(); print " something ";! [7: we]
    ParaContent(); (PHR_763_r18 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ close.~]
    ParaContent(); print " close."; .L_Say1214; .L_SayX1181;rtrue;
];
Array TX_S_363 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_363;
[ R_TX_S_364 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] already closed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] already closed.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_788_r43 ());! [4: ~ already closed.~]
    ParaContent(); print " already closed."; .L_Say1215; .L_SayX1182;rtrue;
];
Array TX_S_364 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_364;
[ R_TX_S_365 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [close] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [close] [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: close]
    ConjugateVerb_25(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1216; .L_SayX1183;rtrue;
];
Array TX_S_365 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_365;
[ R_TX_S_366 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [close] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [close] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: close]
    ConjugateVerb_25(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1217; .L_SayX1184;rtrue;
];
Array TX_S_366 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_366;
[ R_TX_S_367 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [close].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [close].~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: close]
    ConjugateVerb_25(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1218; .L_SayX1185;rtrue;
];
Array TX_S_367 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_367;
[ R_TX_S_368 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't wear] [regarding the noun][those]!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't wear] [regarding the noun][those]!~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't wear]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_13); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [7: those]
    ParaContent(); (PHR_773_r28 ());! [8: ~!~]
    ParaContent(); print "!"; .L_Say1219; .L_SayX1186;rtrue;
];
Array TX_S_368 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_368;
[ R_TX_S_369 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] holding [regarding the noun][those]!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] holding [regarding the noun][those]!~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ holding ~]
    ParaContent(); print " holding ";! [6: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [7: those]
    ParaContent(); (PHR_773_r28 ());! [8: ~!~]
    ParaContent(); print "!"; .L_Say1220; .L_SayX1187;rtrue;
];
Array TX_S_369 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_369;
[ R_TX_S_370 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We]['re] already wearing [regarding the noun][those]!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We]['re] already wearing [regarding the noun][those]!~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ already wearing ~]
    ParaContent(); print " already wearing ";! [5: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [6: those]
    ParaContent(); (PHR_773_r28 ());! [7: ~!~]
    ParaContent(); print "!"; .L_Say1221; .L_SayX1188;rtrue;
];
Array TX_S_370 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_370;
[ R_TX_S_371 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [put] on [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [put] on [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: put]
    ConjugateVerb_51(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ on ~]
    ParaContent(); print " on ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1222; .L_SayX1189;rtrue;
];
Array TX_S_371 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_371;
[ R_TX_S_372 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [put] on [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [put] on [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: put]
    ConjugateVerb_51(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ on ~]
    ParaContent(); print " on ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1223; .L_SayX1190;rtrue;
];
Array TX_S_372 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_372;
[ R_TX_S_373 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] wearing [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] wearing [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ wearing ~]
    ParaContent(); print " wearing ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1224; .L_SayX1191;rtrue;
];
Array TX_S_373 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_373;
[ R_TX_S_374 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We]['re] carrying too many things already.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We]['re] carrying too many things already.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ carrying too many things already.~]
    ParaContent(); print " carrying too many things already."; .L_Say1225; .L_SayX1192;rtrue;
];
Array TX_S_374 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_374;
[ R_TX_S_375 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [take] off [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [take] off [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: take]
    ConjugateVerb_61(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ off ~]
    ParaContent(); print " off ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1226; .L_SayX1193;rtrue;
];
Array TX_S_375 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_375;
[ R_TX_S_376 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [take] off [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [take] off [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: take]
    ConjugateVerb_61(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ off ~]
    ParaContent(); print " off ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1227; .L_SayX1194;rtrue;
];
Array TX_S_376 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_376;
[ R_TX_S_377 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] holding [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] holding [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ holding ~]
    ParaContent(); print " holding ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1228; .L_SayX1195;rtrue;
];
Array TX_S_377 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_377;
[ R_TX_S_378 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't give] [the noun] to [ourselves].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't give] [the noun] to [ourselves].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't give]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_33); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ to ~]
    ParaContent(); print " to ";! [8: ourselves]
    ParaContent(); (PHR_766_r21 ());! [9: ~.~]
    ParaContent(); print "."; .L_Say1229; .L_SayX1196;rtrue;
];
Array TX_S_378 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_378;
[ R_TX_S_379 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The second noun] [aren't] able to receive things.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The second noun] [aren't] able to receive things.~]
    say__p=1;! [2: the second noun]
    ParaContent(); print (The) second;! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ able to receive things.~]
    ParaContent(); print " able to receive things."; .L_Say1230; .L_SayX1197;rtrue;
];
Array TX_S_379 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_379;
[ R_TX_S_380 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [the noun] off)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [the noun] off)[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ off)~]
    ParaContent(); print " off)";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1231; .L_SayX1198;rtrue;
];
Array TX_S_380 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_380;
[ R_TX_S_381 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The second noun] [don't] seem interested.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The second noun] [don't] seem interested.~]
    say__p=1;! [2: the second noun]
    ParaContent(); print (The) second;! [3: ~ ~]
    ParaContent(); print " ";! [4: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ seem interested.~]
    ParaContent(); print " seem interested."; .L_Say1232; .L_SayX1199;rtrue;
];
Array TX_S_381 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_381;
[ R_TX_S_382 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The second noun] [are] carrying too many things already.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The second noun] [are] carrying too many things already.~]
    say__p=1;! [2: the second noun]
    ParaContent(); print (The) second;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ carrying too many things already.~]
    ParaContent(); print " carrying too many things already."; .L_Say1233; .L_SayX1200;rtrue;
];
Array TX_S_382 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_382;
[ R_TX_S_383 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [give] [the noun] to [the second noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [give] [the noun] to [the second noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: give]
    ConjugateVerb_33(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ to ~]
    ParaContent(); print " to ";! [8: the second noun]
    ParaContent(); print (the) second;! [9: ~.~]
    ParaContent(); print "."; .L_Say1234; .L_SayX1201;rtrue;
];
Array TX_S_383 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_383;
[ R_TX_S_384 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [give] [the noun] to [us].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [give] [the noun] to [us].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: give]
    ConjugateVerb_33(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ to ~]
    ParaContent(); print " to ";! [8: us]
    ParaContent(); (PHR_764_r19 ());! [9: ~.~]
    ParaContent(); print "."; .L_Say1235; .L_SayX1202;rtrue;
];
Array TX_S_384 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_384;
[ R_TX_S_385 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [give] [the noun] to [the second noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [give] [the noun] to [the second noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: give]
    ConjugateVerb_33(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ to ~]
    ParaContent(); print " to ";! [8: the second noun]
    ParaContent(); print (the) second;! [9: ~.~]
    ParaContent(); print "."; .L_Say1236; .L_SayX1203;rtrue;
];
Array TX_S_385 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_385;
[ R_TX_S_386 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] holding [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] holding [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ holding ~]
    ParaContent(); print " holding ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1237; .L_SayX1204;rtrue;
];
Array TX_S_386 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_386;
[ R_TX_S_387 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The second noun] [are] unimpressed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The second noun] [are] unimpressed.~]
    say__p=1;! [2: the second noun]
    ParaContent(); print (The) second;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ unimpressed.~]
    ParaContent(); print " unimpressed."; .L_Say1238; .L_SayX1205;rtrue;
];
Array TX_S_387 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_387;
[ R_TX_S_388 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That [seem] unnecessary.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That [seem] unnecessary.~]
    say__p=1;! [2: ~That ~]
    ParaContent(); print "That ";! [3: seem]
    ConjugateVerb_55(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ unnecessary.~]
    ParaContent(); print " unnecessary."; .L_Say1239; .L_SayX1206;rtrue;
];
Array TX_S_388 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_388;
[ R_TX_S_389 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [the noun] off)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [the noun] off)[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ off)~]
    ParaContent(); print " off)";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1240; .L_SayX1207;rtrue;
];
Array TX_S_389 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_389;
[ R_TX_S_390 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Futile.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Futile.~]
    say__p=1;! [2: ~Futile.~]
    ParaContent(); print "Futile."; .L_Say1241; .L_SayX1208;rtrue;
];
Array TX_S_390 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_390;
[ R_TX_S_391 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [lack] the nerve when it [if story tense is the past
    tense]came[otherwise]comes[end if] to the crucial moment.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [lack] the nerve when it [if story tense is the past tense]came[otherwise]comes[end if] to the crucial moment.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: lack]
    ConjugateVerb_38(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ the nerve when it ~]
    ParaContent(); print " the nerve when it ";! [6: if story tense is the past tense]

    	if (~~((((story_tense == I107_past_tense))))) jump L_Say1242;! [7: ~came~]
    ParaContent(); print "came";! [8: otherwise]

    	jump L_SayX1209; .L_Say1242;! [9: ~comes~]
    ParaContent(); print "comes";! [10: end if]

    	.L_Say1243; .L_SayX1209;! [11: ~ to the crucial moment.~]
    ParaContent(); print " to the crucial moment."; .L_Say1244; .L_SayX1210;rtrue;
];
Array TX_S_391 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_391;
[ R_TX_S_392 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Violence [aren't] the answer to this one.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Violence [aren't] the answer to this one.~]
    say__p=1;! [2: ~Violence ~]
    ParaContent(); print "Violence ";! [3: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ the answer to this one.~]
    ParaContent(); print " the answer to this one."; .L_Say1245; .L_SayX1211;rtrue;
];
Array TX_S_392 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_392;
[ R_TX_S_393 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [don't] get much from that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [don't] get much from that.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ get much from that.~]
    ParaContent(); print " get much from that."; .L_Say1246; .L_SayX1212;rtrue;
];
Array TX_S_393 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_393;
[ R_TX_S_394 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not] like that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not] like that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ like that.~]
    ParaContent(); print " like that."; .L_Say1247; .L_SayX1213;rtrue;
];
Array TX_S_394 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_394;
[ R_TX_S_395 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no reply.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no reply.~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_790_r45 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no reply.~]
    ParaContent(); print " no reply."; .L_Say1248; .L_SayX1214;rtrue;
];
Array TX_S_395 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_395;
[ R_TX_S_396 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [talk] to [ourselves] a while.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [talk] to [ourselves] a while.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: talk]
    ConjugateVerb_62(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ to ~]
    ParaContent(); print " to ";! [6: ourselves]
    ParaContent(); (PHR_766_r21 ());! [7: ~ a while.~]
    ParaContent(); print " a while."; .L_Say1249; .L_SayX1215;rtrue;
];
Array TX_S_396 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_396;
[ R_TX_S_397 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~This [provoke] no reaction.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~This [provoke] no reaction.~]
    say__p=1;! [2: ~This ~]
    ParaContent(); print "This ";! [3: provoke]
    ConjugateVerb_48(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ no reaction.~]
    ParaContent(); print " no reaction."; .L_Say1250; .L_SayX1216;rtrue;
];
Array TX_S_397 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_397;
[ R_TX_S_398 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no reply.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no reply.~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_790_r45 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no reply.~]
    ParaContent(); print " no reply."; .L_Say1251; .L_SayX1217;rtrue;
];
Array TX_S_398 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_398;
[ R_TX_S_399 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Time [pass].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Time [pass].~]
    say__p=1;! [2: ~Time ~]
    ParaContent(); print "Time ";! [3: pass]
    ConjugateVerb_46(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~.~]
    ParaContent(); print "."; .L_Say1252; .L_SayX1218;rtrue;
];
Array TX_S_399 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_399;
[ R_TX_S_400 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [wait].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [wait].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: wait]
    ConjugateVerb_65(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1253; .L_SayX1219;rtrue;
];
Array TX_S_400 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_400;
[ R_TX_S_401 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [achieve] nothing by this.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [achieve] nothing by this.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: achieve]
    ConjugateVerb_21(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing by this.~]
    ParaContent(); print " nothing by this."; .L_Say1254; .L_SayX1220;rtrue;
];
Array TX_S_401 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_401;
[ R_TX_S_402 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [touch] [themselves].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [touch] [themselves].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: touch]
    ConjugateVerb_18(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: themselves]
    ParaContent(); (PHR_785_r40 ());! [7: ~.~]
    ParaContent(); print "."; .L_Say1255; .L_SayX1221;rtrue;
];
Array TX_S_402 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_402;
[ R_TX_S_403 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not like] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not like] that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not like]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_40); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1256; .L_SayX1222;rtrue;
];
Array TX_S_403 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_403;
[ R_TX_S_404 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [touch] [us].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [touch] [us].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: touch]
    ConjugateVerb_18(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: us]
    ParaContent(); (PHR_764_r19 ());! [7: ~.~]
    ParaContent(); print "."; .L_Say1257; .L_SayX1223;rtrue;
];
Array TX_S_404 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_404;
[ R_TX_S_405 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [touch] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [touch] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: touch]
    ConjugateVerb_18(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1258; .L_SayX1224;rtrue;
];
Array TX_S_405 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_405;
[ R_TX_S_406 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [feel] nothing unexpected.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [feel] nothing unexpected.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: feel]
    ConjugateVerb_30(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing unexpected.~]
    ParaContent(); print " nothing unexpected."; .L_Say1259; .L_SayX1225;rtrue;
];
Array TX_S_406 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_406;
[ R_TX_S_407 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [touch] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [touch] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: touch]
    ConjugateVerb_18(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1260; .L_SayX1226;rtrue;
];
Array TX_S_407 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_407;
[ R_TX_S_408 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~But [we] [aren't] holding [regarding the noun][those].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~But [we] [aren't] holding [regarding the noun][those].~]
    say__p=1;! [2: ~But ~]
    ParaContent(); print "But ";! [3: we]
    ParaContent(); (PHR_763_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ holding ~]
    ParaContent(); print " holding ";! [7: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [8: those]
    ParaContent(); (PHR_773_r28 ());! [9: ~.~]
    ParaContent(); print "."; .L_Say1261; .L_SayX1227;rtrue;
];
Array TX_S_408 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_408;
[ R_TX_S_409 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [wave] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [wave] [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: wave]
    ConjugateVerb_66(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1262; .L_SayX1228;rtrue;
];
Array TX_S_409 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_409;
[ R_TX_S_410 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [wave] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [wave] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: wave]
    ConjugateVerb_66(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1263; .L_SayX1229;rtrue;
];
Array TX_S_410 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_410;
[ R_TX_S_411 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [are] fixed in place.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [are] fixed in place.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_778_r33 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ fixed in place.~]
    ParaContent(); print " fixed in place."; .L_Say1264; .L_SayX1230;rtrue;
];
Array TX_S_411 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_411;
[ R_TX_S_412 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] unable to.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] unable to.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ unable to.~]
    ParaContent(); print " unable to."; .L_Say1265; .L_SayX1231;rtrue;
];
Array TX_S_412 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_412;
[ R_TX_S_413 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not like] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not like] that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not like]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_40); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1266; .L_SayX1232;rtrue;
];
Array TX_S_413 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_413;
[ R_TX_S_414 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing obvious [happen].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing obvious [happen].~]
    say__p=1;! [2: ~Nothing obvious ~]
    ParaContent(); print "Nothing obvious ";! [3: happen]
    ConjugateVerb_35(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~.~]
    ParaContent(); print "."; .L_Say1267; .L_SayX1233;rtrue;
];
Array TX_S_414 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_414;
[ R_TX_S_415 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [pull] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [pull] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: pull]
    ConjugateVerb_49(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1268; .L_SayX1234;rtrue;
];
Array TX_S_415 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_415;
[ R_TX_S_416 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [are] fixed in place.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [are] fixed in place.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_778_r33 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ fixed in place.~]
    ParaContent(); print " fixed in place."; .L_Say1269; .L_SayX1235;rtrue;
];
Array TX_S_416 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_416;
[ R_TX_S_417 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] unable to.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] unable to.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ unable to.~]
    ParaContent(); print " unable to."; .L_Say1270; .L_SayX1236;rtrue;
];
Array TX_S_417 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_417;
[ R_TX_S_418 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not like] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not like] that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not like]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_40); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1271; .L_SayX1237;rtrue;
];
Array TX_S_418 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_418;
[ R_TX_S_419 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing obvious [happen].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing obvious [happen].~]
    say__p=1;! [2: ~Nothing obvious ~]
    ParaContent(); print "Nothing obvious ";! [3: happen]
    ConjugateVerb_35(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~.~]
    ParaContent(); print "."; .L_Say1272; .L_SayX1238;rtrue;
];
Array TX_S_419 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_419;
[ R_TX_S_420 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [push] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [push] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: push]
    ConjugateVerb_50(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1273; .L_SayX1239;rtrue;
];
Array TX_S_420 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_420;
[ R_TX_S_421 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [are] fixed in place.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [are] fixed in place.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_778_r33 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ fixed in place.~]
    ParaContent(); print " fixed in place."; .L_Say1274; .L_SayX1240;rtrue;
];
Array TX_S_421 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_421;
[ R_TX_S_422 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] unable to.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] unable to.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ unable to.~]
    ParaContent(); print " unable to."; .L_Say1275; .L_SayX1241;rtrue;
];
Array TX_S_422 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_422;
[ R_TX_S_423 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not like] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not like] that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not like]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_40); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1276; .L_SayX1242;rtrue;
];
Array TX_S_423 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_423;
[ R_TX_S_424 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing obvious [happen].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing obvious [happen].~]
    say__p=1;! [2: ~Nothing obvious ~]
    ParaContent(); print "Nothing obvious ";! [3: happen]
    ConjugateVerb_35(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~.~]
    ParaContent(); print "."; .L_Say1277; .L_SayX1243;rtrue;
];
Array TX_S_424 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_424;
[ R_TX_S_425 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [turn] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [turn] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: turn]
    ConjugateVerb_64(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1278; .L_SayX1244;rtrue;
];
Array TX_S_425 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_425;
[ R_TX_S_426 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [cannot] be pushed from place to place.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [cannot] be pushed from place to place.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ be pushed from place to place.~]
    ParaContent(); print " be pushed from place to place."; .L_Say1279; .L_SayX1245;rtrue;
];
Array TX_S_426 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_426;
[ R_TX_S_427 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [aren't] a direction.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [aren't] a direction.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_778_r33 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ a direction.~]
    ParaContent(); print " a direction."; .L_Say1280; .L_SayX1246;rtrue;
];
Array TX_S_427 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_427;
[ R_TX_S_428 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [cannot] be pushed up or down.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [cannot] be pushed up or down.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ be pushed up or down.~]
    ParaContent(); print " be pushed up or down."; .L_Say1281; .L_SayX1247;rtrue;
];
Array TX_S_428 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_428;
[ R_TX_S_429 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [cannot] be pushed from here.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [cannot] be pushed from here.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ be pushed from here.~]
    ParaContent(); print " be pushed from here."; .L_Say1282; .L_SayX1248;rtrue;
];
Array TX_S_429 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_429;
[ R_TX_S_430 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [cannot] be pushed from place to place.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [cannot] be pushed from place to place.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ be pushed from place to place.~]
    ParaContent(); print " be pushed from place to place."; .L_Say1283; .L_SayX1249;rtrue;
];
Array TX_S_430 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_430;
[ R_TX_S_431 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not like] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not like] that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not like]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_40); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1284; .L_SayX1250;rtrue;
];
Array TX_S_431 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_431;
[ R_TX_S_432 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [achieve] nothing by this.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [achieve] nothing by this.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: achieve]
    ConjugateVerb_21(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing by this.~]
    ParaContent(); print " nothing by this."; .L_Say1285; .L_SayX1251;rtrue;
];
Array TX_S_432 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_432;
[ R_TX_S_433 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [squeeze] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [squeeze] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: squeeze]
    ConjugateVerb_59(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1286; .L_SayX1252;rtrue;
];
Array TX_S_433 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_433;
[ R_TX_S_434 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That was a rhetorical question.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That was a rhetorical question.~]
    say__p=1;! [2: ~That was a rhetorical question.~]
    ParaContent(); print "That was a rhetorical question."; .L_Say1287; .L_SayX1253;rtrue;
];
Array TX_S_434 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_434;
[ R_TX_S_435 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That was a rhetorical question.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That was a rhetorical question.~]
    say__p=1;! [2: ~That was a rhetorical question.~]
    ParaContent(); print "That was a rhetorical question."; .L_Say1288; .L_SayX1254;rtrue;
];
Array TX_S_435 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_435;
[ R_TX_S_436 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~This dangerous act [would achieve] little.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~This dangerous act [would achieve] little.~]
    say__p=1;! [2: ~This dangerous act ~]
    ParaContent(); print "This dangerous act ";! [3: would achieve]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_21); say__p=1; ! [4: ~ little.~]
    ParaContent(); print " little."; .L_Say1289; .L_SayX1255;rtrue;
];
Array TX_S_436 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_436;
[ R_TX_S_437 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The dreadful truth [are], this [are not] a dream.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The dreadful truth [are], this [are not] a dream.~]
    say__p=1;! [2: ~The dreadful truth ~]
    ParaContent(); print "The dreadful truth ";! [3: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~, this ~]
    ParaContent(); print ", this ";! [5: are not]
    ConjugateVerb_0(CV_NEG, PNToVP(), story_tense); say__p=1; ! [6: ~ a dream.~]
    ParaContent(); print " a dream."; .L_Say1290; .L_SayX1256;rtrue;
];
Array TX_S_437 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_437;
[ R_TX_S_438 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~What a good idea.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~What a good idea.~]
    say__p=1;! [2: ~What a good idea.~]
    ParaContent(); print "What a good idea."; .L_Say1291; .L_SayX1257;rtrue;
];
Array TX_S_438 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_438;
[ R_TX_S_439 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [smell] nothing unexpected.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [smell] nothing unexpected.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: smell]
    ConjugateVerb_57(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing unexpected.~]
    ParaContent(); print " nothing unexpected."; .L_Say1292; .L_SayX1258;rtrue;
];
Array TX_S_439 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_439;
[ R_TX_S_440 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [sniff].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [sniff].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: sniff]
    ConjugateVerb_58(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1293; .L_SayX1259;rtrue;
];
Array TX_S_440 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_440;
[ R_TX_S_441 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [hear] nothing unexpected.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [hear] nothing unexpected.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: hear]
    ConjugateVerb_36(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing unexpected.~]
    ParaContent(); print " nothing unexpected."; .L_Say1294; .L_SayX1260;rtrue;
];
Array TX_S_441 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_441;
[ R_TX_S_442 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [listen].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [listen].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: listen]
    ConjugateVerb_41(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1295; .L_SayX1261;rtrue;
];
Array TX_S_442 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_442;
[ R_TX_S_443 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [taste] nothing unexpected.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [taste] nothing unexpected.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: taste]
    ConjugateVerb_63(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing unexpected.~]
    ParaContent(); print " nothing unexpected."; .L_Say1296; .L_SayX1262;rtrue;
];
Array TX_S_443 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_443;
[ R_TX_S_444 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [taste] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [taste] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: taste]
    ConjugateVerb_63(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1297; .L_SayX1263;rtrue;
];
Array TX_S_444 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_444;
[ R_TX_S_445 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Cutting [regarding the noun][them] up [would achieve] little.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Cutting [regarding the noun][them] up [would achieve] little.~]
    say__p=1;! [2: ~Cutting ~]
    ParaContent(); print "Cutting ";! [3: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [4: them]
    ParaContent(); (PHR_781_r36 ());! [5: ~ up ~]
    ParaContent(); print " up ";! [6: would achieve]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_21); say__p=1; ! [7: ~ little.~]
    ParaContent(); print " little."; .L_Say1298; .L_SayX1264;rtrue;
];
Array TX_S_445 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_445;
[ R_TX_S_446 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [jump] on the spot.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [jump] on the spot.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: jump]
    ConjugateVerb_37(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ on the spot.~]
    ParaContent(); print " on the spot."; .L_Say1299; .L_SayX1265;rtrue;
];
Array TX_S_446 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_446;
[ R_TX_S_447 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [jump] on the spot.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [jump] on the spot.~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: jump]
    ConjugateVerb_37(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ on the spot.~]
    ParaContent(); print " on the spot."; .L_Say1300; .L_SayX1266;rtrue;
];
Array TX_S_447 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_447;
[ R_TX_S_448 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [would achieve] nothing by this.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [would achieve] nothing by this.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: would achieve]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_21); say__p=1; ! [5: ~ nothing by this.~]
    ParaContent(); print " nothing by this."; .L_Say1301; .L_SayX1267;rtrue;
];
Array TX_S_448 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_448;
[ R_TX_S_449 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There's] nothing suitable to drink here.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There's] nothing suitable to drink here.~]
    say__p=1;! [2: there's]
    ParaContent(); (PHR_794_r49 ());! [3: ~ nothing suitable to drink here.~]
    ParaContent(); print " nothing suitable to drink here."; .L_Say1302; .L_SayX1268;rtrue;
];
Array TX_S_449 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_449;
[ R_TX_S_450 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Oh, don't [if American dialect option is
    active]apologize[otherwise]apologise[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Oh, don't [if American dialect option is active]apologize[otherwise]apologise[end if].~]
    say__p=1;! [2: ~Oh, don't ~]
    ParaContent(); print "Oh, don't ";! [3: if american dialect option is active]

    	if (~~(((((Adj_25_t1_v16(5))))))) jump L_Say1303;! [4: ~apologize~]
    ParaContent(); print "apologize";! [5: otherwise]

    	jump L_SayX1269; .L_Say1303;! [6: ~apologise~]
    ParaContent(); print "apologise";! [7: end if]

    	.L_Say1304; .L_SayX1269;! [8: ~.~]
    ParaContent(); print "."; .L_Say1305; .L_SayX1270;rtrue;
];
Array TX_S_450 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_450;
[ R_TX_S_451 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There's] nothing sensible to swing here.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There's] nothing sensible to swing here.~]
    say__p=1;! [2: there's]
    ParaContent(); (PHR_794_r49 ());! [3: ~ nothing sensible to swing here.~]
    ParaContent(); print " nothing sensible to swing here."; .L_Say1306; .L_SayX1271;rtrue;
];
Array TX_S_451 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_451;
[ R_TX_S_452 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not like] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not like] that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not like]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_40); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1307; .L_SayX1272;rtrue;
];
Array TX_S_452 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_452;
[ R_TX_S_453 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [rub] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [rub] [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: rub]
    ConjugateVerb_52(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1308; .L_SayX1273;rtrue;
];
Array TX_S_453 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_453;
[ R_TX_S_454 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [rub] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [rub] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: rub]
    ConjugateVerb_52(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1309; .L_SayX1274;rtrue;
];
Array TX_S_454 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_454;
[ R_TX_S_455 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~No, [we] [can't set] [regarding the noun][those] to anything.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~No, [we] [can't set] [regarding the noun][those] to anything.~]
    say__p=1;! [2: ~No, ~]
    ParaContent(); print "No, ";! [3: we]
    ParaContent(); (PHR_763_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: can't set]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_56); say__p=1; ! [6: ~ ~]
    ParaContent(); print " ";! [7: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [8: those]
    ParaContent(); (PHR_773_r28 ());! [9: ~ to anything.~]
    ParaContent(); print " to anything."; .L_Say1310; .L_SayX1275;rtrue;
];
Array TX_S_455 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_455;
[ R_TX_S_456 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [wave].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [wave].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: wave]
    ConjugateVerb_66(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1311; .L_SayX1276;rtrue;
];
Array TX_S_456 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_456;
[ R_TX_S_457 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [wave].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [wave].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: wave]
    ConjugateVerb_66(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1312; .L_SayX1277;rtrue;
];
Array TX_S_457 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_457;
[ R_TX_S_458 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing [are] on sale.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing [are] on sale.~]
    say__p=1;! [2: ~Nothing ~]
    ParaContent(); print "Nothing ";! [3: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ on sale.~]
    ParaContent(); print " on sale."; .L_Say1313; .L_SayX1278;rtrue;
];
Array TX_S_458 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_458;
[ R_TX_S_459 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Little [are] to be achieved by that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Little [are] to be achieved by that.~]
    say__p=1;! [2: ~Little ~]
    ParaContent(); print "Little ";! [3: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ to be achieved by that.~]
    ParaContent(); print " to be achieved by that."; .L_Say1314; .L_SayX1279;rtrue;
];
Array TX_S_459 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_459;
[ R_TX_S_460 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] feeling especially drowsy.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] feeling especially drowsy.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_768_r23 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ feeling especially drowsy.~]
    ParaContent(); print " feeling especially drowsy."; .L_Say1315; .L_SayX1280;rtrue;
];
Array TX_S_460 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_460;



Array Rel_Record_0 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "equality relation"
     RELS_TEST
     0 KD3_relation_of_values Rel_Handler_0 "is";
[ Rel_Handler_0 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == Y) rtrue; rfalse;
        default: RunTimeProblem(RTP_RELMINIMAL, task, 0, Rel_Record_0);
    }
    rfalse;
];
Array Rel_Record_1 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "provision relation"
     RELS_TEST
     0 KD4_relation_of_objects Rel_Handler_1 "provides";
[ Rel_Handler_1 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (false) rtrue; rfalse;
        default: RunTimeProblem(RTP_RELMINIMAL, task, 0, Rel_Record_1);
    }
    rfalse;
];
Array Rel_Record_3 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "universal relation"
     RELS_TEST
     0 KD4_relation_of_objects Rel_Handler_3 "relates";
[ Rel_Handler_3 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (((RlnGetF(X, RR_HANDLER))(X, RELS_TEST, Y))) rtrue; rfalse;
        default: RunTimeProblem(RTP_RELMINIMAL, task, 0, Rel_Record_3);
    }
    rfalse;
];
Array Rel_Record_5 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "meaning relation"
     RELS_TEST
     0 KD4_relation_of_objects Rel_Handler_5 "means";
[ Rel_Handler_5 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if ((BlkValueCompare(X(CV_MEANING), Y)==0)) rtrue; rfalse;
        default: RunTimeProblem(RTP_RELMINIMAL, task, 0, Rel_Record_5);
    }
    rfalse;
];
Array Rel_Record_15 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "containment relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD4_relation_of_objects Rel_Handler_15 "contains";
[ Rel_Handler_15 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == ContainerOf(Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_15(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(OBJECT_TY);
        } else {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_15(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(OBJECT_TY);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_15(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_15(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            objectloop (Z1 ofclass Object) {
                objectloop (Z3 ofclass Object) {
                    if (Rel_Handler_15(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            objectloop (Z1 ofclass Object) {
                objectloop (Z3 ofclass Object) {
                    if (Rel_Handler_15(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: MoveObject(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_17 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "support relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD5_relation_of_supporters_to_ Rel_Handler_17 "supports";
[ Rel_Handler_17 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == SupporterOf(Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK6_First: Z1: Z1=Z1.IK6_Link) {
                if (Rel_Handler_17(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_17(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK6_First: Z1: Z1=Z1.IK6_Link) {
                if (Rel_Handler_17(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_17(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK6_First: Z1: Z1=Z1.IK6_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_17(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK6_First: Z1: Z1=Z1.IK6_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_17(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: MoveObject(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_19 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "incorporation relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD6_relation_of_things Rel_Handler_19 "incorporates";
[ Rel_Handler_19 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == (Y.component_parent)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_19(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_19(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_19(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_19(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_19(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_19(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: MakePart(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_21 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "carrying relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD7_relation_of_people_to_thin Rel_Handler_21 "carries";
[ Rel_Handler_21 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == CarrierOf(Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_21(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_21(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_21(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_21(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_21(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_21(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: MoveObject(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_23 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "holding relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD7_relation_of_people_to_thin Rel_Handler_23 "holds";
[ Rel_Handler_23 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == HolderOf(Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_23(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_23(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_23(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_23(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_23(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_23(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: MoveObject(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_25 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "wearing relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD7_relation_of_people_to_thin Rel_Handler_25 "wears";
[ Rel_Handler_25 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == WearerOf(Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_25(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_25(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_25(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_25(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_25(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_25(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: WearObject(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_27 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "possession relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD4_relation_of_objects Rel_Handler_27 "has";
[ Rel_Handler_27 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == OwnerOf(Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            rfalse;
        } else {
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            rfalse;
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
        } else {
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
        } else if (Y == RLIST_ALL_Y) {
        }
        return X;
        RELS_ASSERT_TRUE: MoveObject(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_31 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "visibility relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST
     0 KD6_relation_of_things Rel_Handler_31 "can-see";
[ Rel_Handler_31 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (TestVisibility(X,Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_31(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_31(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_31(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_31(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_31(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_31(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
    }
    rfalse;
];
Array Rel_Record_33 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "touchability relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST
     0 KD6_relation_of_things Rel_Handler_33 "can-touch";
[ Rel_Handler_33 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (TestTouchability(X,Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_33(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_33(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_33(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_33(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_33(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_33(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
    }
    rfalse;
];
Array Rel_Record_35 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "concealment relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST
     0 KD6_relation_of_things Rel_Handler_35 "conceals";
[ Rel_Handler_35 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (TestConcealment(X,Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_35(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_35(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_35(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_35(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_35(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_35(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
    }
    rfalse;
];
Array Rel_Record_37 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "enclosure relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST
     0 KD4_relation_of_objects Rel_Handler_37 "encloses";
[ Rel_Handler_37 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (IndirectlyContains(X,Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_37(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(OBJECT_TY);
        } else {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_37(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(OBJECT_TY);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_37(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_37(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            objectloop (Z1 ofclass Object) {
                objectloop (Z3 ofclass Object) {
                    if (Rel_Handler_37(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            objectloop (Z1 ofclass Object) {
                objectloop (Z3 ofclass Object) {
                    if (Rel_Handler_37(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
    }
    rfalse;
];
Array Rel_Record_67 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "leading-through relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_X_UNIQUE+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_SHOW+RELS_ROUTE_FIND
     door_to KD8_relation_of_rooms_to_doors Rel_Handler_67 "Leading-through relates one room ( called the other side ) to various doors";
[ Rel_Handler_67 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == (RGuard_f0_0(Y))) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK1_First: Z1: Z1=Z1.IK1_Link) {
                if (Rel_Handler_67(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK4_First: Z1: Z1=Z1.IK4_Link) {
                if (Rel_Handler_67(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK1_First: Z1: Z1=Z1.IK1_Link) {
                if (Rel_Handler_67(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK4_First: Z1: Z1=Z1.IK4_Link) {
                if (Rel_Handler_67(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK1_First: Z1: Z1=Z1.IK1_Link) {
                for (Z3=IK4_First: Z3: Z3=Z3.IK4_Link) {
                    if (Rel_Handler_67(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK1_First: Z1: Z1=Z1.IK1_Link) {
                for (Z3=IK4_First: Z3: Z3=Z3.IK4_Link) {
                    if (Rel_Handler_67(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: (RGuard_MT_0(X,Y)); rtrue;
        RELS_ASSERT_FALSE: (RGuard_MF_0(X,Y)); rtrue;
        RELS_SHOW: Relation_RShowOtoO(rr, false); rtrue;
        RELS_EMPTY: return Relation_EmptyOtoO(rr, false, (X == 1));
        RELS_ROUTE_FIND: return OtoVRelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y);
        RELS_ROUTE_FIND_COUNT: return RelFollowVector(OtoVRelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y), X, Y);
    }
    rfalse;
];
Array Rel_Record_69 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "lock-fitting relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_X_UNIQUE+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_SHOW+RELS_ROUTE_FIND
     with_key KD6_relation_of_things Rel_Handler_69 "Lock-fitting relates one thing ( called the matching key ) to various things";
[ Rel_Handler_69 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == (RGuard_f0_1(Y))) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_69(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_69(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_69(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_69(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_69(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_69(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: (RGuard_MT_1(X,Y)); rtrue;
        RELS_ASSERT_FALSE: (RGuard_MF_1(X,Y)); rtrue;
        RELS_SHOW: Relation_RShowOtoO(rr, false); rtrue;
        RELS_EMPTY: return Relation_EmptyOtoO(rr, false, (X == 1));
        RELS_ROUTE_FIND: return OtoVRelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y);
        RELS_ROUTE_FIND_COUNT: return RelFollowVector(OtoVRelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y), X, Y);
    }
    rfalse;
];
[ CreateDynamicRelations 
    i ! loop counter
    rel ! new relation
    ;
    ];
[ RProperty obj cl pr; if (obj ofclass cl) return obj.pr; return nothing; ];
! Routines guarding leading-through(L, R)
[ RGuard_f0_0 
    X ! which is related to at most one object
    ;
    if (X ofclass K4_door) return (X.door_to);
    return nothing;
];
[ RGuard_f1_0 
    X ! which is related to at most one object
    ;
    return nothing;
];
[ RGuard_T_0 
    L ! left member of pair
    R ! right member of pair
    ;
    rfalse;
];
[ RGuard_MT_0 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K1_room) && (R ofclass K4_door)) {
        R.door_to = L; rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_67);
];
[ RGuard_MF_0 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K1_room) && (R ofclass K4_door)) {
        Relation_NowN1toV(R,door_to,L); rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_67);
];
! Routines guarding lock-fitting(L, R)
[ RGuard_f0_1 
    X ! which is related to at most one object
    ;
    if (X ofclass K2_thing) return (X.with_key);
    return nothing;
];
[ RGuard_f1_1 
    X ! which is related to at most one object
    ;
    return nothing;
];
[ RGuard_T_1 
    L ! left member of pair
    R ! right member of pair
    ;
    rfalse;
];
[ RGuard_MT_1 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K2_thing) && (R ofclass K2_thing)) {
        R.with_key = L; rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_69);
];
[ RGuard_MF_1 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K2_thing) && (R ofclass K2_thing)) {
        Relation_NowN1toV(R,with_key,L); rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_69);
];






[ Noun_Filter_0 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K3_direction));
];
[ Noun_Filter_1 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K3_direction));
];
[ Noun_Filter_2 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K3_direction));
];
[ Noun_Filter_3 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing) && ((Adj_82_t1_v10(noun))));
];
[ Noun_Filter_4 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K14_vehicle) && (noun == I302_blue_car));
];
[ Noun_Filter_5 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing) && (noun == I200_ipod));
];
[ Scope_Filter_6 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K3_direction) && (noun ofclass K3_direction)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_7 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K17_help_topic) && (noun ofclass K17_help_topic)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Chronology
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Scheme I
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Present and Past
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Chronology Point
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ChronologyPoint pt;
	for (pt=0:pt<NO_PAST_TENSE_CONDS:pt++)
		past_chronological_record-->pt = present_chronological_record-->pt;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Update Chronological Records Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ UPDATE_CHRONOLOGICAL_RECORDS_R pt;
	for (pt=0: pt<NO_PAST_TENSE_CONDS: pt++) TestSinglePastState(false, pt, true, -1);
	ChronologyPoint();
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Test Single Past State
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array PastActionsI6Routines --> 0 0;

Constant NO_PAST_TENSE_CONDS 0;
Constant NO_PAST_TENSE_ACTIONS 0;

[ TestSinglePastState 
    past_flag ! Implied call parameter
    pt ! Implied call parameter
    turn_end ! Implied call parameter
    wanted ! Implied call parameter
    old ! internal use only
    new ! internal use only
    trips ! internal use only
    consecutives ! internal use only
    ;
    if (past_flag) {
        new = (past_chronological_record-->pt) & 1;
        trips = ((past_chronological_record-->pt) & $$11111110)/2;
        consecutives = ((past_chronological_record-->pt) & $$111111100000000)/256;
    } else {
        old = (present_chronological_record-->pt) & 1;
        trips = ((present_chronological_record-->pt) & $$11111110)/2;
        consecutives = ((present_chronological_record-->pt) & $$111111100000000)/256;
        switch(pt) {
            default: print "*** No such past tense condition ***^"; new = false;
        }
        if (new) {
            if (old == false) { trips++; if (trips > 127) trips = 127; }
            if (turn_end) { consecutives++; if (consecutives > 127) consecutives = 127; }
        } else {
            consecutives = 0;
        }
        present_chronological_record-->pt = new + 2*trips + 256*consecutives;
    }
    switch(wanted) {
        0: if (new) return new;
        1: if (new) return trips;
        2: if (new) return consecutives+1; ! Plus one because we count the current turn
        4: return new;
        5: return trips;
        6: return consecutives;
    }
    return 0;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Scheme II
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Past Action Routines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Track Actions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TrackActions readjust oow i;
	for (i=0: PastActionsI6Routines-->i: i++) {
		if ((PastActionsI6Routines-->i).call()) {
			! Yes, the current action matches action pattern i:
			if (readjust) continue;
			(TimesActionHasHappened-->i)++;
			if (LastTurnActionHappenedOn-->i ~= turns + 5) {
				LastTurnActionHappenedOn-->i = turns + 5;
				ActionCurrentlyHappeningFlag->i = 1;
				if (keep_silent == false)
					(TurnsActionHasBeenHappening-->i)++;
			}
		} else {
			! No, the current action doesn't match action pattern i:
			if (oow == false) {
				if (keep_silent == false) { TurnsActionHasBeenHappening-->i = 0; }
				if (LastTurnActionHappenedOn-->i ~= turns + 5)
					ActionCurrentlyHappeningFlag->i = 0;
			}
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Storage
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array TimesActionHasHappened-->(NO_PAST_TENSE_ACTIONS+1);
Array TurnsActionHasBeenHappening-->(NO_PAST_TENSE_ACTIONS+1);
Array LastTurnActionHappenedOn-->(NO_PAST_TENSE_ACTIONS+1);
Array ActionCurrentlyHappeningFlag->(NO_PAST_TENSE_ACTIONS+1);

Array past_chronological_record-->(NO_PAST_TENSE_CONDS+1);
Array present_chronological_record-->(NO_PAST_TENSE_CONDS+1);




! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Grammar
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


[ Parse_Name_GV1 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV2 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV3 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV4 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV5 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV6 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV7 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV8 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV9 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV10 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV11 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV12 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV13 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (Cond_Token_12() == GPR_FAIL) jump Fail_1;
                if (NextWordStopped() ~= 'your') jump Fail_1;
                if (NextWordStopped() ~= 'former') jump Fail_1;
                if (NextWordStopped() ~= 'self') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
                if (Cond_Token_13() == GPR_FAIL) jump Fail_2;
                if (NextWordStopped() ~= 'my') jump Fail_2;
                if (NextWordStopped() ~= 'former') jump Fail_2;
                if (NextWordStopped() ~= 'self') jump Fail_2;
                try_from_wn = wn; f = true; continue;
                .Fail_2; wn = try_from_wn;
                if (Cond_Token_14() == GPR_FAIL) jump Fail_3;
                if (NextWordStopped() ~= 'former') jump Fail_3;
                if (NextWordStopped() ~= 'self') jump Fail_3;
                try_from_wn = wn; f = true; continue;
                .Fail_3; wn = try_from_wn;
                if (Cond_Token_15() == GPR_FAIL) jump Fail_4;
                if (NextWordStopped() ~= 'former') jump Fail_4;
                try_from_wn = wn; f = true; continue;
                .Fail_4; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV98 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV99 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV100 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV101 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV102 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV103 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV104 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV105 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV106 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV107 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV108 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV109 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV110 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                group_wn = wn;
                .group_211_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'script') jump group_211_1_2;
                jump group_211_1_end;
                .group_211_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'transcript') jump Fail_1;
                .group_211_1_end;
                group_wn = wn;
                .group_211_2_1; wn = group_wn;
                if (NextWordStopped() ~= 'on') jump group_211_2_2;
                jump group_211_2_end;
                .group_211_2_2; wn = group_wn;
                if (NextWordStopped() ~= 'off') jump Fail_1;
                .group_211_2_end;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
                group_wn = wn;
                .group_212_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'script') jump group_212_1_2;
                jump group_212_1_end;
                .group_212_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'transcript') jump Fail_2;
                .group_212_1_end;
                try_from_wn = wn; f = true; continue;
                .Fail_2; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV111 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV112 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV113 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                group_wn = wn;
                .group_213_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'put') jump group_213_1_2;
                jump group_213_1_end;
                .group_213_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'throw') jump Fail_1;
                .group_213_1_end;
                group_wn = wn;
                .group_213_2_1; wn = group_wn;
                if (NextWordStopped() ~= 'on') jump group_213_2_2;
                jump group_213_2_end;
                .group_213_2_2; wn = group_wn;
                if (NextWordStopped() ~= 'in') jump group_213_2_3;
                jump group_213_2_end;
                .group_213_2_3; wn = group_wn;
                if (NextWordStopped() ~= 'onto') jump group_213_2_4;
                jump group_213_2_end;
                .group_213_2_4; wn = group_wn;
                if (NextWordStopped() ~= 'into') jump group_213_2_5;
                jump group_213_2_end;
                .group_213_2_5; wn = group_wn;
                if (NextWordStopped() ~= 'at') jump Fail_1;
                .group_213_2_end;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
                group_wn = wn;
                .group_214_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'put') jump group_214_1_2;
                jump group_214_1_end;
                .group_214_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'throw') jump Fail_2;
                .group_214_1_end;
                try_from_wn = wn; f = true; continue;
                .Fail_2; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV114 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                group_wn = wn;
                .group_215_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'set') jump group_215_1_2;
                jump group_215_1_end;
                .group_215_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'switch') jump Fail_1;
                .group_215_1_end;
                group_wn = wn;
                .group_215_2_1; wn = group_wn;
                if (NextWordStopped() ~= 'on') jump group_215_2_2;
                jump group_215_2_end;
                .group_215_2_2; wn = group_wn;
                if (NextWordStopped() ~= 'off') jump group_215_2_3;
                jump group_215_2_end;
                .group_215_2_3; wn = group_wn;
                if (NextWordStopped() ~= 'to') jump Fail_1;
                .group_215_2_end;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
                if (NextWordStopped() ~= 'turn') jump Fail_2;
                group_wn = wn;
                .group_216_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'on') jump group_216_1_2;
                jump group_216_1_end;
                .group_216_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'off') jump group_216_1_3;
                jump group_216_1_end;
                .group_216_1_3; wn = group_wn;
                if (NextWordStopped() ~= 'to') jump Fail_2;
                .group_216_1_end;
                try_from_wn = wn; f = true; continue;
                .Fail_2; wn = try_from_wn;
                group_wn = wn;
                .group_217_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'set') jump group_217_1_2;
                jump group_217_1_end;
                .group_217_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'switch') jump Fail_3;
                .group_217_1_end;
                try_from_wn = wn; f = true; continue;
                .Fail_3; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV115 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'get') jump Fail_1;
                group_wn = wn;
                .group_218_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'out') jump group_218_1_2;
                jump group_218_1_end;
                .group_218_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'off') jump Fail_1;
                .group_218_1_end;
                if (NextWordStopped() ~= 'of') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
                group_wn = wn;
                .group_219_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'sit') jump group_219_1_2;
                jump group_219_1_end;
                .group_219_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'climb') jump Fail_2;
                .group_219_1_end;
                group_wn = wn;
                .group_219_2_1; wn = group_wn;
                if (NextWordStopped() ~= 'on') jump group_219_2_2;
                jump group_219_2_end;
                .group_219_2_2; wn = group_wn;
                if (NextWordStopped() ~= 'in') jump group_219_2_3;
                jump group_219_2_end;
                .group_219_2_3; wn = group_wn;
                if (NextWordStopped() ~= 'onto') jump group_219_2_4;
                jump group_219_2_end;
                .group_219_2_4; wn = group_wn;
                if (NextWordStopped() ~= 'into') jump Fail_2;
                .group_219_2_end;
                try_from_wn = wn; f = true; continue;
                .Fail_2; wn = try_from_wn;
                if (NextWordStopped() ~= 'get') jump Fail_3;
                group_wn = wn;
                .group_220_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'in') jump group_220_1_2;
                jump group_220_1_end;
                .group_220_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'out') jump group_220_1_3;
                jump group_220_1_end;
                .group_220_1_3; wn = group_wn;
                if (NextWordStopped() ~= 'off') jump group_220_1_4;
                jump group_220_1_end;
                .group_220_1_4; wn = group_wn;
                if (NextWordStopped() ~= 'on') jump Fail_3;
                .group_220_1_end;
                try_from_wn = wn; f = true; continue;
                .Fail_3; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV116 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV117 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                group_wn = wn;
                .group_221_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'lock') jump group_221_1_2;
                jump group_221_1_end;
                .group_221_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'unlock') jump Fail_1;
                .group_221_1_end;
                if (NextWordStopped() ~= 'with') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
                group_wn = wn;
                .group_222_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'lock') jump group_222_1_2;
                jump group_222_1_end;
                .group_222_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'unlock') jump Fail_2;
                .group_222_1_end;
                try_from_wn = wn; f = true; continue;
                .Fail_2; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV118 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'listen') jump Fail_1;
                if (NextWordStopped() ~= 'to') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
                group_wn = wn;
                .group_224_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'touch') jump group_224_1_2;
                jump group_224_1_end;
                .group_224_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'smell') jump group_224_1_3;
                jump group_224_1_end;
                .group_224_1_3; wn = group_wn;
                if (NextWordStopped() ~= 'listen') jump group_224_1_4;
                jump group_224_1_end;
                .group_224_1_4; wn = group_wn;
                if (NextWordStopped() ~= 'hear') jump group_224_1_5;
                jump group_224_1_end;
                .group_224_1_5; wn = group_wn;
                if (NextWordStopped() ~= 'taste') jump Fail_2;
                .group_224_1_end;
                try_from_wn = wn; f = true; continue;
                .Fail_2; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV119 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV120 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'take') jump Fail_1;
                if (NextWordStopped() ~= 'off') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV121 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                group_wn = wn;
                .group_226_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'look') jump group_226_1_2;
                jump group_226_1_end;
                .group_226_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'l//') jump Fail_1;
                .group_226_1_end;
                group_wn = wn;
                .group_226_2_1; wn = group_wn;
                if (NextWordStopped() ~= 'in') jump group_226_2_2;
                jump group_226_2_end;
                .group_226_2_2; wn = group_wn;
                if (NextWordStopped() ~= 'under') jump group_226_2_3;
                jump group_226_2_end;
                .group_226_2_3; wn = group_wn;
                if (NextWordStopped() ~= 'through') jump group_226_2_4;
                jump group_226_2_end;
                .group_226_2_4; wn = group_wn;
                if (NextWordStopped() ~= 'behind') jump Fail_1;
                .group_226_2_end;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV122 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                group_wn = wn;
                .group_227_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'break') jump group_227_1_2;
                jump group_227_1_end;
                .group_227_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'cut') jump group_227_1_3;
                jump group_227_1_end;
                .group_227_1_3; wn = group_wn;
                if (NextWordStopped() ~= 'crush') jump group_227_1_4;
                jump group_227_1_end;
                .group_227_1_4; wn = group_wn;
                if (NextWordStopped() ~= 'attack') jump group_227_1_5;
                jump group_227_1_end;
                .group_227_1_5; wn = group_wn;
                if (NextWordStopped() ~= 'hit') jump group_227_1_6;
                jump group_227_1_end;
                .group_227_1_6; wn = group_wn;
                if (NextWordStopped() ~= 'stab') jump Fail_1;
                .group_227_1_end;
                if (NextWordStopped() ~= 'with') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
                group_wn = wn;
                .group_228_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'break') jump group_228_1_2;
                jump group_228_1_end;
                .group_228_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'cut') jump group_228_1_3;
                jump group_228_1_end;
                .group_228_1_3; wn = group_wn;
                if (NextWordStopped() ~= 'crush') jump group_228_1_4;
                jump group_228_1_end;
                .group_228_1_4; wn = group_wn;
                if (NextWordStopped() ~= 'attack') jump group_228_1_5;
                jump group_228_1_end;
                .group_228_1_5; wn = group_wn;
                if (NextWordStopped() ~= 'hit') jump group_228_1_6;
                jump group_228_1_end;
                .group_228_1_6; wn = group_wn;
                if (NextWordStopped() ~= 'stab') jump Fail_2;
                .group_228_1_end;
                try_from_wn = wn; f = true; continue;
                .Fail_2; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV123 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV124 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV125 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV126 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV127 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV128 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV129 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV130 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'talk') jump Fail_1;
                if (NextWordStopped() ~= 'to') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV131 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'ask') jump Fail_1;
                if (NextWordStopped() ~= 'about') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
                if (NextWordStopped() ~= 'ask') jump Fail_2;
                if (NextWordStopped() ~= 'for') jump Fail_2;
                try_from_wn = wn; f = true; continue;
                .Fail_2; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV132 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'tell') jump Fail_1;
                if (NextWordStopped() ~= 'about') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV133 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'say') jump Fail_1;
                if (NextWordStopped() ~= 'to') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV134 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'give') jump Fail_1;
                if (NextWordStopped() ~= 'to') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV135 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'show') jump Fail_1;
                if (NextWordStopped() ~= 'to') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV136 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV137 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV138 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV139 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV140 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV141 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'more') jump Fail_1;
                if (NextWordStopped() ~= 'bread') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
                if (NextWordStopped() ~= 'another') jump Fail_2;
                if (NextWordStopped() ~= 'slice') jump Fail_2;
                try_from_wn = wn; f = true; continue;
                .Fail_2; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV146 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'drawer') jump Fail_1;
                if (NextWordStopped() ~= '1//') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
                if (NextWordStopped() ~= 'top') jump Fail_2;
                if (NextWordStopped() ~= 'drawer') jump Fail_2;
                try_from_wn = wn; f = true; continue;
                .Fail_2; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV147 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'drawer') jump Fail_1;
                if (NextWordStopped() ~= '2//') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV148 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'drawer') jump Fail_1;
                if (NextWordStopped() ~= '3//') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV149 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'drawer') jump Fail_1;
                if (NextWordStopped() ~= '4//') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV150 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'drawer') jump Fail_1;
                if (NextWordStopped() ~= '5//') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV151 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV152 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'greenish') jump Fail_1;
                if (NextWordStopped() ~= 'liquid') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV158 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV159 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'car') jump Fail_1;
                if (NextWordStopped() ~= 'door') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
                if (Cond_Token_321() == GPR_FAIL) jump Fail_2;
                if (NextWordStopped() ~= 'door') jump Fail_2;
                try_from_wn = wn; f = true; continue;
                .Fail_2; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV160 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'car') jump Fail_1;
                if (NextWordStopped() ~= 'key') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV162 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'sticky') jump Fail_1;
                if (NextWordStopped() ~= 'note') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV165 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV167 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV168 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV171 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV172 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV173 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'innermost') jump Fail_1;
                if (NextWordStopped() ~= 'safe') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV174 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'outer') jump Fail_1;
                if (NextWordStopped() ~= 'safe') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Consult_Grammar_178 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'restart') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_179 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'restore') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_180 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'amusing') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_181 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'quit') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_182 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'undo') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_183 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'confirm') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_184 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'suit') jump Fail_1;
        if (NextWordStopped() ~= 'up') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_185 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'cancel') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_186 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'stand') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_187 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'sit') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_188 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'lie') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
Verb 'take' 'carry' 'hold'
    * 'inventory'  -> Inv
    * multi  -> Take
    * 'off' noun  -> Disrobe
    * noun 'off'  -> Disrobe
    * multiinside 'from' noun  -> Remove
    * multiinside 'off' noun  -> Remove
;
Verb 'get'
    * 'out' / 'off' / 'down' / 'up'  -> Exit
    * 'in' / 'on'  -> Enter
    * multi  -> Take
    * 'in' / 'into' / 'on' / 'onto' noun  -> Enter
    * 'off' / 'down' noun  -> GetOff
    * Mistake_Token_306 'out' 'of' noun  -> MistakeAction
    * multiinside 'from' noun  -> Remove
;
Verb 'pick'
    * 'up' multi  -> Take
    * multi 'up'  -> Take
;
Verb 'stand'
    *  -> Exit
    * 'up'  -> Exit
    * 'on' noun  -> Enter
;
Verb 'remove'
    * held  -> Disrobe
    * multiinside 'from' noun  -> Remove
;
Verb 'shed' 'doff' 'disrobe'
    * held  -> Disrobe
;
Verb 'wear' 'don' 'spray'
    * held  -> Wear
;
Verb 'put' 'dip'
    * 'on' held  -> Wear
    * held 'on'  -> Wear
    * 'down' multiheld  -> Drop
    * multiheld 'down'  -> Drop
    * multiexcept 'in' / 'inside' / 'into' noun  -> Insert
    * multiexcept 'on' / 'onto' noun  -> PutOn
;
Verb 'insert'
    * multiexcept 'in' / 'into' noun  -> Insert
;
Verb 'drop' 'throw' 'discard'
    * multiheld  -> Drop
    * noun 'west'  -> Drop
    * Mistake_Token_340 'mouse' 'to' 'snake'  -> MistakeAction
    * held 'at' / 'against' noun  -> ThrowAt
    * multiexcept 'in' / 'into' / 'down' noun  -> Insert
    * multiexcept 'on' / 'onto' noun  -> PutOn
    * noun 'to' 'bear'  -> Drop
;
Verb 'give' 'pay' 'offer' 'feed'
    * creature held  -> Give reverse
    * Mistake_Token_339 'mouse' 'to' 'snake'  -> MistakeAction
    * Mistake_Token_341 'mouse' 'to' 'snake'  -> MistakeAction
    * held 'to' creature  -> Give
;
Verb 'show' 'present' 'display'
    * creature held  -> Show reverse
    * held 'to' creature  -> Show
;
Verb 'go' 'walk'
    *  -> Go
    * noun=Noun_Filter_0  -> Go
    * noun  -> Enter
    * Mistake_Token_326 'to' 'edge'  -> MistakeAction
    * 'into' / 'in' / 'inside' / 'through' noun  -> Enter
;
Verb 'inventory' 'i//' 'inv'
    *  -> Inv
;
Verb 'look' 'l//'
    *  -> Look
    * noun  -> Examine
    * 'at' noun  -> Examine
    * 'inside' / 'in' / 'into' / 'through' noun  -> Search
    * 'under' noun  -> LookUnder
    * 'up' topic 'in' noun  -> Consult reverse
;
Verb 'consult'
    * noun 'on' / 'about' topic  -> Consult
;
Verb 'open' 'unwrap' 'uncover'
    * noun  -> Open
    * noun 'with' held  -> Unlock
;
Verb 'close' 'shut' 'cover'
    * noun  -> Close
    * 'up' noun  -> Close
    * 'off' noun  -> SwitchOff
;
Verb 'enter' 'cross'
    *  -> Enter
    * noun  -> Enter
;
Verb 'sit'
    * 'on' / 'in' / 'inside' noun  -> Enter
    * 'on' 'top' 'of' noun  -> Enter
;
Verb 'exit' 'leave' 'out'
    *  -> Exit
    * Mistake_Token_307 noun  -> MistakeAction
;
Verb 'examine' 'x//' 'watch' 'describe' 'check'
    * noun  -> Examine
;
Verb 'read'
    * noun  -> Examine
    * 'about' topic 'in' noun  -> Consult reverse
    * topic 'in' noun  -> Consult reverse
;
Verb 'yes' 'y//'
    *  -> Yes
;
Verb 'no'
    *  -> No
;
Verb 'sorry'
    *  -> Sorry
;
Verb 'search'
    * noun  -> Search
;
Verb 'wave'
    *  -> WaveHands
    * noun  -> Wave
;
Verb 'set' 'adjust'
    * noun 'to' topic  -> SetTo
;
Verb 'pull' 'drag'
    * noun  -> Pull
    * 'out' noun  -> Open
;
Verb 'push' 'move' 'shift' 'clear' 'press'
    * noun  -> Push
    * noun noun=Noun_Filter_1  -> PushDir
    * noun 'to' noun=Noun_Filter_2  -> PushDir
;
Verb 'turn' 'rotate' 'twist' 'unscrew' 'screw'
    * noun  -> Turn
    * noun 'on'  -> SwitchOn
    * 'on' noun  -> SwitchOn
    * noun 'off'  -> SwitchOff
    * 'off' noun  -> SwitchOff
;
Verb 'switch'
    * noun=Noun_Filter_3  -> SwitchOff
    * noun  -> SwitchOn
    * 'on' noun  -> SwitchOn
    * noun 'on'  -> SwitchOn
    * noun 'off'  -> SwitchOff
    * 'off' noun  -> SwitchOff
;
Verb 'lock'
    * noun 'with' held  -> Lock
;
Verb 'unlock'
    * noun=Noun_Filter_4  -> Open
    * noun 'with' held  -> Unlock
;
Verb 'attack' 'break' 'smash' 'hit' 'fight' 'torture' 'wreck' 'crack' 'destroy' 'murder' 'kill' 'punch' 'thump' 'poke'
    * noun  -> Attack
;
Verb 'wait' 'z//'
    *  -> Wait
;
Verb 'answer' 'say' 'shout' 'speak'
    * topic 'to' creature  -> Answer reverse
;
Verb 'tell'
    * creature 'about' topic  -> Tell
;
Verb 'ask'
    * creature 'for' noun  -> AskFor
    * creature 'about' topic  -> Ask
;
Verb 'eat'
    * held  -> Eat
;
Verb 'sleep' 'nap'
    *  -> Sleep
;
Verb 'climb' 'scale'
    * 'up' / 'upward' / 'upwards' / 'higher'  -> A94_going_up
    * 'down' / 'downward' / 'downwards' / 'lower'  -> A95_going_down
    * noun  -> Climb
    * 'up' / 'over' noun  -> Climb
;
Verb 'buy' 'purchase'
    * noun  -> Buy
;
Verb 'squeeze' 'squash'
    * noun  -> Squeeze
;
Verb 'swing'
    * noun  -> Swing
    * 'on' noun  -> Swing
;
Verb 'wake' 'awake' 'awaken'
    *  -> Wake
    * 'up'  -> Wake
    * creature  -> WakeOther
    * creature 'up'  -> WakeOther
    * 'up' creature  -> WakeOther
;
Verb 'kiss' 'embrace' 'hug'
    * creature  -> Kiss
;
Verb 'think'
    *  -> Think
;
Verb 'smell' 'sniff'
    *  -> Smell
    * noun  -> Smell
;
Verb 'listen'
    *  -> Listen
    * 'to' noun  -> Listen
;
Verb 'hear'
    * noun  -> Listen
;
Verb 'taste'
    * noun  -> Taste
;
Verb 'touch' 'feel'
    * noun  -> Touch
;
Verb 'rub' 'shine' 'polish' 'sweep' 'clean' 'dust' 'wipe' 'scrub'
    * noun  -> Rub
;
Verb 'tie' 'attach' 'fasten'
    * noun  -> A91_lacing
    * noun 'to' noun  -> Tie
;
Verb 'burn' 'light'
    * noun  -> Burn
;
Verb 'drink' 'swallow' 'sip'
    * noun  -> Drink
;
Verb 'cut' 'slice' 'prune' 'chop'
    * noun  -> Cut
;
Verb 'jump' 'skip' 'hop'
    *  -> Jump
;
Verb 'score'
    *  -> Score
;
Verb 'quit'
    *  -> Quit
;
Verb 'q//'
    *  -> Quit
;
Verb 'save'
    *  -> Save
;
Verb 'restart'
    *  -> Restart
;
Verb 'restore'
    *  -> Restore
;
Verb 'verify'
    *  -> Verify
;
Verb 'version'
    *  -> Version
;
Verb 'script'
    *  -> ScriptOn
    * 'on'  -> ScriptOn
    * 'off'  -> ScriptOff
;
Verb 'transcript'
    *  -> ScriptOn
    * 'on'  -> ScriptOn
    * 'off'  -> ScriptOff
;
Verb 'superbrief'
    *  -> LMode3
;
Verb 'short'
    *  -> LMode3
;
Verb 'verbose'
    *  -> LMode2
;
Verb 'long'
    *  -> LMode2
;
Verb 'brief'
    *  -> LMode1
;
Verb 'normal'
    *  -> LMode1
;
Verb 'nouns'
    *  -> Pronouns
;
Verb 'pronouns'
    *  -> Pronouns
;
Verb 'notify'
    *  -> NotifyOn
    * 'on'  -> NotifyOn
    * 'off'  -> NotifyOff
;
Verb 'dump'
    * noun  -> A77_dumping
    * noun 'out'  -> A77_dumping
    * 'out' noun  -> A77_dumping
    * noun 'in' 'tub'  -> A77_dumping
;
Verb 'pour'
    * noun  -> A77_dumping
    * 'out' noun  -> A77_dumping
;
Verb 'use'
    * noun  -> A78_using
    * Mistake_Token_288 'fork' 'on' 'toaster'  -> MistakeAction
    * Mistake_Token_297 'earbuds' 'with' 'ipod'  -> MistakeAction
    * Mistake_Token_298 'ipod' 'with' 'earbuds'  -> MistakeAction
;
Verb 'play'
    * noun=Noun_Filter_5  -> A78_using
;
Verb 'help'
    *  -> A79_bare_help_invoking
    * scope=Scope_Filter_6  -> A80_move_help_invoking
    * scope=Scope_Filter_7  -> A81_help_invoking
;
Verb 'plug'
    * noun  -> A82_plugging
    * noun 'in'  -> A82_plugging
    * 'in' noun  -> A82_plugging
    * noun 'into' 'ipod'  -> A82_plugging
    * noun 'into' 'the' 'ipod'  -> A82_plugging
;
Verb 'unplug'
    * noun  -> A83_unplugging
;
Verb 'connect'
    * noun 'to' 'ipod'  -> A82_plugging
    * noun 'to' 'the' 'ipod'  -> A82_plugging
;
Verb 'untie'
    * noun  -> A84_untieing
;
Verb 'fill'
    * Mistake_Token_319 'spaceship'  -> MistakeAction
    * Mistake_Token_311 'bucket' 'with' 'fuel' / 'water' / 'piranhas'  -> MistakeAction
    * noun 'in' noun  -> Insert
;
Verb 'fly'
    * noun  -> A85_flying
;
Verb 'suit'
    * 'up'  -> A86_suiting_up
;
Verb 'confirm'
    *  -> A87_confirming
;
Verb 'cancel'
    *  -> A88_canceling
;
Verb 'drive'
    * Mistake_Token_324 'around' 'boom' 'gates'  -> MistakeAction
    * Mistake_Token_325 'around' 'the' 'boom' 'gates'  -> MistakeAction
;
Verb 'run'
    *  -> A90_running
    * Mistake_Token_330 'e//' / 'east' / 'w//' / 'west'  -> MistakeAction
    * Mistake_Token_331 's//' / 'south'  -> MistakeAction
    * 'tracks' / 'n//' / 'north'  -> A89_running_across
    * 'across' 'tracks'  -> A89_running_across
    * 'across' 'the' 'tracks'  -> A89_running_across
;
Verb 'lace'
    * noun 'up'  -> A91_lacing
    * 'up' noun  -> A91_lacing
;
Verb 'blow'
    * 'out' noun  -> A92_blowing_out
    * noun 'out'  -> A92_blowing_out
;
Verb 'shake'
    * noun  -> A93_shaking
;
Verb 'toss'
    * noun 'west'  -> Drop
    * noun 'to' 'bear'  -> Drop
;
Verb 'xyzzy'
    *  -> A96_xyzzying
;
Verb 'plover'
    *  -> A96_xyzzying
;
Verb 'plugh'
    *  -> A97_plughing
;





#IFTRUE (0 == 1);
[ UnknownVerb; verb_wordnum = 0; return 'no.verb'; ];
[ PrintVerb v;
	if (v == 'no.verb') { print "do something to"; rtrue; }
	rfalse;
];
#Ifnot;
[ UnknownVerb; rfalse; ]; [ PrintVerb v; rfalse; ];
#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Deferred Propositions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====







! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Miscellaneous Loose Ends
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====



Constant TX_PS_309 = "#FF0000";
Constant TX_PS_301 = ">";
Constant TX_PS_223 = "A Spooky Lair";
Constant TX_PS_300 = "A beige object.";
Constant TX_PS_279 = "A big red button. Says ~TRAVEL~ on it. You guess it might mean time travel.";
Constant TX_PS_164 = "A big yellow button labelled CALL TRAIN. Next to the button is a handwritten note reading ~This button doesn't work very well. Sometimes you have to press it ten or twenty times to get it to work.~.";
Constant TX_PS_130 = "A cabinet that could hold medicine and other bathroom-related stuff. It's far enough off the ground that you can't reach it unless you're standing on something, which is annoying.";
Constant TX_PS_70 = "A cabinet with a top, middle, and bottom drawer.";
Constant TX_PS_132 = "A can of hair gel. You can put it on. There's a warning on the gel that says ~EXTREMELY FLAMMABLE~.";
Constant TX_PS_277 = "A cardboard box with the words ~TIME MACHINE~ scrawled on it in sharpie. Below the words ~25 cents per 2 weeks forward~ are written a little smaller.";
Constant TX_PS_281 = "A coin slot that looks like it was ripped from an old arcade machine. Looks like it accepts only quarters. There's a note next to it that says you can put in as many quarters as you want before pressing the button.";
Constant TX_PS_158 = "A fully nutritional meal replacement. It's made of people.";
Constant TX_PS_197 = "A glowing green button labelled ON";
Constant TX_PS_178 = "A hole in the wall. You could probably go through it.";
Constant TX_PS_150 = "A house filled with so many useless gadgets the like of which you've never seen. There are tubes, filling two thirds of the room. High up on the wall there is a shelf. Taking up one entire wall of the room is an enormous amplifier.";
Constant TX_PS_229 = "A knife that looks like it might be used in a demonic ritual - or, you know, for cutting stuff.";
Constant TX_PS_224 = "A lair in which a demonic ritual might be held. There is a table with a pentagram drawn on it. It's the South end of the warehouse; the only exit is North, to the rest of the warehouse.";
Constant TX_PS_283 = "A locker labelled ~TIME SAFE - place objects in here to guarantee that they age properly while not being messed with by people wandering by or the wind while you are in the time machine.";
Constant TX_PS_146 = "A long, winding tunnel. It used to be used to extract minerals and stuff. Now, it's probably still useful for extracting other things.";
Constant TX_PS_211 = "A metal tool. On one end it has a handle that you can hold. On the other hand it has four pointy bits that you can stick into food or other things.";
Constant TX_PS_291 = "A red herring. It tells anybody who tries to decompile Unsafe that, although you're welcome to do so, we believe it's neither necessary nor particularly helpful to finish the puzzle, and there are a few other red herrings in the disassembly.";
Constant TX_PS_275 = "A room full of so much mad science, it makes you mad just to think about it. The wall is covered in chalkboards, and the chalkboards are covered in diagrams, and the diagrams are covered in labels. Maddening.";
Constant TX_PS_119 = "A small room. The study is South.";
Constant TX_PS_285 = "A smaller safe inside the bigger one, almost as big.";
Constant TX_PS_76 = "A tupperware around 12~ by 8~ by 6~ deep. It could hold lots of food. It seems to be stuck to the drawer with honey or something.";
Constant TX_PS_195 = "A very small rocket. Just big enough to carry one person to space.";
Constant TX_PS_187 = "A white metal cage that looks to have held a pet rabbit long ago.";
Constant TX_PS_215 = "Abandoned Train Station";
Constant TX_PS_175 = "Abandoned Warehouse";
Constant TX_PS_219 = "Abandoned train tracks. Maybe trains run along them sometimes? You've never seen it happen.";
Constant TX_PS_3 = "An Interactive Fiction";
Constant TX_PS_25 = "Arkansas state quarter. Minted 2003. Looks pretty new for a 2003 quarter.";
Constant TX_PS_87 = "Back Entryway";
Constant TX_PS_102 = "Backyard";
Constant TX_PS_137 = "Basement";
Constant TX_PS_126 = "Bathroom";
Constant TX_PS_56 = "Bedroom";
Constant TX_PS_101 = "Both of your running shoes, reunited.";
Constant TX_PS_4 = "Brian Chen and Jakob Weisblat";
Constant TX_PS_236 = "By the Stream";
Constant TX_PS_163 = "CALL TRAIN button";
Constant TX_PS_323 = "CANCEL";
Array TX_L_323 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_323;
Constant TX_PS_322 = "CONFIRM";
Array TX_L_322 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_322;
Constant TX_PS_73 = "Cereal crumbs";
Constant TX_PS_244 = "Clearing";
Constant TX_PS_161 = "Control Room";
Constant TX_PS_116 = "Earbuds";
Constant TX_PS_246 = "Edge of the Woods";
Constant TX_PS_264 = "Even more tree.";
Constant TX_PS_302 = "Fiction";
Constant TX_PS_205 = "Floating";
Constant TX_PS_209 = "Further Along the Road";
Constant TX_PS_151 = "Gadgets";
Constant TX_PS_105 = "Grass";
Constant TX_PS_61 = "Hall";
Constant TX_PS_148 = "House";
Constant TX_PS_268 = "Hunting Grounds";
Constant TX_PS_167 = "Hunting Lodge";
Constant TX_PS_316 = "I don't understand those words. Maybe you want to go toward wherever the boom gates are.";
Constant TX_PS_81 = "It's a blue herring. Delicious!";
Constant TX_PS_227 = "It's a candle. It's burning, the way candles do.";
Constant TX_PS_63 = "It's a key, so it presumably unlocks something. It's brown.";
Constant TX_PS_144 = "It's a key, so it presumably unlocks something. It's metal.";
Constant TX_PS_303 = "It's a puzzle";
Constant TX_PS_231 = "It's a rattlesnake. They say rattlesnakes are dangerous, but you've always thought that was silly.";
Constant TX_PS_208 = "It's a road, like what people travel on. The outskirts of town are to the East. To the North you can see a fork in the road. The stream is West. The warehouse is South.";
Constant TX_PS_84 = "It's a stool that you can stand on.";
Constant TX_PS_241 = "It's a stream of water.";
Constant TX_PS_109 = "It's a sturdy wooden desk. There's a drawer.";
Constant TX_PS_166 = "It's an old TV screen built into the wall. It's playing a PSA about train safety.";
Constant TX_PS_127 = "It's just a bathroom. The Upstairs Hall is West.";
Constant TX_PS_58 = "It's just your bed.";
Constant TX_PS_245 = "It's very clear here. The edge of the woods is to the West. A hole that leads into the abandoned warehouse is to the East. There's a stream to the North.";
Constant TX_PS_214 = "It's your car. Bluish-gray paint, steering wheel, headlights. All that.";
Constant TX_PS_111 = "Just a regular old dime. Minted 1994.";
Constant TX_PS_66 = "Kitchen";
Constant TX_PS_198 = "LAUNCH button";
Constant TX_PS_192 = "Launch Pad";
Constant TX_PS_259 = "Lower Branches of Ash Tree";
Constant TX_PS_266 = "Lower Part of Ash Tree";
Constant TX_PS_274 = "Mad Science Laboratory";
Constant TX_PS_272 = "Mad Scientist's Grand Entrance";
Constant TX_PS_149 = "Mad Scientist's House";
Constant TX_PS_261 = "Middle Branches of Ash Tree";
Constant TX_PS_255 = "Middle Branches of Elm Tree";
Constant TX_PS_262 = "More tree.";
Constant TX_PS_196 = "ON button";
Constant TX_PS_203 = "Outer Space";
Constant TX_PS_190 = "Outskirts of Town";
Constant TX_PS_44 = "Pants";
Constant TX_PS_212 = "Parking Lot";
Constant TX_PS_288 = "Pie crumbs";
Constant TX_PS_307 = "QUIT";
Constant TX_PS_304 = "RESTART";
Constant TX_PS_305 = "RESTORE a saved game";
Constant TX_PS_207 = "Road";
Constant TX_PS_141 = "Rocket fuel";
Constant TX_PS_206 = "Ruins of the Tunnel of Extraction";
Constant TX_PS_321 = "SUIT UP";
Array TX_L_321 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_321;
Constant TX_PS_51 = "Shoes you wear to work. They look professional, but you can't do as much physical activity in them.";
Constant TX_PS_180 = "Side Door";
Constant TX_PS_48 = "Socks";
Constant TX_PS_173 = "Space Center";
Constant TX_PS_179 = "Spooky Lair";
Constant TX_PS_65 = "Stairs that lead between the halls on the first and second floor of your home.";
Constant TX_PS_106 = "Study";
Constant TX_PS_156 = "Super glue";
Constant TX_PS_86 = "TOAST button";
Constant TX_PS_118 = "The Closet";
Constant TX_PS_181 = "The Garden";
Constant TX_PS_222 = "The Town Square stretches out in front of you. There are 10 or 20 unremarkable buildings that you couldn't care less about. South of you is the Mad Scientist's House. West, a hole in the wall leads into the Abandoned Warehouse. North of here, the town thins out.";
Constant TX_PS_145 = "The Tunnel of Extraction";
Constant TX_PS_233 = "The ancient cabinet seems like it could have been here for millenia.";
Constant TX_PS_289 = "The crumbs that were left behind when someone took a pie from this location.";
Constant TX_PS_138 = "The dark basement of your house. The hall is upstairs. The Tunnel of Extraction is to the West.";
Constant TX_PS_115 = "The earbuds are red.";
Constant TX_PS_253 = "The highest point of the tree. There's no more tree above. Wow, you can see so far away.";
Constant TX_PS_287 = "The innermost safe; where you are supposed to put things. It looks pretty small.";
Constant TX_PS_94 = "The key to your blue Toyota.";
Constant TX_PS_258 = "The pine tree is short. You're on top.";
Constant TX_PS_193 = "The place where rockets take off from. The rest of the Space Center is South.";
Constant TX_PS_97 = "The second floor of your house. Stairs lead down. The study is West, and the bathroom is East.";
Constant TX_PS_99 = "The shoe goes on your left foot. You only run if you're wearing this shoe and its partner.";
Constant TX_PS_92 = "The shoe goes on your right foot. You only run if you're wearing this shoe and its partner.";
Constant TX_PS_239 = "The sign says BEWARE OF PIRANHAS.";
Constant TX_PS_320 = "The snake is slithering around too fast to give it a mouse. Maybe you ought to lure it into somewhere.";
Constant TX_PS_176 = "The warehouse is old and abandoned. It is big and extends South. Not much more to say. The Road is to the North. The Tunnel of Extraction is below. There are holes in the wall to the East and West.";
Constant TX_PS_247 = "The woods start here and extend to the West. There's a clearing to the East.";
Constant TX_PS_237 = "There's a stream, making whatever sound water makes. There's also a scary warning sign. The road is to the East, and the clearing is to the South.";
Constant TX_PS_191 = "There's less town here than there is to the South. The garden is East. The space center is North. The road is West.";
Constant TX_PS_294 = "Thin metal wires. Electrons pass through.";
Constant TX_PS_252 = "Top of Ash Tree";
Constant TX_PS_265 = "Top of Elm Tree";
Constant TX_PS_257 = "Top of Pine Tree";
Constant TX_PS_221 = "Town Square";
Constant TX_PS_93 = "Toyota key";
Constant TX_PS_314 = "Try DIPping the bucket in something.";
Constant TX_PS_317 = "Try GET ON the edge";
Constant TX_PS_311 = "Try PLUGging IN the earbuds";
Constant TX_PS_315 = "Try POURing the fuel into the ship.";
Constant TX_PS_312 = "Try just typing GET OUT.";
Constant TX_PS_313 = "Try just typing LEAVE.";
Constant TX_PS_310 = "Try the verb INSERT.";
Constant TX_PS_153 = "Tubes";
Constant TX_PS_308 = "UNDO the last command";
Constant TX_PS_46 = "Underwear";
Constant TX_PS_2 = "Unsafe";
Array TX_L_2 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_2;
Constant TX_PS_263 = "Upper Branches of Ash Tree";
Constant TX_PS_267 = "Upper Part of Ash Tree";
Constant TX_PS_96 = "Upstairs Hall";
Constant TX_PS_67 = "Where food happens. The hall is to the West.";
Constant TX_PS_269 = "Where hunters hunt things, as long as it's the right season. The woods are to the North. You can head into the Hunting Lodge to the South.";
Constant TX_PS_168 = "Where hunters rest or something. One wall is covered in animal heads - a deer, a moose, a lion(!). Kinda creepy, to be honest. The exit is North.";
Constant TX_PS_162 = "Where things get controlled. The only exit is to the West.";
Constant TX_PS_107 = "Where you study. The hall is East.";
Constant TX_PS_248 = "Woods";
Constant TX_PS_52 = "Work shoes";
Constant TX_PS_324 = "You have died";
Array TX_L_324 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_324;
Constant TX_PS_217 = "You see a map detailing the station, the tracks, the road, and a little control room to the East. At the bottom right corner is the insignia for Melbourne Metro.";
Constant TX_PS_319 = "You'd fall in the road. Too dangerous.";
Constant TX_PS_318 = "You'd run into a wall!";
Constant TX_PS_260 = "You're a bit off the ground in the ash tree.";
Constant TX_PS_256 = "You're roughly half of the height of the Elm Tree.";
Constant TX_PS_103 = "Your backyard is so well-manicured that all it contains is grass and a stick. Your house is to the North.";
Constant TX_PS_174 = "Your friendly neighborhood space center. They build rockets and stuff. The outskirts of town are South, the launch pad is North.";
Constant TX_PS_42 = "Yourself";
Constant TX_PS_202 = "air";
Constant TX_PS_159 = "amplifier";
Constant TX_PS_232 = "ancient cabinet";
Constant TX_PS_9 = "animals";
Constant TX_PS_249 = "ash tree";
Constant TX_PS_95 = "back door";
Constant TX_PS_17 = "backdrops";
Constant TX_PS_133 = "bathtub";
Constant TX_PS_57 = "bed";
Constant TX_PS_53 = "belt";
Constant TX_PS_75 = "big tupperware container";
Constant TX_PS_297 = "black car";
Constant TX_PS_213 = "blue car";
Constant TX_PS_88 = "blue key";
Constant TX_PS_157 = "bottle of soylent";
Constant TX_PS_78 = "bottom drawer";
Constant TX_PS_189 = "bucket";
Constant TX_PS_243 = "bucketful of piranha-infested water";
Constant TX_PS_147 = "bucketful of rocket fuel";
Constant TX_PS_69 = "cabinet";
Constant TX_PS_186 = "cage";
Constant TX_PS_131 = "can of hair gel";
Constant TX_PS_226 = "candle";
Constant TX_PS_234 = "canister";
Constant TX_PS_16 = "canisters";
Constant TX_PS_72 = "cereal crumbs";
Constant TX_PS_120 = "chest of drawers";
Constant TX_PS_117 = "closet door";
Constant TX_PS_298 = "clothes dryer";
Constant TX_PS_89 = "coat rack";
Constant TX_PS_280 = "coin slot";
Constant TX_PS_199 = "computer";
Constant TX_PS_12 = "containers";
Constant TX_PS_170 = "deer head";
Constant TX_PS_113 = "desk drawer";
Constant TX_PS_108 = "desk";
Constant TX_PS_19 = "devices";
Constant TX_PS_110 = "dime";
Constant TX_PS_27 = "directions";
Constant TX_PS_134 = "dollop of hair gel";
Constant TX_PS_11 = "doors";
Constant TX_PS_38 = "down";
Constant TX_PS_135 = "drain";
Constant TX_PS_114 = "earbuds";
Constant TX_PS_35 = "east";
Constant TX_PS_295 = "eastern parking lot";
Constant TX_PS_220 = "edge of the platform";
Constant TX_PS_250 = "elm tree";
Constant TX_PS_136 = "faucet";
Constant TX_PS_125 = "fifth drawer";
Constant TX_PS_121 = "first drawer";
Constant TX_PS_80 = "fish";
Constant TX_PS_204 = "floating";
Constant TX_PS_183 = "flowers";
Constant TX_PS_210 = "fork";
Constant TX_PS_124 = "fourth drawer";
Constant TX_PS_299 = "front door";
Constant TX_PS_296 = "garage";
Constant TX_PS_271 = "grizzly bear";
Constant TX_PS_54 = "hat";
Constant TX_PS_201 = "helmet";
Constant TX_PS_21 = "help topic";
Constant TX_PS_22 = "help-topics";
Constant TX_PS_177 = "hole";
Constant TX_PS_270 = "hunting lodge entrance";
Constant TX_PS_60 = "iPod";
Constant TX_PS_286 = "inner safe";
Constant TX_PS_39 = "inside";
Constant TX_PS_55 = "jacket";
Constant TX_PS_142 = "key cabinet";
Constant TX_PS_160 = "laboratory";
Constant TX_PS_273 = "ladder";
Constant TX_PS_98 = "left running shoe";
Constant TX_PS_171 = "lion head";
Constant TX_PS_20 = "liquids";
Constant TX_PS_77 = "loaf of bread";
Constant TX_PS_216 = "map";
Constant TX_PS_129 = "medicine cabinet";
Constant TX_PS_7 = "men";
Constant TX_PS_10 = "mice";
Constant TX_PS_74 = "middle drawer";
Constant TX_PS_284 = "middle safe";
Constant TX_PS_128 = "mirror";
Constant TX_PS_169 = "moose head";
Constant TX_PS_235 = "mouse";
Constant TX_PS_62 = "muddy brown key";
Constant TX_PS_59 = "nightstand";
Constant TX_PS_28 = "north";
Constant TX_PS_30 = "northeast";
Constant TX_PS_31 = "northwest";
Constant TX_PS_165 = "old screen";
Constant TX_PS_40 = "outside";
Constant TX_PS_100 = "pair of running shoes";
Constant TX_PS_43 = "pants";
Constant TX_PS_6 = "people";
Constant TX_PS_82 = "pie";
Constant TX_PS_251 = "pine tree";
Constant TX_PS_85 = "play button";
Constant TX_PS_14 = "player's holdalls";
Constant TX_PS_172 = "poster";
Constant TX_PS_112 = "quarter";
Constant TX_PS_24 = "quarters";
Constant TX_PS_278 = "red button";
Constant TX_PS_290 = "red herring";
Constant TX_PS_79 = "refrigerator";
Constant TX_PS_26 = "regions";
Constant TX_PS_91 = "right running shoe";
Constant TX_PS_140 = "rocket fuel";
Constant TX_PS_188 = "roof of the Shed";
Constant TX_PS_228 = "sacrificial knife";
Constant TX_PS_122 = "second drawer";
Constant TX_PS_306 = "see some suggestions for AMUSING things to do";
Constant TX_PS_185 = "shed";
Constant TX_PS_49 = "shirt";
Constant TX_PS_23 = "slice of breads";
Constant TX_PS_143 = "small metal key";
Constant TX_PS_155 = "small tool box";
Constant TX_PS_230 = "snake";
Constant TX_PS_47 = "socks";
Constant TX_PS_32 = "south";
Constant TX_PS_33 = "southeast";
Constant TX_PS_34 = "southwest";
Constant TX_PS_194 = "spaceship";
Constant TX_PS_200 = "spacesuit";
Constant TX_PS_182 = "spigot";
Constant TX_PS_184 = "squash";
Constant TX_PS_64 = "staircase";
Constant TX_PS_104 = "stick";
Constant TX_PS_83 = "stool";
Constant TX_PS_240 = "stream";
Constant TX_PS_5 = "supporters";
Constant TX_PS_242 = "swimming piranhas";
Constant TX_PS_225 = "table";
Constant TX_PS_29 = "the";
Constant TX_PS_123 = "third drawer";
Constant TX_PS_276 = "time machine";
Constant TX_PS_282 = "time safe";
Constant TX_PS_68 = "toaster";
Constant TX_PS_154 = "tool shelf";
Constant TX_PS_71 = "top drawer";
Constant TX_PS_218 = "tracks";
Constant TX_PS_90 = "trash can";
Constant TX_PS_18 = "trees";
Constant TX_PS_152 = "tubes";
Constant TX_PS_45 = "underwear";
Constant TX_PS_37 = "up";
Constant TX_PS_139 = "vat";
Constant TX_PS_13 = "vehicles";
Constant TX_PS_238 = "warning sign";
Constant TX_PS_254 = "wasps' nest";
Constant TX_PS_36 = "west";
Constant TX_PS_293 = "wire";
Constant TX_PS_8 = "women";
Constant TX_PS_15 = "wooden drawers";
Constant TX_PS_50 = "work shoes";
Constant TX_PS_292 = "workshop";
Constant TX_PS_41 = "yourself";
Array TX_L_41 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_41;

#ifndef p0_specification; Constant p0_specification = 0; #endif;
#ifndef p1_indefinite_appearance_tex; Constant p1_indefinite_appearance_tex = 0; #endif;
#ifndef p2_variable_initial_value; Constant p2_variable_initial_value = 0; #endif;
#ifndef list_together; Constant list_together = 0; #endif;
#ifndef short_name; Constant short_name = 0; #endif;
#ifndef plural; Constant plural = 0; #endif;
#ifndef article; Constant article = 0; #endif;
#ifndef description; Constant description = 0; #endif;
#ifndef map_region; Constant map_region = 0; #endif;
#ifndef initial; Constant initial = 0; #endif;
#ifndef p10_opposite; Constant p10_opposite = 0; #endif;
#ifndef door_to; Constant door_to = 0; #endif;
#ifndef capacity; Constant capacity = 0; #endif;
#ifndef with_key; Constant with_key = 0; #endif;
#ifndef p14_adaptive_text_viewpoint; Constant p14_adaptive_text_viewpoint = 0; #endif;
#ifndef p15_game_specific_help; Constant p15_game_specific_help = 0; #endif;
#ifndef p16_its_slice_count; Constant p16_its_slice_count = 0; #endif;
#ifndef p17_its_water_level; Constant p17_its_water_level = 0; #endif;
#ifndef p18_finnickiness; Constant p18_finnickiness = 0; #endif;
#ifndef p19_branches; Constant p19_branches = 0; #endif;
#ifndef p20_use_count; Constant p20_use_count = 0; #endif;
#ifndef p21_credits; Constant p21_credits = 0; #endif;
#ifndef pluralname; Constant pluralname = 0; #endif;
#ifndef proper; Constant proper = 0; #endif;
#ifndef ambigpluralname; Constant ambigpluralname = 0; #endif;
#ifndef privately_named; Constant privately_named = 0; #endif;
#ifndef light; Constant light = 0; #endif;
#ifndef visited; Constant visited = 0; #endif;
#ifndef light; Constant light = 0; #endif;
#ifndef edible; Constant edible = 0; #endif;
#ifndef static; Constant static = 0; #endif;
#ifndef scenery; Constant scenery = 0; #endif;
#ifndef clothing; Constant clothing = 0; #endif;
#ifndef pushable; Constant pushable = 0; #endif;
#ifndef moved; Constant moved = 0; #endif;
#ifndef concealed; Constant concealed = 0; #endif;
#ifndef workflag; Constant workflag = 0; #endif;
#ifndef mentioned; Constant mentioned = 0; #endif;
#ifndef enterable; Constant enterable = 0; #endif;
#ifndef transparent; Constant transparent = 0; #endif;
#ifndef open; Constant open = 0; #endif;
#ifndef openable; Constant openable = 0; #endif;
#ifndef lockable; Constant lockable = 0; #endif;
#ifndef locked; Constant locked = 0; #endif;
#ifndef female; Constant female = 0; #endif;
#ifndef neuter; Constant neuter = 0; #endif;
#ifndef on; Constant on = 0; #endif;
#ifndef p64_recurring; Constant p64_recurring = 0; #endif;
#ifndef p66_game_available; Constant p66_game_available = 0; #endif;
#ifndef p67_playing; Constant p67_playing = 0; #endif;
#ifndef p68_wrapped; Constant p68_wrapped = 0; #endif;
#ifndef p70_toasted; Constant p70_toasted = 0; #endif;
#ifndef p71_plugged_in; Constant p71_plugged_in = 0; #endif;
#ifndef p73_done; Constant p73_done = 0; #endif;
#ifndef p74_active; Constant p74_active = 0; #endif;
#ifndef p75_tied; Constant p75_tied = 0; #endif;
#ifndef p76_connected; Constant p76_connected = 0; #endif;
#ifndef p77_plugged; Constant p77_plugged = 0; #endif;
#ifndef p78_on; Constant p78_on = 0; #endif;
#ifndef p80_tub_relevant; Constant p80_tub_relevant = 0; #endif;
#ifndef p81_hidden; Constant p81_hidden = 0; #endif;
#ifndef p82_low_on_fuel; Constant p82_low_on_fuel = 0; #endif;
#ifndef p83_waiting_for_confirmation; Constant p83_waiting_for_confirmation = 0; #endif;
#ifndef p84_broken; Constant p84_broken = 0; #endif;
#ifndef p85_disabled; Constant p85_disabled = 0; #endif;
#ifndef p86_out_of_control; Constant p86_out_of_control = 0; #endif;
#ifndef p87_stuck; Constant p87_stuck = 0; #endif;
#ifndef p88_started; Constant p88_started = 0; #endif;
#ifndef p89_ready; Constant p89_ready = 0; #endif;
#ifndef p90_examined; Constant p90_examined = 0; #endif;
#ifndef p92_laced; Constant p92_laced = 0; #endif;
#ifndef p93_urge_passed; Constant p93_urge_passed = 0; #endif;
#ifndef p94_found; Constant p94_found = 0; #endif;
#ifndef p95_accustomed; Constant p95_accustomed = 0; #endif;
#ifndef p96_asleep; Constant p96_asleep = 0; #endif;
#ifndef p98_cut; Constant p98_cut = 0; #endif;
#ifndef p100_available; Constant p100_available = 0; #endif;
#ifndef p101_aged; Constant p101_aged = 0; #endif;
#ifndef worn; Constant worn = 0; #endif;
#ifndef vector; Constant vector = 0; #endif;
#ifndef room_index; Constant room_index = 0; #endif;
#ifndef door_dir; Constant door_dir = 0; #endif;
#ifndef door_to; Constant door_to = 0; #endif;
#ifndef found_in; Constant found_in = 0; #endif;
#ifndef absent; Constant absent = 0; #endif;
#ifndef cap_short_name; Constant cap_short_name = 0; #endif;
#ifndef mark_as_room; Constant mark_as_room = 0; #endif;
#ifndef mark_as_thing; Constant mark_as_thing = 0; #endif;
#ifndef component_parent; Constant component_parent = 0; #endif;
#ifndef component_child; Constant component_child = 0; #endif;
#ifndef component_sibling; Constant component_sibling = 0; #endif;
#ifndef regional_found_in; Constant regional_found_in = 0; #endif;
#ifndef IK1_Count; Constant IK1_Count = 0; #endif;
#ifndef IK1_Link; Constant IK1_Link = 0; #endif;
#ifndef IK2_Count; Constant IK2_Count = 0; #endif;
#ifndef IK2_Link; Constant IK2_Link = 0; #endif;
#ifndef IK3_Count; Constant IK3_Count = 0; #endif;
#ifndef IK3_Link; Constant IK3_Link = 0; #endif;
#ifndef IK4_Count; Constant IK4_Count = 0; #endif;
#ifndef IK4_Link; Constant IK4_Link = 0; #endif;
#ifndef IK5_Count; Constant IK5_Count = 0; #endif;
#ifndef IK5_Link; Constant IK5_Link = 0; #endif;
#ifndef IK6_Count; Constant IK6_Count = 0; #endif;
#ifndef IK6_Link; Constant IK6_Link = 0; #endif;
#ifndef IK7_Count; Constant IK7_Count = 0; #endif;
#ifndef IK7_Link; Constant IK7_Link = 0; #endif;
#ifndef IK8_Count; Constant IK8_Count = 0; #endif;
#ifndef IK8_Link; Constant IK8_Link = 0; #endif;
#ifndef IK9_Count; Constant IK9_Count = 0; #endif;
#ifndef IK9_Link; Constant IK9_Link = 0; #endif;
#ifndef IK10_Count; Constant IK10_Count = 0; #endif;
#ifndef IK10_Link; Constant IK10_Link = 0; #endif;
#ifndef IK11_Count; Constant IK11_Count = 0; #endif;
#ifndef IK11_Link; Constant IK11_Link = 0; #endif;
#ifndef IK12_Count; Constant IK12_Count = 0; #endif;
#ifndef IK12_Link; Constant IK12_Link = 0; #endif;
#ifndef IK13_Count; Constant IK13_Count = 0; #endif;
#ifndef IK13_Link; Constant IK13_Link = 0; #endif;
#ifndef IK14_Count; Constant IK14_Count = 0; #endif;
#ifndef IK14_Link; Constant IK14_Link = 0; #endif;
#ifndef IK15_Count; Constant IK15_Count = 0; #endif;
#ifndef IK15_Link; Constant IK15_Link = 0; #endif;
#ifndef IK16_Count; Constant IK16_Count = 0; #endif;
#ifndef IK16_Link; Constant IK16_Link = 0; #endif;
#ifndef IK17_Count; Constant IK17_Count = 0; #endif;
#ifndef IK17_Link; Constant IK17_Link = 0; #endif;
#ifndef IK18_Count; Constant IK18_Count = 0; #endif;
#ifndef IK18_Link; Constant IK18_Link = 0; #endif;
#ifndef IK19_Count; Constant IK19_Count = 0; #endif;
#ifndef IK19_Link; Constant IK19_Link = 0; #endif;
#ifndef IK20_Count; Constant IK20_Count = 0; #endif;
#ifndef IK20_Link; Constant IK20_Link = 0; #endif;
#ifndef IK21_Count; Constant IK21_Count = 0; #endif;
#ifndef IK21_Link; Constant IK21_Link = 0; #endif;
#ifndef IK22_Count; Constant IK22_Count = 0; #endif;
#ifndef IK22_Link; Constant IK22_Link = 0; #endif;
#ifndef IK23_Count; Constant IK23_Count = 0; #endif;
#ifndef IK23_Link; Constant IK23_Link = 0; #endif;
#ifndef KD_Count; Constant KD_Count = 0; #endif;
#ifndef name; Constant name = 0; #endif;
#ifndef parse_name; Constant parse_name = 0; #endif;
#ifndef action_bitmap; Constant action_bitmap = 0; #endif;

#IFNDEF cap_short_name;
Constant cap_short_name = short_name;
#ENDIF;
Array I7_ST_say_one_of --> 3;
Array I7_ST_say_one_flag --> 3;
Array I7_ST_say_first_time --> 3;

Array Runtime_Quotations_Displayed --> 1;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Block Values
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifdef TARGET_ZCODE;
Constant MEMORY_HEAP_SIZE = 8192;
#ifnot;
Constant MEMORY_HEAP_SIZE = 32768;
#endif;

Array Closure_0 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Abs ! routine to call
    "abs function" ! name
;
Array Closure_1 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Root ! routine to call
    "root function" ! name
;
Array Closure_2 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    PHR_424_r12  ! routine to call
    "rsqr function" ! name
;
Array Closure_3 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Ceiling ! routine to call
    "ceiling function" ! name
;
Array Closure_4 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Floor ! routine to call
    "floor function" ! name
;
Array Closure_5 -->
    KD10_phrase_real_number_to_num ! phrase real number -> number
    REAL_NUMBER_TY_to_NUMBER_TY ! routine to call
    "int function" ! name
;
Array Closure_6 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Log ! routine to call
    "log function" ! name
;
Array Closure_7 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Exp ! routine to call
    "exp function" ! name
;
Array Closure_8 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Sin ! routine to call
    "sin function" ! name
;
Array Closure_9 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Cos ! routine to call
    "cos function" ! name
;
Array Closure_10 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Tan ! routine to call
    "tan function" ! name
;
Array Closure_11 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Arcsin ! routine to call
    "arcsin function" ! name
;
Array Closure_12 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Arccos ! routine to call
    "arccos function" ! name
;
Array Closure_13 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Arctan ! routine to call
    "arctan function" ! name
;
Array Closure_14 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Sinh ! routine to call
    "sinh function" ! name
;
Array Closure_15 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Cosh ! routine to call
    "cosh function" ! name
;
Array Closure_16 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    REAL_NUMBER_TY_Tanh ! routine to call
    "tanh function" ! name
;
Array Closure_17 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    PHR_442_r13  ! routine to call
    "arcsinh function" ! name
;
Array Closure_18 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    PHR_443_r14  ! routine to call
    "arccosh function" ! name
;
Array Closure_19 -->
    KD9_phrase_real_number_to_real ! phrase real number -> real number
    PHR_444_r15  ! routine to call
    "arctanh function" ! name
;

Array KD0_rule --> ! rule
    RULE_TY 2 ACTION_NAME_TY NIL_TY;
Array KD1_activity --> ! activity
    ACTIVITY_TY 1 NIL_TY;
Array KD2_list_of_objects --> ! list of objects
    LIST_OF_TY 1 OBJECT_TY;
Array KD3_relation_of_values --> ! relation of values
    RELATION_TY 2 VALUE_TY VALUE_TY;
Array KD4_relation_of_objects --> ! relation of objects
    RELATION_TY 2 OBJECT_TY OBJECT_TY;
Array KD5_relation_of_supporters_to_ --> ! relation of supporters to things
    RELATION_TY 2 10 10;
Array KD6_relation_of_things --> ! relation of things
    RELATION_TY 2 10 10;
Array KD7_relation_of_people_to_thin --> ! relation of people to things
    RELATION_TY 2 10 10;
Array KD8_relation_of_rooms_to_doors --> ! relation of rooms to doors
    RELATION_TY 2 10 10;
Array KD9_phrase_real_number_to_real --> ! phrase real number -> real number
    PHRASE_TY 2    REAL_NUMBER_TY;
Array KD10_phrase_real_number_to_num --> ! phrase real number -> number
    PHRASE_TY 2    NUMBER_TY;
[ DefaultValueFinder 
    K ! Implied call parameter
    ;
    return 0;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Blocks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant BLK_HEADER_N = 0;
Constant BLK_HEADER_FLAGS = 1;
Constant BLK_FLAG_MULTIPLE = $$00000001;
Constant BLK_FLAG_16_BIT   = $$00000010;
Constant BLK_FLAG_WORD     = $$00000100;
Constant BLK_FLAG_RESIDENT = $$00001000;
Constant BLK_FLAG_TRUNCMULT = $$00010000;
Constant BLK_HEADER_KOV = 1;
Constant BLK_HEADER_RCOUNT = 2;

Constant BLK_DATA_OFFSET = 3*WORDSIZE;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Multiple Blocks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant BLK_DATA_MULTI_OFFSET = BLK_DATA_OFFSET + 2*WORDSIZE;
Constant BLK_NEXT 3;
Constant BLK_PREV 4;

! Constant BLKVALUE_TRACE = 1; ! Uncomment this for debugging purposes


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: The Heap
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array Flex_Heap -> MEMORY_HEAP_SIZE + 16; ! Plus 16 to allow room for head-free-block


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Initialisation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ HeapInitialise n bsize blk2;
	blk2 = Flex_Heap + 16;
	Flex_Heap->BLK_HEADER_N = 4;
	Flex_Heap-->BLK_HEADER_KOV = 0;
	Flex_Heap-->BLK_HEADER_RCOUNT = MAX_POSITIVE_NUMBER;
	Flex_Heap->BLK_HEADER_FLAGS = BLK_FLAG_MULTIPLE;
	Flex_Heap-->BLK_NEXT = blk2;
	Flex_Heap-->BLK_PREV = NULL;
	for (bsize=1: bsize < MEMORY_HEAP_SIZE: bsize=bsize*2) n++;
	blk2->BLK_HEADER_N = n;
	blk2-->BLK_HEADER_KOV = 0;
	blk2-->BLK_HEADER_RCOUNT = 0;
	blk2->BLK_HEADER_FLAGS = BLK_FLAG_MULTIPLE;
	blk2-->BLK_NEXT = NULL;
	blk2-->BLK_PREV = Flex_Heap;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Net Free Space
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ HeapNetFreeSpace multiple txb asize;
	for (txb=Flex_Heap-->BLK_NEXT: txb~=NULL: txb=txb-->BLK_NEXT) {
		asize = asize + FlexSize(txb);
		if (multiple) asize = asize - BLK_DATA_MULTI_OFFSET;
		else asize = asize - BLK_DATA_OFFSET;
	}
	return asize;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Make Space
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant SMALLEST_BLK_WORTH_ALLOCATING = 12; ! i.e. 2^12 = 4096 bytes

[ HeapMakeSpace size multiple  newblocksize newblock B n;
	for (::) {
		if (multiple) {
			if (HeapNetFreeSpace(multiple) >= size) rtrue;
		} else {
			if (HeapLargestFreeBlock(0) >= size) rtrue;
		}
		newblocksize = 1;
		for (n=0: (n<SMALLEST_BLK_WORTH_ALLOCATING) || (newblocksize<size): n++)
			newblocksize = newblocksize*2;
		while (newblocksize < size+16) newblocksize = newblocksize*2;
		newblock = VM_AllocateMemory(newblocksize);
		if (newblock == 0) rfalse;
		newblock->BLK_HEADER_N = n;
		newblock-->BLK_HEADER_KOV = 0;
		newblock-->BLK_HEADER_RCOUNT = 0;
		newblock->BLK_HEADER_FLAGS = BLK_FLAG_MULTIPLE;
		newblock-->BLK_NEXT = NULL;
		newblock-->BLK_PREV = NULL;
		for (B = Flex_Heap-->BLK_NEXT:B ~= NULL:B = B-->BLK_NEXT)
			if (B-->BLK_NEXT == NULL) {
				B-->BLK_NEXT = newblock;
				newblock-->BLK_PREV = B;
				jump Linked;
			}
		Flex_Heap-->BLK_NEXT = newblock;
		newblock-->BLK_PREV = Flex_Heap;
		.Linked; ;
		#ifdef BLKVALUE_TRACE;
		print "Increasing heap to free space map: "; FlexDebugDecomposition(Flex_Heap, 0);
		#endif;
	}
	rtrue;
];

[ HeapLargestFreeBlock multiple txb asize best;
	best = 0;
	for (txb=Flex_Heap-->BLK_NEXT: txb~=NULL: txb=txb-->BLK_NEXT) {
		asize = FlexSize(txb);
		if (multiple) asize = asize - BLK_DATA_MULTI_OFFSET;
		else asize = asize - BLK_DATA_OFFSET;
		if (asize > best) best = asize;
	}
	return best;
];

[ HeapDebug full;
	if (full) {
		print "Managing a heap of initially ", MEMORY_HEAP_SIZE+16, " bytes.^";
		print HeapNetFreeSpace(false), " bytes currently free.^";
		print "Free space decomposition: "; FlexDebugDecomposition(Flex_Heap);
		print "Free space map: "; FlexDebug(Flex_Heap);
	} else {
		print HeapNetFreeSpace(false), " of ", MEMORY_HEAP_SIZE+16, " bytes free.^";
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Block Allocation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexAllocate size kov flags
	dsize n m free_block min_m max_m smallest_oversized_block secondhalf i hsize head tail;
	
	if (HeapMakeSpace(size, flags & BLK_FLAG_MULTIPLE) == false) FlexError("ran out");

	! Calculate the header size for a block of this KOV
	if (flags & BLK_FLAG_MULTIPLE) hsize = BLK_DATA_MULTI_OFFSET;
	else hsize = BLK_DATA_OFFSET;
	! Calculate the data size
	n=0; for (dsize=1: ((dsize < hsize+size) || (n<3+(WORDSIZE/2))): dsize=dsize*2) n++;

	! Seek a free block closest to the correct size, but starting from the
	! block after the fixed head-free-block, which we can't touch
	min_m = 10000; max_m = 0;
	for (free_block = Flex_Heap-->BLK_NEXT:
		free_block ~= NULL:
		free_block = free_block-->BLK_NEXT) {
		m = free_block->BLK_HEADER_N;
		! Current block the ideal size
		if (m == n) jump CorrectSizeFound;
		! Current block too large: find the smallest which is larger than needed
		if (m > n) {
			if (min_m > m) {
				min_m = m;
				smallest_oversized_block = free_block;
			}
		}
		! Current block too small: find the largest which is smaller than needed
		if (m < n) {
			if (max_m < m) {
				max_m = m;
			}
		}
	}

	if (min_m == 10000) {
		! Case I: No block is large enough to hold the entire size
		if (flags & BLK_FLAG_MULTIPLE == 0) FlexError("too fragmented");
		! Set dsize to the size in bytes if the largest block available
		for (dsize=1: max_m > 0: dsize=dsize*2) max_m--;
		! Split as a head (dsize-hsize), which we can be sure fits into one block,
		! plus a tail (size-(dsize-hsize), which might be a list of blocks
		head = FlexAllocate(dsize-hsize, kov, flags);
		if (head == 0) FlexError("for head block not available");
		tail = FlexAllocate(size-(dsize-hsize), kov, flags);
		if (tail == 0) FlexError("for tail block not available");
		head-->BLK_NEXT = tail;
		tail-->BLK_PREV = head;
		return head;
	}

	! Case II: No block is the right size, but some exist which are too big
	! Set dsize to the size in bytes of the smallest oversized block
	for (dsize=1,m=1: m<=min_m: dsize=dsize*2) m++;
	free_block = smallest_oversized_block;
	while (min_m > n) {
		! Repeatedly halve free_block at the front until the two smallest
		! fragments left are the correct size: then take the frontmost
		dsize = dsize/2;
		! print "Halving size to ", dsize, "^";
		secondhalf = free_block + dsize;
		secondhalf-->BLK_NEXT = free_block-->BLK_NEXT;
		if (secondhalf-->BLK_NEXT ~= NULL)
			(secondhalf-->BLK_NEXT)-->BLK_PREV = secondhalf;
		secondhalf-->BLK_PREV = free_block;
		free_block-->BLK_NEXT = secondhalf;
		free_block->BLK_HEADER_N = (free_block->BLK_HEADER_N) - 1;
		secondhalf->BLK_HEADER_N = free_block->BLK_HEADER_N;
		secondhalf-->BLK_HEADER_KOV = free_block-->BLK_HEADER_KOV;
		secondhalf-->BLK_HEADER_RCOUNT = 0;
		secondhalf->BLK_HEADER_FLAGS = free_block->BLK_HEADER_FLAGS;
		min_m--;
	}
	
	! Once that is done, free_block points to a block which is exactly the
	! right size, so we can fall into...
	
	! Case III: There is a free block which has the correct size.
	.CorrectSizeFound;
	! Delete the free block from the double linked list of free blocks: note
	! that it cannot be the head of this list, which is fixed
	if (free_block-->BLK_NEXT == NULL) {
		! We remove final block, so previous is now final
		(free_block-->BLK_PREV)-->BLK_NEXT = NULL;
	} else {
		! We remove a middle block, so join previous to next
		(free_block-->BLK_PREV)-->BLK_NEXT = free_block-->BLK_NEXT;
		(free_block-->BLK_NEXT)-->BLK_PREV = free_block-->BLK_PREV;
	}
	free_block-->BLK_HEADER_KOV = KindAtomic(kov);
	free_block-->BLK_HEADER_RCOUNT = 1;
	free_block->BLK_HEADER_FLAGS = flags;
	if (flags & BLK_FLAG_MULTIPLE) {
		free_block-->BLK_NEXT = NULL;
		free_block-->BLK_PREV = NULL;
	}
	
	! Zero out the data bytes in the memory allocated
	for (i=hsize:i<dsize:i++) free_block->i=0;
	return free_block;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Errors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexError reason;
	print "*** Memory ", (string) reason, " ***^";
	RunTimeProblem(RTP_HEAPERROR);
	@quit;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Merging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexMergeInternal block first last pv nx;
	first = block; last = block;
	while (last-->BLK_NEXT == last+FlexSize(last))
		last = last-->BLK_NEXT;
	while ((first-->BLK_PREV + FlexSize(first-->BLK_PREV) == first) &&
		(first-->BLK_PREV ~= Flex_Heap))
		first = first-->BLK_PREV;
	pv = first-->BLK_PREV;
	nx = last-->BLK_NEXT;
	#ifdef BLKVALUE_TRACE;
	print "Merging: "; FlexDebugDecomposition(pv-->BLK_NEXT, nx); print "^";
	#endif;
	if (FlexRecutInternal(first, last)) {
		#ifdef BLKVALUE_TRACE;
		print " --> "; FlexDebugDecomposition(pv-->BLK_NEXT, nx); print "^";
		#endif;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Recutting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexRecutInternal first last tsize backsize mfrom mto bnext backend n dsize fine_so_far;
	if (first == last) rfalse;
	mfrom = first; mto = last + FlexSize(last);
	bnext = last-->BLK_NEXT;
	fine_so_far = true;
	for (:mto>mfrom: mto = mto - backsize) {
		for (n=0, backsize=1: backsize*2 <= mto-mfrom: n++) backsize=backsize*2;
		if ((fine_so_far) && (backsize == FlexSize(last))) {
			bnext = last; last = last-->BLK_PREV;
			bnext-->BLK_PREV = last;
			last-->BLK_NEXT = bnext;
			continue;
		}
		fine_so_far = false; ! From this point, "last" is meaningless
		backend = mto - backsize;
		backend->BLK_HEADER_N = n;
		backend-->BLK_HEADER_KOV = 0;
		backend-->BLK_HEADER_RCOUNT = 0;
		backend->BLK_HEADER_FLAGS = BLK_FLAG_MULTIPLE;
		backend-->BLK_NEXT = bnext;
		if (bnext ~= NULL) {
			bnext-->BLK_PREV = backend;
			bnext = backend;
		}
	}
	if (fine_so_far) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Deallocation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexFree block fromtxb ptxb;
	if (block == 0) return;
	if ((block->BLK_HEADER_FLAGS) & BLK_FLAG_RESIDENT) return;
	if ((block->BLK_HEADER_N) & $80) return; ! not a flexible block at all
	if ((block->BLK_HEADER_FLAGS) & BLK_FLAG_MULTIPLE) {
		if (block-->BLK_PREV ~= NULL) (block-->BLK_PREV)-->BLK_NEXT = NULL;
		fromtxb = block;
		for (:(block-->BLK_NEXT)~=NULL:block = block-->BLK_NEXT) ;
		while (block ~= fromtxb) {
			ptxb = block-->BLK_PREV; FlexFreeSingleBlockInternal(block); block = ptxb;
		}
	}
	FlexFreeSingleBlockInternal(block);
];

[ FlexFreeSingleBlockInternal block free nx;
	block-->BLK_HEADER_KOV = 0;
	block-->BLK_HEADER_RCOUNT = 0;
	block->BLK_HEADER_FLAGS = BLK_FLAG_MULTIPLE;
	for (free = Flex_Heap:free ~= NULL:free = free-->BLK_NEXT) {
		nx = free-->BLK_NEXT;
		if (nx == NULL) {
			free-->BLK_NEXT = block;
			block-->BLK_PREV = free;
			block-->BLK_NEXT = NULL;
			FlexMergeInternal(block);
			return;
		}
		if (UnsignedCompare(nx, block) == 1) {
			free-->BLK_NEXT = block;
			block-->BLK_PREV = free;
			block-->BLK_NEXT = nx;
			nx-->BLK_PREV = block;
			FlexMergeInternal(block);
			return;
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Resizing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexResize block req newsize dsize newblk kov n i otxb flags;
	if (block == 0) FlexError("failed resizing null block");
	kov = block-->BLK_HEADER_KOV;
	flags = block->BLK_HEADER_FLAGS;
	if (flags & BLK_FLAG_MULTIPLE == 0) FlexError("failed resizing inextensible block");
	otxb = block;
	newsize = req;
	for (:: block = block-->BLK_NEXT) {
		n = block->BLK_HEADER_N;
		for (dsize=1: n>0: n--) dsize = dsize*2;
		i = dsize - BLK_DATA_MULTI_OFFSET;
		newsize = newsize - i;
		if (newsize > 0) {
			if (block-->BLK_NEXT ~= NULL) continue;
			newblk = FlexAllocate(newsize, kov, flags);
			if (newblk == 0) rfalse;
			block-->BLK_NEXT = newblk;
			newblk-->BLK_PREV = block;
			return;
		}
		if (block-->BLK_NEXT ~= NULL) {
			FlexFree(block-->BLK_NEXT);
			block-->BLK_NEXT = NULL;
		}
		return;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Block Size
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexSize txb bsize n; ! Size of an individual block, including header
	if (txb == 0) return 0;
	for (bsize=1: n<txb->BLK_HEADER_N: bsize=bsize*2) n++;
	return bsize;
];

[ FlexTotalSize txb size_in_bytes; ! Combined size of multiple-blocks for a value
	if (txb == 0) return 0;
	if ((txb->BLK_HEADER_FLAGS) & BLK_FLAG_MULTIPLE == 0)
		return FlexSize(txb) - BLK_DATA_OFFSET;
	for (:txb~=NULL:txb=txb-->BLK_NEXT) {
		size_in_bytes = size_in_bytes + FlexSize(txb) - BLK_DATA_MULTI_OFFSET;
	}
	return size_in_bytes;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Debugging Routines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexDebug txb n k i bsize tot dtot kov;
	if (txb == 0) "Block never created.";
	kov = txb-->BLK_HEADER_KOV;
	print "Block ", txb, " (kov ", kov, "): ";
	for (:txb~=NULL:txb = txb-->BLK_NEXT) {
		if (k++ == 100) " ... and so on.";
		if (txb-->BLK_HEADER_KOV ~= kov)
			print "*Wrong kov=", txb-->BLK_HEADER_KOV, "* ";
		n = txb->BLK_HEADER_N;
		for (bsize=1:n>0:n--) bsize=bsize*2;
		i = bsize - BLK_DATA_OFFSET;
		dtot = dtot+i;
		tot = tot+bsize;
		print txb, "(", bsize, ") > ";
	}
	print dtot, " data in ", tot, " bytes^";
];

[ FlexDebugDecomposition from to txb pf;
	if (to==0) to = NULL;
	for (txb=from:(txb~=to) && (txb~=NULL):txb=txb-->BLK_NEXT) {
		if (pf) print "+";
		print FlexSize(txb);
		pf = true;
	}
	print "^";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Overview
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RC_INFINITY = MAX_POSITIVE_NUMBER;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Short Block Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant BLK_BVBITMAP           = $ff;

Constant BLK_BVBITMAP_LONGBLOCK = $10; ! Word 1 of SB is pointer to LB
Constant BLK_BVBITMAP_TEXT      = $20; ! BV holds a TEXT_TY value
Constant BLK_BVBITMAP_CONSTANT  = $40; ! BV holds a TEXT_TY value

#IFTRUE WORDSIZE == 4;
Constant BLK_BVBITMAP_LONGBLOCKMASK = $ffffff10;
Constant BLK_BVBITMAP_TEXTMASK      = $ffffff20;
Constant BLK_BVBITMAP_CONSTANTMASK  = $ffffff40;
#IFNOT;
Constant BLK_BVBITMAP_LONGBLOCKMASK = $ff10;
Constant BLK_BVBITMAP_TEXTMASK      = $ff20;
Constant BLK_BVBITMAP_CONSTANTMASK  = $ff40;
#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Long Block Access
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueGetLongBlock bv o;
	if (bv) {
		o = bv-->0;
		if (o == 0) return bv + WORDSIZE;
		if (o & BLK_BVBITMAP == o) {
			if (o & BLK_BVBITMAP_LONGBLOCK) return bv-->1;
			return 0;
		}
		return o;
	}
	return bv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Weak Kind
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueWeakKind bv o;
	if (bv) {
		o = bv-->0;
		if (o == 0) return bv-->(BLK_HEADER_KOV+1);
		if (o & BLK_BVBITMAP == o) {
			if (o & BLK_BVBITMAP_TEXT) return TEXT_TY;
			o = bv-->1;
		}
		return o-->BLK_HEADER_KOV;
	}
	return NIL_TY;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Reference counting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueGetRefCountPrimitive bv long_block;
	long_block = BlkValueGetLongBlock(bv);
	if (long_block) return long_block-->BLK_HEADER_RCOUNT;
	return RC_INFINITY;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Changing Reference Counts
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueIncRefCountPrimitive bv long_block refc;
	long_block = BlkValueGetLongBlock(bv);
	if (long_block) {
		refc = long_block-->BLK_HEADER_RCOUNT;
		if (refc < RC_INFINITY) long_block-->BLK_HEADER_RCOUNT = refc + 1;
	}
];

[ BlkValueDecRefCountPrimitive bv long_block refc;
	long_block = BlkValueGetLongBlock(bv);
	if (long_block) {
		refc = long_block-->BLK_HEADER_RCOUNT;
		if (refc < RC_INFINITY) {
			refc--;
			if (refc < 0) BlkValueError("reference count negative");
			long_block-->BLK_HEADER_RCOUNT = refc;
		}
		return refc;
	}
	return RC_INFINITY;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Long Block Capacity
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueLBCapacity bv  long_block array_size_in_bytes entry_size_in_bytes flags;
	long_block = BlkValueGetLongBlock(bv);
	if (long_block == 0) return 0;

	array_size_in_bytes = FlexTotalSize(long_block);

	flags = long_block->BLK_HEADER_FLAGS;
	entry_size_in_bytes = 1;
	if (flags & BLK_FLAG_16_BIT) entry_size_in_bytes = 2;
	else if (flags & BLK_FLAG_WORD) entry_size_in_bytes = WORDSIZE;

	return array_size_in_bytes / entry_size_in_bytes;
];

[ BlkValueSetLBCapacity bv new_capacity  long_block flags entry_size_in_bytes;
	if (bv == 0) rfalse;
	BlkMakeMutable(bv);
	long_block = BlkValueGetLongBlock(bv);
	if (long_block == 0) rfalse;

	flags = long_block->BLK_HEADER_FLAGS;
	entry_size_in_bytes = 1;
	if (flags & BLK_FLAG_16_BIT) entry_size_in_bytes = 2;
	else if (flags & BLK_FLAG_WORD) entry_size_in_bytes = WORDSIZE;

	FlexResize(long_block, new_capacity*entry_size_in_bytes);
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Long Block Array Access
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueRead from pos do_not_indirect
	long_block chunk_size_in_bytes header_size_in_bytes flags entry_size_in_bytes seek_byte_position;
	if (from == 0) rfalse;
	if (do_not_indirect)
		long_block = from;
	else
		long_block = BlkValueGetLongBlock(from);

	flags = long_block->BLK_HEADER_FLAGS;
	entry_size_in_bytes = 1;
	if (flags & BLK_FLAG_16_BIT) entry_size_in_bytes = 2;
	else if (flags & BLK_FLAG_WORD) entry_size_in_bytes = WORDSIZE;

	if (flags & BLK_FLAG_MULTIPLE) header_size_in_bytes = BLK_DATA_MULTI_OFFSET;
	else header_size_in_bytes = BLK_DATA_OFFSET;

	seek_byte_position = pos*entry_size_in_bytes;
	for (: long_block~=NULL: long_block=long_block-->BLK_NEXT) {
		chunk_size_in_bytes = FlexSize(long_block) - header_size_in_bytes;
		if ((seek_byte_position >= 0) && (seek_byte_position<chunk_size_in_bytes)) {
			long_block = long_block + header_size_in_bytes + seek_byte_position;
			switch(entry_size_in_bytes) {
				1: return long_block->0;
				2:	#Iftrue (WORDSIZE == 2); return long_block-->0;
					#ifnot; return (long_block->0)*256 + (long_block->1);
					#endif;
				4: return long_block-->0;
			}
		}
		seek_byte_position = seek_byte_position - chunk_size_in_bytes;
	}
	"*** BlkValueRead: reading from index out of range: ", pos, " in ", from, " ***";
];

[ BlkValueWrite to pos val do_not_indirect
	long_block chunk_size_in_bytes header_size_in_bytes flags entry_size_in_bytes seek_byte_position;
	if (to == 0) rfalse;
	if (do_not_indirect)
		long_block = to;
	else {
		BlkMakeMutable(to);
		long_block = BlkValueGetLongBlock(to);
	}

	flags = long_block->BLK_HEADER_FLAGS;
	entry_size_in_bytes = 1;
	if (flags & BLK_FLAG_16_BIT) entry_size_in_bytes = 2;
	else if (flags & BLK_FLAG_WORD) entry_size_in_bytes = WORDSIZE;

	if (flags & BLK_FLAG_MULTIPLE) header_size_in_bytes = BLK_DATA_MULTI_OFFSET;
	else header_size_in_bytes = BLK_DATA_OFFSET;

	seek_byte_position = pos*entry_size_in_bytes;
	for (:long_block~=NULL:long_block=long_block-->BLK_NEXT) {
		chunk_size_in_bytes = FlexSize(long_block) - header_size_in_bytes;
		if ((seek_byte_position >= 0) && (seek_byte_position<chunk_size_in_bytes)) {
			long_block = long_block + header_size_in_bytes + seek_byte_position;
			switch(entry_size_in_bytes) {
				1: long_block->0 = val;
				2:	#Iftrue (WORDSIZE == 2); long_block-->0 = val;
					#ifnot; long_block->0 = (val/256)%256; long_block->1 = val%256;
					#endif;
				4: long_block-->0 = val;
			}
			return;
		}
		seek_byte_position = seek_byte_position - chunk_size_in_bytes;
	}
	"*** BlkValueWrite: writing to index out of range: ", pos, " in ", to, " ***";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: First Zero Entry
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueSeekZeroEntry from
	long_block chunk_size_in_bytes header_size_in_bytes flags entry_size_in_bytes
	byte_position addr from_addr to_addr;
	if (from == 0) return -1;
	long_block = BlkValueGetLongBlock(from);

	flags = long_block->BLK_HEADER_FLAGS;
	entry_size_in_bytes = 1;
	if (flags & BLK_FLAG_16_BIT) entry_size_in_bytes = 2;
	else if (flags & BLK_FLAG_WORD) entry_size_in_bytes = WORDSIZE;

	if (flags & BLK_FLAG_MULTIPLE) header_size_in_bytes = BLK_DATA_MULTI_OFFSET;
	else header_size_in_bytes = BLK_DATA_OFFSET;

	byte_position = 0;
	for (: long_block~=NULL: long_block=long_block-->BLK_NEXT) {
		chunk_size_in_bytes = FlexSize(long_block) - header_size_in_bytes;
		from_addr = long_block + header_size_in_bytes;
		to_addr = from_addr + chunk_size_in_bytes;
		switch(entry_size_in_bytes) {
			1:
				for (addr = from_addr: addr < to_addr: addr++)
					if (addr->0 == 0)
						return byte_position + addr - from_addr;
			2:
				#iftrue (WORDSIZE == 2);
				for (addr = from_addr: addr < to_addr: addr=addr+2)
					if (addr-->0 == 0)
						return (byte_position + addr - from_addr)/2;
				#ifnot;
				for (addr = from_addr: addr < to_addr: addr=addr+2)
					if ((addr->0 == 0) && (addr->1 == 0))
						return (byte_position + addr - from_addr)/2;
				#endif;
			4:
				for (addr = from_addr: addr < to_addr: addr=addr+4)
					if (addr-->0 == 0)
						return (byte_position + addr - from_addr)/4;
		}
		byte_position = byte_position + chunk_size_in_bytes;
	}
	return -1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Mass Copy Entries
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueMassCopyEntries to_bv from_bv no_entries_to_copy
	from_long_block from_addr from_bytes_left from_header_size_in_bytes
	to_long_block to_addr to_bytes_left to_header_size_in_bytes
	bytes_to_copy flags entry_size_in_bytes min;

	BlkMakeMutable(to_bv);

	from_long_block = BlkValueGetLongBlock(from_bv);
	to_long_block = BlkValueGetLongBlock(to_bv);

	flags = from_long_block->BLK_HEADER_FLAGS;
	entry_size_in_bytes = 1;
	if (flags & BLK_FLAG_16_BIT) entry_size_in_bytes = 2;
	else if (flags & BLK_FLAG_WORD) entry_size_in_bytes = WORDSIZE;

	if ((flags & (BLK_FLAG_MULTIPLE + BLK_FLAG_TRUNCMULT)) &&
		(BlkValueSetLBCapacity(to_bv, no_entries_to_copy) == false))
		BlkValueError("copy resizing failed");

	if (flags & BLK_FLAG_MULTIPLE) from_header_size_in_bytes = BLK_DATA_MULTI_OFFSET;
	else from_header_size_in_bytes = BLK_DATA_OFFSET;
	flags = to_long_block->BLK_HEADER_FLAGS;
	if (flags & BLK_FLAG_MULTIPLE) to_header_size_in_bytes = BLK_DATA_MULTI_OFFSET;
	else to_header_size_in_bytes = BLK_DATA_OFFSET;

	from_addr = from_long_block + from_header_size_in_bytes;
	from_bytes_left = FlexSize(from_long_block) - from_header_size_in_bytes;
	to_addr = to_long_block + to_header_size_in_bytes;
	to_bytes_left = FlexSize(to_long_block) - to_header_size_in_bytes;

	bytes_to_copy = entry_size_in_bytes*no_entries_to_copy;
	while (true) {
		if (from_bytes_left == 0) {
			from_long_block = from_long_block-->BLK_NEXT;
			if (from_long_block == 0) BlkValueError("copy destination exhausted");
			from_addr = from_long_block + from_header_size_in_bytes;
			from_bytes_left = FlexSize(from_long_block) - from_header_size_in_bytes;
		} else if (to_bytes_left == 0) {
			to_long_block = to_long_block-->BLK_NEXT;
			if (to_long_block == 0) BlkValueError("copy source exhausted");
			to_addr = to_long_block + to_header_size_in_bytes;
			to_bytes_left = FlexSize(to_long_block) - to_header_size_in_bytes;
		} else {
			min = from_bytes_left; if (to_bytes_left < min) min = to_bytes_left;
			if (bytes_to_copy <= min) {
				Memcpy(to_addr, from_addr, bytes_to_copy);
				return;
			}
			Memcpy(to_addr, from_addr, min);
			bytes_to_copy = bytes_to_copy - min;
			from_addr = from_addr + min;
			from_bytes_left = from_bytes_left - min;
			to_addr = to_addr + min;
			to_bytes_left = to_bytes_left - min;
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Mass Copy From Array
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueMassCopyFromArray to_bv from_array from_entry_size no_entries_to_copy
	to_long_block to_addr to_entries_left to_header_size to_entry_size
	flags;

	BlkMakeMutable(to_bv);

	to_long_block = BlkValueGetLongBlock(to_bv);

	flags = to_long_block->BLK_HEADER_FLAGS;
	to_entry_size = 1;
	if (flags & BLK_FLAG_16_BIT) to_entry_size = 2;
	else if (flags & BLK_FLAG_WORD) to_entry_size = WORDSIZE;

	if ((flags & (BLK_FLAG_MULTIPLE + BLK_FLAG_TRUNCMULT)) &&
		(BlkValueSetLBCapacity(to_bv, no_entries_to_copy) == false))
		BlkValueError("copy resizing failed");

	if (flags & BLK_FLAG_MULTIPLE) to_header_size = BLK_DATA_MULTI_OFFSET;
	else to_header_size = BLK_DATA_OFFSET;

	to_addr = to_long_block + to_header_size;
	to_entries_left = (FlexSize(to_long_block) - to_header_size)/to_entry_size;

	while (no_entries_to_copy > to_entries_left) {
		Arrcpy(to_addr, to_entry_size, from_array, from_entry_size, to_entries_left);
		no_entries_to_copy = no_entries_to_copy - to_entries_left;
		from_array = from_array + to_entries_left*from_entry_size;
		to_long_block = to_long_block-->BLK_NEXT;
		if (to_long_block == 0) BlkValueError("copy source exhausted");
		to_addr = to_long_block + to_header_size;
		to_entries_left = (FlexSize(to_long_block) - to_header_size)/to_entry_size;
	}
	if (no_entries_to_copy > 0) {
		Arrcpy(to_addr, to_entry_size, from_array, from_entry_size, no_entries_to_copy);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: KOVS Routines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant CREATE_KOVS      = 1;
Constant CAST_KOVS        = 2;
Constant DESTROY_KOVS     = 3;
Constant MAKEMUTABLE_KOVS = 4;
Constant COPYKIND_KOVS    = 5;
Constant EXTENT_KOVS      = 6;
Constant COPYQUICK_KOVS   = 7;
Constant COPYSB_KOVS      = 8;
Constant KINDDATA_KOVS    = 9;
Constant COPY_KOVS        = 10;
Constant COMPARE_KOVS     = 11;
Constant READ_FILE_KOVS   = 12;
Constant WRITE_FILE_KOVS  = 13;
Constant HASH_KOVS        = 14;
Constant DEBUG_KOVS       = 15;

! Constant BLKVALUE_TRACE; ! Uncomment this to expose masses of tracery


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Creation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueCreate strong_kind short_block  kovs;

	kovs = KOVSupportFunction(strong_kind, "impossible allocation");
	short_block = kovs(CREATE_KOVS, strong_kind, short_block);

	#ifdef BLKVALUE_TRACE; print "Created: ", (BlkValueDebug) short_block, "^"; #endif;

	! The new value is represented in I6 as the pointer to its short block:
	return short_block;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Errors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueError reason;
	print "*** Value handling failed: ", (string) reason, " ***^";
	RunTimeProblem(RTP_HEAPERROR);
	@quit;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Short Block Allocation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueCreateSB1 short_block val;
	if (short_block == 0)
		short_block = FlexAllocate(WORDSIZE, 0, BLK_FLAG_WORD) + BLK_DATA_OFFSET;
	short_block-->0 = val;
	return short_block;
];

[ BlkValueCreateSB2 short_block val1 val2;
	if (short_block == 0)
		short_block = FlexAllocate(2*WORDSIZE, 0, BLK_FLAG_WORD) + BLK_DATA_OFFSET;
	short_block-->0 = val1; short_block-->1 = val2;
	return short_block;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Block Values On Stack
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ StackFramingInitialise;
	I7SFRAME = blockv_stack + WORDSIZE*BLOCKV_STACK_SIZE;
];

[ StackFrameCreate size new;
	new = I7SFRAME - WORDSIZE*size;
	if (new < blockv_stack) { RunTimeProblem(RTP_HEAPERROR); @quit; }
	I7SFRAME = new;
];

[ BlkValueCreateOnStack offset strong_kind;
	BlkValueCreate(strong_kind, I7SFRAME + WORDSIZE*offset);
];

[ BlkValueFreeOnStack offset;
    BlkValueFree(I7SFRAME + WORDSIZE*offset);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Freeing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueFree bv kovs d;
	if (bv == 0) return;

	! Dispose of any data in the long block
	kovs = KOVSupportFunction(BlkValueWeakKind(bv), "impossible deallocation");
	BlkValueDestroyPrimitive(bv, kovs);

	! Free any heap memory occupied by the short block
	d = bv - Flex_Heap;
	if ((d >= 0) && (d < MEMORY_HEAP_SIZE + 16))
		FlexFree(bv - BLK_DATA_OFFSET);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Quick Copy
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueQuickCopyPrimitive to_bv from_bv kovs;
	BlkValueDestroyPrimitive(to_bv, kovs);
	kovs(COPYSB_KOVS, to_bv, from_bv);
	BlkValueIncRefCountPrimitive(from_bv);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Short Block Copy
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueCopySB1 to_bv from_bv;
	to_bv-->0 = from_bv-->0;
	if (to_bv-->0 == 0) to_bv-->0 = from_bv + WORDSIZE;
];

[ BlkValueCopySB2 to_bv from_bv;
	to_bv-->0 = from_bv-->0;
	to_bv-->1 = from_bv-->1;
	if (to_bv-->1 == 0) to_bv-->1 = from_bv + 2*WORDSIZE;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Slow Copy
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueSlowCopyPrimitive to_bv from_bv kovs recycling
	k from_long_block no_entries_to_copy;
	k = kovs(KINDDATA_KOVS, to_bv, from_bv);

	from_long_block = BlkValueGetLongBlock(from_bv);
	if (from_long_block) {
		if (recycling) BlkValueRecyclePrimitive(to_bv, kovs);
		no_entries_to_copy = kovs(EXTENT_KOVS, from_bv);
		if (no_entries_to_copy == -1) no_entries_to_copy = BlkValueLBCapacity(from_bv);
		BlkValueMassCopyEntries(to_bv, from_bv, no_entries_to_copy);
!print "So to: "; BlkValueDebug(to_bv); print "^";

	}

	kovs(COPY_KOVS, to_bv, from_bv, k);
!print "Whence to: "; BlkValueDebug(to_bv); print "^";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Copy
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueCopy to_bv from_bv  to_kind from_kind kovs;
	if (to_bv == 0) BlkValueError("copy to null value");
	if (from_bv == 0) BlkValueError("copy from null value");
	if (to_bv == from_bv) return;

	#ifdef BLKVALUE_TRACE;
	print "Copy: ", (BlkValueDebug) to_bv, " to equal ", (BlkValueDebug) from_bv, "^";
	#endif;

	to_kind = BlkValueWeakKind(to_bv);
	from_kind = BlkValueWeakKind(from_bv);
	if (to_kind ~= from_kind) BlkValueError("copy incompatible kinds");

	kovs = KOVSupportFunction(to_kind, "impossible copy");
	
	if (kovs(COPYQUICK_KOVS, to_bv, from_bv))
		BlkValueQuickCopyPrimitive(to_bv, from_bv, kovs);
	else
		BlkValueSlowCopyPrimitive(to_bv, from_bv, kovs, true);

	return to_bv;
];

[ BlkValueCopyAZ to_bv from_bv;
	if (from_bv) return BlkValueCopy(to_bv, from_bv);
	return to_bv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Destruction
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueDestroyPrimitive bv kovs long_block;
	#ifdef BLKVALUE_TRACE; print "Destroying ", (BlkValueDebug) bv, "^"; #endif;
	if (BlkValueDecRefCountPrimitive(bv) == 0) {
		kovs(DESTROY_KOVS, bv);
		long_block = BlkValueGetLongBlock(bv);
		if (long_block) FlexFree(long_block);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Recycling
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueRecyclePrimitive bv kovs;
	#ifdef BLKVALUE_TRACE; print "Recycling ", (BlkValueDebug) bv, "^"; #endif;
	if (BlkValueDecRefCountPrimitive(bv) == 0) {
		kovs(DESTROY_KOVS, bv);
		BlkValueIncRefCountPrimitive(bv);
	} else {
		BlkValueCreate(BlkValueWeakKind(bv), bv);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Mutability
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkMakeMutable bv block bv_kind kovs sb_size;
	if (bv == 0) BlkValueError("tried to make null block mutable");

	if (BlkValueGetRefCountPrimitive(bv) > 1) {
		#ifdef BLKVALUE_TRACE; print "Make mutable: ", (BlkValueDebug) bv, "^"; #endif;

		BlkValueDecRefCountPrimitive(bv);

		bv_kind = BlkValueWeakKind(bv);
		kovs = KOVSupportFunction(bv_kind, "impossible mutability");

		sb_size = kovs(MAKEMUTABLE_KOVS, bv);
		if (sb_size > 0) {
			@push I7SFRAME;
			StackFrameCreate(sb_size);
			BlkValueCreateOnStack(0, bv_kind);
			kovs(COPYKIND_KOVS, I7SFRAME, bv);
			BlkValueSlowCopyPrimitive(I7SFRAME, bv, kovs, false);
			kovs(COPYSB_KOVS, bv, I7SFRAME);
			@pull I7SFRAME;
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Casting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueCast to_bv original_kind original_value  kovs;
	kovs = KOVSupportFunction(BlkValueWeakKind(to_bv), "impossible cast");
	kovs(CAST_KOVS, to_bv, original_kind, original_value);
	return to_bv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Comparison
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueCompare bv_left bv_right  kind_left kind_right kovs;
	if ((bv_left == 0) && (bv_right == 0)) return 0;
	if (bv_left == 0) return 1;
	if (bv_right == 0) return -1;

	kind_left = BlkValueWeakKind(bv_left);
	kind_right = BlkValueWeakKind(bv_right);
	if (kind_left ~= kind_right) return kind_left - kind_right;

	kovs = KOVSupportFunction(kind_left, "impossible comparison");
	return kovs(COMPARE_KOVS, bv_left, bv_right);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Hashing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GetHashValue kind value;
	if (KOVIsBlockValue(kind)) return BlkValueHash(value);
	return value;
];

[ BlkValueHash bv  bv_kind kovs;
	if (bv == 0) return 0;
	bv_kind = BlkValueWeakKind(bv);
	kovs = KOVSupportFunction(bv_kind, "impossible hashing");
	return kovs(HASH_KOVS, bv);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Serialisation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueReadFromFile bv auxf ch bv_kind  kovs;
	kovs = KOVSupportFunction(bv_kind);
	if (kovs) return kovs(READ_FILE_KOVS, bv, auxf, ch);
	rfalse;
];

[ BlkValueWriteToFile bv bv_kind  kovs;
	kovs = KOVSupportFunction(bv_kind);
	if (kovs) return kovs(WRITE_FILE_KOVS, bv);
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Debugging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueDebug bv flag refc long_block kovs;
	print "(BV";
	if (bv) {
		BlkDebugAddress(bv, flag);
		long_block = BlkValueGetLongBlock(bv);
		if (long_block) {
			if (bv-->0 == 0) print "..."; else print "-->";
			print "L"; BlkDebugAddress(long_block, flag);
			print " 2**", long_block->BLK_HEADER_N;
			refc = BlkValueGetRefCountPrimitive(bv);
			if (refc == RC_INFINITY) print " resident";
			else { print " ", refc, " ref"; if (refc ~= 1) print "s"; }
		}
		kovs = KOVSupportFunction(BlkValueWeakKind(bv));
		if (kovs) kovs(DEBUG_KOVS, bv);
	}
	print ")";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Printing Memory Addresses
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkDebugAddress addr flag d;
	if (flag) { print "###"; return; }

	d = addr - blockv_stack;
	if ((d >= 0) && (d <= WORDSIZE*BLOCKV_STACK_SIZE)) {
		print "s+", (BlkPrintHexadecimal) d;
		d = addr - I7SFRAME;
		print "=f"; if (d >= 0) print "+"; print d;
		return;
	}
	
	d = addr - Flex_Heap;
	if ((d >= 0) && (d < MEMORY_HEAP_SIZE + 16)) {
		print "h+", (BlkPrintHexadecimal) d;
		return;
	}

	print (BlkPrintHexadecimal) addr;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Hexadecimal Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkPrintHexadecimal v;
	#iftrue WORDSIZE == 4;
	if (v & $ffff0000) {
		if (v & $ff000000) {
			BlkPrintHexDigit(v / $10000000);
			BlkPrintHexDigit(v / $1000000);
		}
		BlkPrintHexDigit(v / $100000);
		BlkPrintHexDigit(v / $10000);
	}
	#endif;
	BlkPrintHexDigit(v / $1000);
	BlkPrintHexDigit(v / $100);
	BlkPrintHexDigit(v / $10);
	BlkPrintHexDigit(v);
];

[ BlkPrintHexDigit v;
	v = v & $F;
	if (v < 10) print v; else print (char) 'A' + v - 10;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Block Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant CONSTANT_PACKED_TEXT_STORAGE     = BLK_BVBITMAP_TEXT + BLK_BVBITMAP_CONSTANT + 1;
Constant CONSTANT_PERISHABLE_TEXT_STORAGE = BLK_BVBITMAP_TEXT + BLK_BVBITMAP_CONSTANT + 2;
Constant PACKED_TEXT_STORAGE              = BLK_BVBITMAP_TEXT + 3;
Constant UNPACKED_TEXT_STORAGE            = BLK_BVBITMAP_TEXT + BLK_BVBITMAP_LONGBLOCK + 4;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Extent Of Long Block
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Extent arg1 x;
	x = BlkValueSeekZeroEntry(arg1);
	if (x < 0) return -1; ! should not happen, of course
	return x+1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Character Set
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF TARGET_ZCODE;
Constant TEXT_TY_Storage_Flags = BLK_FLAG_MULTIPLE;
Constant ZSCII_Tables;
#IFNOT;
Constant TEXT_TY_Storage_Flags = BLK_FLAG_MULTIPLE + BLK_FLAG_16_BIT;
Constant Large_Unicode_Tables;
#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! UnicodeData.i6t: Source
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant UNIC_NCT = 10000; ! Safe as highest case-change delta is 8383


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! UnicodeData.i6t: ZSCII Casing Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF ZSCII_Tables;
Array CharCasingChart0 -->
    $0061 (  26) (     -32) $009b (   3) (       3) $00a1 (   1) (UNIC_NCT)
    $00a4 (   2) (       3) $00a6 (   1) (UNIC_NCT) $00a9 (   6) (       6)
    $00b5 (   5) (       5) $00bf (   5) (       5) $00c9 (  -3) (       1)
    $00cd (   3) (       3) $00d3 (  -3) (       1) $00d7 (   2) (       2)
    $00dc (   1) (       1) $0000
;

Array CharCasingChart1 -->
    $0041 (  26) (      32) $009e (   3) (      -3) $00a7 (   2) (      -3)
    $00af (   6) (      -6) $00ba (   5) (      -5) $00c4 (   5) (      -5)
    $00ca (  -3) (      -1) $00d0 (   3) (      -3) $00d4 (  -3) (      -1)
    $00d9 (   2) (      -2) $00dd (   1) (      -1) $0000
;
#ENDIF; ! ZSCII_Tables


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! UnicodeData.i6t: Small Unicode Casing Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF Small_Unicode_Tables;
Array CharCasingChart0 -->
    $0061 (  26) (     -32) $00aa (   1) (UNIC_NCT) $00b5 (   1) (UNIC_NCT) $00ba (   1) (UNIC_NCT)
    $00df (   1) (UNIC_NCT) $00e0 (  23) (     -32) $00f8 (   7) (     -32) $00ff (   1) (UNIC_NCT)
    $0000
;

Array CharCasingChart1 -->
    $0041 (  26) (      32) $00c0 (  23) (      32) $00d8 (   7) (      32) $0000
;

#ENDIF; ! Small_Unicode_Tables


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! UnicodeData.i6t: Large Unicode Casing Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF Large_Unicode_Tables;
Array CharCasingChart0 -->
    $0061 (  26) (     -32) $00aa (   1) (UNIC_NCT) $00b5 (   1) (     743) $00ba (   1) (UNIC_NCT)
    $00df (   1) (UNIC_NCT) $00e0 (  23) (     -32) $00f8 (   7) (     -32) $00ff (   1) (     121)
    $0101 ( -47) (      -1) $0131 (   1) (    -232) $0133 (  -5) (      -1) $0138 (   1) (UNIC_NCT)
    $013a ( -15) (      -1) $0149 (   1) (UNIC_NCT) $014b ( -45) (      -1) $017a (  -5) (      -1)
    $017f (   1) (    -300) $0180 (   1) (UNIC_NCT) $0183 (  -3) (      -1) $0188 (   1) (      -1)
    $018c (   1) (      -1) $018d (   1) (UNIC_NCT) $0192 (   1) (      -1) $0195 (   1) (      97)
    $0199 (   1) (      -1) $019a (   2) (UNIC_NCT) $019e (   1) (     130) $01a1 (  -5) (      -1)
    $01a8 (   1) (      -1) $01aa (   2) (UNIC_NCT) $01ad (   1) (      -1) $01b0 (   1) (      -1)
    $01b4 (  -3) (      -1) $01b9 (   1) (      -1) $01ba (   1) (UNIC_NCT) $01bd (   1) (      -1)
    $01be (   1) (UNIC_NCT) $01bf (   1) (      56) $01c6 (   1) (      -2) $01c9 (   1) (      -2)
    $01cc (   1) (      -2) $01ce ( -15) (      -1) $01dd (   1) (     -79) $01df ( -17) (      -1)
    $01f0 (   1) (UNIC_NCT) $01f3 (   1) (      -2) $01f5 (   1) (      -1) $01f9 ( -39) (      -1)
    $0221 (   1) (UNIC_NCT) $0223 ( -17) (      -1) $0234 (   3) (UNIC_NCT) $0250 (   3) (UNIC_NCT)
    $0253 (   1) (    -210) $0254 (   1) (    -206) $0255 (   1) (UNIC_NCT) $0256 (   2) (    -205)
    $0258 (   1) (UNIC_NCT) $0259 (   1) (    -202) $025a (   1) (UNIC_NCT) $025b (   1) (    -203)
    $025c (   4) (UNIC_NCT) $0260 (   1) (    -205) $0261 (   2) (UNIC_NCT) $0263 (   1) (    -207)
    $0264 (   4) (UNIC_NCT) $0268 (   1) (    -209) $0269 (   1) (    -211) $026a (   5) (UNIC_NCT)
    $026f (   1) (    -211) $0270 (   2) (UNIC_NCT) $0272 (   1) (    -213) $0273 (   2) (UNIC_NCT)
    $0275 (   1) (    -214) $0276 (  10) (UNIC_NCT) $0280 (   1) (    -218) $0281 (   2) (UNIC_NCT)
    $0283 (   1) (    -218) $0284 (   4) (UNIC_NCT) $0288 (   1) (    -218) $0289 (   1) (UNIC_NCT)
    $028a (   2) (    -217) $028c (   6) (UNIC_NCT) $0292 (   1) (    -219) $0293 (  29) (UNIC_NCT)
    $0390 (   1) (UNIC_NCT) $03ac (   1) (     -38) $03ad (   3) (     -37) $03b0 (   1) (UNIC_NCT)
    $03b1 (  17) (     -32) $03c2 (   1) (     -31) $03c3 (   9) (     -32) $03cc (   1) (     -64)
    $03cd (   2) (     -63) $03d0 (   1) (     -62) $03d1 (   1) (     -57) $03d5 (   1) (     -47)
    $03d6 (   1) (     -54) $03d7 (   1) (UNIC_NCT) $03d9 ( -23) (      -1) $03f0 (   1) (     -86)
    $03f1 (   1) (     -80) $03f2 (   1) (       7) $03f3 (   1) (UNIC_NCT) $03f5 (   1) (     -96)
    $03f8 (   1) (      -1) $03fb (   1) (      -1) $0430 (  32) (     -32) $0450 (  16) (     -80)
    $0461 ( -33) (      -1) $048b ( -53) (      -1) $04c2 ( -13) (      -1) $04d1 ( -37) (      -1)
    $04f9 (   1) (      -1) $0501 ( -15) (      -1) $0561 (  38) (     -48) $0587 (   1) (UNIC_NCT)
    $1d00 (  44) (UNIC_NCT) $1d62 (  10) (UNIC_NCT) $1e01 (-149) (      -1) $1e96 (   5) (UNIC_NCT)
    $1e9b (   1) (     -59) $1ea1 ( -89) (      -1) $1f00 (   8) (       8) $1f10 (   6) (       8)
    $1f20 (   8) (       8) $1f30 (   8) (       8) $1f40 (   6) (       8) $1f50 (   1) (UNIC_NCT)
    $1f51 (   1) (       8) $1f52 (   1) (UNIC_NCT) $1f53 (   1) (       8) $1f54 (   1) (UNIC_NCT)
    $1f55 (   1) (       8) $1f56 (   1) (UNIC_NCT) $1f57 (   1) (       8) $1f60 (   8) (       8)
    $1f70 (   2) (      74) $1f72 (   4) (      86) $1f76 (   2) (     100) $1f78 (   2) (     128)
    $1f7a (   2) (     112) $1f7c (   2) (     126) $1f80 (   8) (       8) $1f90 (   8) (       8)
    $1fa0 (   8) (       8) $1fb0 (   2) (       8) $1fb2 (   1) (UNIC_NCT) $1fb3 (   1) (       9)
    $1fb4 (  -3) (UNIC_NCT) $1fb7 (   1) (UNIC_NCT) $1fbe (   1) (   -7205) $1fc2 (   1) (UNIC_NCT)
    $1fc3 (   1) (       9) $1fc4 (  -3) (UNIC_NCT) $1fc7 (   1) (UNIC_NCT) $1fd0 (   2) (       8)
    $1fd2 (   2) (UNIC_NCT) $1fd6 (   2) (UNIC_NCT) $1fe0 (   2) (       8) $1fe2 (   3) (UNIC_NCT)
    $1fe5 (   1) (       7) $1fe6 (   2) (UNIC_NCT) $1ff2 (   1) (UNIC_NCT) $1ff3 (   1) (       9)
    $1ff4 (  -3) (UNIC_NCT) $1ff7 (   1) (UNIC_NCT) $2071 (   1) (UNIC_NCT) $207f (   1) (UNIC_NCT)
    $210a (   1) (UNIC_NCT) $210e (   2) (UNIC_NCT) $2113 (   1) (UNIC_NCT) $212f (   1) (UNIC_NCT)
    $2134 (   1) (UNIC_NCT) $2139 (   1) (UNIC_NCT) $213d (   1) (UNIC_NCT) $2146 (   4) (UNIC_NCT)
    $fb00 (   7) (UNIC_NCT) $fb13 (   5) (UNIC_NCT) $ff41 (  26) (     -32) $0000
;

Array CharCasingChart1 -->
    $0041 (  26) (      32) $00c0 (  23) (      32) $00d8 (   7) (      32) $0100 ( -47) (       1)
    $0130 (   1) (    -199) $0132 (  -5) (       1) $0139 ( -15) (       1) $014a ( -45) (       1)
    $0178 (   1) (    -121) $0179 (  -5) (       1) $0181 (   1) (     210) $0182 (  -3) (       1)
    $0186 (   1) (     206) $0187 (   1) (       1) $0189 (   2) (     205) $018b (   1) (       1)
    $018e (   1) (      79) $018f (   1) (     202) $0190 (   1) (     203) $0191 (   1) (       1)
    $0193 (   1) (     205) $0194 (   1) (     207) $0196 (   1) (     211) $0197 (   1) (     209)
    $0198 (   1) (       1) $019c (   1) (     211) $019d (   1) (     213) $019f (   1) (     214)
    $01a0 (  -5) (       1) $01a6 (   1) (     218) $01a7 (   1) (       1) $01a9 (   1) (     218)
    $01ac (   1) (       1) $01ae (   1) (     218) $01af (   1) (       1) $01b1 (   2) (     217)
    $01b3 (  -3) (       1) $01b7 (   1) (     219) $01b8 (   1) (       1) $01bc (   1) (       1)
    $01c4 (   1) (       2) $01c7 (   1) (       2) $01ca (   1) (       2) $01cd ( -15) (       1)
    $01de ( -17) (       1) $01f1 (   1) (       2) $01f4 (   1) (       1) $01f6 (   1) (     -97)
    $01f7 (   1) (     -56) $01f8 ( -39) (       1) $0220 (   1) (    -130) $0222 ( -17) (       1)
    $0386 (   1) (      38) $0388 (   3) (      37) $038c (   1) (      64) $038e (   2) (      63)
    $0391 (  17) (      32) $03a3 (   9) (      32) $03d2 (   3) (UNIC_NCT) $03d8 ( -23) (       1)
    $03f4 (   1) (     -60) $03f7 (   1) (       1) $03f9 (   1) (      -7) $03fa (   1) (       1)
    $0400 (  16) (      80) $0410 (  32) (      32) $0460 ( -33) (       1) $048a ( -53) (       1)
    $04c0 (   1) (UNIC_NCT) $04c1 ( -13) (       1) $04d0 ( -37) (       1) $04f8 (   1) (       1)
    $0500 ( -15) (       1) $0531 (  38) (      48) $10a0 (  38) (UNIC_NCT) $1e00 (-149) (       1)
    $1ea0 ( -89) (       1) $1f08 (   8) (      -8) $1f18 (   6) (      -8) $1f28 (   8) (      -8)
    $1f38 (   8) (      -8) $1f48 (   6) (      -8) $1f59 (  -7) (      -8) $1f68 (   8) (      -8)
    $1fb8 (   2) (      -8) $1fba (   2) (     -74) $1fc8 (   4) (     -86) $1fd8 (   2) (      -8)
    $1fda (   2) (    -100) $1fe8 (   2) (      -8) $1fea (   2) (    -112) $1fec (   1) (      -7)
    $1ff8 (   2) (    -128) $1ffa (   2) (    -126) $2102 (   1) (UNIC_NCT) $2107 (   1) (UNIC_NCT)
    $210b (   3) (UNIC_NCT) $2110 (   3) (UNIC_NCT) $2115 (   1) (UNIC_NCT) $2119 (   5) (UNIC_NCT)
    $2124 (   1) (UNIC_NCT) $2126 (   1) (   -7517) $2128 (   1) (UNIC_NCT) $212a (   1) (   -8383)
    $212b (   1) (   -8262) $212c (   2) (UNIC_NCT) $2130 (   2) (UNIC_NCT) $2133 (   1) (UNIC_NCT)
    $213e (   2) (UNIC_NCT) $2145 (   1) (UNIC_NCT) $ff21 (  26) (      32) $0000
;

#ENDIF; ! Large_Unicode_Tables


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Char.i6t: Char Is Of Case
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CharIsOfCase c case
	i tab min max len par;
	if (c<'A') rfalse;
	if (case == 0) {
		if ((c >= 'a') && (c <= 'z')) rtrue;
		tab = CharCasingChart0;
	} else {
		if ((c >= 'A') && (c <= 'Z')) rtrue;
		tab = CharCasingChart1;
	}
	if (c<128) rfalse;
	while (tab-->i) {
		min = tab-->i; i++;
		len = tab-->i; i++;
		i++;
		par = 0;
		if (len<0) { par = 1; len = -len; }
		if (c < min) rfalse;
		if (c < min+len) {
			if (par) { if ((c-min) % 2 == 0) rtrue; }
			else { rtrue; }
		}
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Char.i6t: Char To Case
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CharToCase c case
	i tab min max len par del f;
	if (c<'A') return c;
	if (case == 1) {
		if ((c >= 'a') && (c <= 'z')) return c-32;
		tab = CharCasingChart0;
	} else {
		if ((c >= 'A') && (c <= 'Z')) return c+32;
		tab = CharCasingChart1;
	}
	if (c<128) return c;
	while (tab-->i) {
		min = tab-->i; i++;
		len = tab-->i; i++;
		del = tab-->i; i++;
		par = 0;
		if (len<0) { par = 1; len = -len; }
		if (c < min) return c;
		if (c < min+len) {
			f = false;
			if (par) { if ((c-min) % 2 == 0) f = true; }
			else { f = true; }
			if (f) {
				if (del == UNIC_NCT) return c;
				return c+del;
			}
		}
	}
	return c;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Char.i6t: Reversing Case
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF TARGET_ZCODE;
[ TEXT_TY_RevCase ch;
	if (ch<'A') return ch;
	if ((ch >= 'a') && (ch <= 'z')) return ch-'a'+'A';
	if ((ch >= 'A') && (ch <= 'Z')) return ch-'A'+'a';
	if (ch<128) return ch;
	if ((ch >= 155) && (ch <= 157)) return ch+3; ! a, o, u umlaut in ZSCII
	if ((ch >= 158) && (ch <= 160)) return ch-3; ! A, O, U umlaut
	if ((ch >= 164) && (ch <= 165)) return ch+3; ! e, i umlaut
	if ((ch >= 167) && (ch <= 168)) return ch-3; ! E, I umlaut
	if ((ch >= 169) && (ch <= 174)) return ch+6; ! a, e, i, o, u, y acute
	if ((ch >= 175) && (ch <= 180)) return ch-6; ! A, E, I, O, U, Y acute
	if ((ch >= 181) && (ch <= 185)) return ch+5; ! a, e, i, o, u grave
	if ((ch >= 186) && (ch <= 190)) return ch-5; ! A, E, I, O, U grave
	if ((ch >= 191) && (ch <= 195)) return ch+5; ! a, e, i, o, u circumflex
	if ((ch >= 196) && (ch <= 200)) return ch-5; ! A, E, I, O, U circumflex
	if (ch == 201) return 202; ! a circle
	if (ch == 202) return 201; ! A circle
	if (ch == 203) return 204; ! o slash
	if (ch == 204) return 203; ! O slash
	if ((ch >= 205) && (ch <= 207)) return ch+3; ! a, n, o tilde
	if ((ch >= 208) && (ch <= 210)) return ch-3; ! A, N, O tilde
	if (ch == 211) return 212; ! ae ligature
	if (ch == 212) return 211; ! AE ligature
	if (ch == 213) return 214; ! c cedilla
	if (ch == 214) return 213; ! C cedilla
	if (ch == 215 or 216) return ch+2; ! thorn, eth
	if (ch == 217 or 218) return ch-2; ! Thorn, Eth
	if (ch == 220) return 221; ! oe ligature
	if (ch == 221) return 220; ! OE ligature
	return ch;
];
#IFNOT;
[ TEXT_TY_RevCase ch;
	if (ch<'A') return ch;
	if ((ch >= 'a') && (ch <= 'z')) return ch-'a'+'A';
	if ((ch >= 'A') && (ch <= 'Z')) return ch-'A'+'a';
	if (ch<128) return ch;
	if (CharIsOfCase(ch, 0)) return CharToCase(ch, 1);
	if (CharIsOfCase(ch, 1)) return CharToCase(ch, 0);
	return ch;
];
#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Char.i6t: Testing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CharTestCases case i j;
	for (i=32: i<$E0; i++) {
		if ((i>=127) && (i<155)) continue;
		print i, " - ", (char) i, " -";
		if (CharIsOfCase(i, 0)) print "  lower";
		if (CharIsOfCase(i, 1)) print "  upper";
		j = CharToCase(i, 0); if (j ~= i) print "  tolower: ", (char) j;
		j = CharToCase(i, 1); if (j ~= i) print "  toupper: ", (char) j;
		print "^";
	}
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: KOV Support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Support task arg1 arg2 arg3;
	switch(task) {
		CREATE_KOVS:      return TEXT_TY_Create(arg2);
		CAST_KOVS:        TEXT_TY_Cast(arg1, arg2, arg3);
		MAKEMUTABLE_KOVS: return TEXT_TY_Mutable(arg1);
		COPYQUICK_KOVS:   rtrue;
		COPYSB_KOVS:	  TEXT_TY_CopySB(arg1, arg2);
		KINDDATA_KOVS:    return 0;
		EXTENT_KOVS:      return TEXT_TY_Extent(arg1);
		COMPARE_KOVS:     return TEXT_TY_Compare(arg1, arg2);
		READ_FILE_KOVS:   if (arg3 == -1) rtrue;
			              return TEXT_TY_ReadFile(arg1, arg2, arg3);
		WRITE_FILE_KOVS:  return TEXT_TY_WriteFile(arg1);
		HASH_KOVS:        return TEXT_TY_Hash(arg1);
		DEBUG_KOVS:       TEXT_TY_Debug(arg1);
	}
	! We choose not to respond to: DESTROY_KOVS, COPYKIND_KOVS, COPY_KOVS
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Debugging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Debug txt;
	switch (txt-->0) {
		CONSTANT_PACKED_TEXT_STORAGE:     print " = cp~", (PrintI6Text) txt-->1, "~";
		CONSTANT_PERISHABLE_TEXT_STORAGE: print " = cp~", (PrintI6Text) txt-->1, "~";
		PACKED_TEXT_STORAGE:              print " = p~", (PrintI6Text) txt-->1, "~";
		UNPACKED_TEXT_STORAGE:            print " = ~", (TEXT_TY_Say) txt, "~";
		default:                          print " broken?";
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Creation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Create short_block x;
	return BlkValueCreateSB2(short_block, PACKED_TEXT_STORAGE, EMPTY_TEXT_PACKED);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Copy Short Block
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_CopySB to_bv from_bv;
	BlkValueCopySB2(to_bv, from_bv);
	if (to_bv-->0 & BLK_BVBITMAP_CONSTANTMASK) to_bv-->0 = PACKED_TEXT_STORAGE;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Transmutation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Transmute txt;
	TEXT_TY_Temporarily_Transmute(txt);
];

[ TEXT_TY_Temporarily_Transmute txt  x;
	if ((txt) && (txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0)) {
		x = txt-->1; ! The old value was a packed string
		
		txt-->0 = UNPACKED_TEXT_STORAGE;
		txt-->1 = FlexAllocate(32, TEXT_TY, TEXT_TY_Storage_Flags);
		if (x ~= EMPTY_TEXT_PACKED) TEXT_TY_CastPrimitive(txt, false, x);
		
		return x;
	}
	return 0;
];

[ TEXT_TY_Untransmute txt pk cp x;
	if ((pk) && (txt-->0 == UNPACKED_TEXT_STORAGE)) {
		x = txt-->1; ! The old value was an unpacked string
		FlexFree(x);
		txt-->0 = cp;
		txt-->1 = pk; ! The value earlier returned by TEXT_TY_Temporarily_Transmute
	}
	return txt;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Mutability
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Mutable txt;
	if (txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0) {
		TEXT_TY_Transmute(txt);
		return 0;
	}
	return 2; ! Tell BlockValue there's a long block pointer
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Casting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Cast to_txt from_kind from_value;
	if (from_kind == TEXT_TY) {
		BlkValueCopy(to_txt, from_value);
	} else if (from_kind == SNIPPET_TY) {
		TEXT_TY_Transmute(to_txt);
		TEXT_TY_CastPrimitive(to_txt, true, from_value);
	} else BlkValueError("impossible cast to text");
];

[ SNIPPET_TY_to_TEXT_TY to_txt snippet;
	return BlkValueCast(to_txt, SNIPPET_TY, snippet);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Data Conversion
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifndef TEXT_TY_BufferSize;
Constant TEXT_TY_BufferSize = 512;
#endif;
Constant TEXT_TY_NoBuffers = 2;

#ifdef TARGET_ZCODE;
Array TEXT_TY_Buffers -> TEXT_TY_BufferSize*TEXT_TY_NoBuffers; ! Where characters are bytes
#ifnot;
Array TEXT_TY_Buffers --> (TEXT_TY_BufferSize+2)*TEXT_TY_NoBuffers; ! Where characters are words
#endif;

Global RawBufferAddress = TEXT_TY_Buffers;
Global RawBufferSize = TEXT_TY_BufferSize;

Global TEXT_TY_CastPrimitiveNesting = 0;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Z Version
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifdef TARGET_ZCODE;
[ TEXT_TY_CastPrimitive to_txt from_snippet from_value  len news buffer;
	if (to_txt == 0) BlkValueError("no destination for cast");
	SuspendRTP();
	buffer = RawBufferAddress + TEXT_TY_CastPrimitiveNesting*TEXT_TY_BufferSize;
	TEXT_TY_CastPrimitiveNesting++;
	if (TEXT_TY_CastPrimitiveNesting > TEXT_TY_NoBuffers)
		FlexError("ran out with too many simultaneous text conversions");

	@push say__p; @push say__pc;
	ClearParagraphing(6);
	@output_stream 3 buffer;
	if (from_value) {
		if (from_snippet) print (PrintSnippet) from_value;
		else print (PrintI6Text) from_value;
	}
	@output_stream -3;
	@pull say__pc; @pull say__p;
	ResumeRTP();

	len = buffer-->0;
	if (len > RawBufferSize-1) len = RawBufferSize-1;
	buffer->(len+2) = 0;

	TEXT_TY_CastPrimitiveNesting--;
	BlkValueMassCopyFromArray(to_txt, buffer+2, 1, len+1);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Glulx Version
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifnot; ! TARGET_ZCODE
[ TEXT_TY_CastPrimitive to_txt from_snippet from_value
	len i stream saved_stream news buffer buffer_size memory_to_free results;

	if (to_txt == 0) BlkValueError("no destination for cast");

	buffer_size = (TEXT_TY_BufferSize + 2)*WORDSIZE;
	
	RawBufferSize = TEXT_TY_BufferSize;
	buffer = RawBufferAddress + TEXT_TY_CastPrimitiveNesting*buffer_size;
	TEXT_TY_CastPrimitiveNesting++;
	if (TEXT_TY_CastPrimitiveNesting > TEXT_TY_NoBuffers) {
		buffer = VM_AllocateMemory(buffer_size); memory_to_free = buffer;
		if (buffer == 0)
			FlexError("ran out with too many simultaneous text conversions");
	}

	if (unicode_gestalt_ok) {
		SuspendRTP();
		.RetryWithLargerBuffer;
		saved_stream = glk_stream_get_current();
		stream = glk_stream_open_memory_uni(buffer, RawBufferSize, filemode_Write, 0);
		glk_stream_set_current(stream);

		@push say__p; @push say__pc;
		ClearParagraphing(7);
		if (from_snippet) print (PrintSnippet) from_value;
		else print (PrintI6Text) from_value;
		@pull say__pc; @pull say__p;

		results = buffer + buffer_size - 2*WORDSIZE;
		glk_stream_close(stream, results);
		if (saved_stream) glk_stream_set_current(saved_stream);
		ResumeRTP();

		len = results-->1;
		if (len > RawBufferSize-1) {
			! Glulx had to truncate text output because the buffer ran out:
			! len is the number of characters which it tried to print
			news = RawBufferSize;
			while (news < len) news=news*2;
			i = VM_AllocateMemory(news*WORDSIZE);
			if (i ~= 0) {
				if (memory_to_free) VM_FreeMemory(memory_to_free);
				memory_to_free = i;
				buffer = i;
				RawBufferSize = news;
				buffer_size = (RawBufferSize + 2)*WORDSIZE;
				jump RetryWithLargerBuffer;
			}
			! Memory allocation refused: all we can do is to truncate the text
			len = RawBufferSize-1;
		}
		buffer-->(len) = 0;

		TEXT_TY_CastPrimitiveNesting--;
		BlkValueMassCopyFromArray(to_txt, buffer, 4, len+1);
	} else {
		RunTimeProblem(RTP_NOGLULXUNICODE);
	}
	if (memory_to_free) VM_FreeMemory(memory_to_free);
];
#endif; 


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Comparison
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Compare left_txt right_txt rv;
	@push say__comp;
	say__comp = true;
	rv = TEXT_TY_Compare_Inner(left_txt, right_txt);
	@pull say__comp;
	return rv;
];

[ TEXT_TY_Compare_Inner left_txt right_txt
	pos ch1 ch2 capacity_left capacity_right fl fr cl cr cpl cpr;
	if (left_txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0) fl = true;
	if (right_txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0) fr = true;

	if (fl && fr) {
		if ((left_txt-->1 ofclass String) && (right_txt-->1 ofclass String))
			return left_txt-->1 - right_txt-->1;
		if ((left_txt-->1 ofclass Routine) && (right_txt-->1 ofclass Routine))
			return left_txt-->1 - right_txt-->1;
		cpl = left_txt-->0; cl = TEXT_TY_Temporarily_Transmute(left_txt);
		cpr = right_txt-->0; cr = TEXT_TY_Temporarily_Transmute(right_txt);		
	} else if (fl) {
		cpl = left_txt-->0; cl = TEXT_TY_Temporarily_Transmute(left_txt);
	} else if (fr) {
		cpr = right_txt-->0; cr = TEXT_TY_Temporarily_Transmute(right_txt);
	}
	if ((cl) || (cr)) {
		pos = TEXT_TY_Compare(left_txt, right_txt);
		TEXT_TY_Untransmute(left_txt, cl, cpl);
		TEXT_TY_Untransmute(right_txt, cr, cpr);
		return pos;
	}
	capacity_left = BlkValueLBCapacity(left_txt);
	capacity_right = BlkValueLBCapacity(right_txt);
	for (pos=0:(pos<capacity_left) && (pos<capacity_right):pos++) {
		ch1 = BlkValueRead(left_txt, pos);
		ch2 = BlkValueRead(right_txt, pos);
		if (ch1 ~= ch2) return ch1-ch2;
		if (ch1 == 0) return 0;
	}
	if (pos == capacity_left) return -1;
	return 1;
];

[ TEXT_TY_Distinguish left_txt right_txt;
	if (TEXT_TY_Compare(left_txt, right_txt) == 0) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Hashing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Hash txt  rv len i p cp;
	cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt);
	rv = 0;
	len = BlkValueLBCapacity(txt);
	for (i=0: i<len: i++)
		rv = rv * 33 + BlkValueRead(txt, i);
	TEXT_TY_Untransmute(txt, p, cp);
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Say txt  ch i dsize;
	if (txt==0) rfalse;
	if (txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0) return PrintI6Text(txt-->1);
	dsize = BlkValueLBCapacity(txt);
	for (i=0: i<dsize: i++) {
		ch = BlkValueRead(txt, i);
		if (ch == 0) break;
		#ifdef TARGET_ZCODE;
		print (char) ch;
		#ifnot; ! TARGET_ZCODE
		@streamunichar ch;
		#endif;
	}
	if (i == 0) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Capitalised printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Say_Capitalised txt mod rc;
	mod = BlkValueCreate(TEXT_TY);
	TEXT_TY_SubstitutedForm(mod, txt);
	if (TEXT_TY_CharacterLength(mod) > 0) {
		BlkValueWrite(mod, 0, CharToCase(BlkValueRead(mod, 0), 1));
		TEXT_TY_Say(mod);
		rc = true;
		say__p = 1;
	}
	BlkValueFree(mod);
	return rc;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Serialisation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_WriteFile txt len pos ch p cp;
	cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt);
	len = BlkValueLBCapacity(txt);
	print "S";
	for (pos=0: pos<=len: pos++) {
		if (pos == len) ch = 0; else ch = BlkValueRead(txt, pos);
		if (ch == 0) {
			print "0;"; break;
		} else {
			print ch, ",";
		}
	}
	TEXT_TY_Untransmute(txt, p, cp);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Unserialisation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_ReadFile txt auxf ch i v dg pos tsize p;
	TEXT_TY_Transmute(txt);
	tsize = BlkValueLBCapacity(txt);
	while (ch ~= 32 or 9 or 10 or 13 or 0 or -1) {
		ch = FileIO_GetC(auxf);
		if (ch == ',' or ';') {
			if (pos+1 >= tsize) {
				if (BlkValueSetLBCapacity(txt, 2*pos) == false) break;
				tsize = BlkValueLBCapacity(txt);
			}
			BlkValueWrite(txt, pos++, v);
			v = 0;
			if (ch == ';') break;
		} else {
			dg = ch - '0';
			v = v*10 + dg;
		}
	}
	BlkValueWrite(txt, pos, 0);
	return txt;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Substitution
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_SubstitutedForm to txt;
	if (txt) {
		BlkValueCopy(to, txt);
		TEXT_TY_Transmute(to);
	}
	return to;
];

[ TEXT_TY_IsSubstituted txt;
	if ((txt) &&
		(txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0) &&
		(txt-->1 ofclass Routine)) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Perishability
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_ExpandIfPerishable to from;
	if ((from) && (from-->0 == CONSTANT_PERISHABLE_TEXT_STORAGE))
		return TEXT_TY_SubstitutedForm(to, from);
	return from;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Recognition-only-GPR
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_ROGPR txt p cp r;
	if (txt == 0) return GPR_FAIL;
	cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt);
	r = TEXT_TY_ROGPRI(txt);
	TEXT_TY_Untransmute(txt, p, cp);
	return r;
];
[ TEXT_TY_ROGPRI txt
	pos len wa wl wpos bdm ch own;
	bdm = true; own = wn;
	len = BlkValueLBCapacity(txt);
	for (pos=0: pos<=len: pos++) {
		if (pos == len) ch = 0; else ch = BlkValueRead(txt, pos);
		if (ch == 32 or 9 or 10 or 0) {
			if (bdm) continue;
			bdm = true;
			if (wpos ~= wl) return GPR_FAIL;
			if (ch == 0) break;
		} else {
			if (bdm) {
				bdm = false;
				if (NextWordStopped() == -1) return GPR_FAIL;
				wa = WordAddress(wn-1);
				wl = WordLength(wn-1);
				wpos = 0;
			}
			if (wa->wpos ~= ch or TEXT_TY_RevCase(ch)) return GPR_FAIL;
			wpos++;
		}
	}
	if (wn == own) return GPR_FAIL; ! Progress must be made to avoid looping
	return GPR_PREPOSITION;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Blobs
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant CHR_BLOB = 1; ! Construe as an array of characters
Constant WORD_BLOB = 2; ! Of words
Constant PWORD_BLOB = 3; ! Of punctuated words
Constant UWORD_BLOB = 4; ! Of unpunctuated words
Constant PARA_BLOB = 5; ! Of paragraphs
Constant LINE_BLOB = 6; ! Of lines

Constant REGEXP_BLOB = 7; ! Not a blob type as such, but needed as a distinct value


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Blob Access
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant WS_BRM = 1;
Constant SKIPPED_BRM = 2;
Constant ACCEPTED_BRM = 3;
Constant ACCEPTEDP_BRM = 4;
Constant ACCEPTEDN_BRM = 5;
Constant ACCEPTEDPN_BRM = 6;

[ TEXT_TY_BlobAccess txt blobtype ctxt wanted rtxt
	p1 p2 cp1 cp2 r;
	if (txt==0) return 0;
	if (blobtype == CHR_BLOB) return TEXT_TY_CharacterLength(txt);
	cp1 = txt-->0; p1 = TEXT_TY_Temporarily_Transmute(txt);
	cp2 = rtxt-->0; p2 = TEXT_TY_Temporarily_Transmute(rtxt);
	TEXT_TY_Transmute(ctxt);
	r = TEXT_TY_BlobAccessI(txt, blobtype, ctxt, wanted, rtxt);
	TEXT_TY_Untransmute(txt, p1, cp1);
	TEXT_TY_Untransmute(rtxt, p2, cp2);
	return r;
];
[ TEXT_TY_BlobAccessI txt blobtype ctxt wanted rtxt
	brm oldbrm ch i dsize csize blobcount gp cl j;
	dsize = BlkValueLBCapacity(txt);
	if (ctxt) csize = BlkValueLBCapacity(ctxt);
	else if (rtxt) "*** rtxt without ctxt ***";
	brm = WS_BRM;
	for (i=0:i<dsize:i++) {
		ch = BlkValueRead(txt, i);
		if (ch == 0) break;
		oldbrm = brm;
		if (ch == 10 or 13 or 32 or 9) {
			if (oldbrm ~= WS_BRM) {
				gp = 0;
				for (j=i:j<dsize:j++) {
					ch = BlkValueRead(txt, j);
					if (ch == 0) { brm = WS_BRM; break; }
					if (ch == 10 or 13) { gp++; continue; }
					if (ch ~= 32 or 9) break;
				}
				ch = BlkValueRead(txt, i);
				if (j == dsize) brm = WS_BRM;
				switch (blobtype) {
					PARA_BLOB: if (gp >= 2) brm = WS_BRM;
					LINE_BLOB: if (gp >= 1) brm = WS_BRM;
					default: brm = WS_BRM;
				}
			}
		} else {
			gp = false;
			if ((blobtype == WORD_BLOB or PWORD_BLOB or UWORD_BLOB) &&
				(ch == '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}'))
				gp = true;
			switch (oldbrm) {
				WS_BRM:
					brm = ACCEPTED_BRM;
					if (blobtype == WORD_BLOB) {
						if (gp) brm = SKIPPED_BRM;
					}
					if (blobtype == PWORD_BLOB) {
						if (gp) brm = ACCEPTEDP_BRM;
					}
				SKIPPED_BRM:
					if (blobtype == WORD_BLOB) {
						if (gp == false) brm = ACCEPTED_BRM;
					}
				ACCEPTED_BRM:
					if (blobtype == WORD_BLOB) {
						if (gp) brm = SKIPPED_BRM;
					}
					if (blobtype == PWORD_BLOB) {
						if (gp) brm = ACCEPTEDP_BRM;
					}
				ACCEPTEDP_BRM:
					if (blobtype == PWORD_BLOB) {
						if (gp == false) brm = ACCEPTED_BRM;
						else {
							if ((ch == BlkValueRead(txt, i-1)) &&
								(ch == '-' or '.')) blobcount--;
							blobcount++;
						}
					}
				ACCEPTEDN_BRM:
					if (blobtype == WORD_BLOB) {
						if (gp) brm = SKIPPED_BRM;
					}
					if (blobtype == PWORD_BLOB) {
						if (gp) brm = ACCEPTEDP_BRM;
					}
				ACCEPTEDPN_BRM:
					if (blobtype == PWORD_BLOB) {
						if (gp == false) brm = ACCEPTED_BRM;
						else {
							if ((ch == BlkValueRead(txt, i-1)) &&
								(ch == '-' or '.')) blobcount--;
							blobcount++;
						}
					}
			}
		}
		if (brm == ACCEPTED_BRM or ACCEPTEDP_BRM) {
			if (oldbrm ~= brm) blobcount++;
			if ((ctxt) && (blobcount == wanted)) {
				if (rtxt) {
					BlkValueWrite(ctxt, cl, 0);
					TEXT_TY_Concatenate(ctxt, rtxt, CHR_BLOB);
					csize = BlkValueLBCapacity(ctxt);
					cl = TEXT_TY_CharacterLength(ctxt);
					if (brm == ACCEPTED_BRM) brm = ACCEPTEDN_BRM;
					if (brm == ACCEPTEDP_BRM) brm = ACCEPTEDPN_BRM;
				} else {
					if (cl+1 >= csize) {
						if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
						csize = BlkValueLBCapacity(ctxt);
					}
					BlkValueWrite(ctxt, cl++, ch);
				}
			} else {
				if (rtxt) {
					if (cl+1 >= csize) {
						if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
						csize = BlkValueLBCapacity(ctxt);
					}
					BlkValueWrite(ctxt, cl++, ch);
				}
			}
		} else {
			if ((rtxt) && (brm ~= ACCEPTEDN_BRM or ACCEPTEDPN_BRM)) {
				if (cl+1 >= csize) {
					if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
					csize = BlkValueLBCapacity(ctxt);
				}
				BlkValueWrite(ctxt, cl++, ch);
			}
		}
	}
	if (ctxt) BlkValueWrite(ctxt, cl++, 0);
	return blobcount;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Get Blob
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_GetBlob ctxt txt wanted blobtype;
	if (txt==0) return;
	if (blobtype == CHR_BLOB) return TEXT_TY_GetCharacter(ctxt, txt, wanted);
	TEXT_TY_BlobAccess(txt, blobtype, ctxt, wanted);
	return ctxt;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Replace Blob
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_ReplaceBlob blobtype txt wanted rtxt ctxt ilen rlen i p cp;
	TEXT_TY_Transmute(txt);
	cp = rtxt-->0; p = TEXT_TY_Temporarily_Transmute(rtxt);
	if (blobtype == CHR_BLOB) {
		ilen = TEXT_TY_CharacterLength(txt);
		rlen = TEXT_TY_CharacterLength(rtxt);
		wanted--;
		if ((wanted >= 0) && (wanted<ilen)) {
			if (rlen == 1) {
				BlkValueWrite(txt, wanted, BlkValueRead(rtxt, 0));
			} else {
				ctxt = BlkValueCreate(TEXT_TY);
				TEXT_TY_Transmute(ctxt);
				if (BlkValueSetLBCapacity(ctxt, ilen+rlen+1)) {
					for (i=0:i<wanted:i++)
						BlkValueWrite(ctxt, i, BlkValueRead(txt, i));
					for (i=0:i<rlen:i++)
						BlkValueWrite(ctxt, wanted+i, BlkValueRead(rtxt, i));
					for (i=wanted+1:i<ilen:i++)
						BlkValueWrite(ctxt, rlen+i-1, BlkValueRead(txt, i));
					BlkValueWrite(ctxt, rlen+ilen, 0);
					BlkValueCopy(txt, ctxt);
				}
				BlkValueFree(ctxt);
			}
		}
	} else {
		ctxt = BlkValueCreate(TEXT_TY);
		TEXT_TY_BlobAccess(txt, blobtype, ctxt, wanted, rtxt);
		BlkValueCopy(txt, ctxt);
		BlkValueFree(ctxt);
	}
	TEXT_TY_Untransmute(rtxt, p, cp);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Replace Text
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_ReplaceText blobtype txt ftxt rtxt
	r p1 p2 cp1 cp2;
	TEXT_TY_Transmute(txt);
	cp1 = ftxt-->0; p1 = TEXT_TY_Temporarily_Transmute(ftxt);
	cp2 = rtxt-->0; p2 = TEXT_TY_Temporarily_Transmute(rtxt);
	r = TEXT_TY_ReplaceTextI(blobtype, txt, ftxt, rtxt);
	TEXT_TY_Untransmute(ftxt, p1, cp1);
	TEXT_TY_Untransmute(rtxt, p2, cp2);
	return r;
];

[ TEXT_TY_ReplaceTextI blobtype txt ftxt rtxt
	ctxt csize ilen flen i cl mpos ch chm whitespace punctuation;
	if (blobtype == REGEXP_BLOB or CHR_BLOB) 
		return TEXT_TY_Replace_RE(blobtype, txt, ftxt, rtxt);
	
	ilen = TEXT_TY_CharacterLength(txt);
	flen = TEXT_TY_CharacterLength(ftxt);
	ctxt = BlkValueCreate(TEXT_TY);
	TEXT_TY_Transmute(ctxt);
	csize = BlkValueLBCapacity(ctxt);
	mpos = 0;

	whitespace = true; punctuation = false;
	for (i=0:i<=ilen:i++) {
		ch = BlkValueRead(txt, i);
		.MoreMatching;
		chm = BlkValueRead(ftxt, mpos++);
		if (mpos == 1) {
			switch (blobtype) {
				WORD_BLOB:
					if ((whitespace == false) && (punctuation == false)) chm = -1;
			}
		}
		whitespace = false;
		if (ch == 10 or 13 or 32 or 9) whitespace = true;
		punctuation = false;
		if (ch == '.' or ',' or '!' or '?'
			or '-' or '/' or '"' or ':' or ';'
			or '(' or ')' or '[' or ']' or '{' or '}') {
			if (blobtype == WORD_BLOB) chm = -1;
			punctuation = true;
		}
		if (ch == chm) {
			if (mpos == flen) {
				if (i == ilen) chm = 0;
				else chm = BlkValueRead(txt, i+1);
				if ((blobtype == CHR_BLOB) ||
					(chm == 0 or 10 or 13 or 32 or 9) ||
					(chm == '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}')) {
					mpos = 0;
					cl = cl - (flen-1);
					BlkValueWrite(ctxt, cl, 0);
					TEXT_TY_Concatenate(ctxt, rtxt, CHR_BLOB);
					csize = BlkValueLBCapacity(ctxt);
					cl = TEXT_TY_CharacterLength(ctxt);
					continue;
				}
			}
		} else {
			mpos = 0;
		}
		if (cl+1 >= csize) {
			if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
			csize = BlkValueLBCapacity(ctxt);
		}
		BlkValueWrite(ctxt, cl++, ch);
	}
	BlkValueCopy(txt, ctxt);	
	BlkValueFree(ctxt);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Character Length
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_CharacterLength txt ch i dsize p cp r;
	if (txt==0) return 0;
	cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt);
	dsize = BlkValueLBCapacity(txt); r = dsize;
	for (i=0:i<dsize:i++) {
		ch = BlkValueRead(txt, i);
		if (ch == 0) { r = i; break; }
	}
	TEXT_TY_Untransmute(txt, p, cp);
	return r;
];

[ TEXT_TY_Empty txt;
	if (txt==0) rtrue;
	if (txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0) {
		if (txt-->1 == EMPTY_TEXT_PACKED) rtrue;
		rfalse;
	}
	if (TEXT_TY_CharacterLength(txt) == 0) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Get Character
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_GetCharacter ctxt txt i ch p cp;
	if (txt==0) return 0;
	cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt);
	TEXT_TY_Transmute(ctxt);
	if ((i<=0) || (i>TEXT_TY_CharacterLength(txt))) ch = 0;
	else ch = BlkValueRead(txt, i-1);
	BlkValueWrite(ctxt, 0, ch);
	BlkValueWrite(ctxt, 1, 0);
	TEXT_TY_Untransmute(txt, p, cp);
	return ctxt;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Casing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_CharactersOfCase txt case i ch len p cp r;
	if (txt==0) return 0;
	cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt);
	len = TEXT_TY_CharacterLength(txt);
	r = true;
	for (i=0:i<len:i++) {
		ch = BlkValueRead(txt, i);
		if ((ch) && (CharIsOfCase(ch, case) == false)) { r = false; break; }
	}
	TEXT_TY_Untransmute(txt, p, cp);
	return r;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Change Case
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_CharactersToCase ctxt txt case i ch len bnd pk cp;
	if (txt==0) return 0;
	cp = txt-->0; pk = TEXT_TY_Temporarily_Transmute(txt);
	TEXT_TY_Transmute(ctxt);
	len = TEXT_TY_CharacterLength(txt);
	if (BlkValueSetLBCapacity(ctxt, len+1)) {
		bnd = 1;
		for (i=0:i<len:i++) {
			ch = BlkValueRead(txt, i);
			if (case < 2) {
				BlkValueWrite(ctxt, i, CharToCase(ch, case));
			} else {
				BlkValueWrite(ctxt, i, CharToCase(ch, bnd));
				if (case == 2) {
					bnd = 0;
					if (ch == 0 or 10 or 13 or 32 or 9
						or '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}') bnd = 1;
				}
				if (case == 3) {
					if (ch ~= 0 or 10 or 13 or 32 or 9) {
						if (bnd == 1) bnd = 0;
						else {
							if (ch == '.' or '!' or '?') bnd = 1;
						}
					}
				}
			}
		}
		BlkValueWrite(ctxt, len, 0);
	}
	TEXT_TY_Untransmute(txt, pk, cp);
	return ctxt;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Concatenation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Concatenate to_txt from_txt blobtype ref_txt
	p cp r;
	if (to_txt==0) rfalse;
	if (from_txt==0) return to_txt;
	TEXT_TY_Transmute(to_txt);
	cp = from_txt-->0; p = TEXT_TY_Temporarily_Transmute(from_txt);
	r = TEXT_TY_ConcatenateI(to_txt, from_txt, blobtype, ref_txt);
	TEXT_TY_Untransmute(from_txt, p, cp);
	return r;
];

[ TEXT_TY_ConcatenateI to_txt from_txt blobtype ref_txt
	pos len ch i tosize x y case;
	switch(blobtype) {
		CHR_BLOB, 0:
			pos = TEXT_TY_CharacterLength(to_txt);
			len = TEXT_TY_CharacterLength(from_txt);
			if (BlkValueSetLBCapacity(to_txt, pos+len+1) == false) return to_txt;
			for (i=0:i<len:i++) {
				ch = BlkValueRead(from_txt, i);
				BlkValueWrite(to_txt, i+pos, ch);
			}
			BlkValueWrite(to_txt, len+pos, 0);
			return to_txt;
		REGEXP_BLOB:
			return TEXT_TY_RE_Concatenate(to_txt, from_txt, blobtype, ref_txt);
	}
	print "*** TEXT_TY_Concatenate used on impossible blob type ***^";
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Setting the Player's Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SetPlayersCommand from_txt i len at p cp;
	cp = from_txt-->0; p = TEXT_TY_Temporarily_Transmute(from_txt);
	len = TEXT_TY_CharacterLength(from_txt);
	if (len > 118) len = 118;
	#ifdef TARGET_ZCODE;
	buffer->1 = len; at = 2;
	#ifnot;
	buffer-->0 = len; at = 4;
	#endif;
	for (i=0:i<len:i++) buffer->(i+at) = CharToCase(BlkValueRead(from_txt, i), 0);
	for (:at+i<120:i++) buffer->(at+i) = ' ';
	VM_Tokenise(buffer, parse);
	players_command = 100 + WordCount(); ! The snippet variable "player's command"
	TEXT_TY_Untransmute(from_txt, p, cp);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Debugging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global TEXT_TY_RE_Trace = false; ! Change to true for (a lot of) debugging data in use
[ TEXT_TY_RE_SetTrace F; TEXT_TY_RE_Trace = F; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Algorithm
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Class Codes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! Character classes

Constant NEWLINE_RE_CC = -1;
Constant TAB_RE_CC = -2;
Constant DIGIT_RE_CC = -3;
Constant NONDIGIT_RE_CC = -4;
Constant WHITESPACE_RE_CC = -5;
Constant NONWHITESPACE_RE_CC = -6;
Constant PUNCTUATION_RE_CC = -7;
Constant NONPUNCTUATION_RE_CC = -8;
Constant WORD_RE_CC = -9;
Constant NONWORD_RE_CC = -10;
Constant ANYTHING_RE_CC = -11;
Constant NOTHING_RE_CC = -12;
Constant RANGE_RE_CC = -13;
Constant LCASE_RE_CC = -14;
Constant NONLCASE_RE_CC = -15;
Constant UCASE_RE_CC = -16;
Constant NONUCASE_RE_CC = -17;

! Control structures

Constant SUBEXP_RE_CC = -20;
Constant DISJUNCTION_RE_CC = -21;
Constant CHOICE_RE_CC = -22;
Constant QUANTIFIER_RE_CC = -23;
Constant IF_RE_CC = -24;
Constant CONDITION_RE_CC = -25;
Constant THEN_RE_CC = -26;
Constant ELSE_RE_CC = -27;

! Substring matchers

Constant VARIABLE_RE_CC = -30;
Constant LITERAL_RE_CC = -31;

! Positional matchers

Constant START_RE_CC = -40;
Constant END_RE_CC = -41;
Constant BOUNDARY_RE_CC = -42;
Constant NONBOUNDARY_RE_CC = -43;
Constant ALWAYS_RE_CC = -44;
Constant NEVER_RE_CC = -45;

! Mode switches

Constant SENSITIVITY_RE_CC = -50;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Packets
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RE_MAX_PACKETS = 32;

Constant RE_PACKET_SIZE = 14; ! Words of memory used per packet
Constant RE_PACKET_SIZE_IN_BYTES = WORDSIZE*RE_PACKET_SIZE; ! Bytes used per packet

Array RE_PACKET_space --> RE_MAX_PACKETS*RE_PACKET_SIZE;

Constant RE_CCLASS = 0;      ! One of the class codes defined above
Constant RE_PAR1 = 1;        ! Three parameters whose meaning depends on class code
Constant RE_PAR2 = 2;
Constant RE_PAR3 = 3;
Constant RE_NEXT = 4;        ! Younger sibling in the compiled tree
Constant RE_PREVIOUS = 5;    ! Elder sibling
Constant RE_DOWN = 6;        ! Child
Constant RE_UP = 7;          ! Parent
Constant RE_DATA1 = 8;       ! Backtracking data
Constant RE_DATA2 = 9;
Constant RE_CONSTRAINT = 10;
Constant RE_CACHE1 = 11;
Constant RE_CACHE2 = 12;
Constant RE_MODES = 13;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Nodes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_Node n cc par1 par2 par3  offset;
	if ((n<0) || (n >= RE_MAX_PACKETS)) rfalse;
	offset = RE_PACKET_space + n*RE_PACKET_SIZE_IN_BYTES;
	offset-->RE_CCLASS = cc;
	offset-->RE_PAR1 = par1;
	offset-->RE_PAR2 = par2;
	offset-->RE_PAR3 = par3;
	offset-->RE_NEXT = NULL;
	offset-->RE_PREVIOUS = NULL;
	offset-->RE_DOWN = NULL;
	offset-->RE_UP = NULL;
	offset-->RE_DATA1 = -1; ! Match start
	offset-->RE_DATA2 = -1; ! Match end
	offset-->RE_CONSTRAINT = -1; ! Rewind edge
	return offset;
];

[ TEXT_TY_RE_NodeAddress n;
	if ((n<0) || (n >= RE_MAX_PACKETS)) return -1;
	return RE_PACKET_space + n*RE_PACKET_SIZE_IN_BYTES;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Match Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array RE_Subexpressions --> 11; ! Address of node for this subexpression
Array Allocated_Match_Vars --> 10; ! Indexed text to hold values of the variables

[ TEXT_TY_RE_DebugMatchVars txt
	offset n i;
	print RE_Subexpressions-->10, " collecting subexps^";
	for (n=0:(n<RE_Subexpressions-->10) && (n<10): n++) {
		offset = RE_Subexpressions-->n;
		print "Subexp ", offset-->RE_PAR1,
			" = [", offset-->RE_DATA1, ",", offset-->RE_DATA2, "] = ";
		for (i=offset-->RE_DATA1:i<offset-->RE_DATA2:i++)
			print (char) BlkValueRead(txt, i);
		print "^";
	}
];

[ TEXT_TY_RE_CreateMatchVars txt
	offset n i ch ctxt cl csize;
	for (n=0:(n<RE_Subexpressions-->10) && (n<10): n++) {
		offset = RE_Subexpressions-->n;
		if (Allocated_Match_Vars-->n) BlkValueFree(Allocated_Match_Vars-->n);
		Allocated_Match_Vars-->n = BlkValueCreate(TEXT_TY);
		TEXT_TY_Transmute(Allocated_Match_Vars-->n);
		ctxt = Allocated_Match_Vars-->n;
		csize = BlkValueLBCapacity(ctxt);
		cl = 0;
		for (i=offset-->RE_DATA1:i<offset-->RE_DATA2:i++) {
			ch = BlkValueRead(txt, i);
			if (cl+1 >= csize) {
				if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
				csize = BlkValueLBCapacity(ctxt);
			}
			BlkValueWrite(ctxt, cl++, ch);
		}
		BlkValueWrite(ctxt, cl, 0);
	}
];

[ TEXT_TY_RE_EmptyMatchVars txt
	n;
	for (n=0:(n<RE_Subexpressions-->10) && (n<10): n++)
		if (Allocated_Match_Vars-->n ~= 0)
			BlkValueWrite(Allocated_Match_Vars-->n, 0, 0);
];

[ TEXT_TY_RE_GetMatchVar vn
	offset;
	if ((vn<0) || (vn>=10) || (vn >= RE_Subexpressions-->10)) return EMPTY_TEXT_VALUE;
	offset = RE_Subexpressions-->vn;
	if (offset == 0) return EMPTY_TEXT_VALUE;
	if (offset-->RE_DATA1 < 0) return EMPTY_TEXT_VALUE;
	if (Allocated_Match_Vars-->vn == 0) {
		print "*** ", vn, " unallocated! ***^";
		return EMPTY_TEXT_VALUE;
	}
	return Allocated_Match_Vars-->vn;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Markers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_MV_End n end
	offset;
	offset = RE_Subexpressions-->n;
	if (end==0) return offset-->RE_DATA1;
	return offset-->RE_DATA2;
];

[ TEXT_TY_RE_Clear_Markers token;
	for (: token ~= NULL: token = token-->RE_NEXT) {
		if (token-->RE_DOWN ~= NULL) TEXT_TY_RE_Clear_Markers(token-->RE_DOWN);
		token-->RE_DATA1 = -1;
		token-->RE_DATA2 = -1;
		token-->RE_CONSTRAINT = -1;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Debugging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_DebugTree ftxt detail;
	print "Pattern: ", (TEXT_TY_Say) ftxt, "^";
	TEXT_TY_RE_DebugSubtree(ftxt, 1, RE_PACKET_space, detail);
];

[ TEXT_TY_RE_DebugSubtree ftxt depth offset detail
	cup;
	if (offset ~= NULL) {
		cup = offset-->RE_UP;
		if (offset-->RE_PREVIOUS ~= NULL) print "*** broken initial previous ***^";
	}
	while (offset ~= NULL) {
		if (offset-->RE_UP ~= cup) print "*** broken up matching ***^";
		spaces(depth*2);
		TEXT_TY_RE_DebugNode(offset, ftxt, detail);
		if (offset-->RE_DOWN ~= NULL) {
			if ((offset-->RE_DOWN)-->RE_UP ~= offset)
				print "*** broken down/up ***^";
			TEXT_TY_RE_DebugSubtree(ftxt, depth+1, offset-->RE_DOWN, detail);
		}
		if (offset-->RE_NEXT ~= NULL) {
			if ((offset-->RE_NEXT)-->RE_PREVIOUS ~= offset)
				print "*** broken next/previous ***^";
		}
		offset = offset-->RE_NEXT;
	}
];

[ TEXT_TY_RE_DebugNode offset ftxt detail
	i par1 par2 par3;
	if (offset == NULL) "[NULL]";
	print "[", (offset-RE_PACKET_space)/(RE_PACKET_SIZE_IN_BYTES), "] ";
	! for (i=0:i<RE_PACKET_SIZE:i++) print offset-->i, " ";
	par1 = offset-->RE_PAR1;
	par2 = offset-->RE_PAR2;
	par3 = offset-->RE_PAR3;
	switch (offset-->RE_CCLASS) {
		DIGIT_RE_CC: print "DIGIT";
		NONDIGIT_RE_CC: print "NONDIGIT";
		UCASE_RE_CC: print "UCASE";
		NONUCASE_RE_CC: print "NONUCASE";
		LCASE_RE_CC: print "LCASE";
		NONLCASE_RE_CC: print "NONLCASE";
		WHITESPACE_RE_CC: print "WHITESPACE";
		NONWHITESPACE_RE_CC: print "NONWHITESPACE";
		PUNCTUATION_RE_CC: print "PUNCTUATION";
		NONPUNCTUATION_RE_CC: print "NONPUNCTUATION";
		WORD_RE_CC: print "WORD";
		NONWORD_RE_CC: print "NONWORD";
		ALWAYS_RE_CC: print "ALWAYS";
		NEVER_RE_CC: print "NEVER";
		START_RE_CC: print "START";
		END_RE_CC: print "END";
		BOUNDARY_RE_CC: print "BOUNDARY";
		NONBOUNDARY_RE_CC: print "NONBOUNDARY";
		ANYTHING_RE_CC: print "ANYTHING";
		NOTHING_RE_CC: print "NOTHING";
		RANGE_RE_CC: print "RANGE"; if (par3 == true) print " (negated)";
			print " ";
			for (i=par1:i<par2:i++) print (char) BlkValueRead(ftxt, i);
		VARIABLE_RE_CC: print "VARIABLE ", par1;
		SUBEXP_RE_CC:
			if (par1 == 0) print "EXP";
			else print "SUBEXP ";
			if (par1 >= 0) print "= V", par1;
			if (par2 == 1) {
				if (par3 == 0) print " (?=...) lookahead";
				else print " (?<=...) lookbehind of width ", par3;
			}
			if (par2 == 2) {
				if (par3 == 0) print " (?!...) negated lookahead";
				else print " (?<!...) negated lookbehind of width ", par3;
			}
			if (par2 == 3) print " uncollecting";
			if (par2 == 0 or 3) {
				if (par3 == 1) print " forcing case sensitivity";
				if (par3 == 2) print " forcing case insensitivity";
			}
			if (par2 == 4) print " (?>...) possessive";
		NEWLINE_RE_CC: print "NEWLINE";
		TAB_RE_CC: print "TAB";
		QUANTIFIER_RE_CC: print "QUANTIFIER min=", par1, " max=", par2;
			if (par3) print " (lazy)"; else print " (greedy)";
		LITERAL_RE_CC: print "LITERAL";
			print " ";
			for (i=par1:i<par2:i++) print (char) BlkValueRead(ftxt, i);
		DISJUNCTION_RE_CC: print "DISJUNCTION of ", par1, " choices";
		CHOICE_RE_CC: print "CHOICE no ", par1;
		SENSITIVITY_RE_CC: print "SENSITIVITY";
			if (par1) print " off"; else print " on";
		IF_RE_CC: print "IF"; if (par1 >= 1) print " = V", par1;
		CONDITION_RE_CC: print "CONDITION"; if (par1 >= 1) print " = V", par1;
		THEN_RE_CC: print "THEN";
		ELSE_RE_CC: print "ELSE";
	}
	if (detail)
		print ": ", offset-->RE_DATA1, ", ", offset-->RE_DATA2, ", ", offset-->RE_CONSTRAINT;
	print "^";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Compiling Tree For Substring Search
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_CHR_CompileTree ftxt exactly
	root literal fto no_packets token attach_to;

	fto = TEXT_TY_CharacterLength(ftxt);

	root = TEXT_TY_RE_Node(0, SUBEXP_RE_CC, 0, 0, 0);
	literal = TEXT_TY_RE_Node(1, LITERAL_RE_CC, 0, fto, 0);
	
	root-->RE_DOWN = literal;
	literal-->RE_UP = root;

	if (exactly) {
		no_packets = 2;
		if (no_packets+3 > RE_MAX_PACKETS) return "regexp too complex";
		exactly = RE_PACKET_space-->RE_DOWN;
		token = TEXT_TY_RE_Node(no_packets++, START_RE_CC, 0, 0, 0);
		RE_PACKET_space-->RE_DOWN = token; token-->RE_UP = RE_PACKET_space;
		attach_to = TEXT_TY_RE_Node(no_packets++, SUBEXP_RE_CC, -1, 3, 0);
		token-->RE_NEXT = attach_to; attach_to-->RE_PREVIOUS = token;
		attach_to-->RE_UP = RE_PACKET_space;
		attach_to-->RE_NEXT = TEXT_TY_RE_Node(no_packets++, END_RE_CC, 0, 0, 0);
		(attach_to-->RE_NEXT)-->RE_PREVIOUS = attach_to;
		(attach_to-->RE_NEXT)-->RE_UP = RE_PACKET_space;
		attach_to-->RE_DOWN = exactly;
		while (exactly ~= NULL) {
			exactly-->RE_UP = attach_to; exactly = exactly-->RE_NEXT;
		}
	}
	
	no_packets = TEXT_TY_RE_ExpandChoices(RE_PACKET_space, no_packets);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Compiling Tree For Regexp Search
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array Subexp_Posns --> 20;
[ TEXT_TY_RE_CompileTree ftxt exactly
	no_packets ffrom fto cc par1 par2 par3
	quantifiable token attach_to no_subs blevel bits;

	fto = TEXT_TY_CharacterLength(ftxt);
	if (fto == 0) {
		TEXT_TY_RE_Node(no_packets++, NEVER_RE_CC, 0, 0, 0); ! Empty regexp never matches
		return 1;
	}

	attach_to = TEXT_TY_RE_Node(no_packets++, SUBEXP_RE_CC, 0, 0, 0);
	RE_Subexpressions-->0 = attach_to; RE_Subexpressions-->10 = 1; no_subs = 1;

	quantifiable = false; blevel = 0;
	
	for (ffrom = 0: ffrom < fto: ) {
		cc = BlkValueRead(ftxt, ffrom++); par1 = 0; par2 = 0; par3 = 0;
		if (cc == '\') {
			if (ffrom == fto) return "Search pattern not terminated";
			cc = BlkValueRead(ftxt, ffrom++);
			switch (cc) {
				'b': cc = BOUNDARY_RE_CC;
				'B': cc = NONBOUNDARY_RE_CC;
				'd': cc = DIGIT_RE_CC;
				'D': cc = NONDIGIT_RE_CC;
				'l': cc = LCASE_RE_CC;
				'L': cc = NONLCASE_RE_CC;
				'n': cc = NEWLINE_RE_CC;
				'p': cc = PUNCTUATION_RE_CC;
				'P': cc = NONPUNCTUATION_RE_CC;
				's': cc = WHITESPACE_RE_CC;
				'S': cc = NONWHITESPACE_RE_CC;
				't': cc = TAB_RE_CC;
				'u': cc = UCASE_RE_CC;
				'U': cc = NONUCASE_RE_CC;
				'w': cc = WORD_RE_CC;
				'W': cc = NONWORD_RE_CC;
				default:
					if ((cc >= '1') && (cc <= '9')) {
						par1 = cc-'0';
						cc = VARIABLE_RE_CC;
					} else {
						if (((cc >= 'a') && (cc <= 'z')) ||
							((cc >= 'A') && (cc <= 'Z'))) return "unknown escape";
						cc = LITERAL_RE_CC;
						par1 = ffrom-1; par2 = ffrom;
					}
			}
			quantifiable = true;
		} else {
			switch (cc) {
				'(': par2 = 0;
					!if (BlkValueRead(ftxt, ffrom) == ')') return "empty subexpression";
					if (BlkValueRead(ftxt, ffrom) == '?') {
						ffrom++;
						bits = true;
						if (BlkValueRead(ftxt, ffrom) == '-') { ffrom++; bits = false; }
						else if (BlkValueRead(ftxt, ffrom) == '<') { ffrom++; bits = false; }
						switch (cc = BlkValueRead(ftxt, ffrom++)) {
							'#': while (BlkValueRead(ftxt, ffrom++) ~= 0 or ')') ;
								if (BlkValueRead(ftxt, ffrom-1) == 0)
									return "comment never ends";
								continue;
							'(': cc = BlkValueRead(ftxt, ffrom);
								if ((cc == '1' or '2' or '3' or '4' or
									'5' or '6' or '7' or '8' or '9') &&
									(BlkValueRead(ftxt, ffrom+1) ==')')) {
									ffrom = ffrom + 2;
									par1 = cc - '0';
								} else ffrom--;
								cc = IF_RE_CC; ! (?(...)...) conditional
								quantifiable = false;
								if (blevel == 20) return "subexpressions too deep";
								Subexp_Posns-->(blevel++) = TEXT_TY_RE_NodeAddress(no_packets);
								jump CClassKnown;
							'=': par2 = 1; ! (?=...) lookahead/behind
								par3 = 0; if (bits == false) par3 = -1;
							'!': par2 = 2; ! (?!...) negated lookahead/behind
								par3 = 0; if (bits == false) par3 = -1;
							':': par2 = 3; ! (?:...) uncollecting subexpression
							'>': par2 = 4; ! (?>...) possessive
							default:
								if (BlkValueRead(ftxt, ffrom) == ')') {
									if (cc == 'i') {
										cc = SENSITIVITY_RE_CC; par1 = bits; ffrom++;
										jump CClassKnown;
									}
								}
								if (BlkValueRead(ftxt, ffrom) == ':') {
									if (cc == 'i') {
										par1 = bits; par2 = 3; par3 = bits+1; ffrom++;
										jump AllowForm;
									}
								}
								return "unknown (?...) form";
						}
					}
					.AllowForm;
					if (par2 == 0) par1 = no_subs++; else par1 = -1;
					cc = SUBEXP_RE_CC; 
					quantifiable = false;
					if (blevel == 20) return "subexpressions too deep";
					Subexp_Posns-->(blevel++) = TEXT_TY_RE_NodeAddress(no_packets);
				')': if (blevel == 0) return "subexpression bracket mismatch";
					blevel--;
					attach_to = Subexp_Posns-->blevel;
					if (attach_to-->RE_DOWN == NULL) {
						if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";
						attach_to-->RE_DOWN =
							TEXT_TY_RE_Node(no_packets++, ALWAYS_RE_CC, 0, 0, 0);
						(attach_to-->RE_DOWN)-->RE_UP = attach_to;
					}
					quantifiable = true;
					continue;
				'.': cc = ANYTHING_RE_CC; quantifiable = true;
				'|': cc = CHOICE_RE_CC; quantifiable = false;
				'^': cc = START_RE_CC; quantifiable = false;
				'$': cc = END_RE_CC; quantifiable = false;
				'{': if (quantifiable == false) return "quantifier misplaced";
					par1 = 0; par2 = -1; bits = 1;
					while ((cc=BlkValueRead(ftxt, ffrom++)) ~= 0 or '}') {
						if (cc == ',') {
							bits++;
							if (bits >= 3) return "too many colons in ?{...}";
							continue;
						}
						if ((cc >= '0') || (cc <= '9')) {
							if (bits == 1) {
								if (par1 < 0) par1 = 0;
								par1 = par1*10 + (cc-'0');
							} else {
								if (par2 < 0) par2 = 0;
								par2 = par2*10 + (cc-'0');
							}
						} else return "non-digit in ?{...}";
					}
					if (cc ~= '}') return "{x,y} quantifier never ends";
					cc = QUANTIFIER_RE_CC;
					if (par2 == -1) {
						if (bits == 2) par2 = 30000;
						else par2 = par1;
					}
					if (par1 > par2) return "{x,y} with x greater than y";
					if (BlkValueRead(ftxt, ffrom) == '?') { ffrom++; par3 = true; }
					quantifiable = false;
				'<', '[': par3 = false; if (cc == '<') bits = '>'; else bits = ']';
					if (BlkValueRead(ftxt, ffrom) == '^') { ffrom++; par3 = true; }
					par1 = ffrom;
					if (BlkValueRead(ftxt, ffrom) == bits) { ffrom++; }
					while (cc ~= bits or 0) {
						cc = BlkValueRead(ftxt, ffrom++);
						if (cc == '\') {
							cc = BlkValueRead(ftxt, ffrom++);
							if (cc ~= 0) cc = BlkValueRead(ftxt, ffrom++);
						}
					}
					if (cc == 0) return "Character range never ends";
					par2 = ffrom-1;
					if ((par2 > par1 + 1) &&
						(BlkValueRead(ftxt, par1) == ':') &&
						(BlkValueRead(ftxt, par2-1) == ':') &&
						(BlkValueRead(ftxt, par2-2) ~= '\'))
						return "POSIX named character classes unsupported";
					bits = TEXT_TY_RE_RangeSyntaxCorrect(ftxt, par1, par2);
					if (bits) return bits;
					if (par1 < par2) cc = RANGE_RE_CC;
					else cc = NOTHING_RE_CC;
					quantifiable = true;
				'*': if (quantifiable == false) return "quantifier misplaced";
					cc = QUANTIFIER_RE_CC;
					par1 = 0; par2 = 30000;
					if (BlkValueRead(ftxt, ffrom) == '?') { ffrom++; par3 = true; }
					quantifiable = false;
				'+': if (quantifiable == false) return "quantifier misplaced";
					cc = QUANTIFIER_RE_CC;
					par1 = 1; par2 = 30000;
					if (BlkValueRead(ftxt, ffrom) == '?') { ffrom++; par3 = true; }
					quantifiable = false;
				'?': if (quantifiable == false) return "quantifier misplaced";
					cc = QUANTIFIER_RE_CC;
					par1 = 0; par2 = 1;
					if (BlkValueRead(ftxt, ffrom) == '?') { ffrom++; par3 = true; }
					quantifiable = false;
			}
		}
		
		.CClassKnown;
		
		if (cc >= 0) {
			quantifiable = true;
			if ((attach_to-->RE_CCLASS == LITERAL_RE_CC) &&
				(BlkValueRead(ftxt, ffrom) ~= '*' or '+' or '?' or '{')) {
				(attach_to-->RE_PAR2)++;
				if (TEXT_TY_RE_Trace == 2) {
					print "Extending literal by ", cc, "=", (char) cc, "^";
				}
				continue;
			}
			cc = LITERAL_RE_CC; par1 = ffrom-1; par2 = ffrom;
		}
		
		if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";

		if (TEXT_TY_RE_Trace == 2) {
			print "Attaching packet ", no_packets+1, " to ";
			TEXT_TY_RE_DebugNode(attach_to, ftxt);
			TEXT_TY_RE_DebugTree(ftxt);
		}

		token = TEXT_TY_RE_Node(no_packets++, cc, par1, par2, par3);

		if ((token-->RE_CCLASS == SUBEXP_RE_CC) && (token-->RE_PAR2 == 0)) {
			RE_Subexpressions-->(token-->RE_PAR1) = token;
			(RE_Subexpressions-->10)++;
		}
		
		if ((attach_to-->RE_CCLASS == SUBEXP_RE_CC or CHOICE_RE_CC or IF_RE_CC) &&
			(attach_to-->RE_DOWN == NULL)) {
			attach_to-->RE_DOWN = token; token-->RE_UP = attach_to;
		} else {
			if ((token-->RE_CCLASS == CHOICE_RE_CC) &&
				((attach_to-->RE_UP)-->RE_CCLASS == CHOICE_RE_CC)) {
				no_packets--; token = attach_to-->RE_UP;
			} else {
				if (token-->RE_CCLASS == CHOICE_RE_CC) {
					while (attach_to-->RE_PREVIOUS ~= NULL)
						attach_to = attach_to-->RE_PREVIOUS;
				}
				if (token-->RE_CCLASS == QUANTIFIER_RE_CC or CHOICE_RE_CC) {
					token-->RE_PREVIOUS = attach_to-->RE_PREVIOUS;
					token-->RE_UP = attach_to-->RE_UP;
					if ((attach_to-->RE_UP ~= NULL) && (attach_to-->RE_PREVIOUS == NULL))
						(attach_to-->RE_UP)-->RE_DOWN = token;
					token-->RE_DOWN = attach_to;
					bits = attach_to;
					while (bits ~= NULL) {
						bits-->RE_UP = token;
						bits = bits-->RE_NEXT;
					}
					attach_to-->RE_PREVIOUS = NULL;
					if (token-->RE_PREVIOUS ~= NULL)
						(token-->RE_PREVIOUS)-->RE_NEXT = token;
				} else {
					attach_to-->RE_NEXT = token; token-->RE_PREVIOUS = attach_to;
					token-->RE_UP = attach_to-->RE_UP;
				}
			}
		}
		
		if (token-->RE_CCLASS == CHOICE_RE_CC) {
			if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";
			token-->RE_NEXT = TEXT_TY_RE_Node(no_packets++, CHOICE_RE_CC, 0, 0, 0);
			(token-->RE_NEXT)-->RE_PREVIOUS = token;
			(token-->RE_NEXT)-->RE_UP = token-->RE_UP;
			token = token-->RE_NEXT;
		}

		attach_to = token;

		if (TEXT_TY_RE_Trace == 2) {
			print "Result:^";
			TEXT_TY_RE_DebugTree(ftxt);
		}

	}
	
	if (blevel ~= 0) return "subexpression bracket mismatch";

	if (exactly) {
		if (no_packets+3 > RE_MAX_PACKETS) return "regexp too complex";
		exactly = RE_PACKET_space-->RE_DOWN;
		token = TEXT_TY_RE_Node(no_packets++, START_RE_CC, 0, 0, 0);
		RE_PACKET_space-->RE_DOWN = token; token-->RE_UP = RE_PACKET_space;
		attach_to = TEXT_TY_RE_Node(no_packets++, SUBEXP_RE_CC, -1, 3, 0);
		token-->RE_NEXT = attach_to; attach_to-->RE_PREVIOUS = token;
		attach_to-->RE_UP = RE_PACKET_space;
		attach_to-->RE_NEXT = TEXT_TY_RE_Node(no_packets++, END_RE_CC, 0, 0, 0);
		(attach_to-->RE_NEXT)-->RE_PREVIOUS = attach_to;
		(attach_to-->RE_NEXT)-->RE_UP = RE_PACKET_space;
		attach_to-->RE_DOWN = exactly;
		while (exactly ~= NULL) {
			exactly-->RE_UP = attach_to; exactly = exactly-->RE_NEXT;
		}
	}
	
	no_packets = TEXT_TY_RE_ExpandChoices(RE_PACKET_space, no_packets);

	if (TEXT_TY_RE_Trace) {
		print "Compiled pattern:^";
		TEXT_TY_RE_DebugTree(ftxt);
	}
	
	bits = TEXT_TY_RE_CheckTree(RE_PACKET_space, no_subs); if (bits) return bits;
	
	return no_packets;
];

[ TEXT_TY_RE_RangeSyntaxCorrect ftxt rf rt
	i chm;
	for (i=rf: i<rt: i++) {
		chm = BlkValueRead(ftxt, i);
		if ((chm == '\') && (i+1<rt)) {
			chm = BlkValueRead(ftxt, ++i);
			if (((chm >= 'a') && (chm <= 'z')) ||
				((chm >= 'A') && (chm <= 'Z'))) {
				if (chm ~= 's' or 'S' or 'p' or 'P' or 'w' or 'W' or 'd'
					or 'D' or 'n' or 't' or 'l' or 'L' or 'u' or 'U')
					return "Invalid escape in {} range";
			}
		}
		if ((i+2<rt) && (BlkValueRead(ftxt, i+1) == '-')) {
			if (chm > BlkValueRead(ftxt, i+2)) return "Invalid {} range";
			i=i+2;
		}
	}
	rfalse;
];

[ TEXT_TY_RE_ExpandChoices token no_packets
	rv prev nex holder new ct n cond_node then_node else_node;
	while (token ~= NULL) {
		if (token-->RE_CCLASS == IF_RE_CC) {
			if ((token-->RE_DOWN)-->RE_CCLASS == CHOICE_RE_CC) {
				for (nex=token-->RE_DOWN, n=0: nex~=NULL: nex=nex-->RE_NEXT) n++;
				if (n~=2) return "conditional has too many clauses";
				if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";
				cond_node = TEXT_TY_RE_Node(no_packets++, CONDITION_RE_CC, 0, 0, 0);
				if (token-->RE_PAR1 >= 1) {
					cond_node-->RE_PAR1 = token-->RE_PAR1;
				}
				then_node = token-->RE_DOWN;
				then_node-->RE_CCLASS = THEN_RE_CC;
				else_node = then_node-->RE_NEXT;
				else_node-->RE_CCLASS = ELSE_RE_CC;
				if (cond_node-->RE_PAR1 < 1) {
					cond_node-->RE_DOWN = then_node-->RE_DOWN;
					then_node-->RE_DOWN = (then_node-->RE_DOWN)-->RE_NEXT;
					if (then_node-->RE_DOWN ~= NULL)
						(then_node-->RE_DOWN)-->RE_PREVIOUS = NULL;
					(cond_node-->RE_DOWN)-->RE_NEXT = NULL;
					(cond_node-->RE_DOWN)-->RE_UP = cond_node;
				}
				token-->RE_DOWN = cond_node; cond_node-->RE_UP = token;
				cond_node-->RE_NEXT = then_node; then_node-->RE_PREVIOUS = cond_node;
			} else {
				if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";
				cond_node = TEXT_TY_RE_Node(no_packets++, CONDITION_RE_CC, 0, 0, 0);
				if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";
				then_node = TEXT_TY_RE_Node(no_packets++, THEN_RE_CC, 0, 0, 0);
				if (token-->RE_PAR1 >= 1) {
					cond_node-->RE_PAR1 = token-->RE_PAR1;
					then_node-->RE_DOWN = token-->RE_DOWN;
				} else {
					cond_node-->RE_DOWN = token-->RE_DOWN;
					then_node-->RE_DOWN = (token-->RE_DOWN)-->RE_NEXT;
					(cond_node-->RE_DOWN)-->RE_NEXT = NULL;
					(cond_node-->RE_DOWN)-->RE_UP = cond_node;
				}
				token-->RE_DOWN = cond_node;
				cond_node-->RE_UP = token; cond_node-->RE_NEXT = then_node;
				then_node-->RE_PREVIOUS = cond_node; then_node-->RE_UP = token;
				then_node-->RE_NEXT = NULL;
				if (then_node-->RE_DOWN ~= NULL)
					(then_node-->RE_DOWN)-->RE_PREVIOUS = NULL;
				for (nex = then_node-->RE_DOWN: nex ~= NULL: nex = nex-->RE_NEXT) {
					nex-->RE_UP = then_node;
				}
			}
			
			if (cond_node-->RE_DOWN ~= NULL) {
				nex = cond_node-->RE_DOWN;
				if ((nex-->RE_CCLASS ~= SUBEXP_RE_CC) ||
					(nex-->RE_NEXT ~= NULL) ||
					(nex-->RE_PAR2 ~= 1 or 2)) {
					!TEXT_TY_RE_DebugSubtree(0, 0, nex, true);
					return "condition not lookahead/behind";
				}
			}
		}
		if ((token-->RE_CCLASS == CHOICE_RE_CC) && (token-->RE_PAR1 < 1)) {
			prev = token-->RE_PREVIOUS;
			nex = token-->RE_NEXT;
			while ((nex ~= NULL) && (nex-->RE_CCLASS == CHOICE_RE_CC))
				nex = nex-->RE_NEXT;
			holder = token-->RE_UP; if (holder == NULL) return "bang";
			if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";
			new = TEXT_TY_RE_Node(no_packets++, DISJUNCTION_RE_CC, 0, 0, 0);
			holder-->RE_DOWN = new; new-->RE_UP = holder;
			if (prev ~= NULL) {
				prev-->RE_NEXT = new; new-->RE_PREVIOUS = prev;
			}
			if (nex ~= NULL) {
				nex-->RE_PREVIOUS = new; new-->RE_NEXT = nex;
			}
			new-->RE_DOWN = token;
			token-->RE_PREVIOUS = NULL;
			ct = 1;
			while (token ~= NULL) {
				token-->RE_PAR1 = ct++;
				token-->RE_UP = new;
				if ((token-->RE_NEXT ~= NULL) &&
					((token-->RE_NEXT)-->RE_CCLASS ~= CHOICE_RE_CC))
					token-->RE_NEXT = NULL;
				token = token-->RE_NEXT;
			}
			new-->RE_PAR1 = ct-1;
			if (token ~= NULL) token-->RE_NEXT = NULL;
			token = new; continue;
		}
		if (token-->RE_DOWN ~= NULL) {
			no_packets = TEXT_TY_RE_ExpandChoices(token-->RE_DOWN, no_packets);
			if ((no_packets<0) || (no_packets >= RE_MAX_PACKETS)) break;
		}
		token = token-->RE_NEXT;
	}
	return no_packets;
];

[ TEXT_TY_RE_CheckTree token no_subs
	rv;
	while (token ~= NULL) {
		if (token-->RE_CCLASS == VARIABLE_RE_CC) {
			if (token-->RE_PAR1 >= no_subs) return "reference to nonexistent group";
		}
		if ((token-->RE_CCLASS == SUBEXP_RE_CC) &&
			(token-->RE_PAR2 == 1 or 2) &&
			(token-->RE_PAR3 == -1)) {
			token-->RE_PAR3 = TEXT_TY_RE_Width(token-->RE_DOWN);
			if (token-->RE_PAR3 == -1) return "variable length lookbehind not implemented";
		}
		if (token-->RE_DOWN ~= NULL) {
			rv = TEXT_TY_RE_CheckTree(token-->RE_DOWN, no_subs);
			if (rv) return rv;
		}
		token = token-->RE_NEXT;
	}
	rfalse;
];

[ TEXT_TY_RE_Width token downwards
	w rv aw choice;
	while (token ~= NULL) {
		switch (token-->RE_CCLASS) {
			DIGIT_RE_CC, NONDIGIT_RE_CC, WHITESPACE_RE_CC, NONWHITESPACE_RE_CC,
			PUNCTUATION_RE_CC, NONPUNCTUATION_RE_CC, WORD_RE_CC, NONWORD_RE_CC,
			ANYTHING_RE_CC, NOTHING_RE_CC, RANGE_RE_CC, NEWLINE_RE_CC, TAB_RE_CC,
			UCASE_RE_CC, NONUCASE_RE_CC, LCASE_RE_CC, NONLCASE_RE_CC:
				w++;
			START_RE_CC, END_RE_CC, BOUNDARY_RE_CC, NONBOUNDARY_RE_CC, ALWAYS_RE_CC:
				;
			LITERAL_RE_CC:
				w = w + token-->RE_PAR2 - token-->RE_PAR1;
			VARIABLE_RE_CC:
				return -1;
			IF_RE_CC:
				rv = TEXT_TY_RE_Width((token-->RE_DOWN)-->RE_NEXT);
				if (rv == -1) return -1;
				if (rv ~= TEXT_TY_RE_Width(((token-->RE_DOWN)-->RE_NEXT)-->RE_NEXT))
					return -1;
				w = w + rv;
			SUBEXP_RE_CC:
				if (token-->RE_PAR2 == 1 or 2) rv = 0;
				else {
					rv = TEXT_TY_RE_Width(token-->RE_DOWN);
					if (rv == -1) return -1;
				}
				w = w + rv;
			QUANTIFIER_RE_CC:
				if (token-->RE_PAR1 ~= token-->RE_PAR2) return -1;
				rv = TEXT_TY_RE_Width(token-->RE_DOWN);
				if (rv == -1) return -1;
				w = w + rv*(token-->RE_PAR1);				
			DISJUNCTION_RE_CC:
				aw = -1;
				for (choice = token-->RE_DOWN: choice ~= NULL: choice = choice-->RE_NEXT) {
					rv = TEXT_TY_RE_Width(choice-->RE_DOWN);
					!print "Option found ", rv, "^";
					if (rv == -1) return -1;
					if ((aw >= 0) && (aw ~= rv)) return -1;
					aw = rv;
				}
				w = w + aw;
			SENSITIVITY_RE_CC:
				;
		}
		if (downwards) return w;
		if (token ~= NULL) token = token-->RE_NEXT;
	}
	return w;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Parser
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global TEXT_TY_RE_RewindCount;
[ TEXT_TY_RE_PrintNoRewinds; print TEXT_TY_RE_RewindCount; ];

Constant CIS_MFLAG = 1;
Constant ACCUM_MFLAG = 2;

[ TEXT_TY_RE_Parse ftxt txt ipos insens
	ilen rv root i initial_mode;

	ilen = TEXT_TY_CharacterLength(txt);
	if ((ipos<0) || (ipos>ilen)) return -1;
	
	root = RE_PACKET_space;
	
	initial_mode = 0; if (insens) initial_mode = CIS_MFLAG;
	
	TEXT_TY_RE_Clear_Markers(RE_PACKET_space);
	
	for (:ipos<=ilen:ipos++) {
		if ((RE_PACKET_space-->RE_DOWN ~= NULL) &&
			((RE_PACKET_space-->RE_DOWN)-->RE_CCLASS == START_RE_CC) &&
			(ipos>0)) { rv = -1; break; }
		if (ipos > 0) TEXT_TY_RE_EraseConstraints(RE_PACKET_space, initial_mode);
		TEXT_TY_RE_RewindCount = 0;
		rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ilen, RE_PACKET_space, initial_mode);
		if (rv >= 0) break;
	}

	if (rv == -1) {
		root-->RE_DATA1 = -1;
		root-->RE_DATA2 = -1;
	} else {
		root-->RE_DATA1 = ipos;
		root-->RE_DATA2 = ipos+rv;
	}
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Parse At Position
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_ParseAtPosition ftxt txt ifrom ito token mode_flags
	outcome ipos npos rv i ch edge rewind_this;

	if (ifrom > ito) return -1;

	ipos = ifrom;

	.Rewind;
	while (token ~= NULL) {
		outcome = false;
		if (TEXT_TY_RE_Trace) {
			print "Matching at ", ipos, ": ";
			TEXT_TY_RE_DebugNode(token, ftxt, true);
		}

		if (ipos<ito) ch = BlkValueRead(txt, ipos); else ch = 0;

		token-->RE_MODES = mode_flags; ! Save in case of backtrack

		switch (token-->RE_CCLASS) {
			
			! Should never happen
			
			CHOICE_RE_CC: return "internal error";
			
			! Mode switches
			
			SENSITIVITY_RE_CC:
				if (token-->RE_PAR1) mode_flags = mode_flags | CIS_MFLAG;
				else mode_flags = mode_flags & (~CIS_MFLAG);
				outcome = true;
		
			! Zero-length positional markers
			
			ALWAYS_RE_CC:
				outcome = true;
			NEVER_RE_CC:
			START_RE_CC:
				if (ipos == 0) outcome = true;
			END_RE_CC:
				if (BlkValueRead(txt, ipos) == 0) outcome = true;
			BOUNDARY_RE_CC:
				rv = 0;
				if (BlkValueRead(txt, ipos) == 0 or 10 or 13 or 32 or 9
					or '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}') rv++;
				if (ipos == 0) ch = 0;
				else ch = BlkValueRead(txt, ipos-1);
				if (ch == 0 or 10 or 13 or 32 or 9
					or '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}') rv++;
				if (rv == 1) outcome = true;
			NONBOUNDARY_RE_CC:
				rv = 0;
				if (BlkValueRead(txt, ipos) == 0 or 10 or 13 or 32 or 9
					or '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}') rv++;
				if (ipos == 0) ch = 0;
				else ch = BlkValueRead(txt, ipos-1);
				if (ch == 0 or 10 or 13 or 32 or 9
					or '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}') rv++;
				if (rv ~= 1) outcome = true;

			! Control constructs
		
			IF_RE_CC:
				i = token-->RE_PAR1; ch = false;
				if (TEXT_TY_RE_Trace) {
					print "Trying conditional from ", ipos, ": ";
					TEXT_TY_RE_DebugNode(token, ftxt, true);
				}
				if (i >= 1) {
					 if ((i<RE_Subexpressions-->10) &&
					 	((RE_Subexpressions-->i)-->RE_DATA1 >= 0)) ch = true;
				} else {					 	
					rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito,
						(token-->RE_DOWN)-->RE_DOWN, mode_flags);
					if (rv >= 0) ch = true;
				}
				if (TEXT_TY_RE_Trace) {
					print "Condition found to be ", ch, "^";
				}
				if (ch) {
					rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito,
						((token-->RE_DOWN)-->RE_NEXT)-->RE_DOWN, mode_flags);
					!print "Then clause returned ", rv, "^";
				} else {
					if ((((token-->RE_DOWN)-->RE_NEXT)-->RE_NEXT) == NULL)
						rv = 0; ! The empty else clause matches
					else rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito,
						(((token-->RE_DOWN)-->RE_NEXT)-->RE_NEXT)-->RE_DOWN, mode_flags);
					!print "Else clause returned ", rv, "^";
				}
				if (rv >= 0) {
					outcome = true;
					ipos = ipos + rv;
				}
			DISJUNCTION_RE_CC:
				if (TEXT_TY_RE_Trace) {
					print "Trying disjunction from ", ipos, ": ";
					TEXT_TY_RE_DebugNode(token, ftxt, true);
				}
				for (ch = token-->RE_DOWN: ch ~= NULL: ch = ch-->RE_NEXT) {
					if (ch-->RE_PAR1 <= token-->RE_CONSTRAINT) continue;
					if (TEXT_TY_RE_Trace) {
						print "Trying choice at ", ipos, ": ";
						TEXT_TY_RE_DebugNode(ch, ftxt, true);
					}
					rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito,
						ch-->RE_DOWN, mode_flags);
					if (rv >= 0) {
						token-->RE_DATA1 = ipos; ! Where match was made
						token-->RE_DATA2 = ch-->RE_PAR1; ! Option taken
						ipos = ipos + rv;
						outcome = true;
						if (TEXT_TY_RE_Trace) {
							print "Choice worked with width ", rv, ": ";
							TEXT_TY_RE_DebugNode(ch, ftxt, true);
						}
						break;
					} else {
						if (mode_flags & ACCUM_MFLAG == false)
							TEXT_TY_RE_FailSubexpressions(ch-->RE_DOWN);
					}						
				}
				if (outcome == false) {
					if (TEXT_TY_RE_Trace) {
						print "Failed disjunction from ", ipos, ": ";
						TEXT_TY_RE_DebugNode(token, ftxt, true);
					}
					token-->RE_DATA1 = ipos; ! Where match was tried
					token-->RE_DATA2 = -1; ! No option was taken
				}
			SUBEXP_RE_CC:
				if (token-->RE_PAR2 == 1 or 2) {
					npos = ipos - token-->RE_PAR3;
					if (npos<0) rv = -1; ! Lookbehind fails: nothing behind
					else rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, npos, ito, token-->RE_DOWN,
						mode_flags);
				} else {
					switch (token-->RE_PAR3) {
						0: rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito, token-->RE_DOWN,
							mode_flags);
						1: rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito, token-->RE_DOWN,
							mode_flags & (~CIS_MFLAG));
						2: rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito, token-->RE_DOWN,
							mode_flags | CIS_MFLAG);
					}
				}
				npos = ipos;
				if (rv >= 0) npos = ipos + rv;
				switch (token-->RE_PAR2) {
					1: if (rv >= 0) rv = 0;
					2: if (rv >= 0) rv = -1; else rv = 0;
				}
				if (rv >= 0) {
					token-->RE_DATA1 = ipos;
					ipos = ipos + rv;
					token-->RE_DATA2 = npos;
					outcome = true;
				} else {
					if (mode_flags & ACCUM_MFLAG == false) {
						token-->RE_DATA1 = -1;
						token-->RE_DATA2 = -1;
					}
				}
				if (token-->RE_PAR2 == 2) TEXT_TY_RE_FailSubexpressions(token, true);
			QUANTIFIER_RE_CC:
				token-->RE_DATA1 = ipos;
				if ((token-->RE_DOWN)-->RE_CCLASS == SUBEXP_RE_CC) {
					(token-->RE_DOWN)-->RE_CACHE1 = -1;
					(token-->RE_DOWN)-->RE_CACHE2 = -1;	
				}
				if (TEXT_TY_RE_Trace) {
					print "Trying quantifier from ", ipos, ": ";
					TEXT_TY_RE_DebugNode(token, ftxt, true);
				}
				if (token-->RE_PAR3 == false) { ! Greedy quantifier
					!edge = ito; if (token-->RE_CONSTRAINT >= 0) edge = token-->RE_CONSTRAINT;
					edge = token-->RE_PAR2;
					if (token-->RE_CONSTRAINT >= 0) edge = token-->RE_CONSTRAINT;
					rv = -1;
					for (i=0, npos=ipos: i<edge: i++) {
						if (TEXT_TY_RE_Trace) {
							print "Trying quant rep ", i+1, " at ", npos, ": ";
							TEXT_TY_RE_DebugNode(token, ftxt, true);
						}
						rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, npos, ito, token-->RE_DOWN,
							mode_flags | ACCUM_MFLAG);
						if (rv < 0) break;
						if ((token-->RE_DOWN)-->RE_CCLASS == SUBEXP_RE_CC) {
							(token-->RE_DOWN)-->RE_CACHE1 = (token-->RE_DOWN)-->RE_DATA1;
							(token-->RE_DOWN)-->RE_CACHE2 = (token-->RE_DOWN)-->RE_DATA2;	
						}
						if ((rv == 0) && (token-->RE_PAR2 == 30000) && (i>=1)) { i++; break; }
						npos = npos + rv;
					}
					if ((i >= token-->RE_PAR1) && (i <= token-->RE_PAR2))
						outcome = true;
				} else { ! Lazy quantifier
					edge = token-->RE_PAR1;
					if (token-->RE_CONSTRAINT > edge) edge = token-->RE_CONSTRAINT;
					for (i=0, npos=ipos: (npos<ito) && (i < token-->RE_PAR2): i++) {
						if (i >= edge) break;
						if (TEXT_TY_RE_Trace) {
							print "Trying quant rep ", i+1, " at ", npos, ": ";
							TEXT_TY_RE_DebugNode(token, ftxt, true);
						}
						rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, npos, ito, token-->RE_DOWN,
							mode_flags | ACCUM_MFLAG);
						if (rv < 0) break;
						if ((token-->RE_DOWN)-->RE_CCLASS == SUBEXP_RE_CC) {
							(token-->RE_DOWN)-->RE_CACHE1 = (token-->RE_DOWN)-->RE_DATA1;
							(token-->RE_DOWN)-->RE_CACHE2 = (token-->RE_DOWN)-->RE_DATA2;	
						}
						if ((rv == 0) && (token-->RE_PAR2 == 30000) && (i>=1)) { i++; break; }
						npos = npos + rv;
					}
					if ((i >= edge) && (i <= token-->RE_PAR2))
						outcome = true;
				}
				if (outcome) {
					if (token-->RE_PAR3 == false) { ! Greedy quantifier
						if (i > token-->RE_PAR1) { ! I.e., if we have been greedy
							token-->RE_DATA2 = i-1; ! And its edge limitation
						} else {
							token-->RE_DATA2 = -1;
						}
					} else { ! Lazy quantifier
						if (i < token-->RE_PAR2) { ! I.e., if we have been lazy
							token-->RE_DATA2 = i+1; ! And its edge limitation
						} else {
							token-->RE_DATA2 = -1;
						}
					}
					ipos = npos;
					if ((i == 0) && (mode_flags & ACCUM_MFLAG == false))
						TEXT_TY_RE_FailSubexpressions(token-->RE_DOWN);
					if ((token-->RE_DOWN)-->RE_CCLASS == SUBEXP_RE_CC) {
						(token-->RE_DOWN)-->RE_DATA1 = (token-->RE_DOWN)-->RE_CACHE1;
						(token-->RE_DOWN)-->RE_DATA2 = (token-->RE_DOWN)-->RE_CACHE2;	
					}
					if (TEXT_TY_RE_Trace) {
						print "Successful quant reps ", i, ": ";
						TEXT_TY_RE_DebugNode(token, ftxt, true);
					}
				} else {
					!token-->RE_DATA2 = -1;
					if (mode_flags & ACCUM_MFLAG == false)
						TEXT_TY_RE_FailSubexpressions(token-->RE_DOWN);
					if (TEXT_TY_RE_Trace) {
						print "Failed quant reps ", i, ": ";
						TEXT_TY_RE_DebugNode(token, ftxt, true);
					}
				}
				
			! Character classes
				
			NOTHING_RE_CC: ;
			ANYTHING_RE_CC: if (ch) outcome = true; ipos++;
			WHITESPACE_RE_CC:
				if (ch == 10 or 13 or 32 or 9) { outcome = true; ipos++; }
			NONWHITESPACE_RE_CC:
				if ((ch) && (ch ~= 10 or 13 or 32 or 9)) { outcome = true; ipos++; }
			PUNCTUATION_RE_CC:
				if (ch == '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}') { outcome = true; ipos++; }
			NONPUNCTUATION_RE_CC:
				if ((ch) && (ch ~= '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}')) { outcome = true; ipos++; }
			WORD_RE_CC:
				if ((ch) && (ch ~= 10 or 13 or 32 or 9
					or '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}')) { outcome = true; ipos++; }
			NONWORD_RE_CC:
				if (ch == 10 or 13 or 32 or 9
					or '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}') { outcome = true; ipos++; }
			DIGIT_RE_CC:
				if (ch == '0' or '1' or '2' or '3' or '4'
					or '5' or '6' or '7' or '8' or '9') { outcome = true; ipos++; }
			NONDIGIT_RE_CC:
				if ((ch) && (ch ~= '0' or '1' or '2' or '3' or '4'
					or '5' or '6' or '7' or '8' or '9')) { outcome = true; ipos++; }
			LCASE_RE_CC:
				if (CharIsOfCase(ch, 0)) { outcome = true; ipos++; }
			NONLCASE_RE_CC:
				if ((ch) && (CharIsOfCase(ch, 0) == false)) { outcome = true; ipos++; }
			UCASE_RE_CC:
				if (CharIsOfCase(ch, 1)) { outcome = true; ipos++; }
			NONUCASE_RE_CC:
				if ((ch) && (CharIsOfCase(ch, 1) == false)) { outcome = true; ipos++; }
			NEWLINE_RE_CC: if (ch == 10) { outcome = true; ipos++; }
			TAB_RE_CC: if (ch == 9) { outcome = true; ipos++; }
			RANGE_RE_CC:
				if (TEXT_TY_RE_Range(ch, ftxt,
					token-->RE_PAR1, token-->RE_PAR2, token-->RE_PAR3, mode_flags & CIS_MFLAG))
					{ outcome = true; ipos++; }
			
			! Substring matches
			
			LITERAL_RE_CC:
				rv = TEXT_TY_RE_MatchSubstring(txt, ipos,
					ftxt, token-->RE_PAR1, token-->RE_PAR2, mode_flags & CIS_MFLAG);
				if (rv >= 0) { ipos = ipos + rv; outcome = true; }
			VARIABLE_RE_CC:
				i = token-->RE_PAR1;
				if ((RE_Subexpressions-->i)-->RE_DATA1 >= 0) {
					rv = TEXT_TY_RE_MatchSubstring(txt, ipos,
						txt, (RE_Subexpressions-->i)-->RE_DATA1,
						(RE_Subexpressions-->i)-->RE_DATA2, mode_flags & CIS_MFLAG);
					if (rv >= 0) { ipos = ipos + rv; outcome = true; }
				}
				.NeverMatchIncompleteVar;
		}
		
		if (outcome == false) {
			if (TEXT_TY_RE_RewindCount++ >= 10000) {
				if (TEXT_TY_RE_RewindCount == 10001) {
					style bold; print "OVERFLOW^"; style roman;
				}
				return -1;
			}
			if (TEXT_TY_RE_Trace) {
				print "Rewind sought from failure at pos ", ipos, " with: ";
					TEXT_TY_RE_DebugNode(token, ftxt, true);
			}
			if ((token-->RE_CCLASS == QUANTIFIER_RE_CC) &&
				(TEXT_TY_RE_SeekBacktrack(token-->RE_DOWN, ftxt, false, ito, false)))
				jump RewindFound;
			if (mode_flags & ACCUM_MFLAG == false) TEXT_TY_RE_FailSubexpressions(token);
			token = token-->RE_PREVIOUS;
			while (token ~= NULL) {
				if (TEXT_TY_RE_SeekBacktrack(token, ftxt, true, ito, false)) {
					.RewindFound;
					ipos = token-->RE_DATA1;
					mode_flags = token-->RE_MODES;
					if (mode_flags & ACCUM_MFLAG == false)
						TEXT_TY_RE_FailSubexpressions(token, true);
					if (ipos == -1)
						TEXT_TY_RE_DebugTree(ftxt, true);
					if (TEXT_TY_RE_Trace) {
						print "^[", ifrom, ",", ito, "] rewinding to ", ipos, " at ";
						TEXT_TY_RE_DebugNode(token, ftxt, true);
					}
					jump Rewind;
				}
				token = token-->RE_PREVIOUS;
			}
			if (TEXT_TY_RE_Trace)
				print "^Rewind impossible^";
			return -1;
		}

		token = token-->RE_NEXT;
	}
	return ipos - ifrom;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Backtracking
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_SeekBacktrack token ftxt downwards ito report_only
	untried;
	for (: token ~= NULL: token = token-->RE_NEXT) {
		if ((TEXT_TY_RE_Trace) && (report_only == false)) {
			print "Scan for rewind: ";
			TEXT_TY_RE_DebugNode(token, ftxt, true);
		}
		if ((token-->RE_CCLASS == SUBEXP_RE_CC) &&
			(token-->RE_PAR2 == 1 or 2 or 4)) {
			if (downwards) rfalse;
			continue;
		}
		if (token-->RE_DOWN ~= NULL) {
			if ((TEXT_TY_RE_Trace) && (report_only == false)) print "Descend^";
			if (TEXT_TY_RE_SeekBacktrack(token-->RE_DOWN, ftxt, false, ito, report_only)) rtrue;
		}
		untried = false;
		switch (token-->RE_CCLASS) {
			DISJUNCTION_RE_CC:
				if ((token-->RE_DATA2 >= 1) &&
					(token-->RE_DATA2 < token-->RE_PAR1) &&
					(token-->RE_CONSTRAINT < token-->RE_PAR1)) { ! Matched but earlier than last
					if (report_only) rtrue;
					if (token-->RE_CONSTRAINT == -1)
						token-->RE_CONSTRAINT = 1;
					else
						(token-->RE_CONSTRAINT)++;
					untried = true;
				}
			QUANTIFIER_RE_CC:
				if (token-->RE_CONSTRAINT ~= -2) {
					if ((TEXT_TY_RE_Trace) && (report_only == false)) {
						print "Quant with cons not -2: ";
						TEXT_TY_RE_DebugNode(token, ftxt, true);
					}
					if (token-->RE_DATA2 >= 0) {
						if (report_only) rtrue;
						token-->RE_CONSTRAINT = token-->RE_DATA2;
						untried = true;
					}
				}
		}
		if (untried) {
			if (TEXT_TY_RE_Trace) {
				print "Grounds for rewind at: ";
				TEXT_TY_RE_DebugNode(token, ftxt, true);
			}
			TEXT_TY_RE_EraseConstraints(token-->RE_NEXT);
			TEXT_TY_RE_EraseConstraints(token-->RE_DOWN);
			rtrue;
		}
		if (downwards) rfalse;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Fail Subexpressions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_FailSubexpressions token downwards;
	for (: token ~= NULL: token = token-->RE_NEXT) {
		if (token-->RE_DOWN ~= NULL) TEXT_TY_RE_FailSubexpressions(token-->RE_DOWN);
		if (token-->RE_CCLASS == SUBEXP_RE_CC) {
			token-->RE_DATA1 = -1;
			token-->RE_DATA2 = -1;
		}
		if (downwards) break;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Erasing Constraints
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_EraseConstraints token;
	while (token ~= NULL) {
		switch (token-->RE_CCLASS) {
			DISJUNCTION_RE_CC: token-->RE_CONSTRAINT = -1;
			QUANTIFIER_RE_CC: token-->RE_CONSTRAINT = -1;
		}
		if (token-->RE_DOWN) TEXT_TY_RE_EraseConstraints(token-->RE_DOWN);
		token = token-->RE_NEXT;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Matching Literal Text
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_MatchSubstring txt ipos mtxt mfrom mto insens
	i ch;
	if (mfrom < 0) return 0;
	if (insens)
		for (i=mfrom:i<mto:i++) {
			ch = BlkValueRead(mtxt, i);
			if (BlkValueRead(txt, ipos++) ~= ch or TEXT_TY_RevCase(ch))
				return -1;
		}
	else
		for (i=mfrom:i<mto:i++)
			if (BlkValueRead(txt, ipos++) ~= BlkValueRead(mtxt, i))
				return -1;
	return mto-mfrom;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Matching Character Range
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_Range ch ftxt rf rt negate insens
	i chm upper crev;
	if (ch == 0) rfalse;
	if (negate == true) {
		if (TEXT_TY_RE_Range(ch, ftxt, rf, rt, false, insens)) rfalse;
		rtrue;
	}
	for (i=rf: i<rt: i++) {
		chm = BlkValueRead(ftxt, i);
		if ((chm == '\') && (i+1<rt)) {
			chm = BlkValueRead(ftxt, ++i);
			switch (chm) {
				's':
					if (ch == 10 or 13 or 32 or 9) rtrue;
				'S':
					if ((ch) && (ch ~= 10 or 13 or 32 or 9)) rtrue;
				'p':
					if (ch == '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}') rtrue;
				'P':
					if ((ch) && (ch ~= '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}')) rtrue;
				'w':
					if ((ch) && (ch ~= 10 or 13 or 32 or 9
						or '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}')) rtrue;
				'W':
					if (ch == 10 or 13 or 32 or 9
						or '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}') rtrue;
				'd':
					if (ch == '0' or '1' or '2' or '3' or '4'
						or '5' or '6' or '7' or '8' or '9') rtrue;
				'D':
					if ((ch) && (ch ~= '0' or '1' or '2' or '3' or '4'
						or '5' or '6' or '7' or '8' or '9')) rtrue;
				'l': if (CharIsOfCase(ch, 0)) rtrue;
				'L': if (CharIsOfCase(ch, 0) == false) rtrue;
				'u': if (CharIsOfCase(ch, 1)) rtrue;
				'U': if (CharIsOfCase(ch, 1) == false) rtrue;
				'n': if (ch == 10) rtrue;
				't': if (ch == 9) rtrue;
			}
		} else {
			if ((i+2<rt) && (BlkValueRead(ftxt, i+1) == '-')) {
				upper = BlkValueRead(ftxt, i+2);
				if ((ch >= chm) && (ch <= upper)) rtrue;
				if (insens) {
					crev = TEXT_TY_RevCase(ch);
					if ((crev >= chm) && (crev <= upper)) rtrue;
				}
				i=i+2;
			} else {
				if (chm == ch) rtrue;
				if ((insens) && (chm == TEXT_TY_RevCase(ch))) rtrue;
			}
		}
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Search And Replace
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Replace_RE ftxtype txt ftxt rtxt insens exactly
	r p p1 p2 cp cp1 cp2;
	!print "Find: "; BlkValueDebug(ftxt); print "^";
	!print "Rep: "; BlkValueDebug(rtxt); print "^";
	!print "In: "; BlkValueDebug(txt); print "^";
	if (rtxt == 0 or 1) { cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt); }
	else TEXT_TY_Transmute(txt);
	cp1 = ftxt-->0; p1 = TEXT_TY_Temporarily_Transmute(ftxt);
	cp2 = rtxt-->0; p2 = TEXT_TY_Temporarily_Transmute(rtxt);
	r = TEXT_TY_Replace_REI(ftxtype, txt, ftxt, rtxt, insens, exactly);
	TEXT_TY_Untransmute(ftxt, p1, cp1);
	TEXT_TY_Untransmute(rtxt, p2, cp2);
	if (rtxt == 0 or 1) TEXT_TY_Untransmute(txt, p, cp);
	return r;
];

[ TEXT_TY_Replace_REI ftxtype txt ftxt rtxt insens exactly
	ctxt csize ilen i cl mpos cpos ch chm;

	ilen = TEXT_TY_CharacterLength(txt);

	TEXT_TY_RE_Err = 0;
	switch (ftxtype) {
		REGEXP_BLOB: i = TEXT_TY_RE_CompileTree(ftxt, exactly);
		CHR_BLOB: i = TEXT_TY_CHR_CompileTree(ftxt, exactly);
		default: "*** bad ftxtype ***";
	}
	
	if ((i<0) || (i>RE_MAX_PACKETS)) {
		TEXT_TY_RE_Err = i;
		print "*** Regular expression error: ", (string) TEXT_TY_RE_Err, " ***^";
		RunTimeProblem(RTP_REGEXPSYNTAXERROR);
		return 0;
	}

	if (TEXT_TY_RE_Trace) {
		TEXT_TY_RE_DebugTree(ftxt);
		print "(compiled to ", i, " packets)^";
	}
	
	if (ftxtype == REGEXP_BLOB) TEXT_TY_RE_EmptyMatchVars();
	mpos = 0; chm = 0; cpos = 0;
	while (TEXT_TY_RE_Parse(ftxt, txt, mpos, insens) >= 0) {
		chm++;
		
		if (TEXT_TY_RE_Trace) {
			print "^*** Match ", chm, " found (", RE_PACKET_space-->RE_DATA1, ",",
				RE_PACKET_space-->RE_DATA2, "): ";
			if (RE_PACKET_space-->RE_DATA1 == RE_PACKET_space-->RE_DATA2) {
				print "<empty>";
			}
			for (i=RE_PACKET_space-->RE_DATA1:i<RE_PACKET_space-->RE_DATA2:i++) {
				print (char) BlkValueRead(txt, i);
			}
			print " ***^";
		}
		
		if (rtxt == 0) break; ! Accept only one match, replace nothing
		
		if (rtxt ~= 0 or 1) {
			if (chm == 1) {
				ctxt = BlkValueCreate(TEXT_TY);
				TEXT_TY_Transmute(ctxt);
				csize = BlkValueLBCapacity(ctxt);
			}

			for (i=cpos:i<RE_PACKET_space-->RE_DATA1:i++) {
				ch = BlkValueRead(txt, i);
				if (cl+1 >= csize) {
					if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
					csize = BlkValueLBCapacity(ctxt);
				}
				BlkValueWrite(ctxt, cl++, ch);
			}
			BlkValueWrite(ctxt, cl, 0);
	
			TEXT_TY_Concatenate(ctxt, rtxt, ftxtype, txt);
			csize = BlkValueLBCapacity(ctxt);
			cl = TEXT_TY_CharacterLength(ctxt);			
		}

		mpos = RE_PACKET_space-->RE_DATA2; cpos = mpos;
		if (RE_PACKET_space-->RE_DATA1 == RE_PACKET_space-->RE_DATA2)
			mpos++;

		if (TEXT_TY_RE_Trace) {
			if (chm == 100) { ! Purely to keep the output from being excessive
				print "(Stopping after 100 matches.)^"; break;
			}
		}
	}
	if (chm > 0) {
		if (rtxt ~= 0 or 1) {
			for (i=cpos:i<ilen:i++) {
				ch = BlkValueRead(txt, i);
				if (cl+1 >= csize) {
					if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
					csize = BlkValueLBCapacity(ctxt);
				}
				BlkValueWrite(ctxt, cl++, ch);
			}
		}
		
		if (ftxtype == REGEXP_BLOB) {
			TEXT_TY_RE_CreateMatchVars(txt);
			if (TEXT_TY_RE_Trace)
				TEXT_TY_RE_DebugMatchVars(txt);
		}

		if (rtxt ~= 0 or 1) {
			BlkValueWrite(ctxt, cl, 0);
			BlkValueCopy(txt, ctxt);	
			BlkValueFree(ctxt);
		}
	}
	return chm;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Concatenation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_Concatenate txt_to txt_from blobtype txt_ref
	pos len ch i tosize x y case;
	if ((txt_to==0) || (BlkValueWeakKind(txt_to) ~= TEXT_TY)) rfalse;
	if ((txt_from==0) || (BlkValueWeakKind(txt_from) ~= TEXT_TY)) return txt_to;
	pos = TEXT_TY_CharacterLength(txt_to);
	tosize = BlkValueLBCapacity(txt_to);
	len = TEXT_TY_CharacterLength(txt_from);
	for (i=0:i<len:i++) {
		ch = BlkValueRead(txt_from, i);
		if ((ch == '\') && (i < len-1)) {
			ch = BlkValueRead(txt_from, ++i);
			if (ch == 'n') ch = 10;
			if (ch == 't') ch = 9;
			case = -1;
			if (ch == 'l') case = 0;
			if (ch == 'u') case = 1;
			if (case >= 0) ch = BlkValueRead(txt_from, ++i);
			if ((ch >= '0') && (ch <= '9')) {
				ch = ch - '0';
				if (ch < RE_Subexpressions-->10) {
					x = (RE_Subexpressions-->ch)-->RE_DATA1;
					y = (RE_Subexpressions-->ch)-->RE_DATA2;
					if (x >= 0) {
						for (:x<y:x++) {
							ch = BlkValueRead(txt_ref, x);
							if (pos+1 >= tosize) {
								if (BlkValueSetLBCapacity(txt_to, 2*tosize) == false) break;
								tosize = BlkValueLBCapacity(txt_to);
							}
							if (case >= 0)
								BlkValueWrite(txt_to, pos++, CharToCase(ch, case));
							else
								BlkValueWrite(txt_to, pos++, ch);
						}
					}
				}
				continue;
			}
			
		}
		if (pos+1 >= tosize) {
			if (BlkValueSetLBCapacity(txt_to, 2*tosize) == false) break;
			tosize = BlkValueLBCapacity(txt_to);
		}
		BlkValueWrite(txt_to, pos++, ch);
	}
	BlkValueWrite(txt_to, pos, 0);
	return txt_to;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Block Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant STORA_ACTION_F = 0;
Constant STORA_NOUN_F = 1;
Constant STORA_SECOND_F = 2;
Constant STORA_ACTOR_F = 3;
Constant STORA_REQUEST_F = 4;
Constant STORA_COMMAND_TEXT_F = 5;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: KOV Support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Support task arg1 arg2 arg3;
	switch(task) {
		CREATE_KOVS:      return STORED_ACTION_TY_Create(arg2);
		DESTROY_KOVS:     STORED_ACTION_TY_Destroy(arg1);
		MAKEMUTABLE_KOVS: return 1;
		COPYQUICK_KOVS:   rtrue;
		COPYSB_KOVS:	  BlkValueCopySB1(arg1, arg2);
		KINDDATA_KOVS:    return 0;
		EXTENT_KOVS:      return 6;
		COPY_KOVS:        STORED_ACTION_TY_Copy(arg1, arg2);
		COMPARE_KOVS:     return STORED_ACTION_TY_Compare(arg1, arg2);
		HASH_KOVS:        return STORED_ACTION_TY_Hash(arg1);
		DEBUG_KOVS:       print " = ", (STORED_ACTION_TY_Say) arg1;
	}
	! We choose not to respond to: CAST_KOVS, COPYKIND_KOVS, READ_FILE_KOVS, WRITE_FILE_KOVS
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Creation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Create sb stora;
	stora = FlexAllocate(6*WORDSIZE, STORED_ACTION_TY, BLK_FLAG_WORD);
	BlkValueWrite(stora, STORA_ACTION_F, ##Wait, true); ! action
	BlkValueWrite(stora, STORA_NOUN_F, 0, true); ! noun
	BlkValueWrite(stora, STORA_SECOND_F, 0, true); ! second
	BlkValueWrite(stora, STORA_ACTOR_F, player, true); ! actor
	BlkValueWrite(stora, STORA_REQUEST_F, false, true); ! whether a request
	BlkValueWrite(stora, STORA_COMMAND_TEXT_F, 0, true); ! text of command if necessary, 0 if not
	return BlkValueCreateSB1(sb, stora);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Setting Up
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_New a n s ac req  stora;
	if (stora == 0) stora = BlkValueCreate(STORED_ACTION_TY);
	BlkValueWrite(stora, STORA_ACTION_F, a);
	BlkValueWrite(stora, STORA_NOUN_F, n);
	BlkValueWrite(stora, STORA_SECOND_F, s);
	BlkValueWrite(stora, STORA_ACTOR_F, ac);
	BlkValueWrite(stora, STORA_REQUEST_F, req);
	BlkValueWrite(stora, STORA_COMMAND_TEXT_F, 0);
	return stora;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Destruction
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Destroy stora toc;
	toc = BlkValueRead(stora, STORA_COMMAND_TEXT_F);
	if (toc) BlkValueFree(toc);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Copying
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Copy storato storafrom tocfrom tocto;
	tocfrom = BlkValueRead(storafrom, STORA_COMMAND_TEXT_F);
	if (tocfrom == 0) return;
	tocto = BlkValueCreate(TEXT_TY);
	BlkValueCopy(tocto, tocfrom);
	BlkValueWrite(storato, STORA_COMMAND_TEXT_F, tocto);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Comparison
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Compare storaleft storaright delta itleft itright;
	delta = BlkValueRead(storaleft, STORA_ACTION_F) - BlkValueRead(storaright, STORA_ACTION_F);
	if (delta) return delta;
	delta = BlkValueRead(storaleft, STORA_NOUN_F) - BlkValueRead(storaright, STORA_NOUN_F);
	if (delta) return delta;
	delta = BlkValueRead(storaleft, STORA_SECOND_F) - BlkValueRead(storaright, STORA_SECOND_F);
	if (delta) return delta;
	delta = BlkValueRead(storaleft, STORA_ACTOR_F) - BlkValueRead(storaright, STORA_ACTOR_F);
	if (delta) return delta;
	delta = BlkValueRead(storaleft, STORA_REQUEST_F) - BlkValueRead(storaright, STORA_REQUEST_F);
	if (delta) return delta;
	itleft = BlkValueRead(storaleft, STORA_COMMAND_TEXT_F);
	itright = BlkValueRead(storaright, STORA_COMMAND_TEXT_F);
	if ((itleft ~= 0) && (itright ~= 0))
		return TEXT_TY_Support(COMPARE_KOVS, itleft, itright);
	return itleft - itright;
];

[ STORED_ACTION_TY_Distinguish stora1 stora2;
	if (STORED_ACTION_TY_Compare(stora1, stora2) == 0) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Hashing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Hash stora  rv it;
	rv = BlkValueRead(stora, STORA_ACTION_F);
	rv = rv * 33 + BlkValueRead(stora, STORA_NOUN_F);
	rv = rv * 33 + BlkValueRead(stora, STORA_SECOND_F);
	rv = rv * 33 + BlkValueRead(stora, STORA_ACTOR_F);
	rv = rv * 33 + BlkValueRead(stora, STORA_REQUEST_F);
	it = BlkValueRead(stora, STORA_COMMAND_TEXT_F);
	if (it ~= 0)
		rv = rv * 33 + TEXT_TY_Support(HASH_KOVS, it);
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Say stora text_of_command saved_command saved_pn saved_action K1 K2 at cf cw;
	if ((stora==0) || (BlkValueWeakKind(stora) ~= STORED_ACTION_TY)) return;
	text_of_command = BlkValueRead(stora, STORA_COMMAND_TEXT_F);
	if (text_of_command) {
		saved_command = BlkValueCreate(TEXT_TY);
		BlkValueCast(saved_command, SNIPPET_TY, players_command);
		SetPlayersCommand(text_of_command);
	}
	saved_pn = parsed_number; saved_action = action;
	action = BlkValueRead(stora, STORA_ACTION_F);
	cf = consult_from; cw = consult_words;
	at = FindAction(-1);
	K1 = ActionData-->(at+AD_NOUN_KOV);
	K2 = ActionData-->(at+AD_SECOND_KOV);
	if (K1 ~= OBJECT_TY) {
		parsed_number = BlkValueRead(stora, STORA_NOUN_F);
		if ((K1 == UNDERSTANDING_TY) && (text_of_command == 0)) {
			if (saved_command == 0) saved_command = BlkValueCreate(TEXT_TY);
			BlkValueCast(saved_command, SNIPPET_TY, players_command);
			text_of_command = BlkValueCreate(TEXT_TY);
			BlkValueCopy(text_of_command, parsed_number);
			SetPlayersCommand(text_of_command);
			parsed_number = players_command;
			consult_from = parsed_number/100; consult_words = parsed_number%100;
		}
	}
	if (K2 ~= OBJECT_TY) {
		parsed_number = BlkValueRead(stora, STORA_SECOND_F);
		if ((K2 == UNDERSTANDING_TY) && (text_of_command == 0)) {
			if (saved_command == 0) saved_command = BlkValueCreate(TEXT_TY);
			BlkValueCast(saved_command, SNIPPET_TY, players_command);
			text_of_command = BlkValueCreate(TEXT_TY);
			BlkValueCopy(text_of_command, parsed_number);
			SetPlayersCommand(text_of_command);
			parsed_number = players_command;
			consult_from = parsed_number/100; consult_words = parsed_number%100;
		}
	}	
	DB_Action(
		BlkValueRead(stora, STORA_ACTOR_F),
		BlkValueRead(stora, STORA_REQUEST_F),
		BlkValueRead(stora, STORA_ACTION_F),
		BlkValueRead(stora, STORA_NOUN_F),
		BlkValueRead(stora, STORA_SECOND_F), true);
	parsed_number = saved_pn; action = saved_action;
	consult_from = cf; consult_words = cw;
	if (text_of_command) {
		SetPlayersCommand(saved_command);
		BlkValueFree(saved_command);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Involvement
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Involves stora item at;
	at = FindAction(BlkValueRead(stora, STORA_ACTION_F));
	if (at) {
		if ((ActionData-->(at+AD_NOUN_KOV) == OBJECT_TY) &&
			(BlkValueRead(stora, STORA_NOUN_F) == item)) rtrue;
		if ((ActionData-->(at+AD_SECOND_KOV) == OBJECT_TY) &&
			(BlkValueRead(stora, STORA_SECOND_F) == item)) rtrue;
	}
	if (BlkValueRead(stora, STORA_ACTOR_F) == item) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Nouns
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Part stora ind at ado;
	if (ind == STORA_NOUN_F or STORA_SECOND_F) {
		if (ind == STORA_NOUN_F) ado = AD_NOUN_KOV; else ado = AD_SECOND_KOV;
		at = FindAction(BlkValueRead(stora, STORA_ACTION_F));
		if ((at) && (ActionData-->(at+ado) == OBJECT_TY)) return BlkValueRead(stora, ind);
		return nothing;
	}
	return BlkValueRead(stora, ind);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Pattern Matching
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array SAT_Tmp-->7;
[ STORED_ACTION_TY_Adopt stora at;
	SAT_Tmp-->1 = action;
	SAT_Tmp-->2 = noun;
	SAT_Tmp-->3 = second;
	SAT_Tmp-->4 = actor;
	SAT_Tmp-->5 = act_requester;
	SAT_Tmp-->6 = parsed_number;
	action = BlkValueRead(stora, STORA_ACTION_F);
	at = FindAction(-1);
	if (ActionData-->(at+AD_NOUN_KOV) == OBJECT_TY)
		noun = BlkValueRead(stora, STORA_NOUN_F);
	else {
		parsed_number = BlkValueRead(stora, STORA_NOUN_F);
		noun = nothing;
	}
	if (ActionData-->(at+AD_SECOND_KOV) == OBJECT_TY)
		second = BlkValueRead(stora, STORA_SECOND_F);
	else {
		parsed_number = BlkValueRead(stora, STORA_SECOND_F);
		second = nothing;
	}
	actor = BlkValueRead(stora, STORA_ACTOR_F);
	if (BlkValueRead(stora, STORA_REQUEST_F)) act_requester = player; else act_requester = nothing;
];

[ STORED_ACTION_TY_Unadopt;
	action = SAT_Tmp-->1;
	noun = SAT_Tmp-->2;
	second = SAT_Tmp-->3;	
	actor = SAT_Tmp-->4;	
	act_requester = SAT_Tmp-->5;
	parsed_number = SAT_Tmp-->6;
	return SAT_Tmp-->0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Current Action
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Current stora at text_of_command;
	if ((stora==0) || (BlkValueWeakKind(stora) ~= STORED_ACTION_TY)) return 0;
	BlkValueWrite(stora, STORA_ACTION_F, action);
	at = FindAction(-1);

	if (ActionData-->(at+AD_NOUN_KOV) == OBJECT_TY)
		BlkValueWrite(stora, STORA_NOUN_F, noun);
	else
		BlkValueWrite(stora, STORA_NOUN_F, parsed_number);
	if (ActionData-->(at+AD_SECOND_KOV) == OBJECT_TY)
		BlkValueWrite(stora, STORA_SECOND_F, second);
	else
		BlkValueWrite(stora, STORA_SECOND_F, parsed_number);
	BlkValueWrite(stora, STORA_ACTOR_F, actor);
	if (act_requester) BlkValueWrite(stora, STORA_REQUEST_F, true);
	else BlkValueWrite(stora, STORA_REQUEST_F, false);

	if ((at) && ((ActionData-->(at+AD_NOUN_KOV) == UNDERSTANDING_TY) ||
			(ActionData-->(at+AD_SECOND_KOV) == UNDERSTANDING_TY))) {
		text_of_command = BlkValueRead(stora, STORA_COMMAND_TEXT_F);
		if (text_of_command == 0) {
			text_of_command = BlkValueCreate(TEXT_TY);
			BlkValueWrite(stora, STORA_COMMAND_TEXT_F, text_of_command);
		}
		BlkValueCast(text_of_command, SNIPPET_TY, players_command);
	} else BlkValueWrite(stora, STORA_COMMAND_TEXT_F, 0);

	return stora;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Trying
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Try stora ks  text_of_command saved_command;
	if ((stora==0) || (BlkValueWeakKind(stora) ~= STORED_ACTION_TY)) return;
	if (ks) { @push keep_silent; keep_silent=1; }
	text_of_command = BlkValueRead(stora, STORA_COMMAND_TEXT_F);
	if (text_of_command) {
		saved_command = BlkValueCreate(TEXT_TY);
		BlkValueCast(saved_command, SNIPPET_TY, players_command);
		SetPlayersCommand(text_of_command);
	}
	TryAction(
		BlkValueRead(stora, STORA_REQUEST_F),
		BlkValueRead(stora, STORA_ACTOR_F),
		BlkValueRead(stora, STORA_ACTION_F),
		BlkValueRead(stora, STORA_NOUN_F),
		BlkValueRead(stora, STORA_SECOND_F));
	if (text_of_command) {
		SetPlayersCommand(saved_command);
		BlkValueFree(saved_command);
	}
	if (ks) { @pull keep_silent; }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Block Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant LIST_ITEM_KOV_F = 0; ! The kind of the items
Constant LIST_LENGTH_F = 1;   ! The number of items
Constant LIST_ITEM_BASE = 2;  ! List items begin at this entry


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: KOV Support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Support task arg1 arg2 arg3;
	switch(task) {
		CREATE_KOVS:      return LIST_OF_TY_Create(arg1, arg2);
		DESTROY_KOVS:     LIST_OF_TY_Destroy(arg1);
		MAKEMUTABLE_KOVS: return 1;
		COPYKIND_KOVS:    return LIST_OF_TY_CopyKind(arg1, arg2);
		COPYQUICK_KOVS:   return LIST_OF_TY_QuickCopy(arg1, arg2);
		COPYSB_KOVS:	  BlkValueCopySB1(arg1, arg2);
		KINDDATA_KOVS:    return LIST_OF_TY_KindData(arg1, arg2);
		EXTENT_KOVS:      return BlkValueRead(arg1, LIST_LENGTH_F) + LIST_ITEM_BASE;
		COPY_KOVS:        LIST_OF_TY_Copy(arg1, arg2, arg3);
		COMPARE_KOVS:     return LIST_OF_TY_Compare(arg1, arg2);
		HASH_KOVS:        return LIST_OF_TY_Hash(arg1);
		DEBUG_KOVS:       print " = {", (LIST_OF_TY_Say) arg1, "} of kind ",
                              BlkValueRead(arg1, LIST_ITEM_KOV_F);
	}
	! We choose not to respond to: CAST_KOVS, READ_FILE_KOVS, WRITE_FILE_KOVS
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Creation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Create skov sb list;
	skov = KindBaseTerm(skov, 0);
	list = FlexAllocate(27*WORDSIZE, LIST_OF_TY, BLK_FLAG_MULTIPLE + BLK_FLAG_WORD);
	BlkValueWrite(list, LIST_ITEM_KOV_F, skov, true);
	BlkValueWrite(list, LIST_LENGTH_F, 0, true);
	sb = BlkValueCreateSB1(sb, list);
	return sb;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Destruction
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Destroy list no_items i k;
	k = BlkValueRead(list, LIST_ITEM_KOV_F);
	if (KOVIsBlockValue(k)) {
		no_items = BlkValueRead(list, LIST_LENGTH_F);
		for (i=0: i<no_items: i++) BlkValueFree(BlkValueRead(list, i+LIST_ITEM_BASE));
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Copying
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_CopyKind to from;
	BlkValueWrite(to, LIST_ITEM_KOV_F, BlkValueRead(from, LIST_ITEM_KOV_F));
];

[ LIST_OF_TY_QuickCopy to from;
	if (BlkValueRead(to, LIST_ITEM_KOV_F) ~= BlkValueRead(from, LIST_ITEM_KOV_F))
		rfalse;
	rtrue;
];

[ LIST_OF_TY_KindData list;
	return BlkValueRead(list, LIST_ITEM_KOV_F);
];

[ LIST_OF_TY_Copy lto lfrom  precopied_list_kov no_items i nv bk val splk;
	no_items = BlkValueRead(lfrom, LIST_LENGTH_F);
	bk = BlkValueRead(lfrom, LIST_ITEM_KOV_F);
	if (precopied_list_kov ~= 0 or UNKNOWN_TY)
		BlkValueWrite(lto, LIST_ITEM_KOV_F, precopied_list_kov);
	else BlkValueWrite(lto, LIST_ITEM_KOV_F, bk);
	if (KOVIsBlockValue(bk)) {
		for (i=0: i<no_items: i++) {
			val = BlkValueRead(lfrom, i+LIST_ITEM_BASE);
			if (precopied_list_kov ~= 0 or UNKNOWN_TY)
				nv = BlkValueCreate(precopied_list_kov);
			else
				nv = BlkValueCreate(bk);
			BlkValueCopy(nv, val);
			BlkValueWrite(lto, i+LIST_ITEM_BASE, nv);
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Comparison
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Compare listleft listright delta no_items i cf;
	delta = BlkValueRead(listleft, LIST_LENGTH_F) - BlkValueRead(listright, LIST_LENGTH_F);
	if (delta) return delta;
	no_items = BlkValueRead(listleft, LIST_LENGTH_F);
	if (no_items == 0) return 0;
	delta = BlkValueRead(listleft, LIST_ITEM_KOV_F) - BlkValueRead(listright, LIST_ITEM_KOV_F);
	if (delta) return delta;
	cf = LIST_OF_TY_ComparisonFn(listleft);
	if (cf == 0 or UnsignedCompare) {
		for (i=0: i<no_items: i++) {
			delta = BlkValueRead(listleft, i+LIST_ITEM_BASE) -
				BlkValueRead(listright, i+LIST_ITEM_BASE);
			if (delta) return delta;
		}
	} else {
		for (i=0: i<no_items: i++) {
			delta = cf(BlkValueRead(listleft, i+LIST_ITEM_BASE),
				BlkValueRead(listright, i+LIST_ITEM_BASE));
			if (delta) return delta;
		}
	}
	return 0;
];

[ LIST_OF_TY_ComparisonFn list;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	return KOVComparisonFunction(BlkValueRead(list, LIST_ITEM_KOV_F));
];

[ LIST_OF_TY_Distinguish txb1 txb2;
	if (LIST_OF_TY_Compare(txb1, txb2) == 0) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Hashing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Hash list  len kov rv i;
	rv = 0;
	len = BlkValueRead(list, LIST_LENGTH_F);
	kov = BlkValueRead(list, LIST_ITEM_KOV_F);
	for (i=0: i<len: i++)
		rv = rv * 33 + GetHashValue(kov, BlkValueRead(list, i+LIST_ITEM_BASE));
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Say list format no_items v i bk;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	bk = KindAtomic(BlkValueRead(list, LIST_ITEM_KOV_F));
	! print no_items, " of kov=", BlkValueRead(list, LIST_ITEM_KOV_F), ":";
	if (format == 1) print "{";
	for (i=0:i<no_items:i++) {
		v = BlkValueRead(list, i+LIST_ITEM_BASE);
		switch (format) {
			2: print (the) v;
			3: print (a) v;
			default:
				if (bk == LIST_OF_TY) LIST_OF_TY_Say(v, 1);
				else if ((bk == TEXT_TY) && (format == 1)) {
					print "~"; PrintKindValuePair(bk, v); print "~";
				}
				else PrintKindValuePair(bk, v);
		}
		if (i<no_items-2) print ", ";
		if (i==no_items-2) {
			if (format == 1) print ", "; else {
				#ifdef SERIAL_COMMA; if (no_items ~= 2) print ","; #endif;
				LIST_WRITER_INTERNAL_RM('C');
			}
		}
	}
	if (format == 1) print "}";
	prior_named_list = no_items; prior_named_list_gender = -1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: List From Description
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Desc list desc kov obj no_items ex len i;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return false;
	ex = BlkValueLBCapacity(list);
	len = desc(-3);
	if (len+LIST_ITEM_BASE > ex) {
		if (BlkValueSetLBCapacity(list, len+LIST_ITEM_BASE) == false)
			return 0;
	}
	if (kov) BlkValueWrite(list, LIST_ITEM_KOV_F, kov);
	else BlkValueWrite(list, LIST_ITEM_KOV_F, OBJECT_TY);
	BlkValueWrite(list, LIST_LENGTH_F, len);
	obj = 0;
	for (i=0: i<len: i++) {
		obj = desc(-2, obj, i);
		! print "i = ", i, " and obj = ", obj, "^";
		BlkValueWrite(list, i+LIST_ITEM_BASE, obj);
	}
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Find Item
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_FindItem list v i no_items cf;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) rfalse;
	cf = LIST_OF_TY_ComparisonFn(list);
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if (cf == 0 or UnsignedCompare) {
		for (i=0: i<no_items: i++)
			if (v == BlkValueRead(list, i+LIST_ITEM_BASE)) rtrue;
	} else {
		for (i=0: i<no_items: i++)
			if (cf(v, BlkValueRead(list, i+LIST_ITEM_BASE)) == 0) rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Insert Item
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_InsertItem list v posnflag posn nodups i no_items ex nv contents_kind;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return false;
	if (nodups && (LIST_OF_TY_FindItem(list, v))) return list;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	BlkValueWrite(list, LIST_LENGTH_F, no_items); ! Forces the list to be mutable
	contents_kind = BlkValueRead(list, LIST_ITEM_KOV_F);
	if ((posnflag) && ((posn<1) || (posn > no_items+1))) {
		print "*** Couldn't add at entry ", posn, " in the list ";
		LIST_OF_TY_Say(list, true);
		print ", which has entries in the range 1 to ", no_items, " ***^";
		RunTimeProblem(RTP_LISTRANGEERROR);
		rfalse;
	}
	ex = BlkValueLBCapacity(list);
	if (no_items+LIST_ITEM_BASE+1 > ex) {
		if (BlkValueSetLBCapacity(list, ex+16) == false) return 0;
	}
	if (KOVIsBlockValue(contents_kind)) {
		nv = BlkValueCreate(contents_kind);
		BlkValueCopy(nv, v);
		v = nv;
	}
	if (posnflag) {
		posn--;
		for (i=no_items:i>posn:i--) {
			BlkValueWrite(list, i+LIST_ITEM_BASE,
				BlkValueRead(list, i-1+LIST_ITEM_BASE));			
		}
		BlkValueWrite(list, posn+LIST_ITEM_BASE, v);
	} else {
		BlkValueWrite(list, no_items+LIST_ITEM_BASE, v);
	}
	BlkValueWrite(list, LIST_LENGTH_F, no_items+1);
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Append List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_AppendList list more posnflag posn nodups v i j no_items msize ex nv;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return false;
	if ((more==0) || (BlkValueWeakKind(more) ~= LIST_OF_TY)) return list;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	BlkValueWrite(list, LIST_LENGTH_F, no_items); ! Forces the list to be mutable
	if ((posnflag) && ((posn<1) || (posn > no_items+1))) {
		print "*** Couldn't add at entry ", posn, " in the list ";
		LIST_OF_TY_Say(list, true);
		print ", which has entries in the range 1 to ", no_items, " ***^";
		RunTimeProblem(RTP_LISTRANGEERROR);
		rfalse;
	}
	msize = BlkValueRead(more, LIST_LENGTH_F);
	ex = BlkValueLBCapacity(list);
	if (no_items+msize+LIST_ITEM_BASE > ex) {
		if (BlkValueSetLBCapacity(list, no_items+msize+LIST_ITEM_BASE+8) == false)
			return 0;
	}
	if (posnflag) {
		posn--;
		for (i=no_items+msize:i>=posn+msize:i--) {
			BlkValueWrite(list, i+LIST_ITEM_BASE,
				BlkValueRead(list, i-msize+LIST_ITEM_BASE));			
		}
		! BlkValueWrite(list, posn, v);
		for (j=0: j<msize: j++) {
			v = BlkValueRead(more, j+LIST_ITEM_BASE);
			if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F))) {
				nv = BlkValueCreate(BlkValueRead(list, LIST_ITEM_KOV_F));
				BlkValueCopy(nv, v);
				v = nv;
			}
			BlkValueWrite(list, posn+j+LIST_ITEM_BASE, v);
		}
	} else {
		for (i=0, j=0: i<msize: i++) {
			v = BlkValueRead(more, i+LIST_ITEM_BASE);
			if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F))) {
				nv = BlkValueCreate(BlkValueRead(list, LIST_ITEM_KOV_F));
				BlkValueCopy(nv, v);
				v = nv;
			}
			if ((nodups == 0) || (LIST_OF_TY_FindItem(list, v) == false)) {
				BlkValueWrite(list, no_items+j+LIST_ITEM_BASE, v);
				j++;
			}
		}
	}
	BlkValueWrite(list, LIST_LENGTH_F, no_items+j);
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Remove Value
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_RemoveValue list v forgive i j no_items odsize f cf delendum;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) rfalse;
	cf = LIST_OF_TY_ComparisonFn(list);
	no_items = BlkValueRead(list, LIST_LENGTH_F); odsize = no_items;
	BlkValueWrite(list, LIST_LENGTH_F, no_items); ! Forces the list to be mutable
	for (i=0: i<no_items: i++) {
		delendum = BlkValueRead(list, i+LIST_ITEM_BASE);
		if (cf == 0 or UnsignedCompare)
			f = (v == delendum);
		else
			f = (cf(v, delendum) == 0);
		if (f) {
			if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F)))
				BlkValueFree(delendum);
			for (j=i+1: j<no_items: j++)
				BlkValueWrite(list, j-1+LIST_ITEM_BASE,
					BlkValueRead(list, j+LIST_ITEM_BASE));
			no_items--; i--;
			BlkValueWrite(list, LIST_LENGTH_F, no_items);
		}
	}
	if (odsize ~= no_items) rfalse;
	if (forgive) rfalse;
	print "*** Couldn't remove: the value ";
	PrintKindValuePair(BlkValueRead(list, LIST_ITEM_KOV_F), v);
	print " was not present in the list ";
	LIST_OF_TY_Say(list, true);
	print " ***^";
	RunTimeProblem(RTP_LISTRANGEERROR);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Remove Item Range
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_RemoveItemRange list from to forgive i d no_items;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) rfalse;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if ((from > to) || (from <= 0) || (to > no_items)) {
		if (forgive) {
			if (from <= 0) from = 1;
			if (to >= no_items) to = no_items;
			if (from > to) return list;
		} else {
			print "*** Couldn't remove entries ", from, " to ", to, " from the list ";
			LIST_OF_TY_Say(list, true);
			print ", which has entries in the range 1 to ", no_items, " ***^";
			RunTimeProblem(RTP_LISTRANGEERROR);
			rfalse;
		}
	}
	to--; from--;
	d = to-from+1;
	if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F)))
		for (i=0: i<d: i++)
			BlkValueFree(BlkValueRead(list, from+i+LIST_ITEM_BASE));
	for (i=from: i<no_items-d: i++)
		BlkValueWrite(list, i+LIST_ITEM_BASE,
			BlkValueRead(list, i+d+LIST_ITEM_BASE));
	BlkValueWrite(list, LIST_LENGTH_F, no_items-d);
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Remove List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Remove_List list rlist i j k v w no_items odsize rsize cf f;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) rfalse;
	no_items = BlkValueRead(list, LIST_LENGTH_F); odsize = no_items;
	rsize = BlkValueRead(rlist, LIST_LENGTH_F);
	cf = LIST_OF_TY_ComparisonFn(list);
	for (i=0: i<no_items: i++) {
		v = BlkValueRead(list, i+LIST_ITEM_BASE);
		for (k=0: k<rsize: k++) {
			w = BlkValueRead(rlist, k+LIST_ITEM_BASE);
			if (cf == 0 or UnsignedCompare)
				f = (v == w);
			else
				f = (cf(v, w) == 0);
			if (f) {
				if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F)))
					BlkValueFree(v);
				for (j=i+1: j<no_items: j++)
					BlkValueWrite(list, j+LIST_ITEM_BASE-1, 
						BlkValueRead(list, j+LIST_ITEM_BASE));
				no_items--; i--;
				BlkValueWrite(list, LIST_LENGTH_F, no_items);
				break;
			}
		}
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Get Length
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_GetLength list;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	return BlkValueRead(list, LIST_LENGTH_F);
];

[ LIST_OF_TY_Empty list;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) rfalse;
	if (BlkValueRead(list, LIST_LENGTH_F) == 0) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Set Length
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_SetLength list newsize this_way_only truncation_end no_items ex i dv;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	if (newsize < 0) return RunTimeProblem(RTP_LISTSIZENEGATIVE, newsize);
	BlkMakeMutable(list);
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if (no_items < newsize) {
		if (this_way_only == -1) return list;
		ex = BlkValueLBCapacity(list);
		if (newsize+LIST_ITEM_BASE > ex) {
			if (BlkValueSetLBCapacity(list, newsize+LIST_ITEM_BASE) == false)
				return 0;
		}
		dv = DefaultValueOfKOV(BlkValueRead(list, LIST_ITEM_KOV_F));
		for (i=no_items: i<newsize: i++)
			BlkValueWrite(list, LIST_ITEM_BASE+i, dv);
		BlkValueWrite(list, LIST_LENGTH_F, newsize);
	}
	if (no_items > newsize) {
		if (this_way_only == 1) return list;
		if (truncation_end == -1) {
			if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F)))
				for (i=0: i<no_items-newsize: i++)
					BlkValueFree(BlkValueRead(list, LIST_ITEM_BASE+i));
			for (i=0: i<newsize: i++)
				BlkValueWrite(list, LIST_ITEM_BASE+i,
					BlkValueRead(list, LIST_ITEM_BASE+no_items-newsize+i));
		} else {
			if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F)))
				for (i=newsize: i<no_items: i++)
					BlkValueFree(BlkValueRead(list, LIST_ITEM_BASE+i));
		}
		BlkValueWrite(list, LIST_LENGTH_F, newsize);
	}
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Get Item
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_GetItem list i forgive no_items;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return false;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if ((i<=0) || (i>no_items)) {
		if (forgive) return false;
		print "*** Couldn't read from entry ", i, " of a list which";
		switch (no_items) {
			0: print " is empty ***^";
			1: print " has only one entry, numbered 1 ***^";
			default: print " has entries numbered from 1 to ", no_items, " ***^";
		}
		RunTimeProblem(RTP_LISTRANGEERROR);
		if (no_items >= 1) i = 1;
		else return false;
	}
	return BlkValueRead(list, LIST_ITEM_BASE+i-1);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Write Item
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteLIST_OF_TY_GetItem list i val no_items;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return false;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if ((i<=0) || (i>no_items)) {
		print "*** Couldn't write to list entry ", i, " of a list which";
		switch (no_items) {
			0: print " is empty ***^";
			1: print " has only one entry, numbered 1 ***^";
			default: print " has entries numbered from 1 to ", no_items, " ***^";
		}
		return RunTimeProblem(RTP_LISTRANGEERROR);
	}
	BlkValueWrite(list, LIST_ITEM_BASE+i-1, val);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Put Item
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_PutItem list i v  no_items nv;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return false;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F))) {
		nv = BlkValueCreate(BlkValueRead(list, LIST_ITEM_KOV_F));
		BlkValueCopy(nv, v);
		v = nv;
	}
	if ((i<=0) || (i>no_items)) return false;
	BlkValueWrite(list, LIST_ITEM_BASE+i-1, v);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Multiple Object List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Mol list len i;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	len = multiple_object-->0;
	LIST_OF_TY_SetLength(list, len);
	for (i=1: i<=len: i++)
		LIST_OF_TY_PutItem(list, i, multiple_object-->i);
	return list;
];

[ LIST_OF_TY_Set_Mol list len i;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	len = BlkValueRead(list, LIST_LENGTH_F);
	if (len > 63) len = 63;
	multiple_object-->0 = len;
	for (i=1: i<=len: i++)
		multiple_object-->i = BlkValueRead(list, LIST_ITEM_BASE+i-1);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Reversing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Reverse list no_items i v;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if (no_items < 2) return list;
	for (i=0:i*2<no_items:i++) {
		v = BlkValueRead(list, LIST_ITEM_BASE+i);
		BlkValueWrite(list, LIST_ITEM_BASE+i,
			BlkValueRead(list, LIST_ITEM_BASE+no_items-1-i));
		BlkValueWrite(list, LIST_ITEM_BASE+no_items-1-i, v);
	}
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Rotation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Rotate list backwards  no_items i v;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if (no_items < 2) return list;
	if (backwards) {
		v = BlkValueRead(list, LIST_ITEM_BASE);
		for (i=0:i<no_items-1:i++)
			BlkValueWrite(list, LIST_ITEM_BASE+i,
				BlkValueRead(list, LIST_ITEM_BASE+i+1));
		BlkValueWrite(list, no_items-1+LIST_ITEM_BASE, v);
	} else {
		v = BlkValueRead(list, no_items-1+LIST_ITEM_BASE);
		for (i=no_items-1:i>0:i--)
			BlkValueWrite(list, LIST_ITEM_BASE+i,
				BlkValueRead(list, LIST_ITEM_BASE+i-1));
		BlkValueWrite(list, LIST_ITEM_BASE, v);
	}
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Sorting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global LIST_OF_TY_Sort_cf;

[ LIST_OF_TY_Sort list dir prop cf  i j no_items v;
	BlkMakeMutable(list);
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if (dir == 2) {
		if (no_items < 2) return;
		for (i=1:i<no_items:i++) {
			j = random(i+1) - 1;
			v = BlkValueRead(list, LIST_ITEM_BASE+i);
			BlkValueWrite(list, LIST_ITEM_BASE+i, BlkValueRead(list, LIST_ITEM_BASE+j));
			BlkValueWrite(list, LIST_ITEM_BASE+j, v);
		}
		return;
	}
	SetSortDomain(ListSwapEntries, ListCompareEntries);
	if (cf) LIST_OF_TY_Sort_cf = BlkValueCompare;
	else LIST_OF_TY_Sort_cf = 0;
	SortArray(list, prop, dir, no_items, false, 0);
];

[ ListSwapEntries list i j v;
	if (i==j) return;
	v = BlkValueRead(list, LIST_ITEM_BASE+i-1);
	BlkValueWrite(list, LIST_ITEM_BASE+i-1, BlkValueRead(list, LIST_ITEM_BASE+j-1));
	BlkValueWrite(list, LIST_ITEM_BASE+j-1, v);
];

[ ListCompareEntries list col i j d cf;
	if (i==j) return 0;
	i = BlkValueRead(list, LIST_ITEM_BASE+i-1);
	j = BlkValueRead(list, LIST_ITEM_BASE+j-1);
	if (I7S_Col) {
		if (i provides I7S_Col) i=i.I7S_Col; else i=0;
		if (j provides I7S_Col) j=j.I7S_Col; else j=0;
		cf = LIST_OF_TY_Sort_cf;
	} else {
		cf = LIST_OF_TY_ComparisonFn(list);
	}
	if (cf == 0) {
		if (i > j) return 1;
		if (i < j) return -1;
		return 0;
	} else
		return cf(i, j);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Block Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant COMBINATION_KIND_F = 0;    ! Strong kind ID
Constant COMBINATION_ITEM_BASE = 1; ! List items begin at this entry


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: KOV Support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_Support task arg1 arg2 arg3;
	switch(task) {
		CREATE_KOVS:      return COMBINATION_TY_Create(arg1, arg2);
		DESTROY_KOVS:     COMBINATION_TY_Destroy(arg1);
		MAKEMUTABLE_KOVS: return 1;
		COPYKIND_KOVS:    return COMBINATION_TY_CopyKind(arg1, arg2);
		COPYQUICK_KOVS:   rtrue;
		COPYSB_KOVS:	  BlkValueCopySB1(arg1, arg2);
		KINDDATA_KOVS:    return COMBINATION_TY_KindData(arg1);
		EXTENT_KOVS:      return -1;
		COPY_KOVS:        COMBINATION_TY_Copy(arg1, arg2, arg3);
		COMPARE_KOVS:     return COMBINATION_TY_Compare(arg1, arg2);
		HASH_KOVS:        return COMBINATION_TY_Hash(arg1);
		DEBUG_KOVS:       print " = ", (COMBINATION_TY_Say) arg1;
	}
	! We choose not to respond to: CAST_KOVS, READ_FILE_KOVS, WRITE_FILE_KOVS
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Creation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_Create kind sb long_block N i bk v;
	N = KindBaseArity(kind);
	long_block = FlexAllocate(
		(COMBINATION_ITEM_BASE+N)*WORDSIZE, COMBINATION_TY, BLK_FLAG_WORD);
	BlkValueWrite(long_block, COMBINATION_KIND_F, kind, true);
	for (i=0: i<N: i++) {
		bk = KindBaseTerm(kind, i);
		if (KOVIsBlockValue(bk)) v = BlkValueCreate(bk);
		else v = DefaultValueOfKOV(bk);
		BlkValueWrite(long_block, COMBINATION_ITEM_BASE+i, v, true);
	}
	return BlkValueCreateSB1(sb, long_block);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Destruction
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_Destroy comb kind no_items i bk;
	kind = BlkValueRead(comb, COMBINATION_KIND_F);
	no_items = KindBaseArity(kind);
	for (i=0: i<no_items: i++) {
		bk = KindBaseTerm(kind, i);
		if (KOVIsBlockValue(bk))
			BlkValueFree(BlkValueRead(comb, i+COMBINATION_ITEM_BASE));
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Copying
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_CopyKind to from;
	BlkValueWrite(to, COMBINATION_KIND_F, BlkValueRead(from, COMBINATION_KIND_F));
];

[ COMBINATION_TY_CopySB to from;
	BlkValueCopySB1(to, from);
];

[ COMBINATION_TY_KindData comb;
	return BlkValueRead(comb, COMBINATION_KIND_F);
];

[ COMBINATION_TY_Copy to_comb from_comb precopied_comb_kov  no_items i nv kind bk;
	! kind = BlkValueRead(to_comb, COMBINATION_KIND_F);
	no_items = KindBaseArity(precopied_comb_kov);
	BlkValueWrite(to_comb, COMBINATION_KIND_F, precopied_comb_kov);
	for (i=0: i<no_items: i++) {
		bk = KindBaseTerm(kind, i);
		if (KOVIsBlockValue(bk)) {
			nv = BlkValueCreate(bk);
			BlkValueCopy(nv, BlkValueRead(from_comb, i+COMBINATION_ITEM_BASE));
			BlkValueWrite(to_comb, i+COMBINATION_ITEM_BASE, nv);
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Comparison
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_Compare left_comb right_comb delta no_items i cf kind bk;
	kind = BlkValueRead(left_comb, COMBINATION_KIND_F);
	no_items = KindBaseArity(kind);
	for (i=0: i<no_items: i++) {
		bk = KindBaseTerm(kind, i);
		cf = KOVComparisonFunction(bk);
		if (cf == 0 or UnsignedCompare) {
			delta = BlkValueRead(left_comb, i+COMBINATION_ITEM_BASE) -
				BlkValueRead(right_comb, i+COMBINATION_ITEM_BASE);
			if (delta) return delta;
		} else {
			delta = cf(BlkValueRead(left_comb, i+COMBINATION_ITEM_BASE),
				BlkValueRead(right_comb, i+COMBINATION_ITEM_BASE));
			if (delta) return delta;
		}
	}
	return 0;
];

[ COMBINATION_TY_Distinguish left_comb right_comb;
	if (COMBINATION_TY_Compare(left_comb, right_comb) == 0) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Hashing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_Hash comb  kind rv no_items i bk;
	rv = 0;
	kind = BlkValueRead(comb, COMBINATION_KIND_F);
	no_items = KindBaseArity(kind);
	for (i=0: i<no_items: i++) {
		bk = KindBaseTerm(kind, i);
		rv = rv * 33 + GetHashValue(bk, BlkValueRead(comb, i+COMBINATION_ITEM_BASE));
	}
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_Say comb format no_items v i kind bk;
	if ((comb==0) || (BlkValueWeakKind(comb) ~= COMBINATION_TY)) return;
	kind = BlkValueRead(comb, COMBINATION_KIND_F);
	no_items = KindBaseArity(kind);
	print "(";
	for (i=0: i<no_items: i++) {
		if (i>0) print ", ";
		bk = KindBaseTerm(kind, i);
		v = BlkValueRead(comb, i+COMBINATION_ITEM_BASE);
		if (bk == LIST_OF_TY) LIST_OF_TY_Say(v, 1);
		else PrintKindValuePair(bk, v);
	}
	print ")";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Block Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RRV_NAME     		RR_NAME-5;        ! Packed string, e.g. "containment relation"
Constant RRV_PERMISSIONS	RR_PERMISSIONS-5; ! A bitmap of what operations this supports
Constant RRV_STORAGE		RR_STORAGE-5;     ! Data location, depending on format
Constant RRV_KIND			RR_KIND-5;        ! Strong kind ID of the relation
Constant RRV_HANDLER		RR_HANDLER-5;     ! Routine to perform operations on this
Constant RRV_DESCRIPTION	RR_DESCRIPTION-5; ! Packed string, e.g. "contains"
Constant RRV_USED			6;
Constant RRV_FILLED			7;
Constant RRV_DATA_BASE		8;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: KOV Support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Support task arg1 arg2 arg3;
	switch(task) {
		CREATE_KOVS:      return RELATION_TY_Create(arg1, 0, arg2);
		DESTROY_KOVS:     RELATION_TY_Destroy(arg1);
		MAKEMUTABLE_KOVS: return 1;
		COPYQUICK_KOVS:   rtrue;
		COPYSB_KOVS:	  BlkValueCopySB1(arg1, arg2);
		KINDDATA_KOVS:    return 0;
		EXTENT_KOVS:      return -1;
		COPY_KOVS:        RELATION_TY_Copy(arg1, arg2);
		COMPARE_KOVS:     return RELATION_TY_Compare(arg1, arg2);
		HASH_KOVS:        return arg1;
		DEBUG_KOVS:       print " = ", (RELATION_TY_Say) arg1;
	}
	! We choose not to respond to: CAST_KOVS, COPYKIND_KOVS, READ_FILE_KOVS, WRITE_FILE_KOVS
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Other Definitions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! valencies
Constant RRVAL_V_TO_V		0;
Constant RRVAL_V_TO_O		RELS_Y_UNIQUE;
Constant RRVAL_O_TO_V		RELS_X_UNIQUE;
Constant RRVAL_O_TO_O		RELS_X_UNIQUE+RELS_Y_UNIQUE;
Constant RRVAL_EQUIV		RELS_EQUIVALENCE+RELS_SYMMETRIC;
Constant RRVAL_SYM_V_TO_V	RELS_SYMMETRIC;
Constant RRVAL_SYM_O_TO_O	RELS_SYMMETRIC+RELS_X_UNIQUE+RELS_Y_UNIQUE;

! dictionary entry flags
Constant RRF_USED		$0001;	! entry contains a value
Constant RRF_DELETED	$0002;	! entry used to contain a value
Constant RRF_SINGLE		$0004;	! entry's Y is a value, not a list
Constant RRF_HASX		$0010;	! 2-in-1 entry contains a corresponding key
Constant RRF_HASY		$0020;	! 2-in-1 entry contains a corresponding value
Constant RRF_ENTKEYX	$0040;	! 2-in-1 entry key is left side KOV
Constant RRF_ENTKEYY	$0080;	! 2-in-1 entry key is right side KOV

! permission/task constants (those commented out here are generated by I7)
!Constant RELS_SYMMETRIC $8000;
!Constant RELS_EQUIVALENCE $4000;
!Constant RELS_X_UNIQUE $2000;
!Constant RELS_Y_UNIQUE $1000;
!Constant RELS_TEST $0800;
!Constant RELS_ASSERT_TRUE $0400;
!Constant RELS_ASSERT_FALSE $0200;
!Constant RELS_SHOW $0100;
!Constant RELS_ROUTE_FIND $0080;
!Constant RELS_ROUTE_FIND_COUNT $0040;
Constant RELS_COPY $0020;
Constant RELS_DESTROY $0010;
!Constant RELS_LOOKUP_ANY $0008;
!Constant RELS_LOOKUP_ALL_X $0004;
!Constant RELS_LOOKUP_ALL_Y $0002;
!Constant RELS_LIST $0001;

Constant RELS_EMPTY $0003;
Constant RELS_SET_VALENCY $0005;

! RELS_LOOKUP_ANY mode selection constants
Constant RLANY_GET_X 1;
Constant RLANY_GET_Y 2;
Constant RLANY_CAN_GET_X 3;
Constant RLANY_CAN_GET_Y 4;

! RELS_LIST mode selection constant
Constant RLIST_ALL_X 1;
Constant RLIST_ALL_Y 2;
Constant RLIST_ALL_PAIRS 3;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Tunable Parameters
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RRP_MIN_SIZE      8;   ! minimum number of entries (DO NOT CHANGE)
Constant RRP_PERTURB_SHIFT 5;   ! affects the probe sequence
Constant RRP_RESIZE_SMALL  4;   ! resize factor for small tables
Constant RRP_RESIZE_LARGE  2;   ! resize factor for large tables
Constant RRP_LARGE_IS      256; ! how many entries make a table "large"?
Constant RRP_CROWDED_IS    2;   ! when filled entries outnumber unfilled by _ to 1


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Abstract Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RelationTest relation task X Y  handler rv;
	handler = RlnGetF(relation, RR_HANDLER);
	return handler(relation, task, X, Y);
];

[ RlnGetF rel fld i;
	rel = BlkValueGetLongBlock(rel);
	return rel-->fld;
];

[ RlnSetF rel fld v;
	rel = BlkValueGetLongBlock(rel);
	rel-->fld = v;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Empty Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ EmptyRelationHandler relation task X Y;
	if (task == RELS_EMPTY) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Creation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Create kov from sb rel i skov handler;
	rel = FlexAllocate((RRV_DATA_BASE + 3*RRP_MIN_SIZE)*WORDSIZE,
		RELATION_TY, BLK_FLAG_WORD+BLK_FLAG_MULTIPLE);
	if ((from == 0) && (kov ~= 0)) from = DefaultValueFinder(kov);
	if (from) {
		for (i=0: i<RRV_DATA_BASE: i++) BlkValueWrite(rel, i, BlkValueRead(from, i), true);
		if (BlkValueRead(from, RRV_HANDLER) == EmptyRelationHandler) {
			handler = ChooseRelationHandler(BlkValueRead(rel, RRV_KIND, true));
			BlkValueWrite(rel, RRV_NAME, "anonymous relation", true);
			BlkValueWrite(rel, RRV_PERMISSIONS,
				RELS_TEST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_SHOW, true);
			BlkValueWrite(rel, RRV_HANDLER, handler, true);
			BlkValueWrite(rel, RRV_STORAGE, RRP_MIN_SIZE-1, true);
			BlkValueWrite(rel, RRV_DESCRIPTION, "an anonymous relation", true);
			BlkValueWrite(rel, RRV_USED, 0, true);
			BlkValueWrite(rel, RRV_FILLED, 0, true);
		}
	} else {
		handler = ChooseRelationHandler(kov);
		BlkValueWrite(rel, RRV_NAME, "anonymous relation", true);
		BlkValueWrite(rel, RRV_PERMISSIONS,
			RELS_TEST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_SHOW, true);
		BlkValueWrite(rel, RRV_STORAGE, RRP_MIN_SIZE-1, true);
		BlkValueWrite(rel, RRV_KIND, kov, true);
		BlkValueWrite(rel, RRV_HANDLER, handler, true);
		BlkValueWrite(rel, RRV_DESCRIPTION, "an anonymous relation", true);
		BlkValueWrite(rel, RRV_USED, 0, true);
		BlkValueWrite(rel, RRV_FILLED, 0, true);
	}

	return BlkValueCreateSB1(sb, rel);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Destruction
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Destroy rel  handler;
	handler = BlkValueRead(rel, RRV_HANDLER);
	handler(rel, RELS_DESTROY);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Copying
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Copy lto lfrom  handler;
	handler = BlkValueRead(lto, RRV_HANDLER);
	handler(lto, RELS_COPY);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Comparison
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Compare rleft rright ind1 ind2;
	ind1 = BlkValueRead(rleft, RRV_HANDLER);
	ind2 = BlkValueRead(rright, RRV_HANDLER);
	if (ind1 ~= ind2) return ind1 - ind2;
	if (IsMutableRelationHandler(ind1) == false) return 0;
	return rleft - rright;
];

[ RELATION_TY_Distinguish rleft rright;
	if (RELATION_TY_Compare(rleft, rright) == 0) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Say rel;
	if (rel == 0) print "(null relation)"; ! shouldn't happen
	else print (string) RlnGetF(rel, RR_NAME);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Naming
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Name rel txt;
	if (rel) {
		BlkValueWrite(rel, RRV_NAME, txt);
		BlkValueWrite(rel, RRV_DESCRIPTION, txt);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Choose Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ChooseRelationHandler kov sym;
	if (KOVIsBlockValue(KindBaseTerm(kov, 0))) {
		if (sym) return SymHashListRelationHandler;
		return HashListRelationHandler;
	}
	if (sym) return SymDoubleHashSetRelationHandler;
	return DoubleHashSetRelationHandler;
];

[ IsMutableRelationHandler h;
	if (h == SymHashListRelationHandler or HashListRelationHandler or
		SymDoubleHashSetRelationHandler or DoubleHashSetRelationHandler) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Valency
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_SetValency rel val  kov filled cur handler ext;
	filled = BlkValueRead(rel, RRV_FILLED);
	if (filled) { RunTimeProblem(RTP_RELATIONCHANGEIMPOSSIBLE); rfalse; }
	kov = BlkValueRead(rel, RRV_KIND);
	if (val == RRVAL_EQUIV or RRVAL_SYM_V_TO_V or RRVAL_SYM_O_TO_O) {
		if (KindBaseTerm(kov, 0) ~= KindBaseTerm(kov, 1)) {
			RunTimeProblem(RTP_RELATIONCHANGEIMPOSSIBLE); rfalse;
		}
	}
	cur = BlkValueRead(rel, RRV_HANDLER);
	switch (val) {
		RRVAL_V_TO_V:		handler = ChooseRelationHandler(kov, false);
		RRVAL_V_TO_O:		handler = HashTableRelationHandler;
		RRVAL_O_TO_V:		handler = ReversedHashTableRelationHandler;
		RRVAL_O_TO_O:		handler = TwoInOneHashTableRelationHandler;
		RRVAL_EQUIV:		handler = EquivHashTableRelationHandler;
		RRVAL_SYM_V_TO_V:	handler = ChooseRelationHandler(kov, true);
		RRVAL_SYM_O_TO_O:	handler = Sym2in1HashTableRelationHandler;
		default:			RunTimeProblem(RTP_RELATIONCHANGEIMPOSSIBLE); rfalse;
	}
	if (cur == handler) rtrue;
	! adjust size when going to or from 2-in-1
	if (cur == TwoInOneHashTableRelationHandler) {
		ext = BlkValueRead(rel, RRV_STORAGE) + 1;
		BlkValueSetLBCapacity(rel, RRV_DATA_BASE + 3*ext);
	} else if (handler == TwoInOneHashTableRelationHandler) {
		ext = BlkValueRead(rel, RRV_STORAGE) + 1;
		BlkValueSetLBCapacity(rel, RRV_DATA_BASE + 4*ext);
	}
	BlkValueWrite(rel, RRV_HANDLER, handler);
];

[ RELATION_TY_GetValency rel  handler;
	return BlkValueRead(rel, RRV_PERMISSIONS) & VALENCY_MASK;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Double Hash Set Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DoubleHashSetRelationHandler rel task X Y sym  kov kx ky at tmp v;
	kov = BlkValueRead(rel, RRV_KIND);
	kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
	if (task == RELS_SET_VALENCY) {
		return RELATION_TY_SetValency(rel, X);
	} else if (task == RELS_DESTROY) {
		! clear
		kx = KOVIsBlockValue(kx); ky = KOVIsBlockValue(ky);
		if (~~(kx || ky)) return;
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			if (tmp & RRF_USED) {
				if (kx) BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1));
				if (ky) BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2));
			}
			at--;
		}
		return;
	} else if (task == RELS_COPY) {
		X = KOVIsBlockValue(kx); Y = KOVIsBlockValue(ky);
		if (~~(X || Y)) return;
		at = BlkValueRead(rel, RRV_STORAGE);
		while (at >= 0) {
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			if (tmp & RRF_USED) {
				if (X) {
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
					tmp = BlkValueCopy(BlkValueCreate(kx), tmp);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, tmp);
				}
				if (Y) {
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
					tmp = BlkValueCopy(BlkValueCreate(ky), tmp);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, tmp);
				}
			}
			at--;
		}
		return;
	} else if (task == RELS_SHOW) {
		print (string) BlkValueRead(rel, RRV_DESCRIPTION), ":^";
		if (sym) {
			kov = KOVComparisonFunction(kx);
			if (~~kov) kov = UnsignedCompare;
		}
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			if (tmp & RRF_USED) {
				X = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
				Y = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
				if (sym && (kov(X, Y) > 0)) continue;
				print "  ";
				PrintKindValuePair(kx, X);
				if (sym) print " <=> "; else print " >=> ";
				PrintKindValuePair(ky, Y);
				print "^";
			}
		}
		return;
	} else if (task == RELS_EMPTY) {
		if (BlkValueRead(rel, RRV_USED) == 0) rtrue;
		if (X == 1) {
			DoubleHashSetRelationHandler(rel, RELS_DESTROY);
			for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
				tmp = RRV_DATA_BASE + 3*at;
				BlkValueWrite(rel, tmp, 0);
				BlkValueWrite(rel, tmp + 1, 0);
				BlkValueWrite(rel, tmp + 2, 0);
			}
			BlkValueWrite(rel, RRV_USED, 0);
			BlkValueWrite(rel, RRV_FILLED, 0);
			rtrue;
		}
		rfalse;
	} else if (task == RELS_LOOKUP_ANY) {
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			tmp = RRV_DATA_BASE + 3*at;
			if (BlkValueRead(rel, tmp) & RRF_USED) {
				if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
					v = BlkValueRead(rel, tmp + 2);
					if (KOVIsBlockValue(ky)) {
						if (BlkValueCompare(v, X) ~= 0) continue;
					} else {
						if (v ~= X) continue;
					}
					if (Y == RLANY_CAN_GET_X) rtrue;
					return BlkValueRead(rel, tmp + 1);
				} else {
					v = BlkValueRead(rel, tmp + 1);
					if (KOVIsBlockValue(kx)) {
						if (BlkValueCompare(v, X) ~= 0) continue;
					} else {
						if (v ~= X) continue;
					}
					if (Y == RLANY_CAN_GET_Y) rtrue;
					return BlkValueRead(rel, tmp + 2);
				}
			}
		}
		if (Y == RLANY_GET_X or RLANY_GET_Y)
			print "*** Lookup failed: value not found ***^";
		rfalse;
	} else if (task == RELS_LOOKUP_ALL_X) {
		if (BlkValueWeakKind(Y) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(Y, 0);
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			tmp = RRV_DATA_BASE + 3*at;
			if (BlkValueRead(rel, tmp) & RRF_USED) {
				v = BlkValueRead(rel, tmp + 2);
				if (KOVIsBlockValue(ky)) {
					if (BlkValueCompare(v, X) ~= 0) continue;
				} else {
					if (v ~= X) continue;
				}
				LIST_OF_TY_InsertItem(Y, BlkValueRead(rel, tmp + 1));
			}
		}
		return Y;
	} else if (task == RELS_LOOKUP_ALL_Y) {
		if (BlkValueWeakKind(Y) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(Y, 0);
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			tmp = RRV_DATA_BASE + 3*at;
			if (BlkValueRead(rel, tmp) & RRF_USED) {
				v = BlkValueRead(rel, tmp + 1);
				if (KOVIsBlockValue(kx)) {
					if (BlkValueCompare(v, X) ~= 0) continue;
				} else {
					if (v ~= X) continue;
				}
				LIST_OF_TY_InsertItem(Y, BlkValueRead(rel, tmp + 2));
			}
		}
		return Y;
	} else if (task == RELS_LIST) {
		if (X == 0 || BlkValueWeakKind(X) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(X, 0);
		switch (Y) {
			RLIST_ALL_X, RLIST_ALL_Y:
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 3*at;
					if (BlkValueRead(rel, tmp) & RRF_USED) {
						tmp++;
						if (Y == RLIST_ALL_Y) tmp++;
						v = BlkValueRead(rel, tmp);
						LIST_OF_TY_InsertItem(X, v, false, 0, true);
					}
				}
				return X;
			RLIST_ALL_PAIRS:
				! LIST_OF_TY_InsertItem will make a deep copy of the item,
				! so we can reuse a single combination value here
				
				Y = BlkValueCreate(kov);
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 3*at;
					if (BlkValueRead(rel, tmp) & RRF_USED) {
						v = BlkValueRead(rel, tmp + 1);
						BlkValueWrite(Y, COMBINATION_ITEM_BASE, v);
						v = BlkValueRead(rel, tmp + 2);
						BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1, v);
						LIST_OF_TY_InsertItem(X, Y);
					}
				}
				BlkValueWrite(Y, COMBINATION_ITEM_BASE, 0);
				BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1, 0);
				BlkValueFree(Y);
				return X;
		}
		rfalse;
	}
	at = DoubleHashSetLookUp(rel, kx, ky, X, Y);
	switch(task) {
		RELS_TEST:
			if (at >= 0) rtrue;
			rfalse;
		RELS_ASSERT_TRUE:
			if (at >= 0) rtrue;
			at = ~at;
			BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 1);
			if (BlkValueRead(rel, RRV_DATA_BASE + 3*at) == 0)
				BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_USED+RRF_SINGLE);
			if (KOVIsBlockValue(kx)) { X = BlkValueCopy(BlkValueCreate(kx), X); }
			if (KOVIsBlockValue(ky)) { Y = BlkValueCopy(BlkValueCreate(ky), Y); }
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, X);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, Y);
			DoubleHashSetCheckResize(rel);
			rtrue;
		RELS_ASSERT_FALSE:
			if (at < 0) rtrue;
			BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) - 1);
			if (KOVIsBlockValue(kx))
				BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1));
			if (KOVIsBlockValue(ky))
				BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2));
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_DELETED);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, 0);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, 0);
			rtrue;
	}
];

[ DoubleHashSetLookUp rel kx ky X Y  hashv i free mask perturb flags;
	! calculate a hash value for the pair
	hashv = GetHashValue(kx, x) + GetHashValue(ky, y);
	! look in the first expected slot
	mask = BlkValueRead(rel, RRV_STORAGE);
	i = hashv & mask;
	flags = BlkValueRead(rel, RRV_DATA_BASE + 3*i);
	if (flags == 0) return ~i;
	if (DoubleHashSetEntryMatches(rel, i, kx, ky, X, Y)) return i;
	! not here, keep looking in sequence
	free = -1;
	if (flags & RRF_DELETED) free = i;
	perturb = hashv;
	hashv = i;
	for (::) {
		hashv = hashv*5 + perturb + 1;
		i = hashv & mask;
		flags = BlkValueRead(rel, RRV_DATA_BASE + 3*i);
		if (flags == 0) {
			if (free >= 0) return ~free;
			return ~i;
		}
		if (DoubleHashSetEntryMatches(rel, i, kx, ky, X, Y))
			return i;
		if ((free < 0) && (flags & RRF_DELETED)) free = i;
		#ifdef TARGET_ZCODE;
		@log_shift perturb (-RRP_PERTURB_SHIFT) -> perturb;
		#ifnot;
		@ushiftr perturb RRP_PERTURB_SHIFT perturb;
		#endif;
	}
];

[ DoubleHashSetCheckResize rel  filled ext newext temp i at kov kx ky F X Y;
	filled = BlkValueRead(rel, RRV_FILLED);
	ext = BlkValueRead(rel, RRV_STORAGE) + 1;
	if (filled >= (ext - filled) * RRP_CROWDED_IS) {
		! copy entries to temporary space
		temp = FlexAllocate(ext * (3*WORDSIZE), TEXT_TY, BLK_FLAG_WORD+BLK_FLAG_MULTIPLE);
		for (i=0: i<ext*3: i++)
			BlkValueWrite(temp, i, BlkValueRead(rel, RRV_DATA_BASE+i), true);
		! resize and clear our data
		if (ext >= RRP_LARGE_IS) newext = ext * RRP_RESIZE_LARGE;
		else newext = ext * RRP_RESIZE_SMALL;
		BlkValueSetLBCapacity(rel, RRV_DATA_BASE + newext*3);
		BlkValueWrite(rel, RRV_STORAGE, newext - 1);
		BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_USED));
		for (i=0: i<newext*3: i++)
			BlkValueWrite(rel, RRV_DATA_BASE+i, 0);
		! copy entries back from temporary space
		kov = BlkValueRead(rel, RRV_KIND);
		kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
		for (i=0: i<ext: i++) {
			F = BlkValueRead(temp, 3*i, true);
			if (F == 0 || (F & RRF_DELETED)) continue;
			X = BlkValueRead(temp, 3*i + 1, true);
			Y = BlkValueRead(temp, 3*i + 2, true);
			at = DoubleHashSetLookUp(rel, kx, ky, X, Y);
			if (at >= 0) { print "*** Duplicate entry while resizing ***^"; rfalse; }
			at = ~at;
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at, F);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, X);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, Y);
		}
		! done with temporary space
		FlexFree(temp);
	}
];

[ DoubleHashSetEntryMatches rel at kx ky X Y  cx cy;
	cx = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
	if (KOVIsBlockValue(kx)) {
		if (BlkValueCompare(cx, X) ~= 0) rfalse;
	} else {
		if (cx ~= X) rfalse;
	}
	cy = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
	if (KOVIsBlockValue(ky)) {
		if (BlkValueCompare(cy, Y) ~= 0) rfalse;
	} else {
		if (cy ~= Y) rfalse;
	}
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Hash List Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ HashListRelationHandler rel task X Y  sym kov kx ky;
	kov = BlkValueRead(rel, RRV_KIND);
	kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
	return HashCoreRelationHandler(rel, task, kx, ky, X, Y, 1);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Hash Table Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ HashTableRelationHandler rel task X Y  kov kx ky;
	kov = BlkValueRead(rel, RRV_KIND);
	kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
	return HashCoreRelationHandler(rel, task, kx, ky, X, Y, 0);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Reversed Hash Table Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ReversedHashTableRelationHandler rel task X Y  kov kx ky swap;
	kov = BlkValueRead(rel, RRV_KIND);
	kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
	switch (task) {
		RELS_SET_VALENCY:
			return RELATION_TY_SetValency(rel, X);
		RELS_TEST, RELS_ASSERT_TRUE, RELS_ASSERT_FALSE:
			return HashCoreRelationHandler(rel, task, ky, kx, Y, X, 0);
		RELS_LOOKUP_ANY:
			switch (Y) {
				RLANY_GET_X: Y = RLANY_GET_Y;
				RLANY_GET_Y: Y = RLANY_GET_X;
				RLANY_CAN_GET_X: Y = RLANY_CAN_GET_Y;
				RLANY_CAN_GET_Y: Y = RLANY_CAN_GET_X;
			}
		RELS_LOOKUP_ALL_X:
			task = RELS_LOOKUP_ALL_Y;
		RELS_LOOKUP_ALL_Y:
			task = RELS_LOOKUP_ALL_X;
		RELS_SHOW:
			swap=X; X=Y; Y=swap;
			swap=kx; kx=ky; ky=swap;
 		RELS_LIST:
			switch (Y) {
				RLIST_ALL_X: Y = RLIST_ALL_Y;
				RLIST_ALL_Y: Y = RLIST_ALL_X;
			}
	}
	return HashCoreRelationHandler(rel, task, kx, ky, X, Y, 0);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Symmetric Relation Handlers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SymDoubleHashSetRelationHandler rel task X Y;
	if (task == RELS_ASSERT_TRUE or RELS_ASSERT_FALSE)
		DoubleHashSetRelationHandler(rel, task, Y, X);
	return DoubleHashSetRelationHandler(rel, task, X, Y, 1);
];

[ SymHashListRelationHandler rel task X Y;
	if (task == RELS_ASSERT_TRUE or RELS_ASSERT_FALSE)
		HashListRelationHandler(rel, task, Y, X);
	return HashListRelationHandler(rel, task, X, Y);
];

[ Sym2in1HashTableRelationHandler rel task X Y;
	if (task == RELS_ASSERT_TRUE or RELS_ASSERT_FALSE)
		TwoInOneHashTableRelationHandler(rel, task, Y, X);
	return TwoInOneHashTableRelationHandler(rel, task, X, Y, 1);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Hash Core Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ HashCoreRelationHandler rel task kx ky X Y mult  sym rev at tmp fl;
	if (task == RELS_SET_VALENCY) {
		return RELATION_TY_SetValency(rel, X);
	} else if (task == RELS_DESTROY) {
		! clear
		kx = KOVIsBlockValue(kx); ky = KOVIsBlockValue(ky);
		if (~~(kx || ky)) return;
		at = BlkValueRead(rel, RRV_STORAGE);
		while (at >= 0) {
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			if (fl & RRF_USED) {
				if (kx) BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1));
				if (ky || ~~(fl & RRF_SINGLE))
					BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2));
			}
			at--;
		}
		return;
	} else if (task == RELS_COPY) {
		X = KOVIsBlockValue(kx); Y = KOVIsBlockValue(ky);
		if (~~(X || Y)) return;
		at = BlkValueRead(rel, RRV_STORAGE);
		while (at >= 0) {
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			if (fl & RRF_USED) {
				if (X) {
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
					tmp = BlkValueCopy(BlkValueCreate(kx), tmp);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, tmp);
				}
				if (Y || ~~(fl & RRF_SINGLE)) {
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
					tmp = BlkValueCopy(BlkValueCreate(BlkValueWeakKind(tmp)), tmp);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, tmp);
				}
			}
			at--;
		}
		return;
	} else if (task == RELS_SHOW) {
		print (string) BlkValueRead(rel, RRV_DESCRIPTION), ":^";
		! Z-machine doesn't have the room to let us pass sym/rev as parameters
		switch (RELATION_TY_GetValency(rel)) {
			RRVAL_SYM_V_TO_V:
				sym = 1;
				tmp = KOVComparisonFunction(kx);
				if (~~tmp) tmp = UnsignedCompare;
			RRVAL_O_TO_V:
				rev = 1;
		}
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			if (fl & RRF_USED) {
				X = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
				Y = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
				if (fl & RRF_SINGLE) {
					if (sym && tmp(X, Y) > 0) continue;
					print "  ";
					if (rev) PrintKindValuePair(ky, Y);
					else PrintKindValuePair(kx, X);
					if (sym) print " <=> "; else print " >=> ";
					if (rev) PrintKindValuePair(kx, X);
					else PrintKindValuePair(ky, Y);
					print "^";
				} else {
					for (mult=1: mult<=LIST_OF_TY_GetLength(Y): mult++) {
						fl = LIST_OF_TY_GetItem(Y, mult);
						if (sym && tmp(X, fl) > 0) continue;
						print "  ";
						if (rev) PrintKindValuePair(ky, fl);
						else PrintKindValuePair(kx, X);
						if (sym) print " <=> "; else print " >=> ";
						if (rev) PrintKindValuePair(kx, X);
						else PrintKindValuePair(ky, fl);
						print "^";
					}
				}
			}
		}
		return;
	} else if (task == RELS_EMPTY) {
		if (BlkValueRead(rel, RRV_USED) == 0) rtrue;
		if (X == 1) {
			HashCoreRelationHandler(rel, RELS_DESTROY);
			for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
				tmp = RRV_DATA_BASE + 3*at;
				BlkValueWrite(rel, tmp, 0);
				BlkValueWrite(rel, tmp + 1, 0);
				BlkValueWrite(rel, tmp + 2, 0);
			}
			BlkValueWrite(rel, RRV_USED, 0);
			BlkValueWrite(rel, RRV_FILLED, 0);
			rtrue;
		}
		rfalse;
	} else if (task == RELS_LOOKUP_ANY) {
		if (Y == RLANY_GET_Y or RLANY_CAN_GET_Y) {
			at = HashCoreLookUp(rel, kx, X);
			if (at >= 0) {
				if (Y == RLANY_CAN_GET_Y) rtrue;
				tmp = RRV_DATA_BASE + 3*at;
				fl = BlkValueRead(rel, tmp);
				tmp = BlkValueRead(rel, tmp + 2);
				if (fl & RRF_SINGLE) return tmp;
				return LIST_OF_TY_GetItem(tmp, 1);
			}
		} else {
			for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
				tmp = RRV_DATA_BASE + 3*at;
				fl = BlkValueRead(rel, tmp);
				if (fl & RRF_USED) {
					sym = BlkValueRead(rel, tmp + 2);
					if (fl & RRF_SINGLE) {
						if (KOVIsBlockValue(ky)) {
							if (BlkValueCompare(X, sym) ~= 0) continue;
						} else {
							if (X ~= sym) continue;
						}
					} else {
						if (LIST_OF_TY_FindItem(sym, X) == 0) continue;
					}
					if (Y == RLANY_CAN_GET_X) rtrue;
					return BlkValueRead(rel, tmp + 1);
				}
			}
		}
		if (Y == RLANY_GET_X or RLANY_GET_Y)
			print "*** Lookup failed: value not found ***^";
		rfalse;
	} else if (task == RELS_LOOKUP_ALL_X) {
		if (BlkValueWeakKind(Y) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(Y, 0);
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			tmp = RRV_DATA_BASE + 3*at;
			fl = BlkValueRead(rel, tmp);
			if (fl & RRF_USED) {
				sym = BlkValueRead(rel, tmp + 2);
				if (fl & RRF_SINGLE) {
					if (KOVIsBlockValue(ky)) {
						if (BlkValueCompare(X, sym) ~= 0) continue;
					} else {
						if (X ~= sym) continue;
					}
				} else {
					if (LIST_OF_TY_FindItem(sym, X) == 0) continue;
				}
				LIST_OF_TY_InsertItem(Y, BlkValueRead(rel, tmp + 1));
			}
		}
		return Y;
	} else if (task == RELS_LOOKUP_ALL_Y) {
		if (BlkValueWeakKind(Y) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(Y, 0);
		at = HashCoreLookUp(rel, kx, X);
		if (at >= 0) {
			tmp = RRV_DATA_BASE + 3*at;
			fl = BlkValueRead(rel, tmp);
			tmp = BlkValueRead(rel, tmp + 2);
			if (fl & RRF_SINGLE)
				LIST_OF_TY_InsertItem(Y, tmp);
			else
				LIST_OF_TY_AppendList(Y, tmp);
		}
		return Y;
	} else if (task == RELS_LIST) {
		if (BlkValueWeakKind(X) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(X, 0);
		switch (Y) {
			RLIST_ALL_X:
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 3*at;
					fl = BlkValueRead(rel, tmp);
					if (fl & RRF_USED)
						LIST_OF_TY_InsertItem(X, BlkValueRead(rel, tmp + 1));
				}
				return X;
			RLIST_ALL_Y:
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 3*at;
					fl = BlkValueRead(rel, tmp);
					if (fl & RRF_USED) {
						tmp = BlkValueRead(rel, tmp + 2);
						if (fl & RRF_SINGLE)
							LIST_OF_TY_InsertItem(X, tmp, false, 0, true);
						else
							LIST_OF_TY_AppendList(X, tmp, false, 0, true);
					}
				}
				return X;
			RLIST_ALL_PAIRS:
				if (RELATION_TY_GetValency(rel) == RRVAL_O_TO_V) rev = 1;
				! LIST_OF_TY_InsertItem will make a deep copy of the item,
				! so we can reuse a single combination value here
				Y = BlkValueCreate(COMBINATION_TY, tmp);
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 3*at;
					fl = BlkValueRead(rel, tmp);
					if (fl & RRF_USED) {
						BlkValueWrite(Y, COMBINATION_ITEM_BASE + rev, BlkValueRead(rel, tmp + 1));
						tmp = BlkValueRead(rel, tmp + 2);
						if (fl & RRF_SINGLE) {
							BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1 - rev, tmp);
							LIST_OF_TY_InsertItem(X, Y);
						} else {
							for (mult = LIST_OF_TY_GetLength(tmp): mult > 0: mult--) {
								BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1 - rev,
									LIST_OF_TY_GetItem(tmp, mult));
								LIST_OF_TY_InsertItem(X, Y);
							}
						}
					}
				}
				BlkValueWrite(Y, COMBINATION_ITEM_BASE, 0);
				BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1, 0);
				BlkValueFree(Y);
				return X;
		}
		rfalse;
	}
	at = HashCoreLookUp(rel, kx, X);
	switch(task) {
		RELS_TEST:
			if (at < 0) rfalse;
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
			if (fl & RRF_SINGLE) {
				if (KOVIsBlockValue(ky)) {
					if (BlkValueCompare(tmp, Y) == 0) rtrue;
				} else {
					if (tmp == Y) rtrue;
				}
				rfalse;
			} else {
				return LIST_OF_TY_FindItem(tmp, Y);
			}
		RELS_ASSERT_TRUE:
			if (at < 0) {
				! no entry exists for this key, just add one
				at = ~at;
				BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 1);
				if (BlkValueRead(rel, RRV_DATA_BASE + 3*at) == 0)
					BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_USED+RRF_SINGLE);
				if (KOVIsBlockValue(kx)) { X = BlkValueCopy(BlkValueCreate(kx), X); }
				if (KOVIsBlockValue(ky)) { Y = BlkValueCopy(BlkValueCreate(ky), Y); }
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, X);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, Y);
				HashCoreCheckResize(rel);
				break;
			}
			! an entry exists: could be a list or a single value
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);		! flags
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);	! value or list
			if (fl & RRF_SINGLE) {
				! if Y is the same as the stored key, we have nothing to do
				if (KOVIsBlockValue(ky)) {
					if (BlkValueCompare(tmp, Y) == 0) rtrue;
				} else {
					if (tmp == Y) rtrue;
				}
				! it's different: either replace it or expand into a list,
				! depending on the value of mult
				if (mult) {
					fl = BlkValueCreate(LIST_OF_TY);	! new list
					BlkValueWrite(fl, LIST_ITEM_KOV_F, ky);
					LIST_OF_TY_SetLength(fl, 2);
					BlkValueWrite(fl, LIST_ITEM_BASE, tmp);	! do not copy
					LIST_OF_TY_PutItem(fl, 2, Y);		! copy if needed
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, fl);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_USED);
				} else {
					if (KOVIsBlockValue(ky)) {
						BlkValueFree(tmp);
						Y = BlkValueCopy(BlkValueCreate(ky), Y);
					}
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, Y);
				}
			} else {
				! if Y is present already, do nothing. otherwise add it.
				LIST_OF_TY_InsertItem(tmp, Y, 0, 0, 1);
			}
			rtrue;
		RELS_ASSERT_FALSE:
			if (at < 0) rtrue;
			! an entry exists: could be a list or a single value
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);		! flags
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);	! value or list
			if (fl & RRF_SINGLE) {
				! if the stored key isn't Y, we have nothing to do
				if (KOVIsBlockValue(ky)) {
					if (BlkValueCompare(tmp, Y) ~= 0) rtrue;
				} else {
					if (tmp ~= Y) rtrue;
				}
				! delete the entry
				if (KOVIsBlockValue(ky))
					BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2));
				.DeleteEntryIgnoringY;
				BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) - 1);
				if (KOVIsBlockValue(kx))
					BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1));
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_DELETED);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, 0);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, 0);
			} else {
				! remove Y from the list if present
				LIST_OF_TY_RemoveValue(tmp, Y, 1);
				! if the list is now empty, delete the whole entry
				if (LIST_OF_TY_GetLength(tmp) == 0) {
					BlkValueFree(tmp);
					jump DeleteEntryIgnoringY;
				}
			}
			rtrue;
	}
	rtrue;
];

[ HashCoreLookUp rel kx X  hashv i free mask perturb flags;
!print "[HCLU rel=", rel, " kx=", kx, " X=", X, ": ";
	! calculate a hash value for the key
	hashv = GetHashValue(kx, x);
	! look in the first expected slot
	mask = BlkValueRead(rel, RRV_STORAGE);
	i = hashv & mask;
!print "hv=", hashv, ", trying ", i;
	flags = BlkValueRead(rel, RRV_DATA_BASE + 3*i);
	if (flags == 0) {
!print " - not found]^";
		return ~i;
	}
	if (HashCoreEntryMatches(rel, i, kx, X)) {
!print " - found]^";
		return i;
	}
	! not here, keep looking in sequence
	free = -1;
	if (flags & RRF_DELETED) free = i;
	perturb = hashv;
	hashv = i;
	for (::) {
		hashv = hashv*5 + perturb + 1;
		i = hashv & mask;
!print ", ", i;
		flags = BlkValueRead(rel, RRV_DATA_BASE + 3*i);
		if (flags == 0) {
!print " - not found]^";
			if (free >= 0) return ~free;
			return ~i;
		}
		if (HashCoreEntryMatches(rel, i, kx, X)) {
!print " - found]^";
			return i;
		}
		if ((free < 0) && (flags & RRF_DELETED)) free = i;
		#ifdef TARGET_ZCODE;
		@log_shift perturb (-RRP_PERTURB_SHIFT) -> perturb;
		#ifnot;
		@ushiftr perturb RRP_PERTURB_SHIFT perturb;
		#endif;
	}
];

[ HashCoreCheckResize rel  filled ext newext temp i at kov kx F X Y;
	filled = BlkValueRead(rel, RRV_FILLED);
	ext = BlkValueRead(rel, RRV_STORAGE) + 1;
	if (filled >= (ext - filled) * RRP_CROWDED_IS) {
		! copy entries to temporary space
		temp = FlexAllocate(ext * (3*WORDSIZE), TEXT_TY, BLK_FLAG_WORD+BLK_FLAG_MULTIPLE);
		for (i=0: i<ext*3: i++)
			BlkValueWrite(temp, i, BlkValueRead(rel, RRV_DATA_BASE+i), true);
		! resize and clear our data
		if (ext >= RRP_LARGE_IS) newext = ext * RRP_RESIZE_LARGE;
		else newext = ext * RRP_RESIZE_SMALL;
		BlkValueSetLBCapacity(rel, RRV_DATA_BASE + newext*3);
		BlkValueWrite(rel, RRV_STORAGE, newext - 1);
		BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_USED));
		for (i=0: i<newext*3: i++)
			BlkValueWrite(rel, RRV_DATA_BASE+i, 0);
		! copy entries back from temporary space
		kov = BlkValueRead(rel, RRV_KIND);
		kx = KindBaseTerm(kov, 0);
		for (i=0: i<ext: i++) {
			F = BlkValueRead(temp, 3*i, true);
			if (F == 0 || (F & RRF_DELETED)) continue;
			X = BlkValueRead(temp, 3*i + 1, true);
			Y = BlkValueRead(temp, 3*i + 2, true);
			at = HashCoreLookUp(rel, kx, X);
			if (at >= 0) { print "*** Duplicate entry while resizing ***^"; rfalse; }
			at = ~at;
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at, F);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, X);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, Y);
		}
		! done with temporary space
		FlexFree(temp);
	}
];

[ HashCoreEntryMatches rel at kx X  cx cy;
	cx = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
	if (KOVIsBlockValue(kx)) {
		if (BlkValueCompare(cx, X) ~= 0) rfalse;
	} else {
		if (cx ~= X) rfalse;
	}
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Equivalence Hash Table Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ EquivHashTableRelationHandler rel task X Y  kx at at2 tmp fl i ext;
	kx = KindBaseTerm(BlkValueRead(rel, RRV_KIND), 0);
	if (task == RELS_SET_VALENCY) {
		return RELATION_TY_SetValency(rel, X);
	} else if (task == RELS_DESTROY) {
		! clear
		if (KOVIsBlockValue(kx)) {
			at = BlkValueRead(rel, RRV_STORAGE);
			while (at >= 0) {
				fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
				if (fl & RRF_USED) {
					BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1));
				}
				at--;
			}
		}
		return;
	} else if (task == RELS_COPY) {
		if (KOVIsBlockValue(kx)) {
			at = BlkValueRead(rel, RRV_STORAGE);
			while (at >= 0) {
				fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
				if (fl & RRF_USED) {
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
					tmp = BlkValueCopy(BlkValueCreate(kx), tmp);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1);
				}
				at--;
			}
		}
		return;
	} else if (task == RELS_SHOW) {
		print (string) BlkValueRead(rel, RRV_DESCRIPTION), ":^";
		ext = BlkValueRead(rel, RRV_STORAGE);
		! flag all items by negating their group numbers
		for (at=0, X=RRV_DATA_BASE: at<=ext: at++, X=X+3)
			if (BlkValueRead(rel, X) & RRF_USED)
				BlkValueWrite(rel, X + 2, -(BlkValueRead(rel, X + 2)));
		! display groups, unflagging them as we go
		for (at=0, X=RRV_DATA_BASE, fl=0: at<=ext: at++, X=X+3, fl=0) {
			if (BlkValueRead(rel, X) & RRF_USED) {
				fl = BlkValueRead(rel, X + 2);
				if (fl > 0) continue;		! already visited
				BlkValueWrite(rel, X + 2, -fl);	! unflag it
				! display the group starting with this member, but only
				! if there are more members in the group
				tmp = BlkValueRead(rel, X + 1);
				i = 0;
				for (at2=at+1, Y=RRV_DATA_BASE+3*at2: at2<=ext: at2++, Y=Y+3) {
					if (BlkValueRead(rel, Y) & RRF_USED) {
						if (BlkValueRead(rel, Y + 2) ~= fl) continue;
						BlkValueWrite(rel, Y + 2, -fl);
						if (~~i) {
							! print the saved first member
							print "  { ";
							PrintKindValuePair(kx, tmp);
							i = 1;
						}
						print ", ";
						PrintKindValuePair(kx, BlkValueRead(rel, Y + 1));
					}
				}
				if (i) print " }^";
			}
		}
		return;
	} else if (task == RELS_EMPTY) {
		! never empty since R(x,x) is always true
		rfalse;
	} else if (task == RELS_LOOKUP_ANY) {
		! kind of a cheat, but it's faster than searching for a better value to return
		if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
		return X;
	} else if (task == RELS_LOOKUP_ALL_X or RELS_LOOKUP_ALL_Y) {
		if (BlkValueWeakKind(Y) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(Y, 0);
		BlkValueWrite(Y, LIST_ITEM_KOV_F, kx);
		at = HashCoreLookUp(rel, kx, X);
		if (at < 0) {
			LIST_OF_TY_InsertItem(Y, X);
		} else {
			X = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
			for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
				tmp = RRV_DATA_BASE + 3*at;
				fl = BlkValueRead(rel, tmp);
				if (fl & RRF_USED) {
					if (BlkValueRead(rel, tmp + 2) ~= X) continue;
					LIST_OF_TY_InsertItem(Y, BlkValueRead(rel, tmp + 1));
				}
			}
		}
		return Y;
	} else if (task == RELS_LIST) {
		print "*** Domains of equivalence relations cannot be listed ***^";
		return X;
	}
	at = HashCoreLookUp(rel, kx, X);
	at2 = HashCoreLookUp(rel, kx, Y);
	switch(task) {
		RELS_TEST:
			if (at < 0) {
				! X is a loner, but could still be true if X == Y
				if (KOVIsBlockValue(kx)) {
					if (BlkValueCompare(X, Y) == 0) rtrue;
				} else {
					if (X == Y) rtrue;
				}
				rfalse;
			}
			if (at2 < 0) rfalse;
			if (at == at2) rtrue;
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
			if (BlkValueRead(rel, RRV_DATA_BASE + 3*at2 + 2) == tmp) rtrue;
			rfalse;
		RELS_ASSERT_TRUE:
			! if X and Y are the same, we have nothing to do
			if (KOVIsBlockValue(kx)) {
				if (BlkValueCompare(X, Y) == 0) rtrue;
			} else {
				if (X == Y) rtrue;
			}
			if (at < 0) {
				if (at2 < 0) {
					! X and Y both missing: find a new group number and add both entries
					tmp = 0;		! candidate group number
					ext = BlkValueRead(rel, RRV_STORAGE);
					for (i=0: i<=ext: i++) {
						fl = BlkValueRead(rel, RRV_DATA_BASE + 3*i);
						if (fl & RRF_USED) {
							fl = BlkValueRead(rel, RRV_DATA_BASE + 3*i + 2);
							if (fl > tmp) tmp = fl;
						}
					}
					tmp++;			! new group number
					BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 2);
					! add X entry
					at = ~at;
					if (KOVIsBlockValue(kx)) { X = BlkValueCopy(BlkValueCreate(kx), X); }
					fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
					if (fl == 0)
						BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_USED+RRF_SINGLE);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, X);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, tmp);
					! add Y entry. at2 might change if X and Y have the same hash code.
					at2 = ~(HashCoreLookUp(rel, kx, Y));
					if (KOVIsBlockValue(kx)) { Y = BlkValueCopy(BlkValueCreate(kx), Y); }
					fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at2);
					if (fl == 0)
						BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at2, RRF_USED+RRF_SINGLE);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at2 + 1, Y);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at2 + 2, tmp);
					jump CheckResize;
				}
				! X missing, Y present: add a new X entry
				at = ~at;
				if (KOVIsBlockValue(kx)) { X = BlkValueCopy(BlkValueCreate(kx), X); }
				BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 1);
				fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
				if (fl == 0)
					BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_USED+RRF_SINGLE);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, X);
				tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at2 + 2);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, tmp);
				jump CheckResize;
			}
			if (at2 < 0) {
				! X present, Y missing: add a new Y entry
				at2 = ~at2;
				if (KOVIsBlockValue(kx)) { Y = BlkValueCopy(BlkValueCreate(kx), Y); }
				BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 1);
				fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at2);
				if (fl == 0)
					BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at2, RRF_USED+RRF_SINGLE);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at2 + 1, Y);
				tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at2 + 2, tmp);
				jump CheckResize;
			}
			! X and Y both present: merge higher group into lower group
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);	! higher group
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at2 + 2);	! lower group
			if (tmp < fl) { i = tmp; tmp = fl; fl = i; }
			ext = BlkValueRead(rel, RRV_STORAGE);
			for (at=0: at<=ext: at++) {
				i = RRV_DATA_BASE + 3*at + 2;
				if (BlkValueRead(rel, i) == tmp)
					BlkValueWrite(rel, i, fl);
			}
			.CheckResize;
			HashCoreCheckResize(rel);
			rtrue;
		RELS_ASSERT_FALSE:
			! if X and Y are already in different groups, we have nothing to do
			if (at < 0 || at2 < 0) rtrue;
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
			if (BlkValueRead(rel, RRV_DATA_BASE + 3*at2 + 2) ~= tmp) rtrue;
			! delete the entry for X
			BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) - 1);
			if (KOVIsBlockValue(kx))
				BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1));
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_DELETED);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, 0);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, 0);
			rtrue;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Two-In-One Hash Table Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TwoInOneHashTableRelationHandler rel task X Y sym  kov kx ky at at2 tmp fl;
	kov = BlkValueRead(rel, RRV_KIND);
	kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
	if (task == RELS_SET_VALENCY) {
		return RELATION_TY_SetValency(rel, X);
	} else if (task == RELS_DESTROY) {
		! clear
		kx = KOVIsBlockValue(kx); ky = KOVIsBlockValue(ky);
		if (~~(kx || ky)) return;
		at = BlkValueRead(rel, RRV_STORAGE);
		while (at >= 0) {
			fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
			if (fl & RRF_USED)
				if ((kx && (fl & RRF_ENTKEYX)) || (ky && (fl & RRF_ENTKEYY))) {
					BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1));
				}
			at--;
		}
		return;
	} else if (task == RELS_COPY) {
		X = KOVIsBlockValue(kx); Y = KOVIsBlockValue(ky);
		if (~~(X || Y)) return;
		at = BlkValueRead(rel, RRV_STORAGE);
		while (at >= 0) {
			fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
			if (fl & RRF_USED) {
				if ((X && (fl & RRF_ENTKEYX)) || (Y && (fl & RRF_ENTKEYY))) {
					! copy the entry key
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1);
					if (fl & RRF_ENTKEYX)
						tmp = BlkValueCopy(BlkValueCreate(kx), tmp);
					else
						tmp = BlkValueCopy(BlkValueCreate(ky), tmp);
					BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 1, tmp);
					! update references in X/Y fields pointing here
					if (fl & RRF_HASX) {
						at2 = TwoInOneLookUp(rel, kx,
							BlkValueRead(rel, RRV_DATA_BASE + 4*at + 2),
							RRF_ENTKEYX);
						if (at2 >= 0)
							BlkValueWrite(rel, RRV_DATA_BASE + 4*at2 + 3, tmp);
					}
					if (fl & RRF_HASY) {
						at2 = TwoInOneLookUp(rel, ky,
							BlkValueRead(rel, RRV_DATA_BASE + 4*at + 3),
							RRF_ENTKEYY);
						if (at2 >= 0)
							BlkValueWrite(rel, RRV_DATA_BASE + 4*at2 + 2, tmp);
					}
				}
			}
			at--;
		}
		return;
	} else if (task == RELS_SHOW) {
		print (string) BlkValueRead(rel, RRV_DESCRIPTION), ":^";
		if (sym) {
			kov = KOVComparisonFunction(kx);
			if (~~kov) kov = UnsignedCompare;
		}
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
			if ((fl & (RRF_USED+RRF_ENTKEYX+RRF_HASY)) ==
				(RRF_USED+RRF_ENTKEYX+RRF_HASY)) {
				X = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1);
				Y = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 3);
				if (sym && kov(X, Y) > 0) continue;
				print "  ";
				PrintKindValuePair(kx, X);
				if (sym) print " <=> "; else print " >=> ";
				PrintKindValuePair(ky, Y);
				print "^";
			}
		}
		return;
	} else if (task == RELS_EMPTY) {
		if (BlkValueRead(rel, RRV_USED) == 0) rtrue;
		if (X == 1) {
			TwoInOneHashTableRelationHandler(rel, RELS_DESTROY);
			for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
				tmp = RRV_DATA_BASE + 4*at;
				BlkValueWrite(rel, tmp, 0);
				BlkValueWrite(rel, tmp + 1, 0);
				BlkValueWrite(rel, tmp + 2, 0);
				BlkValueWrite(rel, tmp + 3, 0);
			}
			BlkValueWrite(rel, RRV_USED, 0);
			BlkValueWrite(rel, RRV_FILLED, 0);
			rtrue;
		}
		rfalse;
	} else if (task == RELS_LOOKUP_ANY) {
		switch (Y) {
			RLANY_GET_X, RLANY_CAN_GET_X:
				at = TwoInOneLookUp(rel, ky, X, RRF_ENTKEYY);
				if (at >= 0) {
					tmp = RRV_DATA_BASE + 4*at;
					if (BlkValueRead(rel, tmp) & RRF_HASX) {
						if (Y == RLANY_CAN_GET_X) rtrue;
						return BlkValueRead(rel, tmp + 2);
					}
				}
			RLANY_GET_Y, RLANY_CAN_GET_Y:
				at = TwoInOneLookUp(rel, kx, X, RRF_ENTKEYX);
				if (at >= 0) {
					tmp = RRV_DATA_BASE + 4*at;
					if (BlkValueRead(rel, tmp) & RRF_HASY) {
						if (Y == RLANY_CAN_GET_Y) rtrue;
						return BlkValueRead(rel, tmp + 3);
					}
				}
		}
		if (Y == RLANY_GET_X or RLANY_GET_Y)
			print "*** Lookup failed: value not found ***^";
		rfalse;
	} else if (task == RELS_LOOKUP_ALL_X) {
		at = TwoInOneLookUp(rel, ky, X, RRF_ENTKEYY);
		if (at >= 0) {
			tmp = RRV_DATA_BASE + 4*at;
			if (BlkValueRead(rel, tmp) & RRF_HASX)
				LIST_OF_TY_InsertItem(Y, BlkValueRead(rel, tmp + 2));
		}
		return Y;
	} else if (task == RELS_LOOKUP_ALL_Y) {
		at = TwoInOneLookUp(rel, kx, X, RRF_ENTKEYX);
		if (at >= 0) {
			tmp = RRV_DATA_BASE + 4*at;
			if (BlkValueRead(rel, tmp) & RRF_HASY)
				LIST_OF_TY_InsertItem(Y, BlkValueRead(rel, tmp + 3));
		}
		return Y;
	} else if (task == RELS_LIST) {
		switch (Y) {
			RLIST_ALL_X:
				fl = RRF_USED+RRF_ENTKEYX+RRF_HASY;
				jump ListEntryKeys;
			RLIST_ALL_Y:
				fl = RRF_USED+RRF_ENTKEYY+RRF_HASX;
				.ListEntryKeys;
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 4*at;
					if ((BlkValueRead(rel, tmp) & fl) == fl)
						LIST_OF_TY_InsertItem(X, BlkValueRead(rel, tmp + 1), false, 0, true);
				}
			RLIST_ALL_PAIRS:
				tmp = BlkValueRead(X, LIST_ITEM_KOV_F);
				if (KindAtomic(tmp) ~= COMBINATION_TY) rfalse;
				! LIST_OF_TY_InsertItem will make a deep copy of the item,
				! so we can reuse a single combination value here
				Y = BlkValueCreate(tmp);
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 4*at;
					fl = BlkValueRead(rel, tmp);
					if ((fl & (RRF_USED+RRF_ENTKEYX+RRF_HASY)) ==
						(RRF_USED+RRF_ENTKEYX+RRF_HASY)) {
						BlkValueWrite(Y, COMBINATION_ITEM_BASE, BlkValueRead(rel, tmp + 1));
						BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1, BlkValueRead(rel, tmp + 3));
						LIST_OF_TY_InsertItem(X, Y);
					}
				}
				BlkValueWrite(Y, COMBINATION_ITEM_BASE, 0);
				BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1, 0);
				BlkValueFree(Y);
				return X;
		}
		return X;
	}
	at = TwoInOneLookUp(rel, kx, X, RRF_ENTKEYX);
	switch(task) {
		RELS_TEST:
			if (at < 0) rfalse;
			fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
			if (~~(fl & RRF_HASY)) rfalse;
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 3);
			if (KOVIsBlockValue(ky)) {
				if (BlkValueCompare(tmp, Y) == 0) rtrue;
			} else {
				if (tmp == Y) rtrue;
			}
			rfalse;
		RELS_ASSERT_TRUE:
			if (at < 0) {
				! create a new forward entry
				at = ~at;
				BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 1);
				fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
				if (fl == 0)
					BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
				fl = RRF_USED+RRF_HASY+RRF_ENTKEYX;
				if (kx == ky || ~~(KOVIsBlockValue(kx) || KOVIsBlockValue(ky)))
					fl = fl + RRF_ENTKEYY;
				BlkValueWrite(rel, RRV_DATA_BASE + 4*at, fl);
				if (KOVIsBlockValue(kx)) { X = BlkValueCopy(BlkValueCreate(kx), X); }
				BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 1, X);
				BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 2, 0);
			} else {
				fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
				if (fl & RRF_HASY) {
					! if the Y we're inserting is already there, we're done
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 3);
					if (KOVIsBlockValue(ky)) {
						if (BlkValueCompare(tmp, Y) == 0) rtrue;
					} else {
						if (tmp == Y) rtrue;
					}
					! it's different, so delete the reverse entry
					at2 = TwoInOneLookUp(rel, ky, tmp, RRF_ENTKEYY);
					if (at2 >= 0) TwoInOneDelete(rel, at2, kx, ky, RRF_ENTKEYY);
				} else {
					BlkValueWrite(rel, RRV_DATA_BASE + 4*at, fl + RRF_HASY);
				}
				! use the existing copy of X
				X = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1);
			}
			! use the existing copy of Y if there is one
			at2 = TwoInOneLookUp(rel, ky, Y, RRF_ENTKEYY);
			if (KOVIsBlockValue(ky)) {
				if (at2 >= 0)
					Y = BlkValueRead(rel, RRV_DATA_BASE + 4*at2 + 1);
				else
					Y = BlkValueCopy(BlkValueCreate(ky), Y);
			}
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 3, Y);
			if (at2 >= 0) {
				! delete existing reverse entry (and its own forward entry)
				TwoInOneDelete(rel, at2, kx, ky, RRF_ENTKEYY, 1);
			} else {
				at2 = ~at2;
			}
			! create reverse entry
			BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 1);
			fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at2);
			if (fl == 0)
				BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
			fl = fl | (RRF_USED+RRF_HASX+RRF_ENTKEYY);
			if (kx == ky || ~~(KOVIsBlockValue(kx) || KOVIsBlockValue(ky)))
				fl = fl | RRF_ENTKEYX;
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at2, fl);
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at2 + 1, Y);
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at2 + 2, X);
			TwoInOneCheckResize(rel);
			rtrue;
		RELS_ASSERT_FALSE:
			! we only have work to do if the entry exists and has a Y which
			! matches the Y we're deleting
			if (at < 0) rtrue;
			fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
			if ((fl & RRF_HASY) == 0) rtrue;
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 3);
			if (KOVIsBlockValue(ky)) {
				if (BlkValueCompare(tmp, Y) ~= 0) rtrue;
			} else {
				if (tmp ~= Y) rtrue;
			}
			TwoInOneDelete(rel, at, kx, ky, RRF_ENTKEYX, 1);
			rtrue;
	}
];

[ TwoInOneDelete rel at kx ky ekflag both  fl at2 E i;
!print "[2in1DEL at=", at, " (E=", BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1), ") ekflag=", ekflag, " both=", both, "]^";
	fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
	if (ekflag == RRF_ENTKEYX) {
		if (fl & RRF_HASY) {
			i = RRV_DATA_BASE + 4*at + 3;
			if (both) E = BlkValueRead(rel, i);
			BlkValueWrite(rel, i, 0);
			! delete matching Y<-X entry if needed
			if (both) {
				at2 = TwoInOneLookUp(rel, ky, E, RRF_ENTKEYY);
				if (at2 >= 0) TwoInOneDelete(rel, at2, kx, ky, RRF_ENTKEYY);
				if (at2 == at) fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
			}
			fl = fl & ~RRF_HASY;
		}
	} else {
		if (fl & RRF_HASX) {
			i = RRV_DATA_BASE + 4*at + 2;
			if (both) E = BlkValueRead(rel, i);
			BlkValueWrite(rel, i, 0);
			! delete matching X->Y entry if needed
			if (both) {
				at2 = TwoInOneLookUp(rel, kx, E, RRF_ENTKEYX);
				if (at2 >= 0) {
					TwoInOneDelete(rel, at2, kx, ky, RRF_ENTKEYX);
					if (at2 == at) fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
				}
			}
			fl = fl & ~RRF_HASX;
		}
	}
	if ((fl & (RRF_HASX+RRF_HASY)) == 0) {
		! entry is now empty, mark it deleted
		if (((fl & RRF_ENTKEYX) && KOVIsBlockValue(kx)) ||
		    ((ky ~= kx) && (fl & RRF_ENTKEYY) && KOVIsBlockValue(ky))) {
			BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1));
		}
		BlkValueWrite(rel, RRV_DATA_BASE + 4*at, RRF_DELETED);
		BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 1, 0);
		BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 2, 0);
		BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 3, 0);
		BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) - 1);
	} else {
		BlkValueWrite(rel, RRV_DATA_BASE + 4*at, fl);
	}
];

[ TwoInOneLookUp rel ke E ekflag  hashv i free mask perturb flags;
!print "[2in1LU rel=", rel, " ke=", ke, " E=", E, " ekf=", ekflag, ": ";
	! calculate a hash value for the key
	hashv = GetHashValue(ke, E);
	! look in the first expected slot
	mask = BlkValueRead(rel, RRV_STORAGE);
	i = hashv & mask;
!print "hv=", hashv, ", trying ", i;
	flags = BlkValueRead(rel, RRV_DATA_BASE + 4*i);
	if (flags == 0) {
!print " - not found]^";
		return ~i;
	}
	if ((flags & ekflag) && TwoInOneEntryMatches(rel, i, ke, E)) {
!print " - found]^";
		return i;
	}
	! not here, keep looking in sequence
	free = -1;
	if (flags & RRF_DELETED) free = i;
	perturb = hashv;
	hashv = i;
	for (::) {
		hashv = hashv*5 + perturb + 1;
		i = hashv & mask;
!print ", ", i;
		flags = BlkValueRead(rel, RRV_DATA_BASE + 4*i);
		if (flags == 0) {
!print " - not found]^";
			if (free >= 0) return ~free;
			return ~i;
		}
		if ((flags & ekflag) && TwoInOneEntryMatches(rel, i, ke, E)) {
!print " - found]^";
			return i;
		}
		if ((free < 0) && (flags & RRF_DELETED)) free = i;
		#ifdef TARGET_ZCODE;
		@log_shift perturb (-RRP_PERTURB_SHIFT) -> perturb;
		#ifnot;
		@ushiftr perturb RRP_PERTURB_SHIFT perturb;
		#endif;
	}
];

[ TwoInOneCheckResize rel  filled ext newext temp i at kov kx ky F E X Y;
	filled = BlkValueRead(rel, RRV_FILLED);
	ext = BlkValueRead(rel, RRV_STORAGE) + 1;
	if (filled >= (ext - filled) * RRP_CROWDED_IS) {
		! copy entries to temporary space
		temp = FlexAllocate(ext * (4*WORDSIZE), TEXT_TY, BLK_FLAG_WORD+BLK_FLAG_MULTIPLE);
		for (i=0: i<ext*4: i++)
			BlkValueWrite(temp, i, BlkValueRead(rel, RRV_DATA_BASE+i), true);
		! resize and clear our data
		if (ext >= RRP_LARGE_IS) newext = ext * RRP_RESIZE_LARGE;
		else newext = ext * RRP_RESIZE_SMALL;
		BlkValueSetLBCapacity(rel, RRV_DATA_BASE + newext*4);
		BlkValueWrite(rel, RRV_STORAGE, newext - 1);
		BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_USED));
		for (i=0: i<newext*4: i++)
			BlkValueWrite(rel, RRV_DATA_BASE+i, 0);
		! copy entries back from temporary space
		kov = BlkValueRead(rel, RRV_KIND);
		kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
		for (i=0: i<ext: i++) {
			F = BlkValueRead(temp, 4*i, true);
			if (F == 0 || (F & RRF_DELETED)) continue;
			E = BlkValueRead(temp, 4*i + 1, true);
			X = BlkValueRead(temp, 4*i + 2, true);
			Y = BlkValueRead(temp, 4*i + 3, true);
			if (F & RRF_ENTKEYX) at = TwoInOneLookUp(rel, kx, E, RRF_ENTKEYX);
			else at = TwoInOneLookUp(rel, ky, E, RRF_ENTKEYY);
			if (at >= 0) { print "*** Duplicate entry while resizing ***^"; rfalse; }
			at = ~at;
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at, F);
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 1, E);
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 2, X);
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 3, Y);
		}
		! done with temporary space
		FlexFree(temp);
	}
];

[ TwoInOneEntryMatches rel at ke E  ce;
	ce = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1);
	if (KOVIsBlockValue(ke)) {
		if (BlkValueCompare(ce, E) ~= 0) rfalse;
	} else {
		if (ce ~= E) rfalse;
	}
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Empty
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Empty rel set  handler;
	handler = RlnGetF(rel, RR_HANDLER);
	return handler(rel, RELS_EMPTY, set);
];


Array ResourceIDsOfFigures --> 0 1  0;

Array ResourceIDsOfSounds --> 0  0;



Array BC_0 --> PACKED_TEXT_STORAGE TX_PS_2;
Array BC_1 --> PACKED_TEXT_STORAGE TX_PS_3;
Array BC_2 --> PACKED_TEXT_STORAGE TX_PS_4;
Array BC_3 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_4 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_5 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_6 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_7 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_8 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_9 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_10 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_11 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_12 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_13 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_14 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_15 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_16 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_17 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_18 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_19 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_20 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_21 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_22 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_23 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_24 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_25 --> PACKED_TEXT_STORAGE TX_PS_6;
Array BC_26 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_27 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_28 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_29 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_30 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_31 --> PACKED_TEXT_STORAGE TX_PS_7;
Array BC_32 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_33 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_34 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_35 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_36 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_37 --> PACKED_TEXT_STORAGE TX_PS_8;
Array BC_38 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_39 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_40 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_41 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_42 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_43 --> PACKED_TEXT_STORAGE TX_PS_9;
Array BC_44 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_45 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_46 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_47 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_48 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_49 --> PACKED_TEXT_STORAGE TX_PS_10;
Array BC_50 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_51 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_52 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_53 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_54 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_55 --> PACKED_TEXT_STORAGE TX_PS_11;
Array BC_56 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_57 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_58 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_59 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_60 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_61 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_62 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_63 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_64 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_65 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_66 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_67 --> PACKED_TEXT_STORAGE TX_PS_13;
Array BC_68 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_69 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_70 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_71 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_72 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_73 --> PACKED_TEXT_STORAGE TX_PS_14;
Array BC_74 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_75 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_76 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_77 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_78 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_79 --> PACKED_TEXT_STORAGE TX_PS_15;
Array BC_80 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_81 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_82 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_83 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_84 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_85 --> PACKED_TEXT_STORAGE TX_PS_16;
Array BC_86 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_87 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_88 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_89 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_90 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_91 --> PACKED_TEXT_STORAGE TX_PS_17;
Array BC_92 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_93 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_94 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_95 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_96 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_97 --> PACKED_TEXT_STORAGE TX_PS_18;
Array BC_98 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_99 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_100 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_101 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_102 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_103 --> PACKED_TEXT_STORAGE TX_PS_19;
Array BC_104 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_105 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_106 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_107 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_108 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_109 --> PACKED_TEXT_STORAGE TX_PS_20;
Array BC_110 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_111 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_112 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_113 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_114 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_115 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_116 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_117 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_118 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_119 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_120 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_121 --> PACKED_TEXT_STORAGE TX_PS_23;
Array BC_122 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_134;
Array BC_123 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_124 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_125 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_126 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_127 --> PACKED_TEXT_STORAGE TX_PS_24;
Array BC_128 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_129 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_130 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_131 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_132 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_133 --> PACKED_TEXT_STORAGE TX_PS_26;
Array BC_134 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_135 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_136 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_137 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_138 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_139 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_140 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_141 --> PACKED_TEXT_STORAGE TX_PS_28;
Array BC_142 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_143 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_144 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_145 --> PACKED_TEXT_STORAGE TX_PS_30;
Array BC_146 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_147 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_148 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_149 --> PACKED_TEXT_STORAGE TX_PS_31;
Array BC_150 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_151 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_152 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_153 --> PACKED_TEXT_STORAGE TX_PS_32;
Array BC_154 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_155 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_156 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_157 --> PACKED_TEXT_STORAGE TX_PS_33;
Array BC_158 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_159 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_160 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_161 --> PACKED_TEXT_STORAGE TX_PS_34;
Array BC_162 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_163 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_164 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_165 --> PACKED_TEXT_STORAGE TX_PS_35;
Array BC_166 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_167 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_168 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_169 --> PACKED_TEXT_STORAGE TX_PS_36;
Array BC_170 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_171 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_172 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_173 --> PACKED_TEXT_STORAGE TX_PS_37;
Array BC_174 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_175 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_176 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_177 --> PACKED_TEXT_STORAGE TX_PS_38;
Array BC_178 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_179 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_180 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_181 --> PACKED_TEXT_STORAGE TX_PS_39;
Array BC_182 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_183 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_184 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_185 --> PACKED_TEXT_STORAGE TX_PS_40;
Array BC_186 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_187 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_188 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_189 --> PACKED_TEXT_STORAGE TX_PS_41;
Array BC_190 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_135;
Array BC_191 --> PACKED_TEXT_STORAGE TX_PS_42;
Array BC_192 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_193 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_194 --> PACKED_TEXT_STORAGE TX_PS_6;
Array BC_195 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_196 --> PACKED_TEXT_STORAGE TX_PS_43;
Array BC_197 --> PACKED_TEXT_STORAGE TX_PS_44;
Array BC_198 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_199 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_200 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_201 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_202 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_203 --> PACKED_TEXT_STORAGE TX_PS_45;
Array BC_204 --> PACKED_TEXT_STORAGE TX_PS_46;
Array BC_205 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_206 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_207 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_208 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_209 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_210 --> PACKED_TEXT_STORAGE TX_PS_47;
Array BC_211 --> PACKED_TEXT_STORAGE TX_PS_48;
Array BC_212 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_213 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_214 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_215 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_216 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_217 --> PACKED_TEXT_STORAGE TX_PS_49;
Array BC_218 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_219 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_220 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_221 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_222 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_223 --> PACKED_TEXT_STORAGE TX_PS_50;
Array BC_224 --> PACKED_TEXT_STORAGE TX_PS_51;
Array BC_225 --> PACKED_TEXT_STORAGE TX_PS_52;
Array BC_226 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_227 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_228 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_229 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_230 --> PACKED_TEXT_STORAGE TX_PS_53;
Array BC_231 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_232 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_233 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_234 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_235 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_236 --> PACKED_TEXT_STORAGE TX_PS_54;
Array BC_237 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_238 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_239 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_240 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_241 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_242 --> PACKED_TEXT_STORAGE TX_PS_55;
Array BC_243 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_244 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_245 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_246 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_247 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_248 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_136;
Array BC_249 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_137;
Array BC_250 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_251 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_252 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_253 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_254 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_255 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_138;
Array BC_256 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_257 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_258 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_259 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_260 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_261 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_139;
Array BC_262 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_263 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_264 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_265 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_266 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_267 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_140;
Array BC_268 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_269 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_270 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_271 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_272 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_273 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_141;
Array BC_274 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_275 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_276 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_277 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_278 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_279 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_142;
Array BC_280 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_281 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_282 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_283 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_284 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_285 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_143;
Array BC_286 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_287 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_288 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_289 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_290 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_291 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_144;
Array BC_292 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_293 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_294 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_295 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_296 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_297 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_145;
Array BC_298 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_299 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_300 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_301 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_302 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_303 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_146;
Array BC_304 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_305 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_306 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_307 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_308 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_309 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_147;
Array BC_310 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_311 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_312 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_313 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_314 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_315 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_148;
Array BC_316 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_317 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_318 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_319 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_320 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_321 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_149;
Array BC_322 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_323 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_324 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_325 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_326 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_327 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_150;
Array BC_328 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_329 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_330 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_331 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_332 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_333 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_151;
Array BC_334 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_335 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_336 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_337 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_338 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_339 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_152;
Array BC_340 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_341 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_342 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_343 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_344 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_345 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_153;
Array BC_346 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_347 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_348 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_349 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_350 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_351 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_154;
Array BC_352 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_353 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_354 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_355 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_356 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_357 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_155;
Array BC_358 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_359 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_360 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_361 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_362 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_363 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_156;
Array BC_364 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_365 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_366 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_367 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_368 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_369 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_157;
Array BC_370 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_371 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_372 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_373 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_374 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_375 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_158;
Array BC_376 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_377 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_378 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_379 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_380 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_381 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_159;
Array BC_382 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_383 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_384 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_385 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_386 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_387 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_160;
Array BC_388 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_389 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_390 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_391 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_392 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_393 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_161;
Array BC_394 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_395 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_396 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_397 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_398 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_399 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_162;
Array BC_400 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_401 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_402 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_403 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_404 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_405 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_163;
Array BC_406 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_407 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_408 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_409 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_410 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_411 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_164;
Array BC_412 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_165;
Array BC_413 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_414 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_415 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_416 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_417 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_418 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_166;
Array BC_419 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_420 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_421 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_422 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_423 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_424 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_167;
Array BC_425 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_168;
Array BC_426 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_427 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_428 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_429 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_430 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_431 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_169;
Array BC_432 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_433 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_434 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_435 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_436 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_437 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_170;
Array BC_438 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_439 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_440 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_441 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_442 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_443 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_171;
Array BC_444 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_445 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_446 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_447 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_448 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_449 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_172;
Array BC_450 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_451 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_452 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_453 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_454 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_455 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_173;
Array BC_456 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_457 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_458 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_459 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_460 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_461 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_174;
Array BC_462 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_463 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_464 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_465 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_466 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_467 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_175;
Array BC_468 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_469 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_470 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_471 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_472 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_473 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_176;
Array BC_474 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_475 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_476 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_477 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_478 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_479 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_177;
Array BC_480 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_481 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_482 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_483 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_484 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_485 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_178;
Array BC_486 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_487 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_488 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_489 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_490 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_491 --> PACKED_TEXT_STORAGE TX_PS_56;
Array BC_492 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_179;
Array BC_493 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_494 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_495 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_496 --> PACKED_TEXT_STORAGE TX_PS_57;
Array BC_497 --> PACKED_TEXT_STORAGE TX_PS_58;
Array BC_498 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_499 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_500 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_501 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_502 --> PACKED_TEXT_STORAGE TX_PS_59;
Array BC_503 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_504 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_505 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_506 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_507 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_508 --> PACKED_TEXT_STORAGE TX_PS_60;
Array BC_509 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_180;
Array BC_510 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_511 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_512 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_513 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_514 --> PACKED_TEXT_STORAGE TX_PS_61;
Array BC_515 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_516 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_181;
Array BC_517 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_518 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_519 --> PACKED_TEXT_STORAGE TX_PS_62;
Array BC_520 --> PACKED_TEXT_STORAGE TX_PS_63;
Array BC_521 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_522 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_523 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_524 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_525 --> PACKED_TEXT_STORAGE TX_PS_64;
Array BC_526 --> PACKED_TEXT_STORAGE TX_PS_65;
Array BC_527 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_528 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_529 --> PACKED_TEXT_STORAGE TX_PS_11;
Array BC_530 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_531 --> PACKED_TEXT_STORAGE TX_PS_66;
Array BC_532 --> PACKED_TEXT_STORAGE TX_PS_67;
Array BC_533 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_534 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_535 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_536 --> PACKED_TEXT_STORAGE TX_PS_68;
Array BC_537 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_182;
Array BC_538 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_539 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_540 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_541 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_542 --> PACKED_TEXT_STORAGE TX_PS_69;
Array BC_543 --> PACKED_TEXT_STORAGE TX_PS_70;
Array BC_544 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_545 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_546 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_547 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_548 --> PACKED_TEXT_STORAGE TX_PS_71;
Array BC_549 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_550 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_551 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_552 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_553 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_554 --> PACKED_TEXT_STORAGE TX_PS_72;
Array BC_555 --> PACKED_TEXT_STORAGE TX_PS_73;
Array BC_556 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_557 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_558 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_559 --> PACKED_TEXT_STORAGE TX_PS_20;
Array BC_560 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_561 --> PACKED_TEXT_STORAGE TX_PS_74;
Array BC_562 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_563 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_564 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_565 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_566 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_567 --> PACKED_TEXT_STORAGE TX_PS_75;
Array BC_568 --> PACKED_TEXT_STORAGE TX_PS_76;
Array BC_569 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_570 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_571 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_572 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_573 --> PACKED_TEXT_STORAGE TX_PS_77;
Array BC_574 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_183;
Array BC_575 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_576 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_577 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_578 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_579 --> PACKED_TEXT_STORAGE TX_PS_78;
Array BC_580 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_581 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_582 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_583 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_584 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_585 --> PACKED_TEXT_STORAGE TX_PS_79;
Array BC_586 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_587 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_588 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_589 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_590 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_591 --> PACKED_TEXT_STORAGE TX_PS_80;
Array BC_592 --> PACKED_TEXT_STORAGE TX_PS_81;
Array BC_593 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_594 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_595 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_596 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_597 --> PACKED_TEXT_STORAGE TX_PS_82;
Array BC_598 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_184;
Array BC_599 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_600 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_601 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_602 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_603 --> PACKED_TEXT_STORAGE TX_PS_83;
Array BC_604 --> PACKED_TEXT_STORAGE TX_PS_84;
Array BC_605 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_606 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_607 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_608 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_609 --> PACKED_TEXT_STORAGE TX_PS_85;
Array BC_610 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_611 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_612 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_613 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_614 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_615 --> PACKED_TEXT_STORAGE TX_PS_86;
Array BC_616 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_617 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_618 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_619 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_620 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_621 --> PACKED_TEXT_STORAGE TX_PS_87;
Array BC_622 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_185;
Array BC_623 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_624 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_625 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_626 --> PACKED_TEXT_STORAGE TX_PS_88;
Array BC_627 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_628 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_629 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_630 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_631 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_632 --> PACKED_TEXT_STORAGE TX_PS_89;
Array BC_633 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_634 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_635 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_636 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_637 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_638 --> PACKED_TEXT_STORAGE TX_PS_90;
Array BC_639 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_640 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_641 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_642 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_643 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_644 --> PACKED_TEXT_STORAGE TX_PS_91;
Array BC_645 --> PACKED_TEXT_STORAGE TX_PS_92;
Array BC_646 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_647 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_648 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_649 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_650 --> PACKED_TEXT_STORAGE TX_PS_93;
Array BC_651 --> PACKED_TEXT_STORAGE TX_PS_94;
Array BC_652 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_653 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_654 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_655 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_656 --> PACKED_TEXT_STORAGE TX_PS_95;
Array BC_657 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_658 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_659 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_660 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_661 --> PACKED_TEXT_STORAGE TX_PS_11;
Array BC_662 --> PACKED_TEXT_STORAGE TX_PS_96;
Array BC_663 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_664 --> PACKED_TEXT_STORAGE TX_PS_97;
Array BC_665 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_666 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_667 --> PACKED_TEXT_STORAGE TX_PS_98;
Array BC_668 --> PACKED_TEXT_STORAGE TX_PS_99;
Array BC_669 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_670 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_671 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_672 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_673 --> PACKED_TEXT_STORAGE TX_PS_100;
Array BC_674 --> PACKED_TEXT_STORAGE TX_PS_101;
Array BC_675 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_676 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_677 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_678 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_679 --> PACKED_TEXT_STORAGE TX_PS_102;
Array BC_680 --> PACKED_TEXT_STORAGE TX_PS_103;
Array BC_681 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_682 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_683 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_684 --> PACKED_TEXT_STORAGE TX_PS_104;
Array BC_685 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_686 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_687 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_688 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_689 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_690 --> PACKED_TEXT_STORAGE TX_PS_105;
Array BC_691 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_692 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_693 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_694 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_695 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_696 --> PACKED_TEXT_STORAGE TX_PS_106;
Array BC_697 --> PACKED_TEXT_STORAGE TX_PS_107;
Array BC_698 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_699 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_700 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_701 --> PACKED_TEXT_STORAGE TX_PS_108;
Array BC_702 --> PACKED_TEXT_STORAGE TX_PS_109;
Array BC_703 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_704 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_705 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_706 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_707 --> PACKED_TEXT_STORAGE TX_PS_110;
Array BC_708 --> PACKED_TEXT_STORAGE TX_PS_111;
Array BC_709 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_710 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_711 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_712 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_713 --> PACKED_TEXT_STORAGE TX_PS_112;
Array BC_714 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_715 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_716 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_717 --> PACKED_TEXT_STORAGE TX_PS_24;
Array BC_718 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_719 --> PACKED_TEXT_STORAGE TX_PS_113;
Array BC_720 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_721 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_722 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_723 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_724 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_725 --> PACKED_TEXT_STORAGE TX_PS_114;
Array BC_726 --> PACKED_TEXT_STORAGE TX_PS_115;
Array BC_727 --> PACKED_TEXT_STORAGE TX_PS_116;
Array BC_728 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_729 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_730 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_731 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_732 --> PACKED_TEXT_STORAGE TX_PS_117;
Array BC_733 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_734 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_735 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_736 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_737 --> PACKED_TEXT_STORAGE TX_PS_11;
Array BC_738 --> PACKED_TEXT_STORAGE TX_PS_118;
Array BC_739 --> PACKED_TEXT_STORAGE TX_PS_119;
Array BC_740 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_741 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_742 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_743 --> PACKED_TEXT_STORAGE TX_PS_120;
Array BC_744 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_186;
Array BC_745 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_746 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_747 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_748 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_749 --> PACKED_TEXT_STORAGE TX_PS_121;
Array BC_750 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_751 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_752 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_753 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_754 --> PACKED_TEXT_STORAGE TX_PS_15;
Array BC_755 --> PACKED_TEXT_STORAGE TX_PS_112;
Array BC_756 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_757 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_758 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_759 --> PACKED_TEXT_STORAGE TX_PS_24;
Array BC_760 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_761 --> PACKED_TEXT_STORAGE TX_PS_122;
Array BC_762 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_763 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_764 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_765 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_766 --> PACKED_TEXT_STORAGE TX_PS_15;
Array BC_767 --> PACKED_TEXT_STORAGE TX_PS_112;
Array BC_768 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_769 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_770 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_771 --> PACKED_TEXT_STORAGE TX_PS_24;
Array BC_772 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_773 --> PACKED_TEXT_STORAGE TX_PS_123;
Array BC_774 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_775 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_776 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_777 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_778 --> PACKED_TEXT_STORAGE TX_PS_15;
Array BC_779 --> PACKED_TEXT_STORAGE TX_PS_112;
Array BC_780 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_781 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_782 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_783 --> PACKED_TEXT_STORAGE TX_PS_24;
Array BC_784 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_785 --> PACKED_TEXT_STORAGE TX_PS_124;
Array BC_786 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_787 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_788 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_789 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_790 --> PACKED_TEXT_STORAGE TX_PS_15;
Array BC_791 --> PACKED_TEXT_STORAGE TX_PS_112;
Array BC_792 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_793 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_794 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_795 --> PACKED_TEXT_STORAGE TX_PS_24;
Array BC_796 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_797 --> PACKED_TEXT_STORAGE TX_PS_125;
Array BC_798 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_799 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_800 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_801 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_802 --> PACKED_TEXT_STORAGE TX_PS_15;
Array BC_803 --> PACKED_TEXT_STORAGE TX_PS_112;
Array BC_804 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_805 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_806 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_807 --> PACKED_TEXT_STORAGE TX_PS_24;
Array BC_808 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_809 --> PACKED_TEXT_STORAGE TX_PS_126;
Array BC_810 --> PACKED_TEXT_STORAGE TX_PS_127;
Array BC_811 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_812 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_813 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_814 --> PACKED_TEXT_STORAGE TX_PS_128;
Array BC_815 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_187;
Array BC_816 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_817 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_818 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_819 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_820 --> PACKED_TEXT_STORAGE TX_PS_129;
Array BC_821 --> PACKED_TEXT_STORAGE TX_PS_130;
Array BC_822 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_823 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_824 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_825 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_826 --> PACKED_TEXT_STORAGE TX_PS_131;
Array BC_827 --> PACKED_TEXT_STORAGE TX_PS_132;
Array BC_828 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_829 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_830 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_831 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_832 --> PACKED_TEXT_STORAGE TX_PS_133;
Array BC_833 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_188;
Array BC_834 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_835 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_836 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_837 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_838 --> PACKED_TEXT_STORAGE TX_PS_134;
Array BC_839 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_840 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_841 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_842 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_843 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_844 --> PACKED_TEXT_STORAGE TX_PS_135;
Array BC_845 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_846 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_847 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_848 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_849 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_850 --> PACKED_TEXT_STORAGE TX_PS_136;
Array BC_851 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_852 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_853 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_854 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_855 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_856 --> PACKED_TEXT_STORAGE TX_PS_137;
Array BC_857 --> PACKED_TEXT_STORAGE TX_PS_138;
Array BC_858 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_859 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_860 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_861 --> PACKED_TEXT_STORAGE TX_PS_139;
Array BC_862 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_189;
Array BC_863 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_864 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_865 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_866 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_867 --> PACKED_TEXT_STORAGE TX_PS_140;
Array BC_868 --> PACKED_TEXT_STORAGE TX_PS_141;
Array BC_869 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_870 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_871 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_872 --> PACKED_TEXT_STORAGE TX_PS_20;
Array BC_873 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_874 --> PACKED_TEXT_STORAGE TX_PS_142;
Array BC_875 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_190;
Array BC_876 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_877 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_878 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_879 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_880 --> PACKED_TEXT_STORAGE TX_PS_143;
Array BC_881 --> PACKED_TEXT_STORAGE TX_PS_144;
Array BC_882 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_883 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_884 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_885 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_886 --> PACKED_TEXT_STORAGE TX_PS_145;
Array BC_887 --> PACKED_TEXT_STORAGE TX_PS_146;
Array BC_888 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_889 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_890 --> PACKED_TEXT_STORAGE TX_PS_11;
Array BC_891 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_892 --> PACKED_TEXT_STORAGE TX_PS_147;
Array BC_893 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_894 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_895 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_896 --> PACKED_TEXT_STORAGE TX_PS_20;
Array BC_897 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_898 --> PACKED_TEXT_STORAGE TX_PS_148;
Array BC_899 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_900 --> PACKED_TEXT_STORAGE TX_PS_26;
Array BC_901 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_902 --> PACKED_TEXT_STORAGE TX_PS_149;
Array BC_903 --> PACKED_TEXT_STORAGE TX_PS_150;
Array BC_904 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_905 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_906 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_907 --> PACKED_TEXT_STORAGE TX_PS_151;
Array BC_908 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_909 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_910 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_911 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_912 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_913 --> PACKED_TEXT_STORAGE TX_PS_152;
Array BC_914 --> PACKED_TEXT_STORAGE TX_PS_153;
Array BC_915 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_916 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_917 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_918 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_919 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_920 --> PACKED_TEXT_STORAGE TX_PS_154;
Array BC_921 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_191;
Array BC_922 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_923 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_924 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_925 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_926 --> PACKED_TEXT_STORAGE TX_PS_155;
Array BC_927 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_928 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_929 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_930 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_931 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_932 --> PACKED_TEXT_STORAGE TX_PS_156;
Array BC_933 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_192;
Array BC_934 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_935 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_936 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_937 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_938 --> PACKED_TEXT_STORAGE TX_PS_157;
Array BC_939 --> PACKED_TEXT_STORAGE TX_PS_158;
Array BC_940 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_941 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_942 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_943 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_944 --> PACKED_TEXT_STORAGE TX_PS_159;
Array BC_945 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_946 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_947 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_948 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_949 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_950 --> PACKED_TEXT_STORAGE TX_PS_160;
Array BC_951 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_952 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_953 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_954 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_955 --> PACKED_TEXT_STORAGE TX_PS_161;
Array BC_956 --> PACKED_TEXT_STORAGE TX_PS_162;
Array BC_957 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_958 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_959 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_960 --> PACKED_TEXT_STORAGE TX_PS_163;
Array BC_961 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_962 --> PACKED_TEXT_STORAGE TX_PS_164;
Array BC_963 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_964 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_965 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_966 --> PACKED_TEXT_STORAGE TX_PS_165;
Array BC_967 --> PACKED_TEXT_STORAGE TX_PS_166;
Array BC_968 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_969 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_970 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_971 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_972 --> PACKED_TEXT_STORAGE TX_PS_167;
Array BC_973 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_974 --> PACKED_TEXT_STORAGE TX_PS_168;
Array BC_975 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_976 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_977 --> PACKED_TEXT_STORAGE TX_PS_169;
Array BC_978 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_979 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_980 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_981 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_982 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_983 --> PACKED_TEXT_STORAGE TX_PS_170;
Array BC_984 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_985 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_986 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_987 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_988 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_989 --> PACKED_TEXT_STORAGE TX_PS_171;
Array BC_990 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_991 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_992 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_993 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_994 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_995 --> PACKED_TEXT_STORAGE TX_PS_172;
Array BC_996 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_193;
Array BC_997 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_998 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_999 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1000 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1001 --> PACKED_TEXT_STORAGE TX_PS_173;
Array BC_1002 --> PACKED_TEXT_STORAGE TX_PS_174;
Array BC_1003 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1004 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1005 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1006 --> PACKED_TEXT_STORAGE TX_PS_175;
Array BC_1007 --> PACKED_TEXT_STORAGE TX_PS_176;
Array BC_1008 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1009 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1010 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1011 --> PACKED_TEXT_STORAGE TX_PS_177;
Array BC_1012 --> PACKED_TEXT_STORAGE TX_PS_178;
Array BC_1013 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1014 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1015 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1016 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1017 --> PACKED_TEXT_STORAGE TX_PS_179;
Array BC_1018 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1019 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1020 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1021 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1022 --> PACKED_TEXT_STORAGE TX_PS_180;
Array BC_1023 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_1024 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1025 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1026 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1027 --> PACKED_TEXT_STORAGE TX_PS_11;
Array BC_1028 --> PACKED_TEXT_STORAGE TX_PS_181;
Array BC_1029 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_194;
Array BC_1030 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1031 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1032 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1033 --> PACKED_TEXT_STORAGE TX_PS_182;
Array BC_1034 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1035 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1036 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1037 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1038 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1039 --> PACKED_TEXT_STORAGE TX_PS_183;
Array BC_1040 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1041 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1042 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1043 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1044 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1045 --> PACKED_TEXT_STORAGE TX_PS_184;
Array BC_1046 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1047 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1048 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1049 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1050 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1051 --> PACKED_TEXT_STORAGE TX_PS_185;
Array BC_1052 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_1053 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_195;
Array BC_1054 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1055 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1056 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_1057 --> PACKED_TEXT_STORAGE TX_PS_186;
Array BC_1058 --> PACKED_TEXT_STORAGE TX_PS_187;
Array BC_1059 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1060 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1061 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_1062 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1063 --> PACKED_TEXT_STORAGE TX_PS_188;
Array BC_1064 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1065 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1066 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1067 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1068 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1069 --> PACKED_TEXT_STORAGE TX_PS_189;
Array BC_1070 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1071 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1072 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1073 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_1074 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1075 --> PACKED_TEXT_STORAGE TX_PS_190;
Array BC_1076 --> PACKED_TEXT_STORAGE TX_PS_191;
Array BC_1077 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1078 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1079 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1080 --> PACKED_TEXT_STORAGE TX_PS_192;
Array BC_1081 --> PACKED_TEXT_STORAGE TX_PS_193;
Array BC_1082 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1083 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1084 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1085 --> PACKED_TEXT_STORAGE TX_PS_194;
Array BC_1086 --> PACKED_TEXT_STORAGE TX_PS_195;
Array BC_1087 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1088 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1089 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_1090 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1091 --> PACKED_TEXT_STORAGE TX_PS_196;
Array BC_1092 --> PACKED_TEXT_STORAGE TX_PS_197;
Array BC_1093 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1094 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1095 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1096 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1097 --> PACKED_TEXT_STORAGE TX_PS_198;
Array BC_1098 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_196;
Array BC_1099 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1100 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1101 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1102 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1103 --> PACKED_TEXT_STORAGE TX_PS_199;
Array BC_1104 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1105 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1106 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1107 --> PACKED_TEXT_STORAGE TX_PS_6;
Array BC_1108 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1109 --> PACKED_TEXT_STORAGE TX_PS_200;
Array BC_1110 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1111 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1112 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1113 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1114 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1115 --> PACKED_TEXT_STORAGE TX_PS_201;
Array BC_1116 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1117 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1118 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1119 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1120 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1121 --> PACKED_TEXT_STORAGE TX_PS_202;
Array BC_1122 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1123 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1124 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1125 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1126 --> PACKED_TEXT_STORAGE TX_PS_203;
Array BC_1127 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1128 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1129 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1130 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1131 --> PACKED_TEXT_STORAGE TX_PS_204;
Array BC_1132 --> PACKED_TEXT_STORAGE TX_PS_205;
Array BC_1133 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1134 --> PACKED_TEXT_STORAGE TX_PS_26;
Array BC_1135 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1136 --> PACKED_TEXT_STORAGE TX_PS_206;
Array BC_1137 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_1138 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1139 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1140 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1141 --> PACKED_TEXT_STORAGE TX_PS_207;
Array BC_1142 --> PACKED_TEXT_STORAGE TX_PS_208;
Array BC_1143 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1144 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1145 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1146 --> PACKED_TEXT_STORAGE TX_PS_209;
Array BC_1147 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_197;
Array BC_1148 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1149 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1150 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1151 --> PACKED_TEXT_STORAGE TX_PS_210;
Array BC_1152 --> PACKED_TEXT_STORAGE TX_PS_211;
Array BC_1153 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1154 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1155 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1156 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1157 --> PACKED_TEXT_STORAGE TX_PS_212;
Array BC_1158 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_198;
Array BC_1159 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1160 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1161 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1162 --> PACKED_TEXT_STORAGE TX_PS_213;
Array BC_1163 --> PACKED_TEXT_STORAGE TX_PS_214;
Array BC_1164 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1165 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1166 --> PACKED_TEXT_STORAGE TX_PS_13;
Array BC_1167 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1168 --> PACKED_TEXT_STORAGE TX_PS_215;
Array BC_1169 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_199;
Array BC_1170 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1171 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1172 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1173 --> PACKED_TEXT_STORAGE TX_PS_216;
Array BC_1174 --> PACKED_TEXT_STORAGE TX_PS_217;
Array BC_1175 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1176 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1177 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1178 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1179 --> PACKED_TEXT_STORAGE TX_PS_218;
Array BC_1180 --> PACKED_TEXT_STORAGE TX_PS_219;
Array BC_1181 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1182 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1183 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1184 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1185 --> PACKED_TEXT_STORAGE TX_PS_220;
Array BC_1186 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1187 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1188 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1189 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1190 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1191 --> PACKED_TEXT_STORAGE TX_PS_221;
Array BC_1192 --> PACKED_TEXT_STORAGE TX_PS_222;
Array BC_1193 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1194 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1195 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1196 --> PACKED_TEXT_STORAGE TX_PS_223;
Array BC_1197 --> PACKED_TEXT_STORAGE TX_PS_224;
Array BC_1198 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1199 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1200 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1201 --> PACKED_TEXT_STORAGE TX_PS_225;
Array BC_1202 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1203 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1204 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1205 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1206 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1207 --> PACKED_TEXT_STORAGE TX_PS_226;
Array BC_1208 --> PACKED_TEXT_STORAGE TX_PS_227;
Array BC_1209 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1210 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1211 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1212 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1213 --> PACKED_TEXT_STORAGE TX_PS_228;
Array BC_1214 --> PACKED_TEXT_STORAGE TX_PS_229;
Array BC_1215 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1216 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1217 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1218 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1219 --> PACKED_TEXT_STORAGE TX_PS_230;
Array BC_1220 --> PACKED_TEXT_STORAGE TX_PS_231;
Array BC_1221 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1222 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1223 --> PACKED_TEXT_STORAGE TX_PS_9;
Array BC_1224 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1225 --> PACKED_TEXT_STORAGE TX_PS_232;
Array BC_1226 --> PACKED_TEXT_STORAGE TX_PS_233;
Array BC_1227 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1228 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1229 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_1230 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1231 --> PACKED_TEXT_STORAGE TX_PS_234;
Array BC_1232 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1233 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1234 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1235 --> PACKED_TEXT_STORAGE TX_PS_16;
Array BC_1236 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1237 --> PACKED_TEXT_STORAGE TX_PS_235;
Array BC_1238 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1239 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1240 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1241 --> PACKED_TEXT_STORAGE TX_PS_10;
Array BC_1242 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1243 --> PACKED_TEXT_STORAGE TX_PS_234;
Array BC_1244 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1245 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1246 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1247 --> PACKED_TEXT_STORAGE TX_PS_16;
Array BC_1248 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1249 --> PACKED_TEXT_STORAGE TX_PS_235;
Array BC_1250 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1251 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1252 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1253 --> PACKED_TEXT_STORAGE TX_PS_10;
Array BC_1254 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1255 --> PACKED_TEXT_STORAGE TX_PS_234;
Array BC_1256 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1257 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1258 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1259 --> PACKED_TEXT_STORAGE TX_PS_16;
Array BC_1260 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1261 --> PACKED_TEXT_STORAGE TX_PS_235;
Array BC_1262 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1263 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1264 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1265 --> PACKED_TEXT_STORAGE TX_PS_10;
Array BC_1266 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1267 --> PACKED_TEXT_STORAGE TX_PS_236;
Array BC_1268 --> PACKED_TEXT_STORAGE TX_PS_237;
Array BC_1269 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1270 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1271 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1272 --> PACKED_TEXT_STORAGE TX_PS_238;
Array BC_1273 --> PACKED_TEXT_STORAGE TX_PS_239;
Array BC_1274 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1275 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1276 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1277 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1278 --> PACKED_TEXT_STORAGE TX_PS_240;
Array BC_1279 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_1280 --> PACKED_TEXT_STORAGE TX_PS_241;
Array BC_1281 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1282 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1283 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1284 --> PACKED_TEXT_STORAGE TX_PS_242;
Array BC_1285 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1286 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1287 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1288 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1289 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1290 --> PACKED_TEXT_STORAGE TX_PS_243;
Array BC_1291 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1292 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1293 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1294 --> PACKED_TEXT_STORAGE TX_PS_20;
Array BC_1295 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1296 --> PACKED_TEXT_STORAGE TX_PS_244;
Array BC_1297 --> PACKED_TEXT_STORAGE TX_PS_245;
Array BC_1298 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1299 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1300 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1301 --> PACKED_TEXT_STORAGE TX_PS_246;
Array BC_1302 --> PACKED_TEXT_STORAGE TX_PS_247;
Array BC_1303 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1304 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1305 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1306 --> PACKED_TEXT_STORAGE TX_PS_248;
Array BC_1307 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_1308 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_200;
Array BC_1309 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1310 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1311 --> PACKED_TEXT_STORAGE TX_PS_249;
Array BC_1312 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1313 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1314 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1315 --> PACKED_TEXT_STORAGE TX_PS_18;
Array BC_1316 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1317 --> PACKED_TEXT_STORAGE TX_PS_250;
Array BC_1318 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1319 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1320 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1321 --> PACKED_TEXT_STORAGE TX_PS_18;
Array BC_1322 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1323 --> PACKED_TEXT_STORAGE TX_PS_251;
Array BC_1324 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1325 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1326 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1327 --> PACKED_TEXT_STORAGE TX_PS_18;
Array BC_1328 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1329 --> PACKED_TEXT_STORAGE TX_PS_252;
Array BC_1330 --> PACKED_TEXT_STORAGE TX_PS_253;
Array BC_1331 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1332 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1333 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1334 --> PACKED_TEXT_STORAGE TX_PS_254;
Array BC_1335 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_201;
Array BC_1336 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1337 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1338 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1339 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1340 --> PACKED_TEXT_STORAGE TX_PS_255;
Array BC_1341 --> PACKED_TEXT_STORAGE TX_PS_256;
Array BC_1342 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1343 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1344 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1345 --> PACKED_TEXT_STORAGE TX_PS_257;
Array BC_1346 --> PACKED_TEXT_STORAGE TX_PS_258;
Array BC_1347 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1348 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1349 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1350 --> PACKED_TEXT_STORAGE TX_PS_259;
Array BC_1351 --> PACKED_TEXT_STORAGE TX_PS_260;
Array BC_1352 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1353 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1354 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1355 --> PACKED_TEXT_STORAGE TX_PS_261;
Array BC_1356 --> PACKED_TEXT_STORAGE TX_PS_262;
Array BC_1357 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1358 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1359 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1360 --> PACKED_TEXT_STORAGE TX_PS_263;
Array BC_1361 --> PACKED_TEXT_STORAGE TX_PS_264;
Array BC_1362 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1363 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1364 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1365 --> PACKED_TEXT_STORAGE TX_PS_265;
Array BC_1366 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1367 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1368 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1369 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1370 --> PACKED_TEXT_STORAGE TX_PS_266;
Array BC_1371 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1372 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1373 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1374 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1375 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1376 --> PACKED_TEXT_STORAGE TX_PS_267;
Array BC_1377 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1378 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1379 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1380 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1381 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1382 --> PACKED_TEXT_STORAGE TX_PS_268;
Array BC_1383 --> PACKED_TEXT_STORAGE TX_PS_269;
Array BC_1384 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1385 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1386 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1387 --> PACKED_TEXT_STORAGE TX_PS_270;
Array BC_1388 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_1389 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1390 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1391 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1392 --> PACKED_TEXT_STORAGE TX_PS_11;
Array BC_1393 --> PACKED_TEXT_STORAGE TX_PS_271;
Array BC_1394 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1395 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1396 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1397 --> PACKED_TEXT_STORAGE TX_PS_9;
Array BC_1398 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1399 --> PACKED_TEXT_STORAGE TX_PS_272;
Array BC_1400 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_1401 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1402 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1403 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1404 --> PACKED_TEXT_STORAGE TX_PS_11;
Array BC_1405 --> PACKED_TEXT_STORAGE TX_PS_273;
Array BC_1406 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1407 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1408 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1409 --> PACKED_TEXT_STORAGE TX_PS_11;
Array BC_1410 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1411 --> PACKED_TEXT_STORAGE TX_PS_274;
Array BC_1412 --> PACKED_TEXT_STORAGE TX_PS_275;
Array BC_1413 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1414 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1415 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1416 --> PACKED_TEXT_STORAGE TX_PS_276;
Array BC_1417 --> PACKED_TEXT_STORAGE TX_PS_277;
Array BC_1418 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1419 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1420 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_1421 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1422 --> PACKED_TEXT_STORAGE TX_PS_278;
Array BC_1423 --> PACKED_TEXT_STORAGE TX_PS_279;
Array BC_1424 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1425 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1426 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1427 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1428 --> PACKED_TEXT_STORAGE TX_PS_280;
Array BC_1429 --> PACKED_TEXT_STORAGE TX_PS_281;
Array BC_1430 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1431 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1432 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_1433 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1434 --> PACKED_TEXT_STORAGE TX_PS_282;
Array BC_1435 --> PACKED_TEXT_STORAGE TX_PS_283;
Array BC_1436 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1437 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1438 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_1439 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1440 --> PACKED_TEXT_STORAGE TX_PS_284;
Array BC_1441 --> PACKED_TEXT_STORAGE TX_PS_285;
Array BC_1442 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1443 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1444 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_1445 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1446 --> PACKED_TEXT_STORAGE TX_PS_286;
Array BC_1447 --> PACKED_TEXT_STORAGE TX_PS_287;
Array BC_1448 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1449 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1450 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_1451 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1452 --> PACKED_TEXT_STORAGE TX_PS_288;
Array BC_1453 --> PACKED_TEXT_STORAGE TX_PS_289;
Array BC_1454 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1455 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1456 --> PACKED_TEXT_STORAGE TX_PS_20;
Array BC_1457 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1458 --> PACKED_TEXT_STORAGE TX_PS_290;
Array BC_1459 --> PACKED_TEXT_STORAGE TX_PS_291;
Array BC_1460 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1461 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1462 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1463 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1464 --> PACKED_TEXT_STORAGE TX_PS_292;
Array BC_1465 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1466 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1467 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1468 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1469 --> PACKED_TEXT_STORAGE TX_PS_293;
Array BC_1470 --> PACKED_TEXT_STORAGE TX_PS_294;
Array BC_1471 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1472 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1473 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1474 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1475 --> PACKED_TEXT_STORAGE TX_PS_295;
Array BC_1476 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1477 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1478 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1479 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1480 --> PACKED_TEXT_STORAGE TX_PS_296;
Array BC_1481 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1482 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1483 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1484 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_1485 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1486 --> PACKED_TEXT_STORAGE TX_PS_297;
Array BC_1487 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1488 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1489 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1490 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1491 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1492 --> PACKED_TEXT_STORAGE TX_PS_298;
Array BC_1493 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1494 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1495 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1496 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_1497 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1498 --> PACKED_TEXT_STORAGE TX_PS_299;
Array BC_1499 --> PACKED_TEXT_STORAGE TX_PS_300;
Array BC_1500 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1501 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1502 --> PACKED_TEXT_STORAGE TX_PS_11;
Array BC_1503 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1504 --> PACKED_TEXT_STORAGE TX_PS_301;
Array BC_1505 --> PACKED_TEXT_STORAGE TX_PS_4;
Array BC_1506 --> PACKED_TEXT_STORAGE TX_PS_3;
Array BC_1507 --> PACKED_TEXT_STORAGE TX_PS_302;
Array BC_1508 --> PACKED_TEXT_STORAGE TX_PS_303;
Array BC_1509 --> PACKED_TEXT_STORAGE TX_PS_304;
Array BC_1510 --> PACKED_TEXT_STORAGE TX_PS_305;
Array BC_1511 --> PACKED_TEXT_STORAGE TX_PS_306;
Array BC_1512 --> PACKED_TEXT_STORAGE TX_PS_307;
Array BC_1513 --> PACKED_TEXT_STORAGE TX_PS_308;
Array BC_1514 --> PACKED_TEXT_STORAGE TX_PS_309;
Array BC_1515 --> PACKED_TEXT_STORAGE TX_PS_310;
Array BC_1516 --> PACKED_TEXT_STORAGE TX_PS_311;
Array BC_1517 --> PACKED_TEXT_STORAGE TX_PS_311;
Array BC_1518 --> PACKED_TEXT_STORAGE TX_PS_312;
Array BC_1519 --> PACKED_TEXT_STORAGE TX_PS_313;
Array BC_1520 --> PACKED_TEXT_STORAGE TX_PS_314;
Array BC_1521 --> PACKED_TEXT_STORAGE TX_PS_315;
Array BC_1522 --> PACKED_TEXT_STORAGE TX_PS_316;
Array BC_1523 --> PACKED_TEXT_STORAGE TX_PS_316;
Array BC_1524 --> PACKED_TEXT_STORAGE TX_PS_317;
Array BC_1525 --> PACKED_TEXT_STORAGE TX_PS_318;
Array BC_1526 --> PACKED_TEXT_STORAGE TX_PS_319;
Array BC_1527 --> PACKED_TEXT_STORAGE TX_PS_320;
Array BC_1528 --> PACKED_TEXT_STORAGE TX_PS_320;
Array BC_1529 --> PACKED_TEXT_STORAGE TX_PS_320;




! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Signing off
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! End of automatically generated I6 source
! --------------------------------------------------------------------------
